{
  "ADFS": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "AcceleratorInput": {
    "description": "Identity of a CX infrastructure as code accelerator to be run and its inputs",
    "properties": {
      "acceleratorId": {
        "description": "Accelerator ID",
        "type": "string"
      },
      "dryRun": {
        "description": "Set this true to test the job without making any changes. Defaults to false.",
        "type": "boolean"
      },
      "parameters": {
        "description": "Parameters required for this accelerator",
        "items": {
          "$ref": "#/definitions/AcceleratorParameter"
        },
        "type": "array"
      }
    },
    "required": [
      "acceleratorId"
    ],
    "type": "object"
  },
  "AcceleratorList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AcceleratorMetadata"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AcceleratorMetadata": {
    "description": "Metadata for a CX infrastructure as code accelerator",
    "properties": {
      "classification": {
        "description": "architectural classification into which the accelerator belongs",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "a description of the general purpose of this accelerator",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "name of this accelerator",
        "readOnly": true,
        "type": "string"
      },
      "origin": {
        "description": "where the accelerator originated",
        "enum": [
          "Community",
          "Partner",
          "Genesys"
        ],
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "description": "tags",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "type": {
        "description": "type of the artifact",
        "enum": [
          "Module",
          "Accelerator",
          "Blueprint"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AcceleratorParameter": {
    "description": "Input parameter for a CX infrastructure as code accelerator",
    "properties": {
      "name": {
        "description": "Parameter Name",
        "type": "string"
      },
      "value": {
        "description": "Parameter Value",
        "type": "string"
      }
    },
    "required": [
      "name",
      "value"
    ],
    "type": "object"
  },
  "AcceleratorSpecification": {
    "description": "Metadata for a CX infrastructure as code accelerator",
    "properties": {
      "classification": {
        "description": "architectural classification into which the accelerator belongs",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "a description of the general purpose of this accelerator",
        "readOnly": true,
        "type": "string"
      },
      "documentation": {
        "description": "additional documentation about the artifact",
        "items": {
          "$ref": "#/definitions/MetadataDocumentation"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "name of this accelerator",
        "readOnly": true,
        "type": "string"
      },
      "origin": {
        "description": "where the accelerator originated",
        "enum": [
          "Community",
          "Partner",
          "Genesys"
        ],
        "readOnly": true,
        "type": "string"
      },
      "permissions": {
        "description": "Genesys Cloud permissions required to install the accelerator",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "presentation": {
        "description": "presentation of data fields to be gathered for the accelerator",
        "items": {
          "$ref": "#/definitions/MetadataPresentation"
        },
        "readOnly": true,
        "type": "array"
      },
      "products": {
        "description": "Genesys Cloud products required to install the accelerator",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "results": {
        "$ref": "#/definitions/MetadataResults",
        "description": "resources created or modified as a result of running the accelerator",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "description": "tags",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "type": {
        "description": "type of the artifact",
        "enum": [
          "Module",
          "Accelerator",
          "Blueprint"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AchievedOutcome": {
    "properties": {
      "id": {
        "description": "The ID of the outcome achieved.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "AcknowledgeScreenRecordingRequest": {
    "properties": {
      "conversationId": {
        "type": "string"
      },
      "participantJid": {
        "type": "string"
      },
      "roomId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Action": {
    "properties": {
      "category": {
        "description": "Category of Action",
        "type": "string"
      },
      "config": {
        "$ref": "#/definitions/ActionConfig",
        "description": "Configuration to support request and response processing"
      },
      "contract": {
        "$ref": "#/definitions/ActionContract",
        "description": "Action contract"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationId": {
        "description": "The ID of the integration for which this action is associated",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "secure": {
        "description": "Indication of whether or not the action is designed to accept sensitive data",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Version of this action",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "ActionAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ActionAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "ActionAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/ActionAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ActionAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ActionAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "actionCategory",
          "actionId",
          "actionName",
          "correlationId",
          "errorType",
          "integrationId",
          "integrationName",
          "responseStatus"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "ActionAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/ActionAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ActionAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/ActionAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "actionCategory",
            "actionId",
            "actionName",
            "correlationId",
            "errorType",
            "integrationId",
            "integrationName",
            "responseStatus"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "tTotalExecution"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/ActionAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "ActionAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "tTotalExecution"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "ActionCertificate": {
    "description": "Details for an mTLS certificate",
    "properties": {
      "certificate": {
        "description": "The certificate string",
        "type": "string"
      },
      "signingAuthority": {
        "description": "The Signing Authority for the certificate",
        "enum": [
          "DigiCert",
          "Genesys"
        ],
        "type": "string"
      },
      "status": {
        "description": "The certificate status",
        "enum": [
          "Current",
          "Upcoming"
        ],
        "type": "string"
      },
      "type": {
        "description": "The certificate type",
        "enum": [
          "Client"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActionCertificateListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ActionCertificate"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionConfig": {
    "description": "Defines components of the Action Config.",
    "properties": {
      "request": {
        "$ref": "#/definitions/RequestConfig",
        "description": "Configuration of outbound request."
      },
      "response": {
        "$ref": "#/definitions/ResponseConfig",
        "description": "Configuration of response processing."
      },
      "timeoutSeconds": {
        "description": "Optional 1-60 second timeout enforced on the execution or test of this action. This setting is invalid for Custom Authentication Actions.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionContract": {
    "description": "This resource contains all of the schemas needed to define the inputs and outputs, of a single Action.",
    "properties": {
      "input": {
        "$ref": "#/definitions/ActionInput",
        "description": "The input required when executing this action."
      },
      "output": {
        "$ref": "#/definitions/ActionOutput",
        "description": "The output to expect when executing this action."
      }
    },
    "type": "object"
  },
  "ActionContractInput": {
    "description": "Contract definition.",
    "properties": {
      "input": {
        "$ref": "#/definitions/PostInputContract",
        "description": "Execution input contract"
      },
      "output": {
        "$ref": "#/definitions/PostOutputContract",
        "description": "Execution output contract"
      }
    },
    "required": [
      "input",
      "output"
    ],
    "type": "object"
  },
  "ActionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Action"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionEventActionMap": {
    "properties": {
      "displayName": {
        "description": "Display name of the action map.",
        "type": "string"
      },
      "id": {
        "description": "The ID of the action map.",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "version": {
        "description": "The version of the action map.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "displayName",
      "id",
      "version"
    ],
    "type": "object"
  },
  "ActionEventRequest": {
    "properties": {
      "actionId": {
        "description": "UUID for the action, as returned by the Ping endpoint when the action was qualified.",
        "type": "string"
      },
      "actionState": {
        "description": "State the action is transitioning to.",
        "enum": [
          "accepted",
          "rejected",
          "timedout",
          "errored",
          "ignored",
          "qualified",
          "offered",
          "started",
          "engaged",
          "qualifiedOutsideSchedule",
          "offeredOutsideSchedule",
          "abandoned",
          "completed",
          "frequencyCapReached"
        ],
        "type": "string"
      },
      "errorCode": {
        "description": "Client defined error code (when state transitions to errored)",
        "type": "string"
      },
      "errorMessage": {
        "description": "Message of the error returned when the action fails (when state transitions to errored)",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "UUID of the customer session for this action.",
        "type": "string"
      }
    },
    "required": [
      "actionId",
      "actionState",
      "sessionId"
    ],
    "type": "object"
  },
  "ActionInput": {
    "description": "Input requirements of Action.",
    "properties": {
      "inputSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path. If the 'flatten' query parameter is omitted or false, this field will be returned. Either inputSchema or inputSchemaFlattened will be returned, not both."
      },
      "inputSchemaFlattened": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path. The schema is transformed based on Architect's flattened format. If the 'flatten' query parameter is supplied as true, this field will be returned. Either inputSchema or inputSchemaFlattened will be returned, not both."
      },
      "inputSchemaUri": {
        "description": "The URI of the input schema",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActionMap": {
    "properties": {
      "action": {
        "$ref": "#/definitions/ActionMapAction",
        "description": "The action that will be executed if this action map is triggered."
      },
      "actionMapScheduleGroups": {
        "$ref": "#/definitions/ActionMapScheduleGroups",
        "description": "The action map's associated schedule groups."
      },
      "activation": {
        "$ref": "#/definitions/Activation",
        "description": "Type of activation."
      },
      "createdDate": {
        "description": "Timestamp indicating when the action map was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "displayName": {
        "description": "Display name of the action map.",
        "type": "string"
      },
      "endDate": {
        "description": "Timestamp at which the action map is scheduled to stop firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "ignoreFrequencyCap": {
        "description": "Override organization-level frequency cap and always offer web engagements from this action map.",
        "type": "boolean"
      },
      "isActive": {
        "description": "Whether the action map is active.",
        "type": "boolean"
      },
      "modifiedDate": {
        "description": "Timestamp indicating when the action map was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "pageUrlConditions": {
        "description": "URL conditions that a page must match for web actions to be displayable.",
        "items": {
          "$ref": "#/definitions/UrlCondition"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "Timestamp at which the action map is scheduled to start firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "triggerWithEventConditions": {
        "description": "List of event conditions that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/EventCondition"
        },
        "type": "array"
      },
      "triggerWithOutcomePercentileConditions": {
        "description": "(deprecated - use triggerWithOutcomeQuantileConditions instead) Percentile conditions for outcomes that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/OutcomePercentileCondition"
        },
        "type": "array"
      },
      "triggerWithOutcomeProbabilityConditions": {
        "description": "(deprecated - use triggerWithOutcomeQuantileConditions instead) Probability conditions for outcomes that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/OutcomeProbabilityCondition"
        },
        "type": "array"
      },
      "triggerWithOutcomeQuantileConditions": {
        "description": "Quantile conditions for outcomes that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/OutcomeQuantileCondition"
        },
        "type": "array"
      },
      "triggerWithSegments": {
        "description": "Trigger action map if any segment in the list is assigned to a given customer.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "version": {
        "description": "The version of the action map.",
        "format": "int32",
        "type": "integer"
      },
      "weight": {
        "description": "Weight of the action map with higher number denoting higher weight.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "displayName",
      "pageUrlConditions",
      "triggerWithSegments"
    ],
    "type": "object"
  },
  "ActionMapAction": {
    "properties": {
      "actionTargetId": {
        "description": "Action target ID.",
        "type": "string"
      },
      "actionTemplate": {
        "$ref": "#/definitions/ActionMapActionTemplate",
        "description": "Action template associated with the action map."
      },
      "architectFlowFields": {
        "$ref": "#/definitions/ArchitectFlowFields",
        "description": "Architect Flow Id and input contract."
      },
      "isPacingEnabled": {
        "description": "Whether this action should be throttled.",
        "type": "boolean"
      },
      "mediaType": {
        "description": "Media type of action.",
        "enum": [
          "webchat",
          "webMessagingOffer",
          "contentOffer",
          "integrationAction",
          "architectFlow",
          "openAction"
        ],
        "type": "string"
      },
      "openActionFields": {
        "$ref": "#/definitions/OpenActionFields",
        "description": "Admin-configurable fields of an open action."
      },
      "props": {
        "$ref": "#/definitions/ActionProperties",
        "description": "Additional properties."
      },
      "webMessagingOfferFields": {
        "$ref": "#/definitions/WebMessagingOfferFields",
        "description": "Admin-configurable fields of a web messaging offer action."
      }
    },
    "type": "object"
  },
  "ActionMapActionTemplate": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActionMapEstimateOutcomeCriteria": {
    "properties": {
      "maxProbability": {
        "description": "Probability value for the selected outcome at or above which the action map will trigger.",
        "format": "float",
        "type": "number"
      },
      "maxQuantile": {
        "description": "Represents the quantity of sessions that have a maximum probability less than the predicted session max probability.",
        "format": "float",
        "type": "number"
      },
      "outcomeId": {
        "description": "ID of outcome.",
        "type": "string"
      },
      "probability": {
        "description": "Additional probability condition, where if set, the action map will trigger if the current outcome probability is lower or equal to the value.",
        "format": "float",
        "type": "number"
      },
      "quantile": {
        "description": "Represents the quantity of sessions that have a maximum probability less than the predicted probability.",
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "outcomeId"
    ],
    "type": "object"
  },
  "ActionMapEstimateRequest": {
    "properties": {
      "outcomeCriteria": {
        "$ref": "#/definitions/ActionMapEstimateOutcomeCriteria",
        "description": "Outcome Criteria containing outcomeId and probability thresholds."
      },
      "segmentIds": {
        "description": "List of Segment IDs.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ActionMapEstimateResult": {
    "properties": {
      "outcomesScoresCount": {
        "description": "Difference made by outcome criteria to number of sessions qualified for Action map.",
        "format": "int32",
        "type": "integer"
      },
      "perSegmentCounts": {
        "description": "Number of sessions qualified for Action map per segment.",
        "items": {
          "$ref": "#/definitions/SegmentEstimateCount"
        },
        "type": "array"
      },
      "qualifiedSessionCount": {
        "description": "Number of sessions qualified for Action map.",
        "format": "int32",
        "type": "integer"
      },
      "totalSessionCount": {
        "description": "Total number of sessions.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionMapListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ActionMap"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionMapScheduleGroup": {
    "properties": {
      "id": {
        "description": "The ID of the action maps's associated schedule group.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ActionMapScheduleGroups": {
    "properties": {
      "actionMapScheduleGroup": {
        "$ref": "#/definitions/ActionMapScheduleGroup",
        "description": "The actions map's associated schedule group."
      },
      "emergencyActionMapScheduleGroup": {
        "$ref": "#/definitions/ActionMapScheduleGroup",
        "description": "The action map's associated emergency schedule group."
      }
    },
    "required": [
      "actionMapScheduleGroup"
    ],
    "type": "object"
  },
  "ActionOutput": {
    "description": "Output definition of Action.",
    "properties": {
      "errorSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON schema that defines the body of response when request is not successful. If the 'flatten' query parameter is omitted or false, this field will be returned. Either errorSchema or errorSchemaFlattened will be returned, not both."
      },
      "errorSchemaFlattened": {
        "description": "JSON schema that defines the body of response when request is not successful. The schema is transformed based on Architect's flattened format. If the 'flatten' query parameter is supplied as true, this field will be returned. Either errorSchema or errorSchemaFlattened will be returned, not both.",
        "type": "object"
      },
      "errorSchemaUri": {
        "description": "URI to retrieve error schema",
        "type": "string"
      },
      "successSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON schema that defines the transformed, successful result that will be sent back to the caller. If the 'flatten' query parameter is omitted or false, this field will be returned. Either successSchema or successSchemaFlattened will be returned, not both."
      },
      "successSchemaFlattened": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON schema that defines the transformed, successful result that will be sent back to the caller. The schema is transformed based on Architect's flattened format. If the 'flatten' query parameter is supplied as true, this field will be returned. Either successSchema or successSchemaFlattened will be returned, not both."
      },
      "successSchemaUri": {
        "description": "URI to retrieve success schema",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActionProperties": {
    "properties": {
      "webchatAcceptText": {
        "description": "Accept button text shown to user, used for webchat type action.",
        "type": "string"
      },
      "webchatDeclineText": {
        "description": "Decline button text shown to user, used for webchat type action.",
        "type": "string"
      },
      "webchatPrompt": {
        "description": "Prompt message shown to user, used for webchat type action.",
        "type": "string"
      },
      "webchatSurvey": {
        "$ref": "#/definitions/ActionSurvey",
        "description": "Survey provided to the user, used for webchat type action."
      },
      "webchatTitleText": {
        "description": "Title shown to the user, used for webchat type action.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActionSurvey": {
    "properties": {
      "questions": {
        "description": "Questions shown to the user.",
        "items": {
          "$ref": "#/definitions/JourneySurveyQuestion"
        },
        "type": "array"
      }
    },
    "required": [
      "questions"
    ],
    "type": "object"
  },
  "ActionTarget": {
    "properties": {
      "createdDate": {
        "description": "The date the target was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "Description of the target.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "The date the target was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serviceLevel": {
        "$ref": "#/definitions/ServiceLevel",
        "description": "Service Level of the action target. Chat offers for the target will be throttled with the aim of achieving this service level."
      },
      "shortAbandonThreshold": {
        "description": "Indicates the non-default short abandon threshold",
        "format": "int32",
        "type": "integer"
      },
      "state": {
        "description": "Indicates the state of the target.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "supportedMediaTypes": {
        "description": "Supported media types of the target.",
        "items": {
          "enum": [
            "callback",
            "call",
            "email",
            "generic",
            "messaging",
            "social",
            "webchat"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "userData": {
        "description": "Additional user data associated with the target in key/value format.",
        "items": {
          "$ref": "#/definitions/KeyValue"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ActionTargetListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ActionTarget"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActionTemplate": {
    "properties": {
      "contentOffer": {
        "$ref": "#/definitions/ContentOffer",
        "description": "Properties used to configure an action of type content offer"
      },
      "createdDate": {
        "description": "Date when action template was created in ISO-8601 format.",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Description of the action template's functionality.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "Media type of action described by the action template.",
        "enum": [
          "webchat",
          "webMessagingOffer",
          "contentOffer",
          "integrationAction",
          "architectFlow",
          "openAction"
        ],
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date when action template was last modified in ISO-8601 format.",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Name of the action template.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Whether the action template is currently active, inactive or deleted.",
        "enum": [
          "Active",
          "Inactive",
          "Deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "The version of the action template.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "mediaType",
      "name",
      "state"
    ],
    "type": "object"
  },
  "ActionTemplateListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ActionTemplate"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Actions": {
    "properties": {
      "skillsToRemove": {
        "items": {
          "$ref": "#/definitions/SkillsToRemove"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "Activation": {
    "properties": {
      "delayInSeconds": {
        "description": "Activation delay time amount.",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Type of activation.",
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ActiveAlertCount": {
    "properties": {
      "count": {
        "description": "The count of active alerts for a user.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ActivityCode": {
    "properties": {
      "agentTimeOffSelectable": {
        "description": "Whether an agent can select this activity code when creating or editing a time off request. Null if the activity's category is not time off.",
        "type": "boolean"
      },
      "category": {
        "description": "The activity code's category.",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "countsAsPaidTime": {
        "description": "Whether an agent is paid while performing this activity",
        "type": "boolean"
      },
      "countsAsWorkTime": {
        "description": "Indicates whether or not the activity should be counted as contiguous work time for calculating daily constraints",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isActive": {
        "description": "Whether this activity code is active or has been deleted",
        "type": "boolean"
      },
      "isDefault": {
        "description": "Whether this is a default activity code",
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The default length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the associated management unit's list of activity codes"
      },
      "name": {
        "description": "The name of the activity code. Default activity codes will be created with an empty name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "ActivityCodeContainer": {
    "properties": {
      "activityCodes": {
        "additionalProperties": {
          "$ref": "#/definitions/ActivityCode"
        },
        "description": "Map of activity code id to activity code",
        "type": "object"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the associated management unit's list of activity codes"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "ActivityCodeReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ActivityCodeSummary": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "secondaryPresences": {
        "description": "The secondary presences of this activity code.",
        "items": {
          "$ref": "#/definitions/SecondaryPresence"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ActivityCodesReference": {
    "properties": {
      "ids": {
        "description": "The IDs of activity codes",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActivityPlanAbandonRateImpactOverride": {
    "properties": {
      "increaseByPercent": {
        "description": "Allowed abandon rate increase percent, from 0.0 to 100.0",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "increaseByPercent"
    ],
    "type": "object"
  },
  "ActivityPlanAsaImpactOverride": {
    "properties": {
      "increaseByPercent": {
        "description": "Allowed average speed of answer increase percent, from 0.0 to 100.0",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "increaseByPercent"
    ],
    "type": "object"
  },
  "ActivityPlanJobException": {
    "properties": {
      "exceptionType": {
        "description": "The type of error",
        "enum": [
          "UnscheduledAttendees",
          "SessionsNotDeleted"
        ],
        "type": "string"
      },
      "occurrences": {
        "description": "The occurrences in which this error occurred",
        "items": {
          "$ref": "#/definitions/ActivityPlanOccurrenceReference"
        },
        "type": "array"
      }
    },
    "required": [
      "exceptionType",
      "occurrences"
    ],
    "type": "object"
  },
  "ActivityPlanJobListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ActivityPlanJobResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ActivityPlanJobResponse": {
    "properties": {
      "activityPlan": {
        "$ref": "#/definitions/ActivityPlanReference",
        "description": "The activity plan associated with this job"
      },
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error details if status == 'Error'. These are errors that caused the job to fail to complete"
      },
      "exceptions": {
        "description": "The list of exceptions that occurred while running this activity plan job. These are exceptions that affect individual occurrences but didn't prevent the job from completing",
        "items": {
          "$ref": "#/definitions/ActivityPlanJobException"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "occurrence": {
        "$ref": "#/definitions/ActivityPlanOccurrenceReference",
        "description": "The occurrence associated with this job if type == 'DeleteOccurrence'"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the job",
        "enum": [
          "RunPlan",
          "DeleteOccurrence"
        ],
        "type": "string"
      }
    },
    "required": [
      "activityPlan",
      "exceptions",
      "status",
      "type"
    ],
    "type": "object"
  },
  "ActivityPlanListItem": {
    "properties": {
      "activityCode": {
        "$ref": "#/definitions/ActivityCodeReference",
        "description": "The activity code to which this activity plan applies. Note: It is recommended to load and cache the entire list of activity codes rather than look up individual codes"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created this activity plan"
      },
      "createdDate": {
        "description": "The date the activity plan was created, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of this activity plan",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lastRunBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The last user to run this activity plan"
      },
      "lastRunDate": {
        "description": "The date the activity plan was last run, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "managementUnits": {
        "description": "The management units to which this activity plan applies. Empty list or null means this activity plan applies to all management units in the business unit",
        "items": {
          "$ref": "#/definitions/ManagementUnitReference"
        },
        "type": "array"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The last user to modify this activity plan"
      },
      "modifiedDate": {
        "description": "The date the activity plan was modified, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The name of the activity plan",
        "type": "string"
      },
      "optimizationObjective": {
        "description": "The optimization objective of this activity plan",
        "enum": [
          "FavorServiceGoals",
          "FavorSchedulingAll"
        ],
        "type": "string"
      },
      "recurrenceSettings": {
        "$ref": "#/definitions/RecurrenceSettings",
        "description": "Recurrence settings for this activity plan"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of this activity plan",
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the activity plan",
        "enum": [
          "Individual",
          "Group"
        ],
        "type": "string"
      }
    },
    "required": [
      "activityCode",
      "createdBy",
      "createdDate",
      "description",
      "modifiedBy",
      "modifiedDate",
      "name",
      "optimizationObjective",
      "state",
      "type"
    ],
    "type": "object"
  },
  "ActivityPlanListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ActivityPlanListItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ActivityPlanOccurrenceReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActivityPlanReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ActivityPlanResponse": {
    "properties": {
      "activityCode": {
        "$ref": "#/definitions/ActivityCodeReference",
        "description": "The activity code associated with this activity plan. It is recommended to load and cache the entire list of activity codes rather than look up individual codes"
      },
      "attendeesSearchRule": {
        "$ref": "#/definitions/UserSearchRule",
        "description": "Attendee search rule for this activity plan"
      },
      "countsAsPaidTime": {
        "description": "Whether the activity should count as paid time",
        "type": "boolean"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created this activity plan"
      },
      "createdDate": {
        "description": "The date the activity plan was created, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of this activity plan",
        "type": "string"
      },
      "facilitated": {
        "description": "Whether the sessions created by this activity plan should be facilitated",
        "type": "boolean"
      },
      "facilitatorsSearchRule": {
        "$ref": "#/definitions/UserSearchRule",
        "description": "Facilitator search rule for this activity plan"
      },
      "fixedAvailability": {
        "description": "Fixed availability configuration for this activity plan",
        "items": {
          "$ref": "#/definitions/FixedAvailability"
        },
        "type": "array"
      },
      "groupSettings": {
        "$ref": "#/definitions/GroupSettings",
        "description": "Group settings for this activity plan"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "initialSchedulePeriod": {
        "$ref": "#/definitions/SchedulingPeriod",
        "description": "The initial schedule period of the activity plan"
      },
      "lastRunBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The last user to run this activity plan"
      },
      "lastRunDate": {
        "description": "The date the activity plan was last run, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "managementUnits": {
        "description": "The management units to which this activity plan applies. Empty list or null means this activity plan applies to the entire business unit",
        "items": {
          "$ref": "#/definitions/ManagementUnitReference"
        },
        "type": "array"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The last user to modify this activity plan"
      },
      "modifiedDate": {
        "description": "The date the activity plan was modified, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The name of the activity plan",
        "type": "string"
      },
      "optimizationObjective": {
        "description": "The optimization objective of this activity plan",
        "enum": [
          "FavorServiceGoals",
          "FavorSchedulingAll"
        ],
        "type": "string"
      },
      "recurrenceSettings": {
        "$ref": "#/definitions/RecurrenceSettings",
        "description": "Recurrence settings for this activity plan"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serviceGoalImpactOverrides": {
        "$ref": "#/definitions/ActivityPlanServiceGoalImpactOverrides",
        "description": "Allowable service goal impact override settings for this activity plan"
      },
      "state": {
        "description": "The state of this activity plan",
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "transitionTimeMinutes": {
        "description": "Transition time in minutes between facilitated sessions",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "The type of the activity plan",
        "enum": [
          "Individual",
          "Group"
        ],
        "type": "string"
      }
    },
    "required": [
      "activityCode",
      "countsAsPaidTime",
      "createdBy",
      "createdDate",
      "description",
      "facilitated",
      "initialSchedulePeriod",
      "lengthMinutes",
      "modifiedBy",
      "modifiedDate",
      "name",
      "optimizationObjective",
      "state",
      "transitionTimeMinutes",
      "type"
    ],
    "type": "object"
  },
  "ActivityPlanRunJobResponse": {
    "properties": {
      "activityPlan": {
        "$ref": "#/definitions/ActivityPlanReference",
        "description": "The activity plan associated with this job"
      },
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error details if status == 'Error'. These are errors that caused the job to fail to complete"
      },
      "exceptions": {
        "description": "The list of exceptions that occurred while running this activity plan job. These are exceptions that affect individual occurrences but didn't prevent the job from completing",
        "items": {
          "$ref": "#/definitions/ActivityPlanJobException"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "required": [
      "activityPlan",
      "exceptions",
      "status"
    ],
    "type": "object"
  },
  "ActivityPlanServiceGoalImpactOverrides": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/ActivityPlanAbandonRateImpactOverride",
        "description": "Abandon rate service goal override for the associated activity plan"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/ActivityPlanAsaImpactOverride",
        "description": "Average speed of answer service goal override for the associated activity plan"
      },
      "serviceLevel": {
        "$ref": "#/definitions/ActivityPlanServiceLevelImpactOverride",
        "description": "Service level goal override for the associated activity plan"
      }
    },
    "required": [
      "abandonRate",
      "averageSpeedOfAnswer",
      "serviceLevel"
    ],
    "type": "object"
  },
  "ActivityPlanServiceLevelImpactOverride": {
    "properties": {
      "decreaseByPercent": {
        "description": "Allowed service level decrease percent, from 0.0 to 100.0",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "decreaseByPercent"
    ],
    "type": "object"
  },
  "AcwSettings": {
    "properties": {
      "timeoutMs": {
        "description": "The amount of time the agent can stay in ACW (Min: 1 sec, Max: 60 min).  Can only be used when ACW is AGENT_REQUESTED, MANDATORY_TIMEOUT or MANDATORY_FORCED_TIMEOUT.",
        "format": "int32",
        "type": "integer"
      },
      "wrapupPrompt": {
        "description": "This field controls how the UI prompts the agent for a wrapup.",
        "enum": [
          "MANDATORY",
          "OPTIONAL",
          "MANDATORY_TIMEOUT",
          "MANDATORY_FORCED_TIMEOUT",
          "AGENT_REQUESTED"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AddAdherenceExplanationAdminRequest": {
    "properties": {
      "lengthMinutes": {
        "description": "The length of the adherence explanation in minutes",
        "format": "int32",
        "type": "integer"
      },
      "notes": {
        "description": "Notes about the adherence explanation",
        "type": "string"
      },
      "startDate": {
        "description": "The start timestamp of the adherence explanation in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "status": {
        "description": "The status of the adherence explanation",
        "enum": [
          "Pending",
          "Approved",
          "Denied"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the adherence explanation",
        "enum": [
          "Late"
        ],
        "type": "string"
      }
    },
    "required": [
      "lengthMinutes",
      "startDate",
      "type"
    ],
    "type": "object"
  },
  "AddAdherenceExplanationAgentRequest": {
    "properties": {
      "lengthMinutes": {
        "description": "The length of the adherence explanation in minutes",
        "format": "int32",
        "type": "integer"
      },
      "notes": {
        "description": "Notes about the adherence explanation",
        "type": "string"
      },
      "startDate": {
        "description": "The start timestamp of the adherence explanation in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "type": {
        "description": "The type of the adherence explanation",
        "enum": [
          "Late"
        ],
        "type": "string"
      }
    },
    "required": [
      "lengthMinutes",
      "startDate",
      "type"
    ],
    "type": "object"
  },
  "AddConversationRequest": {
    "description": "Update coaching appointment request",
    "properties": {
      "conversationId": {
        "description": "The id of the conversation to add",
        "type": "string"
      }
    },
    "required": [
      "conversationId"
    ],
    "type": "object"
  },
  "AddConversationResponse": {
    "properties": {
      "appointment": {
        "$ref": "#/definitions/CoachingAppointmentReference",
        "description": "The appointment reference",
        "readOnly": true
      },
      "conversation": {
        "$ref": "#/definitions/ConversationReference",
        "description": "The conversation reference",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "AddShiftTradeRequest": {
    "properties": {
      "acceptableIntervals": {
        "description": "The acceptable intervals the initiating user is willing to accept in trade.  Empty indicates the user is giving up the shift. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "items": {
          "description": "Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
          "type": "string"
        },
        "type": "array"
      },
      "expiration": {
        "description": "When this shift trade request should expire. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "initiatingShiftId": {
        "description": "The ID of the shift that the initiating user wants to give up",
        "type": "string"
      },
      "receivingUserId": {
        "description": "The ID of the user to whom to send the request (for use in direct trade requests)",
        "type": "string"
      },
      "scheduleId": {
        "description": "The ID of the schedule to which the initiating and receiving shifts belong",
        "type": "string"
      }
    },
    "required": [
      "initiatingShiftId",
      "scheduleId"
    ],
    "type": "object"
  },
  "AddWorkPlanRotationAgentRequest": {
    "properties": {
      "dateRange": {
        "$ref": "#/definitions/DateRangeWithOptionalEnd",
        "description": "The date range to which this agent is effective in the work plan rotation"
      },
      "position": {
        "description": "Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0",
        "format": "int32",
        "type": "integer"
      },
      "userId": {
        "description": "The ID of an agent in this work plan rotation",
        "type": "string"
      }
    },
    "required": [
      "dateRange",
      "position",
      "userId"
    ],
    "type": "object"
  },
  "AddWorkPlanRotationRequest": {
    "properties": {
      "agents": {
        "description": "Agents in this work plan rotation",
        "items": {
          "$ref": "#/definitions/AddWorkPlanRotationAgentRequest"
        },
        "type": "array"
      },
      "dateRange": {
        "$ref": "#/definitions/DateRangeWithOptionalEnd",
        "description": "The date range to which this work plan rotation applies"
      },
      "name": {
        "description": "Name of this work plan rotation",
        "type": "string"
      },
      "pattern": {
        "$ref": "#/definitions/WorkPlanPatternRequest",
        "description": "Pattern with list of work plan IDs that rotate on a weekly basis"
      }
    },
    "required": [
      "dateRange",
      "name",
      "pattern"
    ],
    "type": "object"
  },
  "AdditionalLanguagesIntent": {
    "properties": {
      "id": {
        "description": "ID of the intent for respective additional language",
        "readOnly": true,
        "type": "string"
      },
      "utterances": {
        "description": "Utterances list for additional language",
        "items": {
          "$ref": "#/definitions/NluUtterance"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AdditionalLanguagesSynonyms": {
    "properties": {
      "synonyms": {
        "description": "Synonyms for additional language",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "AdditionalMessage": {
    "properties": {
      "mediaIds": {
        "description": "The media ids associated with the text message. See https://developer.genesys.cloud/api/rest/v2/conversations/messaging-media-upload for example usage.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "messagingTemplate": {
        "$ref": "#/definitions/MessagingTemplateRequest",
        "description": "The messaging template use to send a predefined canned response with the message"
      },
      "stickerIds": {
        "description": "The sticker ids associated with the text message.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "textBody": {
        "description": "The body of the text message.  Maximum character counts are: SMS - 765 characters, other channels - 2000 characters.",
        "type": "string"
      }
    },
    "required": [
      "textBody"
    ],
    "type": "object"
  },
  "Address": {
    "properties": {
      "addressDisplayable": {
        "description": "The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table.",
        "type": "string"
      },
      "addressNormalized": {
        "description": "The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table.",
        "type": "string"
      },
      "addressRaw": {
        "description": "The address as close to the bits on the wire as possible.",
        "type": "string"
      },
      "name": {
        "description": "This will be nameRaw if present, or a locality lookup of the address field otherwise.",
        "type": "string"
      },
      "nameRaw": {
        "description": "The name as close to the bits on the wire as possible.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AddressableEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AddressableEntityRef": {
    "properties": {
      "id": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AddressableLicenseDefinition": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationAsyncResponse": {
    "properties": {
      "job": {
        "$ref": "#/definitions/AdherenceExplanationJobReference",
        "description": "A reference to the job that was started by the request"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationJob": {
    "properties": {
      "adherenceExplanation": {
        "$ref": "#/definitions/AdherenceExplanationResponse",
        "description": "The adherence explanation added or modified by the job once complete; may be null if status == 'Error'. Used if type is in [ 'AddExplanation', 'UpdateExplanation' ]"
      },
      "agentQueryResponseTemplate": {
        "$ref": "#/definitions/AdherenceExplanationListingAgentQueryResponse",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'QueryAgentExplanations'"
      },
      "buQueryResponseTemplate": {
        "$ref": "#/definitions/AdherenceExplanationListingBuQueryResponse",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'QueryBuExplanations'"
      },
      "downloadUrl": {
        "description": "A URL to fetch results of the job. Only set if status == 'Complete' and type is in [ 'QueryAgentExplanations', 'QueryBuExplanations' ]",
        "type": "string"
      },
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error details if status == 'Error'"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the adherence explanation job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the adherence explanation job",
        "enum": [
          "AddExplanation",
          "UpdateExplanation",
          "QueryAgentExplanations",
          "QueryBuExplanations"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationJobReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the adherence explanation job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the adherence explanation job",
        "enum": [
          "AddExplanation",
          "UpdateExplanation",
          "QueryAgentExplanations",
          "QueryBuExplanations"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AdherenceExplanationResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationListingAgentQueryResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AdherenceExplanationResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationListingBuQueryResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AdherenceExplanationResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationNotification": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/UserReference",
        "description": "The agent for whom the adherence explanation applies"
      },
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The business unit to which the agent belonged at the time the adherence explanation was submitted"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the adherence explanation in minutes",
        "format": "int32",
        "type": "integer"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which the agent belonged at the time the adherence explanation was submitted"
      },
      "notes": {
        "description": "Notes about the adherence explanation",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "The start date of the adherence explanation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "status": {
        "description": "The status of the adherence explanation",
        "enum": [
          "Pending",
          "Approved",
          "Denied"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the adherence explanation",
        "enum": [
          "Late"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AdherenceExplanationResponse": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/UserReference",
        "description": "The agent to whom this adherence explanation applies"
      },
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The business unit to which the agent belonged at the time the adherence explanation was submitted"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the adherence explanation in minutes",
        "format": "int32",
        "type": "integer"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which the agent belonged at the time the adherence explanation was submitted"
      },
      "notes": {
        "description": "Notes about the adherence explanation",
        "type": "string"
      },
      "reviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who reviewed the adherence explanation, if applicable"
      },
      "reviewedDate": {
        "description": "The timestamp for when the adherence explanation was reviewed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "The start timestamp of the adherence explanation in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "status": {
        "description": "The status of the adherence explanation",
        "enum": [
          "Pending",
          "Approved",
          "Denied"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the adherence explanation",
        "enum": [
          "Late"
        ],
        "type": "string"
      }
    },
    "required": [
      "agent",
      "businessUnit",
      "lengthMinutes",
      "managementUnit",
      "startDate",
      "status",
      "type"
    ],
    "type": "object"
  },
  "AdherenceSettings": {
    "properties": {
      "adherenceExceptionThresholdSeconds": {
        "description": "The threshold in seconds for which agents should not be penalized for being momentarily out of adherence",
        "format": "int32",
        "type": "integer"
      },
      "adherenceTargetPercent": {
        "description": "Target adherence percentage",
        "format": "int32",
        "type": "integer"
      },
      "ignoredActivityCategories": {
        "$ref": "#/definitions/IgnoredActivityCategories",
        "description": "Activity categories that should be ignored for adherence purposes"
      },
      "nonOnQueueActivitiesEquivalent": {
        "description": "Whether to treat all non-on-queue activities as equivalent for adherence purposes",
        "type": "boolean"
      },
      "severeAlertThresholdMinutes": {
        "description": "The threshold in minutes where an alert will be triggered when an agent is considered severely out of adherence",
        "format": "int32",
        "type": "integer"
      },
      "trackOnQueueActivity": {
        "description": "Whether to track on-queue activities",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Adjacents": {
    "properties": {
      "directReports": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "siblings": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "superiors": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AdjustableLiveSpeakerDetection": {
    "properties": {
      "eventName": {
        "description": "The name of the event that triggered the ALSD evaluation (e.g., line.connect, speech.generic).",
        "type": "string"
      },
      "isPersonLikely": {
        "description": "The output of the ALSD detector, evaluating whether there is likely a person on the call based on the above inputs, and if so, a person is detected early (person disposition name and speech.person analyzer result) and the associated action taken (e.g., speech.person postconnect entry in the disposition table has the action to transfer to a queue).",
        "type": "boolean"
      },
      "lineConnected": {
        "description": "Protocol line connect received (answered by a person, machine, busy, fax).",
        "type": "boolean"
      },
      "mode": {
        "description": "Modes to tune between speed to live speaker detection vs accuracy.",
        "enum": [
          "unknown",
          "disabled",
          "low",
          "medium",
          "high"
        ],
        "type": "string"
      },
      "preconnectDuration": {
        "description": "ISO 8601 formatted relative duration (e.g., PT30.8427419S for 30.8 seconds), calculated on line connect.",
        "type": "string"
      },
      "totalRingbacks": {
        "description": "Number of tone.ring.* analyzer events detected during the call (expected mostly during pre-connect but the last ringback tone detection could potentially complete after line connect, which will increment totalRingbacks still).",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AdminAgentWorkPlanBiddingPreference": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/UserReference",
        "description": "The agent to whom this work plan bidding preference applies"
      },
      "assignedWorkPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan assigned to the agent by the bid process"
      },
      "overriddenWorkPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan that overrides the assigned work plan for the agent"
      },
      "overrideReason": {
        "description": "The reason why the assigned work plan has been overridden. This must be null without an override work plan",
        "enum": [
          "UnableToBid",
          "ChangeOfCircumstance",
          "NewHire",
          "EmployeeMove"
        ],
        "type": "string"
      },
      "priorities": {
        "description": "The agent priorities for the list of work plans. The index of the priorities should match with the list of work plans that belong to bid group. It contains null if priority is not set for the work plan",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "submitted": {
        "description": "Whether the preference is submitted",
        "type": "boolean"
      }
    },
    "required": [
      "agent",
      "submitted"
    ],
    "type": "object"
  },
  "AdminAgentWorkPlanPreferenceResponse": {
    "properties": {
      "agentWorkPlanBidPreferences": {
        "description": "The list of agents work plan bidding preferences",
        "items": {
          "$ref": "#/definitions/AdminAgentWorkPlanBiddingPreference"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "workPlans": {
        "description": "The list of work plans that belong to this bid group",
        "items": {
          "$ref": "#/definitions/WorkPlanReference"
        },
        "type": "array"
      }
    },
    "required": [
      "agentWorkPlanBidPreferences",
      "workPlans"
    ],
    "type": "object"
  },
  "AdminBulkUpdateAlternativeShiftTradeState": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this alternative shift trade"
      },
      "state": {
        "description": "The new alternative shift trade state",
        "enum": [
          "Approved",
          "Denied"
        ],
        "type": "string"
      },
      "tradeId": {
        "description": "The ID of the trade for this alternative shift trade",
        "type": "string"
      }
    },
    "required": [
      "metadata",
      "state",
      "tradeId"
    ],
    "type": "object"
  },
  "AdminBulkUpdateAlternativeShiftTradeStateRequest": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AdminBulkUpdateAlternativeShiftTradeState"
        },
        "type": "array"
      },
      "managementUnitId": {
        "description": "The ID of the management unit for this alternative shift bulk trade update",
        "type": "string"
      }
    },
    "required": [
      "managementUnitId"
    ],
    "type": "object"
  },
  "AdminTimeOffRequestPatch": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "dailyDurationMinutes": {
        "description": "The daily duration of this time off request in minutes",
        "format": "int32",
        "type": "integer"
      },
      "durationMinutes": {
        "description": "Daily durations for each day of this time off request in minutes",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "fullDayManagementUnitDates": {
        "description": "A set of dates in yyyy-MM-dd format. Should be interpreted in the management unit's configured time zone.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off request"
      },
      "notes": {
        "description": "Notes about the time off request",
        "type": "string"
      },
      "paid": {
        "description": "Whether this is a paid time off request",
        "type": "boolean"
      },
      "partialDayStartDateTimes": {
        "description": "A set of start date-times in ISO-8601 format for partial day requests.",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "payableMinutes": {
        "description": "Payable minutes for each day of this time off request",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "status": {
        "description": "The status of this time off request",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED"
        ],
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "AfterCallWork": {
    "properties": {
      "endTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "enum": [
          "unknown",
          "notApplicable",
          "skipped",
          "pending",
          "complete"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AfterCallWorkUpdate": {
    "properties": {
      "afterCallWorkRequired": {
        "description": "Indicates whether or not after-call work must be completed for the communication. Can only be updated for connected communications.",
        "type": "boolean"
      }
    },
    "required": [
      "afterCallWorkRequired"
    ],
    "type": "object"
  },
  "Agent": {
    "properties": {
      "stage": {
        "description": "The current stage for this agent",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AgentActivity": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/User"
      },
      "agentEvaluatorActivityList": {
        "items": {
          "$ref": "#/definitions/AgentEvaluatorActivity"
        },
        "type": "array"
      },
      "averageCriticalScore": {
        "format": "float",
        "type": "number"
      },
      "averageEvaluationScore": {
        "format": "int32",
        "type": "integer"
      },
      "highestCriticalScore": {
        "format": "float",
        "type": "number"
      },
      "highestEvaluationScore": {
        "format": "float",
        "type": "number"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lowestCriticalScore": {
        "format": "float",
        "type": "number"
      },
      "lowestEvaluationScore": {
        "format": "float",
        "type": "number"
      },
      "name": {
        "type": "string"
      },
      "numCriticalEvaluations": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluations": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluationsWithoutViewPermission": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AgentActivityEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AgentActivity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AgentBidWorkPlanOverrideRequest": {
    "properties": {
      "agentId": {
        "description": "The ID of agent",
        "type": "string"
      },
      "overrideReason": {
        "description": "The reason for overriding the assigned work plan. This must be null if overrideWorkPlanId is not specified",
        "enum": [
          "UnableToBid",
          "ChangeOfCircumstance",
          "NewHire",
          "EmployeeMove"
        ],
        "type": "string"
      },
      "overrideWorkPlanId": {
        "description": "The ID of the work plan that overrides the assigned work plan for the agent",
        "type": "string"
      }
    },
    "required": [
      "agentId"
    ],
    "type": "object"
  },
  "AgentCopilotAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "AgentCopilotAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/AgentCopilotAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "AgentCopilotAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/AgentCopilotAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/AgentCopilotAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "AgentCopilotAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "agentAssistantId",
          "cannedResponseId",
          "cannedResponseLibraryId",
          "conversationId",
          "engagementType",
          "externalContactId",
          "feedbackRating",
          "knowledgeBaseDocumentId",
          "knowledgeBaseDocumentVersionId",
          "mediaType",
          "messageId",
          "queueId",
          "scriptId",
          "scriptPageId",
          "searchId",
          "state",
          "suggestionId",
          "suggestionType",
          "triggerType",
          "userId",
          "utteranceId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "AgentCopilotAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/AgentCopilotAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AgentCopilotAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/AgentCopilotAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "agentAssistantId",
            "cannedResponseId",
            "cannedResponseLibraryId",
            "conversationId",
            "engagementType",
            "externalContactId",
            "feedbackRating",
            "knowledgeBaseDocumentId",
            "knowledgeBaseDocumentVersionId",
            "mediaType",
            "messageId",
            "queueId",
            "scriptId",
            "scriptPageId",
            "searchId",
            "state",
            "suggestionId",
            "suggestionType",
            "triggerType",
            "userId",
            "utteranceId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "limit": {
        "description": "How many results you want in the topN list. Only applicable for topN query type.",
        "format": "int32",
        "type": "integer"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nCannedResponseSuggestions",
            "nDistinctSuggestions",
            "nKnowledgeArticleSuggestions",
            "nKnowledgeSearchSuggestions",
            "nScriptSuggestions"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "queryType": {
        "description": "Query type to use. Use groupBy for all matching results, and topN for just top N results for the requested metric (group by exactly 1 dimension)",
        "enum": [
          "groupBy",
          "topN"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/AgentCopilotAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "AgentCopilotAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nCannedResponseSuggestions",
          "nDistinctSuggestions",
          "nKnowledgeArticleSuggestions",
          "nKnowledgeSearchSuggestions",
          "nScriptSuggestions"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "AgentCountRange": {
    "properties": {
      "maximum": {
        "description": "The maximum value of agent count per work plan",
        "format": "int32",
        "type": "integer"
      },
      "minimum": {
        "description": "The minimum value of agent count per work plan",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "maximum",
      "minimum"
    ],
    "type": "object"
  },
  "AgentDirectRoutingBackupSettings": {
    "properties": {
      "agentWaitSeconds": {
        "description": "Time (in seconds) that a Direct Routing interaction will wait for Direct Routing agent before going to selected backup. Valid range [60, 864000].",
        "format": "int32",
        "type": "integer"
      },
      "backedUpUsers": {
        "description": "Set of users that this user is a backup for.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "queueId": {
        "description": "ID of queue to be used as backup. If queueId and userId are both specified, queue behaves as secondary backup.",
        "type": "string"
      },
      "userId": {
        "description": "ID of user to be used as backup. If queueId and userId are both specified, user behaves as primary backup.",
        "type": "string"
      },
      "waitForAgent": {
        "description": "Flag indicating if Direct Routing interactions should wait for Direct Routing agent or go immediately to selected backup.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "AgentEvaluatorActivity": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/User"
      },
      "averageEvaluationScore": {
        "format": "int32",
        "type": "integer"
      },
      "evaluator": {
        "$ref": "#/definitions/User"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "numEvaluations": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluationsWithoutViewPermission": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AgentIntegrationAssociationRequest": {
    "properties": {
      "agentExternalId": {
        "description": "The ID of the agent in external system",
        "type": "string"
      },
      "integrationId": {
        "description": "The ID of the integration associated with the agent",
        "type": "string"
      },
      "locked": {
        "description": "Whether agentExternalId should be protected from update by automatic processes",
        "type": "boolean"
      }
    },
    "required": [
      "agentExternalId",
      "integrationId",
      "locked"
    ],
    "type": "object"
  },
  "AgentIntegrationAssociationResponse": {
    "properties": {
      "agentExternalId": {
        "description": "ID of the agent in external system",
        "type": "string"
      },
      "integration": {
        "$ref": "#/definitions/WfmIntegrationReference",
        "description": "The integration associated with the agent"
      },
      "locked": {
        "description": "Whether agentExternalId should be protected from update by automatic processes",
        "type": "boolean"
      }
    },
    "required": [
      "agentExternalId",
      "integration",
      "locked"
    ],
    "type": "object"
  },
  "AgentIntegrationsRequest": {
    "properties": {
      "associatedIntegrations": {
        "description": "The list of integrations associated with the agent",
        "items": {
          "$ref": "#/definitions/AgentIntegrationAssociationRequest"
        },
        "type": "array"
      },
      "selectedIntegrationId": {
        "description": "The ID of the integration selected for the agent. If not set, no integration will be used for the agent",
        "type": "string"
      }
    },
    "required": [
      "associatedIntegrations"
    ],
    "type": "object"
  },
  "AgentIntegrationsResponse": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with the integrations"
      },
      "associatedIntegrations": {
        "description": "The list of integrations associated with the agent",
        "items": {
          "$ref": "#/definitions/AgentIntegrationAssociationResponse"
        },
        "type": "array"
      },
      "selectedIntegration": {
        "$ref": "#/definitions/WfmIntegrationReference",
        "description": "The integration selected for the agent. If not set, no integration will be used for the agent"
      },
      "userSelected": {
        "description": "Whether the integration association has been manually selected",
        "type": "boolean"
      }
    },
    "required": [
      "agent",
      "associatedIntegrations"
    ],
    "type": "object"
  },
  "AgentManagementUnitReference": {
    "properties": {
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The business unit to which the user (agent) belongs. Populate with expand=businessUnit"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management to which the user (agent) belongs"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user (agent) for whom the management unit was requested"
      }
    },
    "type": "object"
  },
  "AgentMaxUtilizationResponse": {
    "properties": {
      "labelUtilizations": {
        "additionalProperties": {
          "$ref": "#/definitions/LabelUtilizationResponse"
        },
        "description": "Map of label ids to utilization settings.",
        "type": "object"
      },
      "level": {
        "enum": [
          "Agent",
          "Organization"
        ],
        "type": "string"
      },
      "utilization": {
        "additionalProperties": {
          "$ref": "#/definitions/MediaUtilization"
        },
        "description": "Map of media type to utilization settings.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "AgentOwnedMappingPreview": {
    "properties": {
      "agentOwnedColumn": {
        "description": "The raw value of the agent-owned column",
        "readOnly": true,
        "type": "string"
      },
      "email": {
        "description": "The email address of the user, if it exists",
        "readOnly": true,
        "type": "string"
      },
      "exists": {
        "description": "Whether the user exists",
        "readOnly": true,
        "type": "boolean"
      },
      "isQueueMember": {
        "description": "Whether the user is a member of the campaign's queue",
        "readOnly": true,
        "type": "boolean"
      },
      "recordCount": {
        "description": "The number of contact records whose agent-owned column matches the raw value",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "userId": {
        "description": "The id of the user, if it exists",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AgentOwnedMappingPreviewListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AgentOwnedMappingPreview"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AgentOwnedRouting": {
    "properties": {
      "enableAgentOwnedCallbacks": {
        "description": "Indicates if Agent Owned Callbacks are enabled for the queue",
        "type": "boolean"
      },
      "maxOwnedCallbackDelayHours": {
        "description": "The max amount of time a callback can be scheduled out into the future (in hours); Allowable range 1 - 720 hour(s) (inclusive)",
        "format": "int32",
        "type": "integer"
      },
      "maxOwnedCallbackHours": {
        "description": "The max amount of time a callback can be owned (in hours); Allowable range 1 - 168 hour(s) (inclusive)",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AgentPossibleWorkShiftsRequest": {
    "properties": {
      "weekCount": {
        "description": "Number of weeks for which to return possible work shifts",
        "format": "int32",
        "type": "integer"
      },
      "weekStartDate": {
        "description": "Start date of requested effective work plan, day of week will be in line with business unit start day of week. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "weekCount",
      "weekStartDate"
    ],
    "type": "object"
  },
  "AgentPossibleWorkShiftsResponse": {
    "properties": {
      "pattern": {
        "description": "Each element is the ID of an effective work plan for a specific week",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "schedulerIntervalLengthMinutes": {
        "description": "Number of minutes in each interval in the intervalScheduleProbabilities",
        "format": "int32",
        "type": "integer"
      },
      "timeZone": {
        "description": "The time zone of the business unit",
        "type": "string"
      },
      "weekStartDate": {
        "description": "Start date of requested effective work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "weeklyPossibleWorkShifts": {
        "description": "Each element is a weekly effective work plan that can be used for multiple weeks",
        "items": {
          "$ref": "#/definitions/PossibleWorkShiftsForWeek"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AgentQueryAdherenceExplanationsRequest": {
    "properties": {
      "endDate": {
        "description": "The end date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startDate": {
        "description": "The start date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "endDate",
      "startDate"
    ],
    "type": "object"
  },
  "AgentQueryAdherenceExplanationsResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The URL from which to download the result. May come via notification",
        "type": "string"
      },
      "job": {
        "$ref": "#/definitions/AdherenceExplanationJobReference",
        "description": "The asynchronous job handling the query"
      },
      "result": {
        "$ref": "#/definitions/AdherenceExplanationListingAgentQueryResponse",
        "description": "The result of the query. May come via notification"
      }
    },
    "type": "object"
  },
  "AgentQueueTimeRequest": {
    "properties": {
      "agentId": {
        "description": "ID of the agent",
        "type": "string"
      },
      "onQueueLengthMinutesPerInterval": {
        "description": "List of on queue time lengths in minutes per interval of elements in startOffsetMinutes",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "startOffsetMinutes": {
        "description": "List of offsets in minutes from calculationStartDate",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "required": [
      "agentId",
      "onQueueLengthMinutesPerInterval",
      "startOffsetMinutes"
    ],
    "type": "object"
  },
  "AgentTimeOffRequestPatch": {
    "properties": {
      "markedAsRead": {
        "description": "Whether this request has been read by the agent",
        "type": "boolean"
      },
      "notes": {
        "description": "Notes about the time off request. Can only be edited while the request is still pending",
        "type": "string"
      },
      "status": {
        "description": "The status of this time off request. Can only be canceled if the requested date has not already passed",
        "enum": [
          "CANCELED"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AgentUpdateAlternativeShiftTradeRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this alternative shift trade"
      },
      "state": {
        "description": "The new state of this alternative shift trade",
        "enum": [
          "Canceled"
        ],
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "AgentVideoSettings": {
    "description": "The settings for Agent Video",
    "properties": {
      "allowCamera": {
        "description": "whether or not agent camera is allowed",
        "type": "boolean"
      },
      "allowScreenShare": {
        "description": "whether or not agent screen share is allowed",
        "type": "boolean"
      },
      "background": {
        "description": "background for agent",
        "enum": [
          "BLUR",
          "NONE",
          "IMAGE"
        ],
        "type": "string"
      },
      "backgroundImage": {
        "$ref": "#/definitions/BackgroundImageSettings",
        "description": "background image settings for agent"
      }
    },
    "type": "object"
  },
  "AgentWorkPlan": {
    "properties": {
      "constrainWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is enabled for this work plan",
        "type": "boolean"
      },
      "flexibleWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is flexible for this work plan",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "optionalDays": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Optional days to schedule for this work plan"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shifts": {
        "description": "Shifts in this work plan",
        "items": {
          "$ref": "#/definitions/AgentWorkPlanShift"
        },
        "type": "array"
      },
      "weeklyExactPaidMinutes": {
        "description": "Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMaximumPaidMinutes": {
        "description": "Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMinimumPaidMinutes": {
        "description": "Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "constrainWeeklyPaidTime",
      "flexibleWeeklyPaidTime",
      "shifts",
      "weeklyExactPaidMinutes",
      "weeklyMaximumPaidMinutes",
      "weeklyMinimumPaidMinutes"
    ],
    "type": "object"
  },
  "AgentWorkPlanActivity": {
    "properties": {
      "countsAsPaidTime": {
        "description": "Whether the activity is paid",
        "type": "boolean"
      },
      "lengthMinutes": {
        "description": "Length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "countsAsPaidTime",
      "lengthMinutes"
    ],
    "type": "object"
  },
  "AgentWorkPlanBid": {
    "description": "Work plan bid reference",
    "properties": {
      "bidWindowEndDate": {
        "description": "The inclusive end date of a bid window. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "bidWindowStartDate": {
        "description": "The date when agents can start participating in work plan bidding. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "effectiveDate": {
        "description": "The date when agents will be assigned to the new work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "id": {
        "description": "The ID of the work plan bid",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The state of the bid",
        "enum": [
          "Draft",
          "Locked",
          "Optimized",
          "Scheduled",
          "Open",
          "Closed",
          "Processed",
          "Published"
        ],
        "type": "string"
      },
      "workPlanFieldsVisibleToAgents": {
        "description": "The work plan fields visible to agents whenever work plan preferences are made",
        "items": {
          "enum": [
            "Name",
            "PaidHours"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "bidWindowEndDate",
      "bidWindowStartDate",
      "effectiveDate",
      "id",
      "status",
      "workPlanFieldsVisibleToAgents"
    ],
    "type": "object"
  },
  "AgentWorkPlanBiddingPreference": {
    "properties": {
      "priority": {
        "description": "The agent's priority for this work plan, with 1 being the best priority. Null if priority is not set for the work plan",
        "format": "int32",
        "type": "integer"
      },
      "workPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan that belongs to the agent's bid group"
      }
    },
    "required": [
      "workPlan"
    ],
    "type": "object"
  },
  "AgentWorkPlanBiddingPreferenceRequest": {
    "properties": {
      "priority": {
        "description": "The agent's priority for this work plan, with 1 being the best priority. Null if priority is not set for the work plan",
        "format": "int32",
        "type": "integer"
      },
      "workPlanId": {
        "description": "The ID of the work plan that belongs to agent's bid group",
        "type": "string"
      }
    },
    "required": [
      "workPlanId"
    ],
    "type": "object"
  },
  "AgentWorkPlanBiddingPreferenceResponse": {
    "properties": {
      "agentWorkPlanBidPreferences": {
        "description": "The list of work plan bidding preferences",
        "items": {
          "$ref": "#/definitions/AgentWorkPlanBiddingPreference"
        },
        "type": "array"
      },
      "assignedWorkPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan assigned to the agent by the bid process"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "overriddenWorkPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan that overrides the assigned work plan for the agent"
      },
      "overrideReason": {
        "description": "The reason why the assigned work plan has been overridden. This must be null without an override work plan",
        "enum": [
          "UnableToBid",
          "ChangeOfCircumstance",
          "NewHire",
          "EmployeeMove"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "submitted": {
        "description": "Whether the preference is submitted",
        "type": "boolean"
      }
    },
    "required": [
      "agentWorkPlanBidPreferences",
      "submitted"
    ],
    "type": "object"
  },
  "AgentWorkPlanBids": {
    "properties": {
      "agentWorkPlanBids": {
        "description": "Work plan bid summaries associated with this agent",
        "items": {
          "$ref": "#/definitions/AgentWorkPlanBid"
        },
        "type": "array"
      },
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The business unit to which the bids belong"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "agentWorkPlanBids"
    ],
    "type": "object"
  },
  "AgentWorkPlanListResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AgentWorkPlan"
        },
        "type": "array"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit of the work plans"
      }
    },
    "required": [
      "managementUnit"
    ],
    "type": "object"
  },
  "AgentWorkPlanShift": {
    "properties": {
      "activities": {
        "description": "Activities configured for this shift",
        "items": {
          "$ref": "#/definitions/AgentWorkPlanActivity"
        },
        "type": "array"
      },
      "constrainLatestStopTime": {
        "description": "Whether the latest stop time constraint for the shift is enabled",
        "type": "boolean"
      },
      "days": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Days of the week applicable for this shift"
      },
      "earliestStartTimeMinutesFromMidnight": {
        "description": "Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "earliestStopTimeMinutesFromMidnight": {
        "description": "This is the earliest time a shift can end",
        "format": "int32",
        "type": "integer"
      },
      "exactPaidTimeMinutes": {
        "description": "Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "exactStartTimeMinutesFromMidnight": {
        "description": "Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false",
        "format": "int32",
        "type": "integer"
      },
      "flexiblePaidTime": {
        "description": "Whether the paid time setting for the shift is flexible",
        "type": "boolean"
      },
      "flexibleStartTime": {
        "description": "Whether the start time of the shift is flexible",
        "type": "boolean"
      },
      "latestStartTimeMinutesFromMidnight": {
        "description": "Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "latestStopTimeMinutesFromMidnight": {
        "description": "Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidTimeMinutes": {
        "description": "Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidTimeMinutes": {
        "description": "Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "activities",
      "constrainLatestStopTime",
      "days",
      "earliestStartTimeMinutesFromMidnight",
      "earliestStopTimeMinutesFromMidnight",
      "exactPaidTimeMinutes",
      "exactStartTimeMinutesFromMidnight",
      "flexiblePaidTime",
      "flexibleStartTime",
      "latestStartTimeMinutesFromMidnight",
      "latestStopTimeMinutesFromMidnight",
      "maximumPaidTimeMinutes",
      "minimumPaidTimeMinutes"
    ],
    "type": "object"
  },
  "AgentlessEmailSendRequestDto": {
    "properties": {
      "conversationId": {
        "description": "The identifier of the conversation. This must be an email interaction.",
        "type": "string"
      },
      "fromAddress": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The sender of the message."
      },
      "htmlBody": {
        "description": "The Content of the message, in HTML. Links, images and styles are allowed",
        "type": "string"
      },
      "replyToAddress": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The address to use for reply."
      },
      "senderType": {
        "description": "The direction of the message.",
        "enum": [
          "Outbound",
          "Inbound",
          "Integration"
        ],
        "type": "string"
      },
      "subject": {
        "description": "The subject of the message.",
        "type": "string"
      },
      "textBody": {
        "description": "The Content of the message, in plain text.",
        "type": "string"
      },
      "toAddresses": {
        "description": "The recipient of the message. We currently support one recipient only.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "required": [
      "fromAddress",
      "senderType",
      "toAddresses"
    ],
    "type": "object"
  },
  "AgentlessEmailSendResponseDto": {
    "properties": {
      "conversationId": {
        "description": "The identifier of the conversation.",
        "type": "string"
      },
      "dateCreated": {
        "description": "The message creation timestamp. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "fromAddress": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The sender of the message."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "replyToAddress": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The address to use for reply."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "senderType": {
        "description": "The identifier of the external participant of the given conversation.",
        "enum": [
          "Outbound",
          "Inbound",
          "Integration"
        ],
        "type": "string"
      },
      "subject": {
        "description": "The subject of the message.",
        "type": "string"
      },
      "toAddresses": {
        "description": "The recipient of the message. We currently support one recipient only.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "required": [
      "conversationId",
      "dateCreated",
      "fromAddress",
      "senderType",
      "toAddresses"
    ],
    "type": "object"
  },
  "AgentsBidAssignedWorkPlanOverrideRequest": {
    "properties": {
      "agentWorkPlanOverrides": {
        "description": "The list of agent work plan overrides",
        "items": {
          "$ref": "#/definitions/AgentBidWorkPlanOverrideRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "agentWorkPlanOverrides"
    ],
    "type": "object"
  },
  "AgentsIntegrationsListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AgentIntegrationsResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AggregateMetricData": {
    "properties": {
      "metric": {
        "type": "string"
      },
      "qualifier": {
        "type": "string"
      },
      "stats": {
        "$ref": "#/definitions/StatisticalSummary"
      }
    },
    "type": "object"
  },
  "AggregateViewData": {
    "properties": {
      "name": {
        "type": "string"
      },
      "stats": {
        "$ref": "#/definitions/StatisticalSummary"
      }
    },
    "type": "object"
  },
  "AggregationRange": {
    "properties": {
      "gte": {
        "description": "Greater than or equal to",
        "type": "number"
      },
      "lt": {
        "description": "Less than",
        "type": "number"
      }
    },
    "type": "object"
  },
  "AggregationResult": {
    "properties": {
      "count": {
        "format": "int64",
        "type": "integer"
      },
      "dimension": {
        "description": "For termFrequency aggregations",
        "type": "string"
      },
      "metric": {
        "description": "For numericRange aggregations",
        "type": "string"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/AggregationResultEntry"
        },
        "type": "array"
      },
      "type": {
        "enum": [
          "termFrequency",
          "numericRange"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AggregationResultEntry": {
    "properties": {
      "count": {
        "format": "int64",
        "type": "integer"
      },
      "gte": {
        "description": "For numericRange aggregations",
        "type": "number"
      },
      "lt": {
        "description": "For numericRange aggregations",
        "type": "number"
      },
      "value": {
        "description": "For termFrequency aggregations",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AiAnswer": {
    "properties": {
      "answerId": {
        "description": "The unique identifier of the suggested AI answer.",
        "type": "string"
      },
      "explanation": {
        "description": "An explanation providing the reasoning behind the suggested answer.",
        "type": "string"
      },
      "failureType": {
        "description": "Describes the type of error associated with the AI answer.",
        "enum": [
          "LowConfidenceError",
          "ParsingError",
          "ServiceError",
          "LowHistoricalAccuracyError"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AiScoring": {
    "properties": {},
    "type": "object"
  },
  "AiScoringSetting": {
    "properties": {
      "enabled": {
        "description": "True if AI Scoring feature is configured.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "AiScoringSettings": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "questionGroupSettings": {
        "items": {
          "$ref": "#/definitions/QuestionGroupSettings"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AlertListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CommonAlert"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AlertNotification": {
    "properties": {
      "locale": {
        "description": "The locale whose language will be used when sending alerts.  Locale should be in theformat language_COUNTRY where language is always lower case and country is always upper case.",
        "type": "string"
      },
      "notificationTypes": {
        "description": "The notification types the user will receive.",
        "items": {
          "enum": [
            "Sms",
            "Device",
            "Email",
            "Push"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "recipient": {
        "description": "The entity to receive the notification.",
        "type": "string"
      }
    },
    "required": [
      "notificationTypes",
      "recipient"
    ],
    "type": "object"
  },
  "AlertRequest": {
    "properties": {
      "dateEnd": {
        "description": "The end date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStart": {
        "description": "The start date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "type": {
        "description": "The action being taken on the alert.",
        "enum": [
          "Mute",
          "Snooze",
          "Unread"
        ],
        "type": "string"
      },
      "unread": {
        "$ref": "#/definitions/UnreadFields",
        "description": "The fields need for an unread update requests"
      },
      "validRequest": {
        "type": "boolean"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "AlertRuleProperties": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the object.",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of rule being alerted.",
        "enum": [
          "ConversationMetrics",
          "UserPresence",
          "WorkforceManagement",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "AlertSummary": {
    "properties": {
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The id of the conversation that triggered the alert.  Only used for alerts based on instance-based conversation metrics."
      },
      "entities": {
        "description": "The entities who violated the rule condition over the duration of the alert.",
        "items": {
          "$ref": "#/definitions/AlertSummaryEntity"
        },
        "type": "array"
      },
      "entitiesAreTeamMembers": {
        "description": "Flag that indicated whether or not the alert is for a rule with a condition for all members of a team.",
        "type": "boolean"
      },
      "metricType": {
        "description": "The metric type that is monitored.",
        "enum": [
          "Interval",
          "Instance"
        ],
        "type": "string"
      }
    },
    "required": [
      "entities",
      "entitiesAreTeamMembers",
      "metricType"
    ],
    "type": "object"
  },
  "AlertSummaryEntity": {
    "properties": {
      "alerting": {
        "description": "Flag that indicated if the entity is current causing the alert to be triggered",
        "type": "boolean"
      },
      "entityType": {
        "description": "Specifies the type of entity being evaluated",
        "enum": [
          "User",
          "Group",
          "Queue",
          "Team",
          "TeamMembers"
        ],
        "type": "string"
      },
      "group": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Group id of the entity being monitored"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Queue id of the entity being monitored"
      },
      "team": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Team id of the entity being monitored"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "User id of the entity being monitored"
      }
    },
    "required": [
      "alerting",
      "entityType"
    ],
    "type": "object"
  },
  "AlertingUnreadStatus": {
    "properties": {
      "unread": {
        "description": "True is alert is unread, false if it has not been.",
        "type": "boolean"
      }
    },
    "required": [
      "unread"
    ],
    "type": "object"
  },
  "AllTimePoints": {
    "properties": {
      "allTimePoints": {
        "description": "All time point collected bt the user",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "dateEndWorkday": {
        "description": "Queried end workday for all time points to be collected. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "Queried user",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "Alteration": {
    "properties": {
      "end": {
        "description": "The end date of an alteration range as an ISO-8601 string",
        "example": "2023-12-21T16:30:25",
        "type": "string"
      },
      "start": {
        "description": "The start date of an alteration range as an ISO-8601 string",
        "example": "2023-12-21T16:30:25",
        "type": "string"
      },
      "type": {
        "description": "Range type (Exclusion: used to exclude a specific time within the recurrence. Inclusion: used to include a specific time within the recurrence which will execute in addition to the normal recurrence. If both an exclusion and inclusion are specified, the inclusion will take precedence over the exclusion.)",
        "enum": [
          "Exclusion",
          "Inclusion"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AlternativeShiftAgentScheduledShift": {
    "properties": {
      "activities": {
        "description": "A list of activities in this shift",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleActivity"
        },
        "type": "array"
      },
      "dayIndex": {
        "description": "The number of days since start of schedule",
        "format": "int32",
        "type": "integer"
      },
      "lengthMinutes": {
        "description": "The length of this shift in minutes",
        "format": "int32",
        "type": "integer"
      },
      "referenceKey": {
        "description": "A key generated for an offer to help facilitate alternative shift trading",
        "type": "string"
      },
      "startDate": {
        "description": "The start date of this shift in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "activities",
      "dayIndex",
      "lengthMinutes",
      "referenceKey",
      "startDate"
    ],
    "type": "object"
  },
  "AlternativeShiftAsyncResponse": {
    "properties": {
      "job": {
        "$ref": "#/definitions/AlternativeShiftJobReference",
        "description": "The job related to the async request"
      }
    },
    "required": [
      "job"
    ],
    "type": "object"
  },
  "AlternativeShiftBuSettingsResponse": {
    "properties": {
      "enabledGranularities": {
        "description": "The granularity at which alternative shifts is allowed. An empty list means Alternative Shifts is disabled",
        "items": {
          "enum": [
            "Daily"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this business unit's alternative shift settings"
      },
      "minMinutesBeforeStartTime": {
        "description": "The minimum number of minutes before the start of a shift that an alternative shift can be automatically approved",
        "format": "int32",
        "type": "integer"
      },
      "retainedActivityCategories": {
        "description": "Categories of activities that are required to remain at the same time slot for the alternative shifts offered. An empty list represents no retained activities",
        "items": {
          "enum": [
            "Break",
            "Meal",
            "Meeting",
            "OffQueueWork",
            "TimeOff",
            "Training",
            "Unavailable"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "enabledGranularities",
      "metadata",
      "minMinutesBeforeStartTime",
      "retainedActivityCategories"
    ],
    "type": "object"
  },
  "AlternativeShiftBulkUpdateTradesResponseTemplate": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AlternativeShiftTradeBulkUpdateTemplateItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AlternativeShiftJobReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the alternative shift job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of alternative shift asynchronous job",
        "enum": [
          "ListOffers",
          "SearchOffers",
          "ListUserTrades",
          "SearchTrades",
          "BulkUpdateTrades"
        ],
        "type": "string"
      }
    },
    "required": [
      "status",
      "type"
    ],
    "type": "object"
  },
  "AlternativeShiftJobResponse": {
    "properties": {
      "bulkUpdateTradesResults": {
        "$ref": "#/definitions/AlternativeShiftBulkUpdateTradesResponseTemplate",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'BulkUpdateTrades'"
      },
      "downloadUrl": {
        "description": "The URL where completed results are available, only set if status == 'Complete'",
        "type": "string"
      },
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Any error information, only set if the status == 'Error'"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the alternative shift job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of job",
        "enum": [
          "ListOffers",
          "SearchOffers",
          "ListUserTrades",
          "SearchTrades",
          "BulkUpdateTrades"
        ],
        "type": "string"
      },
      "viewOffersResults": {
        "$ref": "#/definitions/AlternativeShiftOffersViewResponseTemplate",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'ListOffers' or 'SearchOffers'"
      },
      "viewTradesResults": {
        "$ref": "#/definitions/AlternativeShiftTradesViewResponseTemplate",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'ListUserTrades' or 'SearchTrades'"
      }
    },
    "required": [
      "status",
      "type"
    ],
    "type": "object"
  },
  "AlternativeShiftNotification": {
    "properties": {
      "granularity": {
        "description": "The granularity of alternative shifts to be traded",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "initiatingShiftDate": {
        "description": "The start date and time of the initiating shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "initiatingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who initiated the alternative shift trade"
      },
      "newState": {
        "description": "The new state of the alternative shift trade, null if there was no change",
        "enum": [
          "Canceled",
          "Denied",
          "Expired",
          "Submitted",
          "Approved"
        ],
        "type": "string"
      },
      "receivingShiftDate": {
        "description": "The start date and time of the receiving alternative shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "receivingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user on the receiving this alternative shift trade"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The start date of the schedule with which this trade is associated. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "granularity",
      "initiatingShiftDate",
      "initiatingUser",
      "weekDate"
    ],
    "type": "object"
  },
  "AlternativeShiftOffersRequest": {
    "properties": {
      "queryWeekDate": {
        "description": "The start date for the week in this schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/AlternativeShiftScheduleLookup",
        "description": "The existing schedule being used to find alternative shift offers"
      }
    },
    "required": [
      "queryWeekDate",
      "schedule"
    ],
    "type": "object"
  },
  "AlternativeShiftOffersViewResponseTemplate": {
    "properties": {
      "agentId": {
        "description": "The unique identifier of the agent for whom the offer was made",
        "type": "string"
      },
      "alternativeDays": {
        "description": "The offered alternative shift days in this week at the time the offer is created",
        "items": {
          "$ref": "#/definitions/AlternativeShiftAgentScheduledShift"
        },
        "type": "array"
      },
      "businessUnitId": {
        "description": "The unique identifier of the business unit to which the user (agent) belongs at the time the offer is created",
        "type": "string"
      },
      "jobId": {
        "description": "The unique identifier of the async list job that created this file",
        "type": "string"
      },
      "managementUnitId": {
        "description": "The unique identifier of the management unit to which the user (agent) belongs at the time the offer is created",
        "type": "string"
      },
      "offerWeekDate": {
        "description": "The first date of the week for the schedule we are querying in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/AlternativeShiftScheduleLookup",
        "description": "The existing schedule information associated with the offer"
      },
      "shifts": {
        "description": "The shifts the agent is scheduled for at the time the offer is created",
        "items": {
          "$ref": "#/definitions/AlternativeShiftAgentScheduledShift"
        },
        "type": "array"
      }
    },
    "required": [
      "agentId",
      "alternativeDays",
      "businessUnitId",
      "jobId",
      "managementUnitId",
      "offerWeekDate",
      "schedule",
      "shifts"
    ],
    "type": "object"
  },
  "AlternativeShiftScheduleLookup": {
    "properties": {
      "id": {
        "description": "The unique identifier of the schedule",
        "type": "string"
      },
      "weekDate": {
        "description": "The start date for this schedule in yyyy-MM-dd. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "id",
      "weekDate"
    ],
    "type": "object"
  },
  "AlternativeShiftSearchOffersRequest": {
    "properties": {
      "acceptableIntervals": {
        "description": "The acceptable intervals in offers. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "items": {
          "description": "Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
          "type": "string"
        },
        "type": "array"
      },
      "initiatingShift": {
        "$ref": "#/definitions/InitiatingAlternativeShift",
        "description": "The shift a user puts up for alternative shift offers"
      },
      "queryWeekDate": {
        "description": "The start date for the week in this schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/AlternativeShiftScheduleLookup",
        "description": "The existing schedule being used to find alternative shift offers"
      }
    },
    "required": [
      "initiatingShift",
      "queryWeekDate",
      "schedule"
    ],
    "type": "object"
  },
  "AlternativeShiftTradeBulkUpdateTemplateItem": {
    "properties": {
      "adminDateReviewed": {
        "description": "The timestamp of when the trade request was manually reviewed by an admin in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "adminReviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The admin who manually reviewed this alternative shift trade after system denial"
      },
      "failureReason": {
        "description": "The reason the update failed, if applicable",
        "enum": [
          "TransitionNotAllowed",
          "NotAuthorized"
        ],
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this alternative shift trade"
      },
      "state": {
        "description": "The current state of this alternative shift trade request",
        "enum": [
          "Canceled",
          "Denied",
          "Expired",
          "Submitted",
          "Approved"
        ],
        "type": "string"
      },
      "tradeId": {
        "description": "The ID of this alternative shift trade",
        "type": "string"
      }
    },
    "required": [
      "metadata",
      "state",
      "tradeId"
    ],
    "type": "object"
  },
  "AlternativeShiftTradeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AlternativeShiftTradeResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AlternativeShiftTradeResponse": {
    "properties": {
      "adminDateReviewed": {
        "description": "The timestamp of when the trade request was reviewed by an admin in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "adminReviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The admin who reviewed this alternative shift trade after system denial"
      },
      "existingShifts": {
        "description": "The existing shifts from the offer, may be empty",
        "items": {
          "$ref": "#/definitions/AlternativeShiftAgentScheduledShift"
        },
        "type": "array"
      },
      "expirationDate": {
        "description": "The date when the trade will expire in ISO-8601 format. The trade cannot be approved after expiration",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit of this alternative shift trade request"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this alternative shift trade"
      },
      "offeredShifts": {
        "description": "The offered shifts from the offer, may be empty",
        "items": {
          "$ref": "#/definitions/AlternativeShiftAgentScheduledShift"
        },
        "type": "array"
      },
      "processingStatus": {
        "description": "The processing status of this alternative shift trade",
        "enum": [
          "Error",
          "WaitingForScheduleUpdate",
          "ScheduleUpdating",
          "ScheduleUpdated",
          "WaitingForReview",
          "Reviewing"
        ],
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/AlternativeShiftScheduleLookup",
        "description": "The existing schedule information associated with the trade"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shiftOfferJobId": {
        "description": "The job ID of the alternative shift offer listing, from which the trade was chosen",
        "type": "string"
      },
      "state": {
        "description": "The state of this alternative shift trade",
        "enum": [
          "Canceled",
          "Denied",
          "Expired",
          "Submitted",
          "Approved"
        ],
        "type": "string"
      },
      "systemDateReviewed": {
        "description": "The timestamp of when the trade request was reviewed by the system in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who submitted the trade request"
      },
      "violations": {
        "description": "A list of trade match violations",
        "items": {
          "enum": [
            "ServiceGoalsNotMet"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "weekDate": {
        "description": "The start week date of the associated schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "existingShifts",
      "managementUnit",
      "metadata",
      "offeredShifts",
      "schedule",
      "shiftOfferJobId",
      "state",
      "user",
      "violations"
    ],
    "type": "object"
  },
  "AlternativeShiftTradesViewResponseTemplate": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AlternativeShiftTradeResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AmazonLexRequest": {
    "properties": {
      "requestAttributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "AttributeName/AttributeValue pairs of User Defined Request Attributes to be sent to the amazon bot See - https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs",
        "type": "object"
      },
      "sessionAttributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "AttributeName/AttributeValue pairs of Session Attributes to be sent to the amazon bot. See - https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs",
        "type": "object"
      }
    },
    "type": "object"
  },
  "AnalyticsAgentGroup": {
    "properties": {
      "agentGroupId": {
        "description": "Conditional group routing agent group identifier",
        "type": "string"
      },
      "agentGroupType": {
        "description": "Conditional group routing agent group type",
        "enum": [
          "Group",
          "SkillGroup",
          "Team"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsConversation": {
    "properties": {
      "conferenceStart": {
        "description": "The start time of a conference call. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationEnd": {
        "description": "The end time of a conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationId": {
        "description": "Unique identifier for the conversation",
        "type": "string"
      },
      "conversationInitiator": {
        "description": "Indicates the participant purpose of the participant initiating a message conversation",
        "enum": [
          "acd",
          "agent",
          "api",
          "botflow",
          "campaign",
          "customer",
          "dialer",
          "external",
          "fax",
          "group",
          "inbound",
          "ivr",
          "manual",
          "outbound",
          "station",
          "user",
          "voicemail",
          "voicesurveyflow",
          "workflow"
        ],
        "type": "string"
      },
      "conversationStart": {
        "description": "The start time of a conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerParticipation": {
        "description": "Indicates a messaging conversation in which the customer participated by sending at least one message",
        "type": "boolean"
      },
      "divisionIds": {
        "description": "Identifier(s) of division(s) associated with a conversation",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "evaluations": {
        "description": "Evaluations associated with this conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsEvaluation"
        },
        "type": "array"
      },
      "externalTag": {
        "description": "External tag for the conversation",
        "type": "string"
      },
      "knowledgeBaseIds": {
        "description": "The unique identifier(s) of the knowledge base(s) used",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "mediaStatsMinConversationMos": {
        "description": "The lowest estimated average MOS among all the audio streams belonging to this conversation",
        "format": "double",
        "type": "number"
      },
      "mediaStatsMinConversationRFactor": {
        "description": "The lowest R-factor value among all of the audio streams belonging to this conversation",
        "format": "double",
        "type": "number"
      },
      "originatingDirection": {
        "description": "The original direction of the conversation",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "participants": {
        "description": "Participants in the conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsParticipant"
        },
        "type": "array"
      },
      "resolutions": {
        "description": "Resolutions associated with this conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsResolution"
        },
        "type": "array"
      },
      "selfServed": {
        "description": "Indicates whether all flow sessions were self serviced",
        "type": "boolean"
      },
      "surveys": {
        "description": "Surveys associated with this conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsSurvey"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsConversationAsyncQueryResponse": {
    "properties": {
      "conversations": {
        "items": {
          "$ref": "#/definitions/AnalyticsConversation"
        },
        "type": "array"
      },
      "cursor": {
        "description": "Optional cursor to indicate where to resume the results",
        "type": "string"
      },
      "dataAvailabilityDate": {
        "description": "Data available up to at least this datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsConversationQueryResponse": {
    "properties": {
      "aggregations": {
        "items": {
          "$ref": "#/definitions/AggregationResult"
        },
        "type": "array"
      },
      "conversations": {
        "items": {
          "$ref": "#/definitions/AnalyticsConversationWithoutAttributes"
        },
        "type": "array"
      },
      "totalHits": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AnalyticsConversationSegment": {
    "properties": {
      "audioMuted": {
        "description": "Flag indicating if audio is muted or not (true/false)",
        "type": "boolean"
      },
      "conference": {
        "description": "Indicates whether the segment was a conference",
        "type": "boolean"
      },
      "destinationConversationId": {
        "description": "The unique identifier of a new conversation when a conversation is ended for a conference",
        "type": "string"
      },
      "destinationSessionId": {
        "description": "The unique identifier of a new session when a session is ended for a conference",
        "type": "string"
      },
      "disconnectType": {
        "description": "The session disconnect type",
        "enum": [
          "client",
          "conferenceTransfer",
          "consultTransfer",
          "dndEndpoint",
          "dndTransfer",
          "endpoint",
          "error",
          "forwardTransfer",
          "noAnswerTransfer",
          "notAvailableTransfer",
          "other",
          "peer",
          "spam",
          "system",
          "timeout",
          "transfer",
          "transportFailure",
          "uncallable"
        ],
        "type": "string"
      },
      "errorCode": {
        "description": "A code corresponding to the error that occurred",
        "type": "string"
      },
      "groupId": {
        "description": "Unique identifier for a PureCloud group",
        "type": "string"
      },
      "properties": {
        "description": "Additional segment properties",
        "items": {
          "$ref": "#/definitions/AnalyticsProperty"
        },
        "type": "array"
      },
      "q850ResponseCodes": {
        "description": "Q.850 response code(s)",
        "items": {
          "format": "int64",
          "type": "integer"
        },
        "type": "array"
      },
      "queueId": {
        "description": "Queue identifier",
        "type": "string"
      },
      "requestedLanguageId": {
        "description": "Unique identifier for the language requested for an interaction",
        "type": "string"
      },
      "requestedRoutingSkillIds": {
        "description": "Unique identifier(s) for skill(s) requested for an interaction",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requestedRoutingUserIds": {
        "description": "Unique identifier(s) for agent(s) requested for an interaction",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "scoredAgents": {
        "description": "Scored agents",
        "items": {
          "$ref": "#/definitions/AnalyticsScoredAgent"
        },
        "type": "array"
      },
      "segmentEnd": {
        "description": "The end time of a segment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "segmentStart": {
        "description": "The start time of a segment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "segmentType": {
        "description": "The activity that takes place in the segment, such as hold or interact",
        "enum": [
          "alert",
          "barging",
          "callback",
          "coaching",
          "contacting",
          "converting",
          "delay",
          "dialing",
          "hold",
          "interact",
          "ivr",
          "monitoring",
          "parked",
          "scheduled",
          "sharing",
          "system",
          "transmitting",
          "unknown",
          "uploading",
          "voicemail",
          "wrapup"
        ],
        "type": "string"
      },
      "sipResponseCodes": {
        "description": "SIP response code(s)",
        "items": {
          "format": "int64",
          "type": "integer"
        },
        "type": "array"
      },
      "sourceConversationId": {
        "description": "The unique identifier of the previous conversation when a new conversation is created for a conference",
        "type": "string"
      },
      "sourceSessionId": {
        "description": "The unique identifier of the previous session when a new session is created for a conference",
        "type": "string"
      },
      "subject": {
        "description": "The subject for the initial email that started this conversation",
        "type": "string"
      },
      "videoMuted": {
        "description": "Flag indicating if video is muted/paused or not (true/false)",
        "type": "boolean"
      },
      "wrapUpCode": {
        "description": "Wrap up code",
        "type": "string"
      },
      "wrapUpNote": {
        "description": "Note entered by an agent during after-call work",
        "type": "string"
      },
      "wrapUpTags": {
        "description": "Tag(s) assigned during after-call work",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsConversationWithoutAttributes": {
    "properties": {
      "conferenceStart": {
        "description": "The start time of a conference call. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationEnd": {
        "description": "The end time of a conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationId": {
        "description": "Unique identifier for the conversation",
        "type": "string"
      },
      "conversationInitiator": {
        "description": "Indicates the participant purpose of the participant initiating a message conversation",
        "enum": [
          "acd",
          "agent",
          "api",
          "botflow",
          "campaign",
          "customer",
          "dialer",
          "external",
          "fax",
          "group",
          "inbound",
          "ivr",
          "manual",
          "outbound",
          "station",
          "user",
          "voicemail",
          "voicesurveyflow",
          "workflow"
        ],
        "type": "string"
      },
      "conversationStart": {
        "description": "The start time of a conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerParticipation": {
        "description": "Indicates a messaging conversation in which the customer participated by sending at least one message",
        "type": "boolean"
      },
      "divisionIds": {
        "description": "Identifier(s) of division(s) associated with a conversation",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "evaluations": {
        "description": "Evaluations associated with this conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsEvaluation"
        },
        "type": "array"
      },
      "externalTag": {
        "description": "External tag for the conversation",
        "type": "string"
      },
      "knowledgeBaseIds": {
        "description": "The unique identifier(s) of the knowledge base(s) used",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "mediaStatsMinConversationMos": {
        "description": "The lowest estimated average MOS among all the audio streams belonging to this conversation",
        "format": "double",
        "type": "number"
      },
      "mediaStatsMinConversationRFactor": {
        "description": "The lowest R-factor value among all of the audio streams belonging to this conversation",
        "format": "double",
        "type": "number"
      },
      "originatingDirection": {
        "description": "The original direction of the conversation",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "participants": {
        "description": "Participants in the conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsParticipantWithoutAttributes"
        },
        "type": "array"
      },
      "resolutions": {
        "description": "Resolutions associated with this conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsResolution"
        },
        "type": "array"
      },
      "selfServed": {
        "description": "Indicates whether all flow sessions were self serviced",
        "type": "boolean"
      },
      "surveys": {
        "description": "Surveys associated with this conversation",
        "items": {
          "$ref": "#/definitions/AnalyticsSurvey"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsConversationWithoutAttributesMultiGetResponse": {
    "properties": {
      "conversations": {
        "items": {
          "$ref": "#/definitions/AnalyticsConversationWithoutAttributes"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsDataRetentionResponse": {
    "properties": {
      "dateCreated": {
        "description": "Date and time when the analytics data retention was set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date and time when the analytics data retention was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "retentionDays": {
        "description": "Analytics data retention period in days for the organization.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AnalyticsEvaluation": {
    "properties": {
      "assigneeApplicable": {
        "description": "Indicates whether an assignee is applicable for the evaluation. Set to false when assignee is not applicable",
        "type": "boolean"
      },
      "assigneeId": {
        "description": "UserId of the assignee",
        "type": "string"
      },
      "calibrationId": {
        "description": "The calibration ID used for the purpose of training evaluators",
        "type": "string"
      },
      "contextId": {
        "description": "A unique identifier for an evaluation form, regardless of version",
        "type": "string"
      },
      "deleted": {
        "description": "Whether the evaluation has been deleted",
        "type": "boolean"
      },
      "evaluationId": {
        "description": "Unique identifier for the evaluation",
        "type": "string"
      },
      "evaluationStatus": {
        "description": "Status of evaluation",
        "enum": [
          "Finished",
          "InProgress",
          "InReview",
          "Pending",
          "Retracted"
        ],
        "type": "string"
      },
      "evaluatorId": {
        "description": "A unique identifier of the user who evaluated the interaction",
        "type": "string"
      },
      "eventTime": {
        "description": "Specifies when an evaluation occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "formId": {
        "description": "ID of the evaluation form used",
        "type": "string"
      },
      "formName": {
        "description": "Name of the evaluation form used",
        "type": "string"
      },
      "oTotalCriticalScore": {
        "format": "int64",
        "type": "integer"
      },
      "oTotalScore": {
        "format": "int64",
        "type": "integer"
      },
      "queueId": {
        "description": "The ID of the associated queue",
        "type": "string"
      },
      "released": {
        "description": "Whether the evaluation has been released",
        "type": "boolean"
      },
      "rescored": {
        "description": "Whether the evaluation has been rescored at least once",
        "type": "boolean"
      },
      "userId": {
        "description": "ID of the agent the evaluation was performed against",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsFlow": {
    "properties": {
      "endingLanguage": {
        "description": "Flow ending language, e.g. en-us",
        "type": "string"
      },
      "entryReason": {
        "description": "The particular entry reason for this flow, e.g. an address, userId, or flowId",
        "type": "string"
      },
      "entryType": {
        "description": "The entry type for this flow, e.g. dnis, dialer, agent, flow, or direct",
        "enum": [
          "agent",
          "direct",
          "dnis",
          "flow",
          "outbound"
        ],
        "type": "string"
      },
      "exitReason": {
        "description": "The exit reason for this flow, e.g. DISCONNECT",
        "type": "string"
      },
      "flowId": {
        "description": "The unique identifier of this flow",
        "type": "string"
      },
      "flowName": {
        "description": "The name of this flow at the time of flow execution",
        "type": "string"
      },
      "flowType": {
        "description": "The type of this flow",
        "enum": [
          "BOT",
          "COMMONMODULE",
          "DIGITALBOT",
          "INBOUNDCALL",
          "INBOUNDCHAT",
          "INBOUNDEMAIL",
          "INBOUNDSHORTMESSAGE",
          "INQUEUECALL",
          "INQUEUEEMAIL",
          "INQUEUESHORTMESSAGE",
          "OUTBOUNDCALL",
          "SECURECALL",
          "SPEECH",
          "SURVEYINVITE",
          "VOICE",
          "VOICEMAIL",
          "VOICESURVEY",
          "WORKFLOW",
          "WORKITEM"
        ],
        "type": "string"
      },
      "flowVersion": {
        "description": "The version of this flow",
        "type": "string"
      },
      "issuedCallback": {
        "description": "Flag indicating whether the flow issued a callback",
        "type": "boolean"
      },
      "outcomes": {
        "description": "Flow outcomes",
        "items": {
          "$ref": "#/definitions/AnalyticsFlowOutcome"
        },
        "type": "array"
      },
      "recognitionFailureReason": {
        "description": "The recognition failure reason causing to exit/disconnect",
        "type": "string"
      },
      "startingLanguage": {
        "description": "Flow starting language, e.g. en-us",
        "type": "string"
      },
      "transferTargetAddress": {
        "description": "The address of a flow transfer target, e.g. a phone number, an email address, or a queueId",
        "type": "string"
      },
      "transferTargetName": {
        "description": "The name of a flow transfer target",
        "type": "string"
      },
      "transferType": {
        "description": "The type of transfer for flows that ended with a transfer",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsFlowOutcome": {
    "properties": {
      "flowOutcome": {
        "description": "Combination of unique flow outcome identifier and its value separated by colon",
        "type": "string"
      },
      "flowOutcomeEndTimestamp": {
        "description": "The outcome ending timestamp in ISO 8601 format. This may be null if the outcome did not succeed.",
        "format": "date-time",
        "type": "string"
      },
      "flowOutcomeId": {
        "description": "Unique identifier of a flow outcome",
        "type": "string"
      },
      "flowOutcomeStartTimestamp": {
        "description": "The outcome starting timestamp in ISO 8601 format",
        "format": "date-time",
        "type": "string"
      },
      "flowOutcomeValue": {
        "description": "Flow outcome value, e.g. SUCCESS",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsMediaEndpointStat": {
    "properties": {
      "codecs": {
        "description": "The MIME type(s) of the audio encodings used by the audio streams belonging to this endpoint",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "discardedPackets": {
        "description": "The total number of packets received too late or too early, jitter queue overrun or underrun, for all audio streams belonging to this endpoint",
        "format": "int64",
        "type": "integer"
      },
      "duplicatePackets": {
        "description": "The total number of packets received with the same sequence number as another one recently received (window of 64 packets), for all audio streams belonging to this endpoint",
        "format": "int64",
        "type": "integer"
      },
      "eventTime": {
        "description": "Specifies when an event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "invalidPackets": {
        "description": "The total number of malformed or not RTP packets, unknown payload type, or discarded probation packets for all audio streams belonging to this endpoint",
        "format": "int64",
        "type": "integer"
      },
      "maxLatencyMs": {
        "description": "The maximum latency experienced by any audio stream belonging to this endpoint, in milliseconds",
        "format": "int64",
        "type": "integer"
      },
      "minMos": {
        "description": "The lowest estimated average MOS among all the audio streams belonging to this endpoint",
        "format": "double",
        "type": "number"
      },
      "minRFactor": {
        "description": "The lowest R-factor value among all of the audio streams belonging to this endpoint",
        "format": "double",
        "type": "number"
      },
      "overrunPackets": {
        "description": "The total number of packets for which there was no room in the jitter queue when it was received, for all audio streams belonging to this endpoint (also counted in discarded)",
        "format": "int64",
        "type": "integer"
      },
      "receivedPackets": {
        "description": "The total number of packets received for all audio streams belonging to this endpoint (includes invalid, duplicate, and discarded packets)",
        "format": "int64",
        "type": "integer"
      },
      "underrunPackets": {
        "description": "The total number of packets received after their timestamp/seqnum has been played out, for all audio streams belonging to this endpoint (also counted in discarded)",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AnalyticsParticipant": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "List of attributes associated to this participant",
        "type": "object"
      },
      "externalContactId": {
        "description": "External contact identifier",
        "type": "string"
      },
      "externalOrganizationId": {
        "description": "External organization identifier",
        "type": "string"
      },
      "flaggedReason": {
        "description": "Reason for which participant flagged conversation",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "participantId": {
        "description": "Unique identifier for the participant",
        "type": "string"
      },
      "participantName": {
        "description": "A human readable name identifying the participant",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose",
        "enum": [
          "acd",
          "agent",
          "api",
          "botflow",
          "campaign",
          "customer",
          "dialer",
          "external",
          "fax",
          "group",
          "inbound",
          "ivr",
          "manual",
          "outbound",
          "station",
          "user",
          "voicemail",
          "voicesurveyflow",
          "workflow"
        ],
        "type": "string"
      },
      "screenRecording": {
        "description": "Flag determining if a screen recording was started or not",
        "type": "boolean"
      },
      "sessions": {
        "description": "List of sessions associated to this participant",
        "items": {
          "$ref": "#/definitions/AnalyticsSession"
        },
        "type": "array"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsParticipantWithoutAttributes": {
    "properties": {
      "externalContactId": {
        "description": "External contact identifier",
        "type": "string"
      },
      "externalOrganizationId": {
        "description": "External organization identifier",
        "type": "string"
      },
      "flaggedReason": {
        "description": "Reason for which participant flagged conversation",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "participantId": {
        "description": "Unique identifier for the participant",
        "type": "string"
      },
      "participantName": {
        "description": "A human readable name identifying the participant",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose",
        "enum": [
          "acd",
          "agent",
          "api",
          "botflow",
          "campaign",
          "customer",
          "dialer",
          "external",
          "fax",
          "group",
          "inbound",
          "ivr",
          "manual",
          "outbound",
          "station",
          "user",
          "voicemail",
          "voicesurveyflow",
          "workflow"
        ],
        "type": "string"
      },
      "screenRecording": {
        "description": "Flag determining if a screen recording was started or not",
        "type": "boolean"
      },
      "sessions": {
        "description": "List of sessions associated to this participant",
        "items": {
          "$ref": "#/definitions/AnalyticsSession"
        },
        "type": "array"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsProperty": {
    "properties": {
      "property": {
        "description": "User-defined rather than intrinsic system-observed values. These are tagged onto segments by other components within PureCloud or by API users directly.  This is the name of the user-defined property.",
        "type": "string"
      },
      "propertyType": {
        "description": "Indicates what the data type is (e.g. integer vs string) and therefore how to evaluate what would constitute a match",
        "enum": [
          "bool",
          "integer",
          "real",
          "date",
          "string",
          "uuid"
        ],
        "type": "string"
      },
      "value": {
        "description": "What property value to match against",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsProposedAgent": {
    "properties": {
      "agentRank": {
        "description": "Proposed agent rank for this conversation from predictive routing (lower is better)",
        "format": "int32",
        "type": "integer"
      },
      "proposedAgentId": {
        "description": "Unique identifier for the agent that was proposed by predictive routing",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsQueryAggregation": {
    "properties": {
      "dimension": {
        "description": "For use with termFrequency aggregations",
        "type": "string"
      },
      "metric": {
        "description": "For use with numericRange aggregations",
        "type": "string"
      },
      "ranges": {
        "description": "For use with numericRange aggregations",
        "items": {
          "$ref": "#/definitions/AggregationRange"
        },
        "type": "array"
      },
      "size": {
        "description": "For use with termFrequency aggregations",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "termFrequency",
          "numericRange"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsReportingSettings": {
    "properties": {
      "myInteractionsPiiMaskingEnabled": {
        "description": "Indicates whether PII data is masked in My Interaction export and the Analytics/Reporting UI",
        "type": "boolean"
      },
      "piiMaskingEnabled": {
        "description": "Indication of whether or not personal data is masked in data export and the Analytics/Reporting UI",
        "type": "boolean"
      },
      "queueAgentAccessObfuscation": {
        "description": "Indication of whether or not to obfuscate export data from the Queue Agent Details view based on User ACL",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "AnalyticsResolution": {
    "properties": {
      "eventTime": {
        "description": "Specifies when an event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "nNextContactAvoided": {
        "format": "int64",
        "type": "integer"
      },
      "queueId": {
        "description": "The ID of the last queue on which the conversation was handled.",
        "type": "string"
      },
      "userId": {
        "description": "The ID of the last user who handled the conversation.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsRoutingStatusRecord": {
    "properties": {
      "endTime": {
        "description": "The end time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "routingStatus": {
        "description": "The user's ACD routing status",
        "enum": [
          "OFF_QUEUE",
          "IDLE",
          "INTERACTING",
          "NOT_RESPONDING",
          "COMMUNICATING"
        ],
        "type": "string"
      },
      "startTime": {
        "description": "The start time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsScoredAgent": {
    "properties": {
      "agentScore": {
        "description": "Assigned agent score for this conversation (0 - 100, higher being better)",
        "format": "int32",
        "type": "integer"
      },
      "scoredAgentId": {
        "description": "Unique identifier for the agent that was scored for this conversation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsSession": {
    "properties": {
      "activeSkillIds": {
        "description": "ID(s) of Skill(s) that are active on the conversation",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "acwSkipped": {
        "description": "Marker for an agent that skipped after call work",
        "type": "boolean"
      },
      "addressFrom": {
        "description": "The address that initiated an action",
        "type": "string"
      },
      "addressOther": {
        "description": "The email address for the participant on the other side of the email conversation",
        "type": "string"
      },
      "addressSelf": {
        "description": "The email address for the participant on this side of the email conversation",
        "type": "string"
      },
      "addressTo": {
        "description": "The address receiving an action",
        "type": "string"
      },
      "agentAssistantId": {
        "description": "Unique identifier of the active virtual agent assistant",
        "type": "string"
      },
      "agentBullseyeRing": {
        "description": "Bullseye ring of the targeted agent",
        "format": "int32",
        "type": "integer"
      },
      "agentGroups": {
        "description": "Conditional group routing agent groups",
        "items": {
          "$ref": "#/definitions/AnalyticsAgentGroup"
        },
        "type": "array"
      },
      "agentOwned": {
        "description": "Flag indicating an agent-owned callback",
        "type": "boolean"
      },
      "ani": {
        "description": "Automatic Number Identification (caller's number)",
        "type": "string"
      },
      "assignerId": {
        "description": "ID of the user that manually assigned a conversation",
        "type": "string"
      },
      "authenticated": {
        "description": "Flag that indicates that the identity of the customer has been asserted as verified by the provider.",
        "type": "boolean"
      },
      "bargedParticipantId": {
        "description": "The participantId being barged in on (if someone (e.g. an agent) is being barged in on, this would correspond to one of the other participantIds present in the conversation)",
        "type": "string"
      },
      "bcc": {
        "description": "Blind carbon copy email address(es)",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackNumbers": {
        "description": "Callback phone number(s)",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackScheduledTime": {
        "description": "Scheduled callback date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "callbackUserName": {
        "description": "The name of the user requesting a call back",
        "type": "string"
      },
      "cc": {
        "description": "Carbon copy email address(es)",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "cleared": {
        "description": "Flag that indicates that the conversation has been cleared by the customer",
        "type": "boolean"
      },
      "coachedParticipantId": {
        "description": "The participantId being coached (if someone (e.g. an agent) is being coached, this would correspond to one of the other participantIds present in the conversation)",
        "type": "string"
      },
      "cobrowseRole": {
        "description": "Describes side of the cobrowse (sharer or viewer)",
        "type": "string"
      },
      "cobrowseRoomId": {
        "description": "A unique identifier for a PureCloud cobrowse room",
        "type": "string"
      },
      "deliveryStatus": {
        "description": "The email or SMS delivery status",
        "enum": [
          "DeliveryFailed",
          "DeliverySuccess",
          "Failed",
          "Published",
          "Queued",
          "Read",
          "Received",
          "Sent"
        ],
        "type": "string"
      },
      "deliveryStatusChangeDate": {
        "description": "Date and time of the most recent delivery status change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "destinationAddresses": {
        "description": "Destination address(es) of transfers or consults",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "detectedSpeechEnd": {
        "description": "Absolute time when the speech ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "detectedSpeechStart": {
        "description": "Absolute time when the speech started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the communication",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "dispositionAnalyzer": {
        "description": "(Dialer) Analyzer (for example speech.person)",
        "type": "string"
      },
      "dispositionName": {
        "description": "(Dialer) Result of the analysis (for example disposition.classification.callable.machine)",
        "type": "string"
      },
      "dnis": {
        "description": "Dialed number identification service (number dialed by the calling party)",
        "type": "string"
      },
      "edgeId": {
        "description": "Unique identifier of the edge device",
        "type": "string"
      },
      "eligibleAgentCounts": {
        "description": "Number of eligible agents for each predictive routing attempt",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "extendedDeliveryStatus": {
        "description": "Extended delivery status",
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/AnalyticsFlow",
        "description": "IVR flow execution associated with this session"
      },
      "flowInType": {
        "description": "Type of flow in that occurred when entering ACD.",
        "type": "string"
      },
      "flowOutType": {
        "description": "Type of flow out that occurred when emitting tFlowOut.",
        "type": "string"
      },
      "journeyActionId": {
        "description": "Identifier of the journey action.",
        "type": "string"
      },
      "journeyActionMapId": {
        "description": "Identifier of the journey action map that triggered the action.",
        "type": "string"
      },
      "journeyActionMapVersion": {
        "description": "Version of the journey action map that triggered the action.",
        "format": "int32",
        "type": "integer"
      },
      "journeyCustomerId": {
        "description": "Primary identifier of the journey customer in the source where the activities originate from.",
        "type": "string"
      },
      "journeyCustomerIdType": {
        "description": "Type of primary identifier of the journey customer (e.g. cookie).",
        "type": "string"
      },
      "journeyCustomerSessionId": {
        "description": "Unique identifier of the journey session.",
        "type": "string"
      },
      "journeyCustomerSessionIdType": {
        "description": "Type or category of journey sessions (e.g. web, ticket, delivery, atm).",
        "type": "string"
      },
      "mediaBridgeId": {
        "description": "Media bridge ID for the conference session consistent across all participants",
        "type": "string"
      },
      "mediaCount": {
        "description": "Count of any media (images, files, etc) included in this session",
        "format": "int32",
        "type": "integer"
      },
      "mediaEndpointStats": {
        "description": "MediaEndpointStats associated with this session",
        "items": {
          "$ref": "#/definitions/AnalyticsMediaEndpointStat"
        },
        "type": "array"
      },
      "mediaType": {
        "description": "The session media type",
        "enum": [
          "callback",
          "chat",
          "cobrowse",
          "email",
          "message",
          "screenshare",
          "unknown",
          "video",
          "voice"
        ],
        "type": "string"
      },
      "messageType": {
        "description": "Message type for messaging services. E.g.: sms, facebook, twitter, line",
        "type": "string"
      },
      "metrics": {
        "description": "List of metrics for this session",
        "items": {
          "$ref": "#/definitions/AnalyticsSessionMetric"
        },
        "type": "array"
      },
      "monitoredParticipantId": {
        "description": "The participantId being monitored (if someone (e.g. an agent) is being monitored, this would correspond to one of the other participantIds present in the conversation)",
        "type": "string"
      },
      "outboundCampaignId": {
        "description": "(Dialer) Unique identifier of the outbound campaign",
        "type": "string"
      },
      "outboundContactId": {
        "description": "(Dialer) Unique identifier of the contact",
        "type": "string"
      },
      "outboundContactListId": {
        "description": "(Dialer) Unique identifier of the contact list that this contact belongs to",
        "type": "string"
      },
      "peerId": {
        "description": "This identifies pairs of related sessions on a conversation. E.g. an external session’s peerId will be the session that the call originally connected to, e.g. if an IVR was dialed, the IVR session, which will also have the external session’s ID as its peer. After that point, any transfers of that session to other internal components (acd, agent, etc.) will all spawn new sessions whose peerIds point back to that original external session.",
        "type": "string"
      },
      "proposedAgents": {
        "description": "Proposed agents",
        "items": {
          "$ref": "#/definitions/AnalyticsProposedAgent"
        },
        "type": "array"
      },
      "protocolCallId": {
        "description": "The original voice protocol call ID, e.g. a SIP call ID",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "recording": {
        "description": "Flag determining if an audio recording was started or not",
        "type": "boolean"
      },
      "remote": {
        "description": "Name, phone number, or email address of the remote party.",
        "type": "string"
      },
      "remoteNameDisplayable": {
        "description": "Unique identifier for the remote party",
        "type": "string"
      },
      "removedSkillIds": {
        "description": "ID(s) of Skill(s) that have been removed by bullseye routing",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requestedRoutings": {
        "description": "Routing type(s) for requested/attempted routing methods.",
        "items": {
          "enum": [
            "Bullseye",
            "Conditional",
            "Direct",
            "Last",
            "Manual",
            "Predictive",
            "Preferred",
            "Standard",
            "Vip"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "roomId": {
        "description": "Unique identifier for the room",
        "type": "string"
      },
      "routingRing": {
        "description": "Routing ring for bullseye or preferred agent routing",
        "format": "int32",
        "type": "integer"
      },
      "routingRule": {
        "description": "Routing rule for preferred, conditional and predictive routing type",
        "type": "string"
      },
      "routingRuleType": {
        "description": "Routing rule type",
        "enum": [
          "Bullseye",
          "Conditional",
          "Predictive",
          "Preferred"
        ],
        "type": "string"
      },
      "screenShareAddressSelf": {
        "description": "Direct ScreenShare address",
        "type": "string"
      },
      "screenShareRoomId": {
        "description": "A unique identifier for a PureCloud ScreenShare room",
        "type": "string"
      },
      "scriptId": {
        "description": "A unique identifier for a script",
        "type": "string"
      },
      "segments": {
        "description": "List of segments for this session",
        "items": {
          "$ref": "#/definitions/AnalyticsConversationSegment"
        },
        "type": "array"
      },
      "selectedAgentId": {
        "description": "Selected agent ID",
        "type": "string"
      },
      "selectedAgentRank": {
        "description": "Selected agent GPR rank",
        "format": "int32",
        "type": "integer"
      },
      "sessionDnis": {
        "description": "Dialed number for the current session; this can be different from dnis, e.g. if the call was transferred",
        "type": "string"
      },
      "sessionId": {
        "description": "The unique identifier of this session",
        "type": "string"
      },
      "sharingScreen": {
        "description": "Flag determining if screenShare is started or not (true/false)",
        "type": "boolean"
      },
      "skipEnabled": {
        "description": "(Dialer) Whether the agent can skip the dialer contact",
        "type": "boolean"
      },
      "timeoutSeconds": {
        "description": "The number of seconds before PureCloud begins the call for a call back (0 disables automatic calling)",
        "format": "int32",
        "type": "integer"
      },
      "usedRouting": {
        "description": "Complete routing method",
        "enum": [
          "Bullseye",
          "Conditional",
          "Direct",
          "Last",
          "Manual",
          "Predictive",
          "Preferred",
          "Standard",
          "Vip"
        ],
        "type": "string"
      },
      "videoAddressSelf": {
        "description": "Direct Video address",
        "type": "string"
      },
      "videoRoomId": {
        "description": "A unique identifier for a PureCloud video room",
        "type": "string"
      },
      "waitingInteractionCounts": {
        "description": "Number of waiting interactions for each predictive routing attempt",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsSessionMetric": {
    "properties": {
      "emitDate": {
        "description": "Metric emission date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "Unique name of this metric",
        "type": "string"
      },
      "value": {
        "description": "The metric value",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AnalyticsSurvey": {
    "properties": {
      "eventTime": {
        "description": "Specifies when an event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "oSurveyTotalScore": {
        "format": "int64",
        "type": "integer"
      },
      "queueId": {
        "description": "The ID of the associated queue",
        "type": "string"
      },
      "surveyCompletedDate": {
        "description": "Completion datetime of the survey in ISO 8601 format",
        "format": "date-time",
        "type": "string"
      },
      "surveyFormContextId": {
        "description": "Unique identifier for the survey form, regardless of version",
        "type": "string"
      },
      "surveyFormId": {
        "description": "ID of the survey form used",
        "type": "string"
      },
      "surveyFormName": {
        "description": "Name of the survey form used",
        "type": "string"
      },
      "surveyId": {
        "description": "ID of the survey",
        "type": "string"
      },
      "surveyPartialResponse": {
        "description": "Whether the survey was completed with any required questions unanswered.",
        "type": "boolean"
      },
      "surveyPromoterScore": {
        "description": "Score of the survey used with NPS",
        "format": "int32",
        "type": "integer"
      },
      "surveyStatus": {
        "description": "The status of the survey",
        "type": "string"
      },
      "surveyType": {
        "description": "The type of the survey",
        "enum": [
          "Web",
          "Voice"
        ],
        "type": "string"
      },
      "userId": {
        "description": "ID of the agent the survey was performed against",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsUserDetail": {
    "properties": {
      "primaryPresence": {
        "description": "The presence records for the user",
        "items": {
          "$ref": "#/definitions/AnalyticsUserPresenceRecord"
        },
        "type": "array"
      },
      "routingStatus": {
        "description": "The ACD routing status records for the user",
        "items": {
          "$ref": "#/definitions/AnalyticsRoutingStatusRecord"
        },
        "type": "array"
      },
      "userId": {
        "description": "The identifier for the user",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnalyticsUserDetailsAsyncQueryResponse": {
    "properties": {
      "cursor": {
        "description": "Optional cursor to indicate where to resume the results",
        "type": "string"
      },
      "dataAvailabilityDate": {
        "description": "Data available up to at least this datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "userDetails": {
        "items": {
          "$ref": "#/definitions/AnalyticsUserDetail"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsUserDetailsQueryResponse": {
    "properties": {
      "aggregations": {
        "items": {
          "$ref": "#/definitions/AggregationResult"
        },
        "type": "array"
      },
      "totalHits": {
        "format": "int32",
        "type": "integer"
      },
      "userDetails": {
        "items": {
          "$ref": "#/definitions/AnalyticsUserDetail"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AnalyticsUserPresenceRecord": {
    "properties": {
      "endTime": {
        "description": "The end time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "organizationPresenceId": {
        "description": "The identifier for the user's organization presence",
        "type": "string"
      },
      "startTime": {
        "description": "The start time of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "systemPresence": {
        "description": "The user's system presence",
        "enum": [
          "AVAILABLE",
          "AWAY",
          "BUSY",
          "OFFLINE",
          "IDLE",
          "ON_QUEUE",
          "MEAL",
          "TRAINING",
          "MEETING",
          "BREAK"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Annotation": {
    "properties": {
      "absoluteDurationMs": {
        "description": "Duration of annotation (milliseconds).",
        "format": "int64",
        "type": "integer"
      },
      "absoluteLocation": {
        "description": "Offset of annotation (milliseconds) from start of recording (after removing the cumulative duration of all pauses).",
        "format": "int64",
        "type": "integer"
      },
      "annotations": {
        "description": "List of annotations",
        "items": {
          "$ref": "#/definitions/Annotation"
        },
        "readOnly": true,
        "type": "array"
      },
      "description": {
        "description": "Text of annotation. Maximum character limit is 500.",
        "type": "string"
      },
      "durationMs": {
        "description": "Duration of annotation in milliseconds.",
        "format": "int64",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "location": {
        "description": "Offset of annotation in milliseconds.",
        "format": "int64",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "realtimeLocation": {
        "description": "Offset of annotation (milliseconds) from start of the recording before removing the cumulative duration of all pauses before this annotation",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "reason": {
        "description": "Reason for a pause annotation. Valid values: Hold,SecurePause,FlowOrQueue",
        "enum": [
          "Hold",
          "SecurePause",
          "FlowOrQueue"
        ],
        "readOnly": true,
        "type": "string"
      },
      "recordingDurationMs": {
        "description": "Duration of annotation (milliseconds), adjusted for any recording cuts.",
        "format": "int64",
        "type": "integer"
      },
      "recordingLocation": {
        "description": "Offset of annotation (milliseconds) from start of recording, adjusted for any recording cuts",
        "format": "int64",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "User that created this annotation (if any)."
      }
    },
    "type": "object"
  },
  "AnswerGenerationConfig": {
    "properties": {
      "enabled": {
        "description": "Answer generation is enabled.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "AnswerGenerationDocument": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "The document title.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AnswerOption": {
    "properties": {
      "assistanceConditions": {
        "description": "List of assistance conditions which are combined together with a logical AND operator. Eg ( assistanceCondtion1 \u0026\u0026 assistanceCondition2 ) wherein assistanceCondition could be ( EXISTS topic1 || topic2 || ... ) or (NOTEXISTS topic3 || topic4 || ...).",
        "items": {
          "$ref": "#/definitions/AssistanceCondition"
        },
        "type": "array"
      },
      "id": {
        "type": "string"
      },
      "text": {
        "type": "string"
      },
      "value": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ApiUsageClientQuery": {
    "properties": {
      "granularity": {
        "description": "Date granularity of the results",
        "enum": [
          "Day",
          "Week",
          "Month"
        ],
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "OAuthClientId",
            "OrganizationId",
            "TemplateUri",
            "HttpMethod"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).",
        "items": {
          "enum": [
            "Status200",
            "Status300",
            "Status400",
            "Status500",
            "Status429",
            "Requests"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "ApiUsageOrganizationQuery": {
    "properties": {
      "granularity": {
        "description": "Date granularity of the results",
        "enum": [
          "Day",
          "Week",
          "Month"
        ],
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "OAuthClientId",
            "OrganizationId",
            "UserId",
            "TemplateUri",
            "HttpMethod"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).",
        "items": {
          "enum": [
            "Status200",
            "Status300",
            "Status400",
            "Status500",
            "Status429",
            "Requests"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "ApiUsageQueryResult": {
    "properties": {
      "cursors": {
        "$ref": "#/definitions/Cursors",
        "description": "Cursor tokens to be used for navigating paginated results"
      },
      "queryStatus": {
        "description": "Query status",
        "enum": [
          "Complete",
          "Failed",
          "Running"
        ],
        "type": "string"
      },
      "results": {
        "description": "Query results",
        "items": {
          "$ref": "#/definitions/ApiUsageRow"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ApiUsageRow": {
    "properties": {
      "clientId": {
        "description": "Client Id associated with this query result",
        "type": "string"
      },
      "clientName": {
        "description": "Client Name associated with this query result",
        "type": "string"
      },
      "date": {
        "description": "Date of requests, based on granularity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "httpMethod": {
        "description": "HTTP Method associated with this query result",
        "type": "string"
      },
      "organizationId": {
        "description": "Organization Id associated with this query result",
        "type": "string"
      },
      "requests": {
        "description": "Total number of requests",
        "format": "int64",
        "type": "integer"
      },
      "status200": {
        "description": "Number of requests resulting in a 2xx HTTP status code",
        "format": "int64",
        "type": "integer"
      },
      "status300": {
        "description": "Number of requests resulting in a 3xx HTTP status code",
        "format": "int64",
        "type": "integer"
      },
      "status400": {
        "description": "Number of requests resulting in a 4xx HTTP status code",
        "format": "int64",
        "type": "integer"
      },
      "status429": {
        "description": "Number of requests resulting in a 429 HTTP status code, this is a subset of the count returned with status400",
        "format": "int64",
        "type": "integer"
      },
      "status500": {
        "description": "Number of requests resulting in a 5xx HTTP status code",
        "format": "int64",
        "type": "integer"
      },
      "templateUri": {
        "description": "Template Uri associated with this query result",
        "type": "string"
      },
      "userId": {
        "description": "User Id associated with this query result",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ApiUsageSimpleSearch": {
    "properties": {
      "httpMethods": {
        "description": "Behaves like a SQL WHERE with multiple IN operators. Specifies a list of HTTP methods to be queried.",
        "items": {
          "enum": [
            "GET",
            "POST",
            "DELETE",
            "PATCH",
            "PUT",
            "HEAD",
            "CONNECT",
            "OPTIONS",
            "TRACE"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Enables retrieving only named metrics. If omitted, all metrics that are available will be returned (like SELECT *).",
        "items": {
          "enum": [
            "Date",
            "ClientName",
            "HttpMethod",
            "TemplateUri",
            "Status200",
            "Status300",
            "Status400",
            "Status500",
            "Status429"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "oauthClientNames": {
        "description": "Behaves like a SQL WHERE with multiple IN operators. Specifies a list of OAuth client names to be queried.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "templateUris": {
        "description": "Behaves like a SQL WHERE with multiple IN operators. Specifies a list of Template Uris to be queried.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "AppEvent": {
    "properties": {
      "app": {
        "$ref": "#/definitions/JourneyApp",
        "description": "Application that the customer is interacting with."
      },
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined attributes associated with a particular event.",
        "type": "object"
      },
      "device": {
        "$ref": "#/definitions/Device",
        "description": "Customer's device."
      },
      "eventName": {
        "description": "Represents the action the customer performed. A good event name is typically an object followed by the action performed in past tense (e.g. screen_viewed, order_completed, user_registered).",
        "type": "string"
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "ipAddress": {
        "description": "Customer's IP address. May be null if the business configures the tracker to not collect IP addresses.",
        "type": "string"
      },
      "ipOrganization": {
        "description": "Customer's IP-based organization or ISP name.",
        "type": "string"
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Marketing / traffic source information."
      },
      "networkConnectivity": {
        "$ref": "#/definitions/NetworkConnectivity",
        "description": "Information relating to the device's network connectivity."
      },
      "screenName": {
        "description": "The name of the screen in the app that the event took place.",
        "type": "string"
      },
      "sdkLibrary": {
        "$ref": "#/definitions/SdkLibrary",
        "description": "SDK library used to generate the event."
      },
      "searchQuery": {
        "description": "Represents the keywords in a customer search query.",
        "type": "string"
      },
      "traits": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "Traits are attributes intrinsic to the customer that may be sent in selected events. Examples are email, name, phone.",
        "type": "object"
      }
    },
    "required": [
      "app",
      "attributes",
      "device",
      "eventName",
      "screenName",
      "traits"
    ],
    "type": "object"
  },
  "AppEventRequest": {
    "properties": {
      "app": {
        "$ref": "#/definitions/JourneyApp",
        "description": "Application that the customer is interacting with."
      },
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined attributes associated with a particular event. These attributes provide additional context about the event. For example, items_in_cart or subscription_level.",
        "type": "object"
      },
      "createdDate": {
        "description": "UTC timestamp indicating when the event actually took place, events older than an hour will be rejected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerCookieId": {
        "description": "A UUID representing the customer associated with the app event. This is expected to be set per application install or device and can be used to identify a single customer across multiple sessions. This identifier, along with others passed as traits, is used for identity resolution.",
        "type": "string"
      },
      "device": {
        "$ref": "#/definitions/RequestDevice",
        "description": "Customer's device."
      },
      "eventName": {
        "description": "Represents the action the customer performed. Event types are created for each unique event name and can be faceted on in segment and outcome conditions. A valid event name must only contain alphanumeric characters and underscores. A good event name is typically an object followed by the action performed in past tense, e.g. screen_viewed, search_performed, user_registered.",
        "type": "string"
      },
      "networkConnectivity": {
        "$ref": "#/definitions/NetworkConnectivity",
        "description": "Information relating to the device's network connectivity."
      },
      "referrerUrl": {
        "description": "The referrer URL of the first event in the app session.",
        "type": "string"
      },
      "screenName": {
        "description": "The name of the screen, view, or fragment in the app where the event took place.",
        "type": "string"
      },
      "sdkLibrary": {
        "$ref": "#/definitions/SdkLibrary",
        "description": "SDK library used to generate the event."
      },
      "searchQuery": {
        "description": "Represents the keywords in a customer search query.",
        "type": "string"
      },
      "traits": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "Traits are attributes intrinsic to the customer that may be sent in selected events, (e.g. email, lastName, cellPhone). Traits are used to collect information for identity resolution. For example, the same person might be using an application on different devices which might create two sessions with different customerIds. Additional information can be provided as traits to help link those two sessions and customers to a single external contact through common identifiers that were submitted via a form fill, message, or other input in both sessions.",
        "type": "object"
      }
    },
    "required": [
      "app",
      "createdDate",
      "customerCookieId",
      "device",
      "eventName",
      "screenName"
    ],
    "type": "object"
  },
  "AppEventResponse": {
    "properties": {
      "app": {
        "$ref": "#/definitions/JourneyApp",
        "description": "Application that the customer is interacting with."
      },
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined attributes associated with a particular event.",
        "type": "object"
      },
      "createdDate": {
        "description": "UTC timestamp indicating when the event actually took place. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerId": {
        "description": "Identifier of the customer in the source of the event.",
        "type": "string"
      },
      "customerIdType": {
        "description": "Type of identifier for the customer ID (cookie, email etc.).",
        "type": "string"
      },
      "device": {
        "$ref": "#/definitions/Device",
        "description": "Customer's device."
      },
      "eventName": {
        "description": "Represents the action the customer performed. A good event name is typically an object followed by the action performed in past tense (e.g. screen_viewed, order_completed, user_registered).",
        "type": "string"
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "id": {
        "description": "System-generated UUID for the event.",
        "type": "string"
      },
      "ipOrganization": {
        "description": "Customer's IP-based organization or ISP name.",
        "type": "string"
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Marketing / traffic source information."
      },
      "networkConnectivity": {
        "$ref": "#/definitions/NetworkConnectivity",
        "description": "Information relating to the device's network connectivity."
      },
      "screenName": {
        "description": "The name of the screen in the app that the event took place.",
        "type": "string"
      },
      "sdkLibrary": {
        "$ref": "#/definitions/SdkLibrary",
        "description": "SDK library used to generate the event."
      },
      "searchQuery": {
        "description": "Represents the keywords in a customer search query.",
        "type": "string"
      },
      "session": {
        "$ref": "#/definitions/AppEventResponseSession",
        "description": "The app session the event belongs to."
      },
      "traits": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "Traits are attributes intrinsic to the customer that may be sent in selected events (e.g. email, name, phone).",
        "type": "object"
      }
    },
    "required": [
      "app",
      "attributes",
      "createdDate",
      "customerId",
      "customerIdType",
      "device",
      "eventName",
      "id",
      "screenName",
      "session",
      "traits"
    ],
    "type": "object"
  },
  "AppEventResponseSession": {
    "properties": {
      "createdDate": {
        "description": "UTC timestamp of the session's first event, that is when the session starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "durationInSeconds": {
        "description": "Indicates how long the customer has been in the app within this session.",
        "format": "int32",
        "type": "integer"
      },
      "eventCount": {
        "description": "The count of all events recorded during this session.",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "ID of the app session.",
        "type": "string"
      },
      "referrer": {
        "$ref": "#/definitions/Referrer",
        "description": "The referrer of the first event in the app session."
      },
      "screenviewCount": {
        "description": "The count of all screen views recorded during this session.",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "createdDate",
      "durationInSeconds",
      "eventCount",
      "id",
      "screenviewCount"
    ],
    "type": "object"
  },
  "AppendToDncActionSettings": {
    "properties": {
      "expirationDuration": {
        "description": "If 'expire' is set to true, how long to keep the record.",
        "example": "P19DT15H13M",
        "type": "string"
      },
      "expire": {
        "description": "Whether to expire the record appended to the DNC list.",
        "type": "boolean"
      },
      "listType": {
        "description": "The Dnc List Type to append entries to",
        "enum": [
          "Rds",
          "RdsCustom"
        ],
        "type": "string"
      }
    },
    "required": [
      "expire"
    ],
    "type": "object"
  },
  "ApprovalNamespace": {
    "properties": {
      "namespace": {
        "description": "The namespace of the associated approvers.",
        "enum": [
          "agent.assistant",
          "analytics.alerting",
          "analytics",
          "analytics.realtime",
          "analytics.reporting.settings",
          "architect",
          "audiohook",
          "audit",
          "auth.api",
          "authorization",
          "automation.testing",
          "bots",
          "bots.voice",
          "callback",
          "cobrowse",
          "content.management",
          "conversation",
          "dataactions",
          "datatables",
          "directory",
          "email",
          "employee.engagement",
          "event.orchestration",
          "external.contacts",
          "gcv",
          "gdpr",
          "groups",
          "historical.adherence",
          "infrastructureascode",
          "integrations",
          "intent.miner",
          "internal.messaging",
          "journey",
          "knowledge",
          "language.understanding",
          "learning",
          "limit.registry",
          "marketplace",
          "media.communications",
          "messaging",
          "notifications",
          "onboarding",
          "outbound",
          "platform.api",
          "predictive.routing",
          "presence",
          "quality",
          "recording",
          "response.management",
          "routing",
          "scim",
          "search",
          "secondary.automation.testing",
          "skills",
          "social.media",
          "speech.and.text.analytics",
          "speech.integration",
          "supportability",
          "task.management",
          "telephony.configuration",
          "usage",
          "users",
          "web.deployments",
          "web.messaging",
          "webchat",
          "webhooks",
          "workforce.management.forecast",
          "workforce.management",
          "system"
        ],
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current namespace approval status.",
        "enum": [
          "Approved",
          "Rejected",
          "Rollback",
          "Pending",
          "Open",
          "SecondaryApprovalNamespacesAdded",
          "ReviewerApproved",
          "ReviewerRejected",
          "ReviewerRollback",
          "ImplementingChange",
          "ChangeImplemented",
          "ImplementingRollback",
          "RollbackImplemented"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of namespace approval.",
        "enum": [
          "Primary",
          "Secondary",
          "System"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ArchitectFlowFields": {
    "properties": {
      "architectFlow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The architect flow."
      },
      "flowRequestMappings": {
        "description": "Collection of Architect Flow Request Mappings to use.",
        "items": {
          "$ref": "#/definitions/RequestMapping"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ArchitectJobMessage": {
    "properties": {
      "dateTime": {
        "description": "The DateTime when the message was generated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "text": {
        "description": "The text of the message.",
        "type": "string"
      },
      "type": {
        "description": "The message type.",
        "enum": [
          "Error",
          "Warning"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ArchitectJobStateResponse": {
    "properties": {
      "command": {
        "description": "The command executed by the Architect Job",
        "enum": [
          "Publish",
          "Create",
          "Update"
        ],
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Flow created from the Architect Job"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messages": {
        "description": "Warnings and Errors messages of the Architect Job",
        "items": {
          "$ref": "#/definitions/ArchitectJobMessage"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Status of the Architect Job",
        "enum": [
          "Registered",
          "Started",
          "Success",
          "Failure"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ArchiveRetention": {
    "properties": {
      "days": {
        "format": "int32",
        "type": "integer"
      },
      "storageMedium": {
        "enum": [
          "CLOUDARCHIVE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ArrayNode": {
    "type": "object"
  },
  "Article": {
    "properties": {
      "confidence": {
        "description": "Value between 0 and 1. 1 corresponds to very confident, 0 to not confident at all.",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "metadata": {
        "additionalProperties": {
          "$ref": "#/definitions/MetadataAttribute"
        },
        "description": "A map that contains custom metadata about the article answer.",
        "readOnly": true,
        "type": "object"
      },
      "snippets": {
        "description": "This contains snippets of text from the article matching the query.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "title": {
        "description": "The article title.",
        "readOnly": true,
        "type": "string"
      },
      "uri": {
        "description": "The URI for the article.",
        "readOnly": true,
        "type": "string"
      },
      "variations": {
        "description": "Variations of the Article.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "version": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the Article.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "ArticleContent": {
    "properties": {
      "body": {
        "$ref": "#/definitions/ArticleContentBody",
        "description": "Body of the article content.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "ArticleContentBody": {
    "properties": {
      "locationUrl": {
        "description": "Presigned URL to retrieve the document content.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AssessmentForm": {
    "properties": {
      "contextId": {
        "description": "The unique Id for all versions of this assessment form",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date of the assessment form. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "passPercent": {
        "description": "The pass percent for the assessment form",
        "format": "int32",
        "position": 3,
        "type": "integer"
      },
      "published": {
        "description": "If true, assessment form is published",
        "position": 2,
        "readOnly": true,
        "type": "boolean"
      },
      "questionGroups": {
        "description": "A list of question groups",
        "items": {
          "$ref": "#/definitions/AssessmentFormQuestionGroup"
        },
        "position": 4,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "passPercent",
      "questionGroups"
    ],
    "type": "object"
  },
  "AssessmentFormQuestion": {
    "properties": {
      "answerOptions": {
        "description": "Options from which to choose an answer for this question. Only used by Multiple Choice type questions.",
        "items": {
          "$ref": "#/definitions/AnswerOption"
        },
        "type": "array"
      },
      "commentsRequired": {
        "type": "boolean"
      },
      "helpText": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "isCritical": {
        "description": "Does this question contribute to the critical score. Only used by Multiple Choice type questions.",
        "type": "boolean"
      },
      "isKill": {
        "description": "Does an incorrect answer to this question mark the form as having a failed kill question. Only used by Multiple Choice type questions.",
        "type": "boolean"
      },
      "maxResponseCharacters": {
        "description": "How many characters are allowed in the text response to this question. Used by Free Text question types.",
        "format": "int32",
        "type": "integer"
      },
      "naEnabled": {
        "type": "boolean"
      },
      "text": {
        "description": "The question text",
        "type": "string"
      },
      "type": {
        "enum": [
          "multipleChoiceQuestion",
          "freeTextQuestion",
          "npsQuestion",
          "readOnlyTextBlockQuestion"
        ],
        "type": "string"
      },
      "visibilityCondition": {
        "$ref": "#/definitions/VisibilityCondition"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "AssessmentFormQuestionGroup": {
    "properties": {
      "defaultAnswersToHighest": {
        "type": "boolean"
      },
      "defaultAnswersToNA": {
        "type": "boolean"
      },
      "id": {
        "description": "The ID of the question group,",
        "type": "string"
      },
      "manualWeight": {
        "type": "boolean"
      },
      "naEnabled": {
        "type": "boolean"
      },
      "name": {
        "description": "The question group name",
        "type": "string"
      },
      "questions": {
        "description": "The list of questions for this question group",
        "items": {
          "$ref": "#/definitions/AssessmentFormQuestion"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The question group type",
        "type": "string"
      },
      "visibilityCondition": {
        "$ref": "#/definitions/VisibilityCondition"
      },
      "weight": {
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "name",
      "questions",
      "type"
    ],
    "type": "object"
  },
  "AssessmentJobListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BenefitAssessmentJob"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AssessmentListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BenefitAssessment"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "AssessmentQuestionGroupScore": {
    "properties": {
      "markedNA": {
        "description": "True if this question group is marked NA",
        "type": "boolean"
      },
      "maxTotalCriticalScore": {
        "description": "The maximum total score for the critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "maxTotalCriticalScoreUnweighted": {
        "description": "The maximum unweighted total score for the critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "maxTotalNonCriticalScore": {
        "description": "The maximum total score for the non-critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "maxTotalNonCriticalScoreUnweighted": {
        "description": "The maximum unweighted total score for the non-critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "maxTotalScore": {
        "description": "The maximum total score for the questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "maxTotalScoreUnweighted": {
        "description": "The maximum unweighted total score for this question group",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "questionGroupId": {
        "description": "The ID of the question group",
        "type": "string"
      },
      "questionScores": {
        "description": "The individual question scores",
        "items": {
          "$ref": "#/definitions/AssessmentQuestionScore"
        },
        "type": "array"
      },
      "systemMarkedNA": {
        "description": "If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.",
        "type": "boolean"
      },
      "totalCriticalScore": {
        "description": "The total score for the critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalCriticalScoreUnweighted": {
        "description": "The unweighted total score for the critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalNonCriticalScore": {
        "description": "The total score for the non-critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalNonCriticalScoreUnweighted": {
        "description": "The total unweighted score for the non-critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalScore": {
        "description": "The total score for the questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalScoreUnweighted": {
        "description": "The unweighted total score for this question group",
        "format": "float",
        "readOnly": true,
        "type": "number"
      }
    },
    "required": [
      "questionGroupId"
    ],
    "type": "object"
  },
  "AssessmentQuestionScore": {
    "properties": {
      "answerId": {
        "description": "The ID of the selected answer",
        "type": "string"
      },
      "comments": {
        "description": "Comments provided for the answer",
        "type": "string"
      },
      "failedKillQuestion": {
        "description": "True if this was a failed Kill question",
        "readOnly": true,
        "type": "boolean"
      },
      "freeTextAnswer": {
        "description": "Answer for free text answer type",
        "type": "string"
      },
      "markedNA": {
        "description": "True if this question was marked as NA",
        "type": "boolean"
      },
      "questionId": {
        "description": "The ID of the question",
        "type": "string"
      },
      "score": {
        "description": "The score received for this question",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "systemMarkedNA": {
        "description": "If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.",
        "type": "boolean"
      }
    },
    "required": [
      "questionId"
    ],
    "type": "object"
  },
  "AssessmentScoringSet": {
    "properties": {
      "agentComments": {
        "description": "Comments provided by agent.",
        "type": "string"
      },
      "comments": {
        "description": "Comments provided for these answers.",
        "type": "string"
      },
      "failureReasons": {
        "description": "If the assessment was not passed, the reasons for failure.",
        "items": {
          "enum": [
            "Score",
            "CriticalScore",
            "KillQuestion"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "isPassed": {
        "description": "True if the assessment was passed",
        "readOnly": true,
        "type": "boolean"
      },
      "questionGroupScores": {
        "description": "The individual scores for each question group",
        "items": {
          "$ref": "#/definitions/AssessmentQuestionGroupScore"
        },
        "type": "array"
      },
      "totalCriticalScore": {
        "description": "The total score for the critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalNonCriticalScore": {
        "description": "The total score for the non-critical questions",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "totalScore": {
        "description": "The total score of the answers",
        "format": "float",
        "readOnly": true,
        "type": "number"
      }
    },
    "required": [
      "questionGroupScores"
    ],
    "type": "object"
  },
  "AssignUsers": {
    "properties": {
      "membersToAssign": {
        "description": "List of user ids to assign to a performance profile",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "membersToRemove": {
        "description": "List of user ids to remove from a performance profile",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "membersToAssign",
      "membersToRemove"
    ],
    "type": "object"
  },
  "AssignedLearningModule": {
    "description": "Learning module response",
    "properties": {
      "archivalMode": {
        "description": "The mode of archival for learning module",
        "enum": [
          "Graceful",
          "Immediate"
        ],
        "position": 11,
        "type": "string"
      },
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form for learning module",
        "position": 6
      },
      "completionTimeInDays": {
        "description": "The completion time of learning module in days",
        "format": "int32",
        "position": 2,
        "type": "integer"
      },
      "coverArt": {
        "$ref": "#/definitions/LearningModuleCoverArtResponse",
        "description": "The cover art for the learning module",
        "position": 9
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created learning module",
        "readOnly": true
      },
      "currentAssignments": {
        "description": "The current assignments for the requested users",
        "items": {
          "$ref": "#/definitions/LearningAssignment"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The date/time learning module was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date/time learning module was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of learning module",
        "position": 1,
        "type": "string"
      },
      "enforceContentOrder": {
        "description": "If true, learning module content should be viewed one by one in order",
        "type": "boolean"
      },
      "excludedFromCatalog": {
        "description": "If true, learning module is excluded when retrieving modules for manual assignment",
        "type": "boolean"
      },
      "externalId": {
        "description": "The external ID of the learning module",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "informSteps": {
        "description": "The list of inform steps in a learning module",
        "items": {
          "$ref": "#/definitions/LearningModuleInformStep"
        },
        "position": 5,
        "type": "array"
      },
      "isArchived": {
        "description": "If true, learning module is archived",
        "readOnly": true,
        "type": "boolean"
      },
      "isPublished": {
        "description": "If true, learning module is published",
        "readOnly": true,
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The recommended time in minutes to complete the module",
        "format": "int32",
        "position": 10,
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified learning module",
        "readOnly": true
      },
      "name": {
        "description": "The name of learning module",
        "type": "string"
      },
      "reassignSummaryData": {
        "$ref": "#/definitions/LearningModuleReassignSummary",
        "description": "The learning module reassign summary data",
        "position": 8
      },
      "reviewAssessmentResults": {
        "$ref": "#/definitions/ReviewAssessmentResults",
        "description": "Allows to view Assessment results in detail"
      },
      "rule": {
        "$ref": "#/definitions/LearningModuleRule",
        "description": "The rule for learning module; read-only, and only populated when requested via expand param.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "The source of the learning module",
        "enum": [
          "UserCreated",
          "GenesysBeyond"
        ],
        "readOnly": true,
        "type": "string"
      },
      "summaryData": {
        "$ref": "#/definitions/LearningModuleSummary",
        "description": "The learning module summary data",
        "position": 7
      },
      "type": {
        "description": "The type for the learning module",
        "enum": [
          "Informational",
          "AssessedContent",
          "Assessment",
          "External",
          "Native"
        ],
        "position": 3,
        "type": "string"
      },
      "version": {
        "description": "The version of published learning module",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "completionTimeInDays",
      "name"
    ],
    "type": "object"
  },
  "AssignedLearningModuleDomainEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AssignedLearningModule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AssignedSegment": {
    "properties": {
      "id": {
        "description": "The ID of the segment assigned.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "AssignedWrapupCode": {
    "properties": {
      "code": {
        "description": "The user configured wrap up code id.",
        "type": "string"
      },
      "durationSeconds": {
        "description": "The duration in seconds of the wrap-up segment.",
        "format": "int32",
        "type": "integer"
      },
      "endTime": {
        "description": "The timestamp when the wrap-up segment ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the agent to describe the call or disposition.",
        "type": "string"
      },
      "tags": {
        "description": "List of tags selected by the agent to describe the call or disposition.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Assignment": {
    "properties": {
      "assignedMembers": {
        "description": "The list of users successfully assigned to the custom performance profile",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "assignmentErrors": {
        "description": "The list of users failed assignment or removal for the custom performance profile",
        "items": {
          "$ref": "#/definitions/AssignmentError"
        },
        "type": "array"
      },
      "removedMembers": {
        "description": "The list of users successfully removed from the custom performance profile",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AssignmentError": {
    "properties": {
      "message": {
        "description": "Error message from membership assignment",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "A user that is failed to be removed from the performance profile"
      }
    },
    "type": "object"
  },
  "AssignmentValidation": {
    "properties": {
      "invalidMemberAssignments": {
        "description": "The list of user id that are invalid for the gamfication service to handle",
        "items": {
          "$ref": "#/definitions/InvalidAssignment"
        },
        "type": "array"
      },
      "membersAlreadyAssigned": {
        "description": "The list of users that are already assigned to the requesting custom performance profile",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "membersAlreadyAssignedToOther": {
        "description": "The list of users that are already assigned to other custom performance profiles",
        "items": {
          "$ref": "#/definitions/OtherProfileAssignment"
        },
        "type": "array"
      },
      "membersNotAssigned": {
        "description": "The list of users that are not assigned to any custom performance profile",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AssistanceCondition": {
    "properties": {
      "operator": {
        "description": "The operator for the assistance condition. The operator defines whether the listed topicIds should EXIST or NOTEXIST for the condition to be evaluated as true.",
        "enum": [
          "EXISTS",
          "NOTEXISTS"
        ],
        "type": "string"
      },
      "topicIds": {
        "description": "List of topicIds within the assistance condition which would be combined together using logical OR operator. Eg ( topicId_1 || topicId_2 ) .",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Assistant": {
    "properties": {
      "copilot": {
        "$ref": "#/definitions/Copilot",
        "description": "Agent copilot configuration.",
        "readOnly": true
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the assistant.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date when the assistant was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date when the assistant was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "googleDialogflowConfig": {
        "$ref": "#/definitions/GoogleDialogflowConfig",
        "description": "Configuration of Dialogflow used to assist the agent with transcriptions and knowledge suggestions."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeSuggestionConfig": {
        "$ref": "#/definitions/KnowledgeSuggestionConfig",
        "description": "Configuration that defines how to produce knowledge suggestions."
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who last modified the assistant.",
        "readOnly": true
      },
      "name": {
        "description": "The name of the assistant that will assist the agent.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "State of the assistant.",
        "enum": [
          "Active",
          "Inactive"
        ],
        "readOnly": true,
        "type": "string"
      },
      "transcriptionConfig": {
        "$ref": "#/definitions/TranscriptionConfig",
        "description": "Configuration for speech transcription used to assist the agent."
      }
    },
    "required": [
      "knowledgeSuggestionConfig",
      "name",
      "transcriptionConfig"
    ],
    "type": "object"
  },
  "AssistantListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Assistant"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "AssistantQueue": {
    "properties": {
      "assistant": {
        "$ref": "#/definitions/Assistant",
        "description": "Assistant to which the queue is assigned.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date when the assistant queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date when the assistant queue was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the queue.",
        "type": "string"
      },
      "mediaTypes": {
        "description": "List of media Types in which the assistant is activated for this queue.",
        "items": {
          "enum": [
            "Call",
            "Email",
            "Message"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "mediaTypes"
    ],
    "type": "object"
  },
  "AssistantQueueListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AssistantQueue"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "AssociatedValueField": {
    "properties": {
      "dataType": {
        "description": "The data type of the value field.",
        "enum": [
          "Number",
          "Integer"
        ],
        "type": "string"
      },
      "name": {
        "description": "The field name for extracting value from event.",
        "type": "string"
      }
    },
    "required": [
      "dataType",
      "name"
    ],
    "type": "object"
  },
  "AsyncConversationQuery": {
    "properties": {
      "conversationFilters": {
        "description": "Filters that target conversation-level data",
        "items": {
          "$ref": "#/definitions/ConversationDetailQueryFilter"
        },
        "type": "array"
      },
      "evaluationFilters": {
        "description": "Filters that target evaluations",
        "items": {
          "$ref": "#/definitions/EvaluationDetailQueryFilter"
        },
        "type": "array"
      },
      "interval": {
        "description": "Specifies the date and time range of data being queried. Results will include all conversations that had activity during the interval. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "limit": {
        "description": "Specify number of results to be returned",
        "format": "int32",
        "type": "integer"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      },
      "orderBy": {
        "description": "Specify which data element within the result set to use for sorting. The options  to use as a basis for sorting the results: conversationStart, segmentStart, and segmentEnd. If not specified, the default is conversationStart",
        "enum": [
          "conversationStart",
          "conversationEnd",
          "segmentStart",
          "segmentEnd"
        ],
        "type": "string"
      },
      "resolutionFilters": {
        "description": "Filters that target resolutions",
        "items": {
          "$ref": "#/definitions/ResolutionDetailQueryFilter"
        },
        "type": "array"
      },
      "segmentFilters": {
        "description": "Filters that target individual segments within a conversation",
        "items": {
          "$ref": "#/definitions/SegmentDetailQueryFilter"
        },
        "type": "array"
      },
      "startOfDayIntervalMatching": {
        "description": "Add a filter to only include conversations that started after the beginning of the interval start date (UTC)",
        "type": "boolean"
      },
      "surveyFilters": {
        "description": "Filters that target surveys",
        "items": {
          "$ref": "#/definitions/SurveyDetailQueryFilter"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "AsyncForecastOperationResult": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "progress": {
        "description": "Percent progress for the operation",
        "format": "int32",
        "type": "integer"
      },
      "result": {
        "$ref": "#/definitions/BuShortTermForecast",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AsyncIntradayResponse": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuIntradayResponse",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AsyncJob": {
    "properties": {
      "id": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "state": {
        "enum": [
          "Running",
          "Completed",
          "Failed",
          "Cancelled"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AsyncQueryResponse": {
    "properties": {
      "jobId": {
        "description": "Unique identifier for the async query execution. Can be used to check the status of the query and retrieve results.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AsyncQueryStatus": {
    "properties": {
      "completionDate": {
        "description": "The time at which the query completed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorMessage": {
        "description": "The error associated with the current query, if the state is FAILED",
        "type": "string"
      },
      "expirationDate": {
        "description": "The time at which results for this query will expire. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The current state of the asynchronous query",
        "enum": [
          "QUEUED",
          "PENDING",
          "FAILED",
          "CANCELLED",
          "FULFILLED",
          "EXPIRED"
        ],
        "type": "string"
      },
      "submissionDate": {
        "description": "The time at which the query was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AsyncUserDetailsQuery": {
    "properties": {
      "interval": {
        "description": "Specifies the date and time range of data being queried. Conversations MUST have started within this time range to potentially be included within the result set. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "limit": {
        "description": "Specify number of results to be returned",
        "format": "int32",
        "type": "integer"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      },
      "presenceFilters": {
        "description": "Filters that target system and organization presence-level data",
        "items": {
          "$ref": "#/definitions/PresenceDetailQueryFilter"
        },
        "type": "array"
      },
      "routingStatusFilters": {
        "description": "Filters that target agent routing status-level data",
        "items": {
          "$ref": "#/definitions/RoutingStatusDetailQueryFilter"
        },
        "type": "array"
      },
      "userFilters": {
        "description": "Filters that target the users to retrieve data for",
        "items": {
          "$ref": "#/definitions/UserDetailQueryFilter"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "Attachment": {
    "properties": {
      "attachmentId": {
        "description": "The unique identifier for the attachment.",
        "type": "string"
      },
      "contentLength": {
        "description": "The length of the attachment file.",
        "format": "int32",
        "type": "integer"
      },
      "contentType": {
        "description": "The type of file the attachment is.",
        "type": "string"
      },
      "contentUri": {
        "description": "The content uri of the attachment. If set, this is commonly a public api download location.",
        "type": "string"
      },
      "inlineImage": {
        "description": "Whether or not the attachment was attached inline.,",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the attachment.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AttemptLimits": {
    "properties": {
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxAttemptsPerContact": {
        "description": "The maximum number of times a contact can be called within the resetPeriod. Required if maxAttemptsPerNumber is not defined.",
        "format": "int32",
        "type": "integer"
      },
      "maxAttemptsPerNumber": {
        "description": "The maximum number of times a phone number can be called within the resetPeriod. Required if maxAttemptsPerContact is not defined.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "recallEntries": {
        "additionalProperties": {
          "$ref": "#/definitions/RecallEntry"
        },
        "description": "Configuration for recall attempts.",
        "type": "object"
      },
      "resetPeriod": {
        "description": "After how long the number of attempts will be set back to 0. Defaults to NEVER.",
        "enum": [
          "NEVER",
          "TODAY"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeZoneId": {
        "description": "If the resetPeriod is TODAY, this specifies the timezone in which TODAY occurs. Required if the resetPeriod is TODAY.",
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AttemptLimitsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AttemptLimits"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AttendanceStatus": {
    "properties": {
      "attendanceStatusType": {
        "description": "the attendance status",
        "enum": [
          "HasData",
          "Scheduled",
          "Absent",
          "Present",
          "NoSchedule"
        ],
        "readOnly": true,
        "type": "string"
      },
      "dateWorkday": {
        "description": "the workday date of this attendance status. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "hasEvaluation": {
        "description": "the quality evaluation score status",
        "enum": [
          "HasQualityEvaluation",
          "NoQualityEvaluation"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AttendanceStatusListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AttendanceStatus"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Attribute": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "name": {
        "description": "The attribute name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "AttributeFilterItem": {
    "properties": {
      "id": {
        "type": "string"
      },
      "operator": {
        "enum": [
          "IN",
          "RANGE",
          "EQUALS",
          "NOTEQUALS",
          "LESSTHAN",
          "LESSTHANEQUALS",
          "GREATERTHAN",
          "GREATERTHANEQUALS",
          "CONTAINS"
        ],
        "type": "string"
      },
      "values": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AtzmTimeSlot": {
    "properties": {
      "earliestCallableTime": {
        "description": "The earliest time to dial a contact. Valid format is HH:mm",
        "example": "08:00",
        "type": "string"
      },
      "latestCallableTime": {
        "description": "The latest time to dial a contact. Valid format is HH:mm",
        "example": "21:00",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AtzmTimeSlotWithTimeZone": {
    "properties": {
      "earliestCallableTime": {
        "description": "The earliest time to dial a contact. Valid format is HH:mm",
        "example": "08:00",
        "type": "string"
      },
      "latestCallableTime": {
        "description": "The latest time to dial a contact. Valid format is HH:mm",
        "example": "21:00",
        "type": "string"
      },
      "timeZoneId": {
        "description": "The time zone to use for contacts that cannot be mapped.",
        "example": "America/New York",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AudioConnectorIntegration": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AudioConnectorIntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AudioConnectorIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AudioState": {
    "properties": {
      "canHear": {
        "description": "Indicates that this communication's audio allows its participant to hear others.",
        "type": "boolean"
      },
      "canSpeak": {
        "description": "Indicates that this communication's audio allows others to hear this participant.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "AudioUpdatedEvent": {
    "properties": {
      "audioState": {
        "$ref": "#/definitions/AudioState",
        "description": "The updated audioState for the target communication."
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "AuditLogMessage": {
    "properties": {
      "action": {
        "description": "Action that took place.",
        "type": "string"
      },
      "application": {
        "description": "Name of the application used to perform the audit's action",
        "type": "string"
      },
      "client": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Client associated with this audit message."
      },
      "context": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional context for this message.",
        "type": "object"
      },
      "entity": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Entity that was impacted."
      },
      "entityChanges": {
        "description": "List of entities that were changed and changes made to those entities.",
        "items": {
          "$ref": "#/definitions/EntityChange"
        },
        "type": "array"
      },
      "entityType": {
        "description": "Type of the entity that was impacted.",
        "type": "string"
      },
      "eventDate": {
        "description": "Date and time of when the audit message was logged. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "Id of the audit message.",
        "type": "string"
      },
      "initiatingAction": {
        "$ref": "#/definitions/InitiatingAction",
        "description": "Id and action of the audit initiating the transaction"
      },
      "level": {
        "description": "Level of this audit message, USER or SYSTEM.",
        "enum": [
          "USER",
          "SYSTEM",
          "GENESYS_INTERNAL"
        ],
        "type": "string"
      },
      "message": {
        "$ref": "#/definitions/MessageInfo",
        "description": "Message describing the event being audited."
      },
      "propertyChanges": {
        "description": "List of properties that were changed and changes made to those properties.",
        "items": {
          "$ref": "#/definitions/PropertyChange"
        },
        "type": "array"
      },
      "remoteIp": {
        "description": "List of IP addresses of systems that originated or handled the request.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "serviceName": {
        "description": "Name of the service that logged this audit message.",
        "type": "string"
      },
      "status": {
        "description": "Status of the event being audited",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "WARNING"
        ],
        "type": "string"
      },
      "transactionInitiator": {
        "description": "Whether the current audit is the initiator of the transaction",
        "type": "boolean"
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User associated with this audit message."
      },
      "userHomeOrgId": {
        "description": "Home Organization Id associated with this audit message.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuditQueryEntity": {
    "properties": {
      "actions": {
        "description": "List of Actions",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "Name of the Entity",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuditQueryExecutionLargeResultsResponse": {
    "properties": {
      "cursor": {
        "description": "Optional cursor to indicate where to resume the results.",
        "type": "string"
      },
      "downloadUrl": {
        "description": "The presigned url which can be used to download the results.",
        "type": "string"
      },
      "id": {
        "description": "Id of the audit query execution request.",
        "type": "string"
      },
      "pageSize": {
        "description": "Number of results in a page.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AuditQueryExecutionResultsResponse": {
    "properties": {
      "cursor": {
        "description": "Optional cursor to indicate where to resume the results.",
        "type": "string"
      },
      "entities": {
        "description": "List of audit messages.",
        "items": {
          "$ref": "#/definitions/AuditLogMessage"
        },
        "type": "array"
      },
      "id": {
        "description": "Id of the audit query execution request.",
        "type": "string"
      },
      "pageSize": {
        "description": "Number of results in a page.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AuditQueryExecutionStatusResponse": {
    "properties": {
      "filters": {
        "description": "Filters for the audit query.",
        "items": {
          "$ref": "#/definitions/AuditQueryFilter"
        },
        "type": "array"
      },
      "id": {
        "description": "Id of the audit query execution request.",
        "type": "string"
      },
      "interval": {
        "description": "Interval for the audit query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "serviceName": {
        "description": "Service name for the audit query.",
        "type": "string"
      },
      "sort": {
        "description": "Sort parameter for the audit query.",
        "items": {
          "$ref": "#/definitions/AuditQuerySort"
        },
        "type": "array"
      },
      "startDate": {
        "description": "Start date and time of the audit query execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "Status of the audit query execution request.",
        "enum": [
          "Queued",
          "Running",
          "Succeeded",
          "Failed",
          "Cancelled"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuditQueryFilter": {
    "properties": {
      "property": {
        "description": "Name of the property to filter.",
        "enum": [
          "UserId",
          "TrusteeOrganizationId",
          "ClientId",
          "Action",
          "EntityType",
          "EntityId"
        ],
        "type": "string"
      },
      "value": {
        "description": "Value of the property to filter.",
        "type": "string"
      }
    },
    "required": [
      "property",
      "value"
    ],
    "type": "object"
  },
  "AuditQueryRequest": {
    "properties": {
      "filters": {
        "description": "Additional filters for the query.",
        "items": {
          "$ref": "#/definitions/AuditQueryFilter"
        },
        "type": "array"
      },
      "interval": {
        "description": "Date and time range of data to query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ",
        "type": "string"
      },
      "serviceName": {
        "description": "Name of the service to query audits for.",
        "type": "string"
      },
      "sort": {
        "description": "Sort parameter for the query.",
        "items": {
          "$ref": "#/definitions/AuditQuerySort"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "serviceName"
    ],
    "type": "object"
  },
  "AuditQueryResponse": {
    "type": "object"
  },
  "AuditQueryService": {
    "properties": {
      "entities": {
        "description": "List of Entities",
        "items": {
          "$ref": "#/definitions/AuditQueryEntity"
        },
        "type": "array"
      },
      "name": {
        "description": "Name of the Service",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuditQueryServiceMapping": {
    "properties": {
      "services": {
        "description": "List of Services",
        "items": {
          "$ref": "#/definitions/AuditQueryService"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AuditQuerySort": {
    "properties": {
      "name": {
        "description": "Name of the property to sort.",
        "enum": [
          "Timestamp"
        ],
        "type": "string"
      },
      "sortOrder": {
        "description": "Sort Order",
        "enum": [
          "ascending",
          "descending"
        ],
        "type": "string"
      }
    },
    "required": [
      "name",
      "sortOrder"
    ],
    "type": "object"
  },
  "AuditRealtimeQueryRequest": {
    "properties": {
      "filters": {
        "description": "Additional filters for the query.",
        "items": {
          "$ref": "#/definitions/AuditQueryFilter"
        },
        "type": "array"
      },
      "interval": {
        "description": "Date and time range of data to query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ssZ/YYYY-MM-DDThh:mm:ssZ",
        "type": "string"
      },
      "pageNumber": {
        "description": "Page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size",
        "format": "int32",
        "type": "integer"
      },
      "serviceName": {
        "description": "Name of the service to query audits for.",
        "type": "string"
      },
      "sort": {
        "description": "Sort parameter for the query.",
        "items": {
          "$ref": "#/definitions/AuditQuerySort"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "AuditRealtimeQueryResultsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AuditLogMessage"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AuditRealtimeRelatedRequest": {
    "properties": {
      "auditId": {
        "description": "The id of the audit of which related audits will be retrieved.",
        "type": "string"
      },
      "sort": {
        "description": "Sort parameter for the query.",
        "items": {
          "$ref": "#/definitions/AuditQuerySort"
        },
        "type": "array"
      },
      "trustorOrgId": {
        "description": "The id of the trustor org to which the audit belongs. Used when searching for audits performed by a trustee user within a trustor org.",
        "type": "string"
      }
    },
    "required": [
      "auditId"
    ],
    "type": "object"
  },
  "AuditRealtimeRelatedResultsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AuditLogMessage"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AuthenticationSettings": {
    "description": "Settings for authenticated webdeployments.",
    "properties": {
      "allowSessionUpgrade": {
        "description": "Allow end-users to upgrade an anonymous session to authenticated conversation.",
        "type": "boolean"
      },
      "enabled": {
        "description": "Indicate if these auth is required for this deployment. If, for example, this flag is set to true then webmessaging sessions can not send messages unless the end-user is authenticated.",
        "type": "boolean"
      },
      "integrationId": {
        "description": "The integration identifier which contains the auth settings required on the deployment.",
        "type": "string"
      }
    },
    "required": [
      "enabled",
      "integrationId"
    ],
    "type": "object"
  },
  "AuthorizationSettings": {
    "properties": {
      "analysisDays": {
        "description": "Integer number of days to analyze user usage",
        "format": "int32",
        "type": "integer"
      },
      "analysisEnabled": {
        "description": "Boolean showing if organization is opted in or not to unused role/perm analysis",
        "type": "boolean"
      },
      "dateLastActive": {
        "description": "The date of the most recent org activity used for analysis. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateLastCalculated": {
        "description": "The date and time of the most recent unused role calculation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuthzDivision": {
    "properties": {
      "description": {
        "description": "A helpful description for the division.",
        "type": "string"
      },
      "homeDivision": {
        "description": "A flag indicating whether this division is the \"Home\" (default) division. Cannot be modified and any supplied value will be ignored on create or update.",
        "readOnly": true,
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "objectCounts": {
        "additionalProperties": {
          "format": "int64",
          "type": "integer"
        },
        "description": "A count of objects in this division, grouped by type.",
        "readOnly": true,
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "description"
    ],
    "type": "object"
  },
  "AuthzDivisionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AuthzDivision"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AuthzDivisionGrantEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AuthzGrant"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AuthzGrant": {
    "properties": {
      "division": {
        "$ref": "#/definitions/AuthzDivision"
      },
      "grantMadeAt": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "role": {
        "$ref": "#/definitions/AuthzGrantRole"
      },
      "subjectId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuthzGrantPolicy": {
    "properties": {
      "actions": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "condition": {
        "type": "string"
      },
      "domain": {
        "type": "string"
      },
      "entityName": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuthzGrantRole": {
    "properties": {
      "default": {
        "type": "boolean"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "policies": {
        "items": {
          "$ref": "#/definitions/AuthzGrantPolicy"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "AuthzSubject": {
    "properties": {
      "grants": {
        "items": {
          "$ref": "#/definitions/AuthzGrant"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "AutoAnswerSetting": {
    "properties": {
      "enabled": {
        "description": "The media type status.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "AutoAnswerSettings": {
    "properties": {
      "settings": {
        "additionalProperties": {
          "$ref": "#/definitions/AutoAnswerSetting"
        },
        "description": "Map of conversation media type enabled status.",
        "type": "object"
      }
    },
    "required": [
      "settings"
    ],
    "type": "object"
  },
  "AutoStart": {
    "properties": {
      "enabled": {
        "description": "whether or not auto start is enabled",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "AutoStatusTransitionDetail": {
    "properties": {
      "dateOfTransition": {
        "description": "Date at which auto status transition occurs. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorDetails": {
        "$ref": "#/definitions/TaskManagementErrorDetails",
        "description": "This property will be set if auto status transition is failed."
      },
      "nextStatus": {
        "$ref": "#/definitions/WorkitemStatusReference",
        "description": "Next status of auto status transition."
      }
    },
    "type": "object"
  },
  "AutomaticTimeZoneMappingSettings": {
    "properties": {
      "callableWindows": {
        "description": "The time intervals to use for automatic time zone mapping.",
        "items": {
          "$ref": "#/definitions/CallableWindow"
        },
        "type": "array"
      },
      "supportedCountries": {
        "description": "The countries that are supported for automatic time zone mapping.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AvailabilityRange": {
    "properties": {
      "earliestStartMinutesFromMidnight": {
        "description": "The earliest time of day the activity can be scheduled to begin, in minutes from midnight in the configured time zone of the business unit",
        "format": "int32",
        "type": "integer"
      },
      "latestEndMinutesFromMidnight": {
        "description": "The latest time of day the activity can be scheduled to end, in minutes from midnight in the configured time zone of the business unit",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "earliestStartMinutesFromMidnight",
      "latestEndMinutesFromMidnight"
    ],
    "type": "object"
  },
  "AvailableMediaType": {
    "properties": {
      "availableSubTypes": {
        "description": "List of available subtypes for this media type",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "mediaType": {
        "description": "Name of the available media type",
        "type": "string"
      }
    },
    "type": "object"
  },
  "AvailableMediaTypeEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AvailableMediaType"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AvailableTime": {
    "properties": {
      "activityCategory": {
        "description": "Workforce Management activity category for this availability period",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable"
        ],
        "readOnly": true,
        "type": "string"
      },
      "dateStart": {
        "description": "Start of the availability period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "isPaid": {
        "description": "Indicates if this availability period is paid in Workforce Management schedule",
        "readOnly": true,
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "Length of availability period in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "wfmSchedule": {
        "$ref": "#/definitions/WfmScheduleReference",
        "description": "Workforce Management schedule information associated with the available time",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "AvailableTimeOffRange": {
    "properties": {
      "availableMinutesPerInterval": {
        "description": "The list of available time off values in minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity choice for time off limit",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "startDate": {
        "description": "Start date of the requested date range. The end date is determined by the size of interval list. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "timeOffLimit": {
        "$ref": "#/definitions/TimeOffLimitReference",
        "description": "The time off limit"
      },
      "waitlistEnabled": {
        "description": "Whether the time off request can be waitlisted",
        "type": "boolean"
      },
      "waitlistedRequestsPerInterval": {
        "description": "The current number of waitlisted time off requests for every interval per granularity",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AvailableTimeOffRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The ID for activity code to query available time off minutes",
        "type": "string"
      },
      "dateRanges": {
        "description": "A list of date ranges of available time off minutes. A maximum number of date ranges is 30. The maximum total number of days in all ranges is 366. If no ranges are specified, then only the presence of the associated time off limit object will be checked. In such case, if the association exists, then the response will contain a list with of a single element filled with timeOffLimitId only.",
        "items": {
          "$ref": "#/definitions/LocalDateRange"
        },
        "type": "array"
      }
    },
    "required": [
      "activityCodeId"
    ],
    "type": "object"
  },
  "AvailableTimeOffResponse": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/AvailableTimeOffRange"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AvailableTopic": {
    "properties": {
      "description": {
        "type": "string"
      },
      "enforced": {
        "description": "Whether or not the permissions on this topic are enforced",
        "type": "boolean"
      },
      "id": {
        "type": "string"
      },
      "permissionDetails": {
        "description": "Full detailed permissions required to subscribe to the topic",
        "items": {
          "$ref": "#/definitions/PermissionDetails"
        },
        "type": "array"
      },
      "publicApiTemplateUriPaths": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requiresAnyValidator": {
        "description": "If multiple permissions are required for this topic, such as both requiresCurrentUser and requiresDivisionPermissions, then true here indicates that meeting any one condition will satisfy the requirements; false indicates all conditions must be met.",
        "type": "boolean"
      },
      "requiresCurrentUser": {
        "description": "True if the topic user ID is required to match the subscribing user ID",
        "type": "boolean"
      },
      "requiresCurrentUserOrPermission": {
        "description": "True if permissions are only required when the topic user ID does not match the subscribing user ID",
        "type": "boolean"
      },
      "requiresDivisionPermissions": {
        "description": "True if the subscribing user must belong to the same division as the topic object ID",
        "type": "boolean"
      },
      "requiresPermissions": {
        "description": "Permissions required to subscribe to the topic",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "schema": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "topicParameters": {
        "description": "Parameters in the topic name that can be substituted, in the order they appear in the topic name",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "transports": {
        "description": "Transports that support events for the topic",
        "items": {
          "enum": [
            "All",
            "Websocket",
            "EventBridge",
            "ProcessAutomation"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "visibility": {
        "description": "Visibility of this topic (Public or Preview)",
        "enum": [
          "Public",
          "Preview"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "AvailableTopicEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AvailableTopic"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "AvailableTranslations": {
    "properties": {
      "builtin": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "orgSpecific": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BackgroundImageSettings": {
    "description": "The settings to Agent Video background image",
    "properties": {
      "url": {
        "description": "BackgroundImage URL for agent video settings",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BaseMediaSettings": {
    "properties": {
      "enableAutoAnswer": {
        "description": "Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BaseProgramEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BaseTopicEntitiy": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BatchConversationEventRequest": {
    "description": "A maximum of 100 events are allowed per request",
    "properties": {
      "audioUpdatedEvents": {
        "description": "Voice - AudioUpdated events for this batch",
        "items": {
          "$ref": "#/definitions/AudioUpdatedEvent"
        },
        "type": "array"
      },
      "communicationAnsweredEvents": {
        "description": "Voice - CommunicationAnswered events for this batch",
        "items": {
          "$ref": "#/definitions/CommunicationAnsweredEvent"
        },
        "type": "array"
      },
      "communicationDispositionAppliedEvents": {
        "description": "Voice - CommunicationDispositionApplied events for this batch",
        "items": {
          "$ref": "#/definitions/CommunicationDispositionAppliedEvent"
        },
        "type": "array"
      },
      "communicationEndedEvents": {
        "description": "Voice - CommunicationEnded events for this batch",
        "items": {
          "$ref": "#/definitions/CommunicationEndedEvent"
        },
        "type": "array"
      },
      "consultTransferEvents": {
        "description": "Voice - ConsultTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/ConsultTransferEvent"
        },
        "type": "array"
      },
      "endConsultTransferEvents": {
        "description": "Voice - EndConsultTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/EndConsultTransferEvent"
        },
        "type": "array"
      },
      "endTransferEvents": {
        "description": "Voice - EndTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/EndTransferEvent"
        },
        "type": "array"
      },
      "externalEstablishedEvents": {
        "description": "Voice - ExternalEstablished events for this batch",
        "items": {
          "$ref": "#/definitions/ExternalEstablishedEvent"
        },
        "type": "array"
      },
      "holdUpdatedEvents": {
        "description": "Voice - HoldUpdated events for this batch",
        "items": {
          "$ref": "#/definitions/HoldUpdatedEvent"
        },
        "type": "array"
      },
      "ivrEstablishedEvents": {
        "description": "Voice - IvrEstablished events for this batch",
        "items": {
          "$ref": "#/definitions/IvrEstablishedEvent"
        },
        "type": "array"
      },
      "phoneEstablishedEvents": {
        "description": "Voice - PhoneEstablished events for this batch",
        "items": {
          "$ref": "#/definitions/PhoneEstablishedEvent"
        },
        "type": "array"
      },
      "phoneTransferEvents": {
        "description": "Voice - PhoneTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/PhoneTransferEvent"
        },
        "type": "array"
      },
      "progressConsultTransferEvents": {
        "description": "Voice - ProgressConsultTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/ProgressConsultTransferEvent"
        },
        "type": "array"
      },
      "progressTransferEvents": {
        "description": "Voice - ProgressTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/ProgressTransferEvent"
        },
        "type": "array"
      },
      "routingEstablishedEvents": {
        "description": "Voice - RoutingEstablished events for this batch",
        "items": {
          "$ref": "#/definitions/RoutingEstablishedEvent"
        },
        "type": "array"
      },
      "routingTransferEvents": {
        "description": "Voice - RoutingTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/RoutingTransferEvent"
        },
        "type": "array"
      },
      "userEstablishedEvents": {
        "description": "Voice - UserEstablished events for this batch",
        "items": {
          "$ref": "#/definitions/UserEstablishedEvent"
        },
        "type": "array"
      },
      "userTransferEvents": {
        "description": "Voice - UserTransfer events for this batch",
        "items": {
          "$ref": "#/definitions/UserTransferEvent"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BatchDownloadJobResult": {
    "properties": {
      "contentType": {
        "description": "Content type of this result",
        "type": "string"
      },
      "conversationId": {
        "description": "Conversation id of the result",
        "type": "string"
      },
      "errorMsg": {
        "description": "An error message, in case of failed processing will indicate the cause of the failure",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "recordingId": {
        "description": "Recording id of the result",
        "type": "string"
      },
      "resultUrl": {
        "description": "URL of results... HTTP GET from this location to download results for this item",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BatchDownloadJobStatusResult": {
    "properties": {
      "errorCount": {
        "description": "Current number of error results.",
        "format": "int32",
        "type": "integer"
      },
      "expectedResultCount": {
        "description": "Number of results expected when job is completed, this includes both success and error results. This number could change as recordings are being discovered and processed.",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "jobId": {
        "description": "JobId returned when job was initially submitted.",
        "type": "string"
      },
      "resultCount": {
        "description": "Current number of results available, this includes both success and error results.",
        "format": "int32",
        "type": "integer"
      },
      "results": {
        "description": "Current set of results for the job.",
        "items": {
          "$ref": "#/definitions/BatchDownloadJobResult"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BatchDownloadJobSubmission": {
    "properties": {
      "batchDownloadRequestList": {
        "description": "List of up to 100 items requested",
        "items": {
          "$ref": "#/definitions/BatchDownloadRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "batchDownloadRequestList"
    ],
    "type": "object"
  },
  "BatchDownloadJobSubmissionResult": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BatchDownloadRequest": {
    "properties": {
      "conversationId": {
        "description": "Conversation id requested",
        "type": "string"
      },
      "recordingId": {
        "description": "Recording id requested, optional.  Leave null for all recordings on the conversation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BatchEventResponse": {
    "properties": {
      "errors": {
        "description": "A list of validation or server errors that occurred for posted events.",
        "items": {
          "$ref": "#/definitions/EventError"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BatchUserPresenceEventRequest": {
    "description": "A maximum of 100 events are allowed per request",
    "properties": {
      "userPresenceEvents": {
        "description": "UserPresence events for this batch",
        "items": {
          "$ref": "#/definitions/UserPresenceEvent"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BatchUserRoutingStatusEventRequest": {
    "description": "A maximum of 100 events are allowed per request",
    "properties": {
      "userRoutingStatusEvents": {
        "description": "UserRoutingStatus events for this batch",
        "items": {
          "$ref": "#/definitions/UserRoutingStatusEvent"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BenefitAssessment": {
    "properties": {
      "dateCreated": {
        "description": "Creation Date of the benefit assessment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Modified Date of the benefit assessment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "jobId": {
        "description": "The unique identifier of job that created this benefit assessment.",
        "readOnly": true,
        "type": "string"
      },
      "kpiAssessments": {
        "description": "A set of key performance indicators applied on the queue to determine suitability of Predictive Routing.",
        "items": {
          "$ref": "#/definitions/KeyPerformanceIndicatorAssessment"
        },
        "readOnly": true,
        "type": "array"
      },
      "queues": {
        "description": "The list of queues that are assessed for Predictive Routing benefit.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "State of the benefit assessment.",
        "enum": [
          "Created",
          "Finished",
          "Failed"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BenefitAssessmentJob": {
    "properties": {
      "dateCreated": {
        "description": "Creation Date of the benefit assessment job. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Modified Date of the benefit assessment job. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "State of the benefit assessment job.",
        "enum": [
          "Created",
          "Finished"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BidGroupWorkPlanRequest": {
    "properties": {
      "agentCountRange": {
        "$ref": "#/definitions/AgentCountRange",
        "description": "The range of agent slot count per work plan. The suggested slot count must be in agent count range",
        "readOnly": true
      },
      "overrideAgentCount": {
        "description": "The modified agent count for this work plan",
        "format": "int32",
        "type": "integer"
      },
      "suggestedAgentCount": {
        "description": "The number of agents needed for this work plan to produce the optimal schedule",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "workPlanId": {
        "description": "The ID of the work plan used in the bid group",
        "type": "string"
      }
    },
    "required": [
      "workPlanId"
    ],
    "type": "object"
  },
  "BidGroupWorkPlanResponse": {
    "properties": {
      "agentCountRange": {
        "$ref": "#/definitions/AgentCountRange",
        "description": "The range of agent slot count per work plan. The suggested slot count must be in agent count range",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which this work plan belongs.  Nullable in some routes"
      },
      "overrideAgentCount": {
        "description": "The modified agent count for this work plan",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "suggestedAgentCount": {
        "description": "The number of agents needed for this work plan to produce the optimal schedule",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BillingUsage": {
    "properties": {
      "name": {
        "description": "Identifies the billable usage.",
        "type": "string"
      },
      "resources": {
        "description": "The resources for which usage was observed (e.g. license users, devices).",
        "items": {
          "$ref": "#/definitions/BillingUsageResource"
        },
        "type": "array"
      },
      "totalUsage": {
        "description": "The total amount of usage, expressed as a decimal number in string format.",
        "type": "string"
      }
    },
    "required": [
      "name",
      "resources",
      "totalUsage"
    ],
    "type": "object"
  },
  "BillingUsageReport": {
    "properties": {
      "endDate": {
        "description": "The period end date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "The period start date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "status": {
        "description": "Generation status of report",
        "enum": [
          "InProgress",
          "Complete"
        ],
        "type": "string"
      },
      "usages": {
        "description": "The usages for the given period.",
        "items": {
          "$ref": "#/definitions/BillingUsage"
        },
        "type": "array"
      }
    },
    "required": [
      "endDate",
      "startDate",
      "usages"
    ],
    "type": "object"
  },
  "BillingUsageResource": {
    "properties": {
      "date": {
        "description": "The date that the usage was first observed by the billing subsystem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "Identifies the resource (e.g. license user, device).",
        "type": "string"
      }
    },
    "required": [
      "date",
      "name"
    ],
    "type": "object"
  },
  "Biography": {
    "properties": {
      "biography": {
        "description": "Personal detailed description",
        "type": "string"
      },
      "education": {
        "description": "User education details",
        "items": {
          "$ref": "#/definitions/Education"
        },
        "type": "array"
      },
      "hobbies": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "interests": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "spouse": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "BotAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "BotAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/BotAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "BotAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/BotAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/BotAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "BotAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "askActionId",
          "askActionResult",
          "askActionType",
          "botFinalIntent",
          "botFlowSubType",
          "botFlowType",
          "botId",
          "botIntent",
          "botProduct",
          "botProvider",
          "botRecognitionFailureReason",
          "botResult",
          "botSessionId",
          "botSlot",
          "botVersion",
          "conversationId",
          "externalContactId",
          "intermediateIntentName",
          "knowledgeBaseId",
          "languageCode",
          "lastActionId",
          "lastInputActionId",
          "mediaType",
          "messageType",
          "previewMode",
          "selfServed"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "BotAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/BotAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BotAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/BotAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "askActionId",
            "askActionResult",
            "askActionType",
            "botFinalIntent",
            "botFlowSubType",
            "botFlowType",
            "botId",
            "botIntent",
            "botProduct",
            "botProvider",
            "botRecognitionFailureReason",
            "botResult",
            "botSessionId",
            "botSlot",
            "botVersion",
            "conversationId",
            "externalContactId",
            "intermediateIntentName",
            "knowledgeBaseId",
            "languageCode",
            "lastActionId",
            "lastInputActionId",
            "mediaType",
            "messageType",
            "previewMode",
            "selfServed"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nBotSessionTurns",
            "nBotSessions",
            "oBotIntent",
            "oBotSessionCollection",
            "oBotSessionCollectionSelfServed",
            "oBotSessionQuery",
            "oBotSessionQuerySelfServed",
            "oBotSessionTurn",
            "oBotSlot",
            "tBotDisconnect",
            "tBotExit",
            "tBotRecognitionFailure",
            "tBotSession"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/BotAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "BotAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nBotSessionTurns",
          "nBotSessions",
          "oBotIntent",
          "oBotSessionCollection",
          "oBotSessionCollectionSelfServed",
          "oBotSessionQuery",
          "oBotSessionQuerySelfServed",
          "oBotSessionTurn",
          "oBotSlot",
          "tBotDisconnect",
          "tBotExit",
          "tBotRecognitionFailure",
          "tBotSession"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "BotChannel": {
    "description": "Channel information relevant to a bot flow.",
    "properties": {
      "inputModes": {
        "description": "The input modes for the channel.",
        "items": {
          "enum": [
            "Text",
            "Voice",
            "DTMF"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "name": {
        "description": "The name of the channel.",
        "enum": [
          "Chat",
          "Call",
          "Messaging"
        ],
        "type": "string"
      },
      "outputModes": {
        "description": "The output modes for the channel.",
        "items": {
          "enum": [
            "Text",
            "Voice"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "userAgent": {
        "$ref": "#/definitions/TextBotUserAgent",
        "description": "Information about the end user agent calling the bot flow."
      }
    },
    "required": [
      "inputModes",
      "name",
      "outputModes",
      "userAgent"
    ],
    "type": "object"
  },
  "BotConnectorBot": {
    "description": "A botConnector Bot Instance",
    "properties": {
      "botCompositeTag": {
        "description": "A system-generated string that contains metadata about this bot.",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "An optional description of the bot.  This can be up to 256 characters long and must be comprised of displayable characters without leading or trailing whitespace",
        "type": "string"
      },
      "id": {
        "description": "The Botconnector Bot Id - this is configurable by the user when put",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "versions": {
        "description": "This bots versions, limit of 50 per bot",
        "items": {
          "$ref": "#/definitions/BotConnectorBotVersion"
        },
        "type": "array"
      }
    },
    "required": [
      "id",
      "versions"
    ],
    "type": "object"
  },
  "BotConnectorBotSummaryEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BotSummary"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BotConnectorBotVersion": {
    "description": "A version description for a botConnector bot.",
    "properties": {
      "intents": {
        "description": "A list of potential intents this bot will return, limit of 50",
        "items": {
          "$ref": "#/definitions/BotIntent"
        },
        "type": "array"
      },
      "supportedLanguages": {
        "description": "The supported languages for this bot. EG 'en-us' or 'es', etc; These language codes are W3C language identification tags (ISO 639-1 for the language name and ISO 3166 for the country code)",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "version": {
        "description": "The name of the version. This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace",
        "type": "string"
      }
    },
    "required": [
      "intents",
      "supportedLanguages",
      "version"
    ],
    "type": "object"
  },
  "BotConnectorBotVersionSummaryEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BotVersionSummary"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BotExecutionConfiguration": {
    "description": "Model for setting the launch configuration for a Nuance bot available to Genesys Cloud",
    "properties": {
      "botCredentials": {
        "$ref": "#/definitions/NuanceBotCredentials",
        "description": "The bot's launch credentials"
      },
      "botId": {
        "description": "The Nuance bot ID",
        "type": "string"
      },
      "executionHost": {
        "description": "The hostname to use when contacting Nuance to execute this bot",
        "type": "string"
      }
    },
    "required": [
      "botCredentials",
      "botId",
      "executionHost"
    ],
    "type": "object"
  },
  "BotFlowSession": {
    "properties": {
      "botResult": {
        "description": "The reason for session termination.",
        "enum": [
          "Unknown",
          "ExitRequestedByUser",
          "ExitRequestedByBot",
          "ExitError",
          "ExitRecognitionFailure",
          "DisconnectRequestedByUser",
          "DisconnectRequestedByBot",
          "DisconnectSessionExpired",
          "DisconnectError",
          "DisconnectRecognitionFailure",
          "TransferToACD"
        ],
        "type": "string"
      },
      "botResultCategory": {
        "description": "The category of result for the session.",
        "enum": [
          "Unknown",
          "UserExit",
          "BotExit",
          "Error",
          "RecognitionFailure",
          "UserDisconnect",
          "BotDisconnect",
          "SessionExpired",
          "Transfer"
        ],
        "type": "string"
      },
      "channel": {
        "$ref": "#/definitions/BotChannel",
        "description": "Channel-specific information that describes the message channel/provider."
      },
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The conversation details, across potentially multiple Bot Flow sessions.",
        "readOnly": true
      },
      "dateCompleted": {
        "description": "Timestamp indicating when the session was completed. Note: The 'interval' query param uses this timestamp to filter the output. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateCreated": {
        "description": "Timestamp indicating when the session was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endLanguage": {
        "description": "The language of the session at the time the session ended",
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/Entity",
        "description": "The flow associated to this bot session."
      },
      "id": {
        "description": "The ID of the bot session.",
        "type": "string"
      },
      "language": {
        "description": "The initial language of operation for the session.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BotIntent": {
    "description": "A botConnector's bot intention",
    "properties": {
      "name": {
        "description": "The name of this intent.  This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace",
        "type": "string"
      },
      "slots": {
        "additionalProperties": {
          "$ref": "#/definitions/BotSlot"
        },
        "description": "Optional returned data values associated with this intent, limit of 50.",
        "type": "object"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "BotList": {
    "description": "A list of BotConnectorBots",
    "properties": {
      "chatBots": {
        "description": "A list of botConnector Bots. Max 50",
        "items": {
          "$ref": "#/definitions/BotConnectorBot"
        },
        "type": "array"
      }
    },
    "required": [
      "chatBots"
    ],
    "type": "object"
  },
  "BotMessengerProfile": {
    "properties": {
      "avatarUrl": {
        "description": "Avatar for Bot",
        "type": "string"
      },
      "name": {
        "description": "Name of the Bot",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BotSearchResponse": {
    "properties": {
      "botType": {
        "description": "The provider of the bot",
        "enum": [
          "GenesysBotConnector",
          "GenesysDialogEngine",
          "AmazonLex",
          "GoogleDialogFlowES",
          "GoogleDialogFlowCX",
          "NuanceDlg",
          "GenesysBotFlow",
          "GenesysDigitalBotFlow",
          "GenesysVoiceSurveyFlow"
        ],
        "type": "string"
      },
      "description": {
        "description": "The description of the bot",
        "type": "string"
      },
      "id": {
        "description": "The id of the bot",
        "type": "string"
      },
      "name": {
        "description": "The name of the bot",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "botType",
      "id",
      "name"
    ],
    "type": "object"
  },
  "BotSearchResponseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BotSearchResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BotSlot": {
    "description": "Description of a data value returned from an intent",
    "properties": {
      "name": {
        "description": "The name of the slot. This can be up to 100 characters long and must be comprised of displayable characters without leading or trailing whitespace",
        "type": "string"
      },
      "type": {
        "description": "The data type of the slot string, integer, decimal, duration, boolean, currency, datetime or the xxxCollection versions of those types",
        "type": "string"
      }
    },
    "required": [
      "name",
      "type"
    ],
    "type": "object"
  },
  "BotSummary": {
    "description": "A summary description for a botConnector bot",
    "properties": {
      "botCompositeTag": {
        "description": "A system-generated string that contains metadata about this bot.",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "An optional description of the bot.",
        "type": "string"
      },
      "id": {
        "description": "The id of the bot.",
        "type": "string"
      },
      "name": {
        "description": "The name of the bot.",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "BotVersionSummary": {
    "description": "A version summary for a botConnector bot.",
    "properties": {
      "botCompositeTag": {
        "description": "A system-generated string that contains metadata about this bot.",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "An optional description of the bot.",
        "type": "string"
      },
      "id": {
        "description": "The id of the bot.",
        "type": "string"
      },
      "name": {
        "description": "The name of the bot.",
        "type": "string"
      },
      "version": {
        "description": "The name of the version.",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name",
      "version"
    ],
    "type": "object"
  },
  "Browser": {
    "properties": {
      "family": {
        "description": "Browser family (e.g. Chrome, Safari, Firefox).",
        "type": "string"
      },
      "featuresFlash": {
        "description": "Whether Flash is installed.",
        "type": "boolean"
      },
      "featuresJava": {
        "description": "Whether Java is installed.",
        "type": "boolean"
      },
      "featuresPdf": {
        "description": "Whether the browser recognizes PDFs.",
        "type": "boolean"
      },
      "featuresWebrtc": {
        "description": "Whether WebRTC is supported.",
        "type": "boolean"
      },
      "fingerprint": {
        "description": "Fingerprint generated by looking at the individual browser features.",
        "type": "string"
      },
      "isMobile": {
        "description": "Flag that is true for mobile devices.",
        "type": "boolean"
      },
      "lang": {
        "description": "Language the browser is set to. Must conform to BCP 47.",
        "type": "string"
      },
      "version": {
        "description": "Browser version (e.g. 68.0.3440.84).",
        "type": "string"
      },
      "viewHeight": {
        "description": "Browser's viewport height.",
        "format": "int32",
        "type": "integer"
      },
      "viewWidth": {
        "description": "Browser's viewport width.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "family",
      "featuresFlash",
      "featuresJava",
      "featuresPdf",
      "featuresWebrtc",
      "version"
    ],
    "type": "object"
  },
  "BuAbandonRate": {
    "properties": {
      "include": {
        "description": "Whether to include abandon rate in the associated configuration",
        "type": "boolean"
      },
      "percent": {
        "description": "Abandon rate percent goal. Required if include == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "include"
    ],
    "type": "object"
  },
  "BuActivitySettingsRequest": {
    "properties": {
      "defaultActivityCodeId": {
        "description": "The ID of the activity code. This is the activity code that will be used by default for agent development activities added to the schedule",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuActivitySettingsResponse": {
    "properties": {
      "defaultActivityCode": {
        "$ref": "#/definitions/ActivityCodeReference",
        "description": "Default Activity Code settings"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleActivity": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this activity",
        "type": "string"
      },
      "description": {
        "description": "The description of this activity",
        "type": "string"
      },
      "externalActivityId": {
        "description": "The ID of the external activity associated with this activity, if applicable",
        "type": "string"
      },
      "externalActivityType": {
        "description": "The type of the external activity associated with this activity, if applicable",
        "enum": [
          "ActivityPlan",
          "Coaching",
          "Learning"
        ],
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of this activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "paid": {
        "description": "Whether this activity is paid",
        "type": "boolean"
      },
      "payableMinutes": {
        "description": "Payable minutes for this activity",
        "format": "int32",
        "type": "integer"
      },
      "startDate": {
        "description": "The start date/time of this activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "timeOffRequestId": {
        "description": "The ID of the time off request associated with this activity, if applicable",
        "type": "string"
      },
      "timeOffRequestSyncVersion": {
        "description": "The sync version of the partial day time off request for which the scheduled activity is associated, if applicable",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleHistoryChange": {
    "properties": {
      "deletes": {
        "$ref": "#/definitions/BuAgentScheduleHistoryDeletedChange",
        "description": "The deleted shifts, full day time off markers, or the entire agent schedule"
      },
      "fullDayTimeOffMarkers": {
        "description": "The list of changed full day time off markers",
        "items": {
          "$ref": "#/definitions/BuFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/BuAgentScheduleHistoryChangeMetadata",
        "description": "The metadata of the change, including who and when the change was made"
      },
      "shifts": {
        "description": "The list of changed shifts",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleShift"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleHistoryChangeMetadata": {
    "properties": {
      "dateModified": {
        "description": "The timestamp of the schedule change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user that made the schedule change"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleHistoryDeletedChange": {
    "properties": {
      "agentSchedule": {
        "description": "Whether the entire agent schedule was deleted",
        "type": "boolean"
      },
      "fullDayTimeOffMarkerDates": {
        "description": "The dates of any deleted full day time off markers",
        "items": {
          "format": "date",
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "shiftIds": {
        "description": "The IDs of deleted shifts",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "BuAgentScheduleHistoryDroppedChange": {
    "properties": {
      "deletes": {
        "$ref": "#/definitions/BuAgentScheduleHistoryDeletedChange",
        "description": "The deleted shifts, full day time off markers, or the entire agent schedule"
      },
      "fullDayTimeOffMarkerDates": {
        "description": "The dates of any deleted full day time off markers",
        "items": {
          "format": "date",
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metadata": {
        "$ref": "#/definitions/BuAgentScheduleHistoryChangeMetadata",
        "description": "The metadata of the change, including who and when the change was made"
      },
      "shiftIds": {
        "description": "The IDs of deleted shifts",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "BuAgentScheduleHistoryResponse": {
    "properties": {
      "basePublishedSchedule": {
        "$ref": "#/definitions/BuAgentScheduleHistoryChange",
        "description": "The originally published agent schedules"
      },
      "changes": {
        "description": "The list of changes for the schedule history",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleHistoryChange"
        },
        "type": "array"
      },
      "droppedChanges": {
        "description": "The changes dropped from the schedule history. This will happen if the schedule history is too large",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleHistoryDroppedChange"
        },
        "type": "array"
      },
      "priorPublishedSchedules": {
        "description": "The list of previously published schedules",
        "items": {
          "$ref": "#/definitions/BuScheduleReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuAgentSchedulePublishedScheduleReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks encompassed by the schedule",
        "format": "int32",
        "type": "integer"
      },
      "weekDate": {
        "description": "The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleQueryResponse": {
    "properties": {
      "fullDayTimeOffMarkers": {
        "description": "Full day time off markers which apply to this agent schedule",
        "items": {
          "$ref": "#/definitions/BuFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Versioned entity metadata for this agent schedule"
      },
      "shifts": {
        "description": "The shift definitions for this agent schedule",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleShift"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user to whom this agent schedule applies"
      },
      "workPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan for this user"
      },
      "workPlansPerWeek": {
        "description": "The work plans per week for this user from the work plan rotation. Null values in the list denotes that user is not part of any work plan for that week",
        "items": {
          "$ref": "#/definitions/WorkPlanReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleRescheduleResponse": {
    "properties": {
      "fullDayTimeOffMarkers": {
        "description": "Full day time off markers which apply to this agent schedule",
        "items": {
          "$ref": "#/definitions/BuFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "shifts": {
        "description": "The shift definitions for this agent schedule",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleShift"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user to whom this agent schedule applies"
      },
      "workPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan for this user"
      },
      "workPlansPerWeek": {
        "description": "The work plans per week for this user from the work plan rotation. Null values in the list denotes that user is not part of any work plan for that week",
        "items": {
          "$ref": "#/definitions/WorkPlanReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleSearchResponse": {
    "properties": {
      "fullDayTimeOffMarkers": {
        "description": "Full day time off markers which apply to this agent schedule",
        "items": {
          "$ref": "#/definitions/BuFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "shifts": {
        "description": "The shift definitions for this agent schedule",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleShift"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user to whom this agent schedule applies"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleShift": {
    "properties": {
      "activities": {
        "description": "The activities associated with this shift",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleActivity"
        },
        "type": "array"
      },
      "id": {
        "description": "The ID of the shift",
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of this shift in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "manuallyEdited": {
        "description": "Whether this shift was manually edited. This is only set by clients and is used for rescheduling",
        "type": "boolean"
      },
      "schedule": {
        "$ref": "#/definitions/BuScheduleReference",
        "description": "The schedule to which this shift belongs",
        "readOnly": true
      },
      "startDate": {
        "description": "The start date of this shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAgentScheduleUpdate": {
    "properties": {
      "shiftStartDates": {
        "description": "The start date for the affected shifts",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of update",
        "enum": [
          "Added",
          "Edited",
          "Deleted"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAgentSchedulesQueryResponse": {
    "properties": {
      "agentSchedules": {
        "description": "The requested agent schedules",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleQueryResponse"
        },
        "type": "array"
      },
      "businessUnitTimeZone": {
        "description": "The time zone configured for the business unit to which these schedules apply",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAgentSchedulesSearchResponse": {
    "properties": {
      "agentSchedules": {
        "description": "The requested agent schedules",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleSearchResponse"
        },
        "type": "array"
      },
      "businessUnitTimeZone": {
        "description": "The time zone configured for the business unit to which this schedule applies",
        "type": "string"
      },
      "publishedSchedules": {
        "description": "References to all published week schedules overlapping the start/end date query parameters",
        "items": {
          "$ref": "#/definitions/BuAgentSchedulePublishedScheduleReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuAlternativeShiftJobResponse": {
    "properties": {
      "bulkUpdateTradesResults": {
        "$ref": "#/definitions/AlternativeShiftBulkUpdateTradesResponseTemplate",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'BulkUpdateTrades'"
      },
      "downloadUrl": {
        "description": "The URL where completed results are available, only set if status == 'Complete'",
        "type": "string"
      },
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Any error information, only set if the status == 'Error'"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the alternative shift job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of job",
        "enum": [
          "ListOffers",
          "SearchOffers",
          "ListUserTrades",
          "SearchTrades",
          "BulkUpdateTrades"
        ],
        "type": "string"
      },
      "viewOffersResults": {
        "$ref": "#/definitions/AlternativeShiftOffersViewResponseTemplate",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'ListOffers' or 'SearchOffers'"
      },
      "viewTradesResults": {
        "$ref": "#/definitions/AlternativeShiftTradesViewResponseTemplate",
        "description": "Schema template for deserializing data returned from the downloadUrl. Use if type == 'ListUserTrades' or 'SearchTrades'"
      }
    },
    "required": [
      "status",
      "type"
    ],
    "type": "object"
  },
  "BuAsyncAgentSchedulesQueryResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The URL from which to download the result if it is too large to pass directly",
        "type": "string"
      },
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "progress": {
        "description": "Percent progress for the operation",
        "format": "int32",
        "type": "integer"
      },
      "result": {
        "$ref": "#/definitions/BuAgentSchedulesQueryResponse",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAsyncAgentSchedulesSearchResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The URL from which to download the result if it is too large to pass directly",
        "type": "string"
      },
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "progress": {
        "description": "Percent progress for the operation",
        "format": "int32",
        "type": "integer"
      },
      "result": {
        "$ref": "#/definitions/BuAgentSchedulesSearchResponse",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAsyncScheduleResponse": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuScheduleMetadata",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAsyncScheduleRunResponse": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuScheduleRun",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuAverageSpeedOfAnswer": {
    "properties": {
      "include": {
        "description": "Whether to include average speed of answer (ASA) in the associated configuration",
        "type": "boolean"
      },
      "seconds": {
        "description": "The target average speed of answer (ASA) in seconds. Required if include == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "include"
    ],
    "type": "object"
  },
  "BuCopyScheduleRequest": {
    "properties": {
      "description": {
        "description": "The description for the new schedule",
        "type": "string"
      },
      "weekDate": {
        "description": "The start weekDate for the new copy of the schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "description",
      "weekDate"
    ],
    "type": "object"
  },
  "BuCreateBlankScheduleRequest": {
    "properties": {
      "description": {
        "description": "The description for the schedule",
        "type": "string"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The forecast to use when generating the schedule.  Note that the forecast must fully encompass the schedule's start week + week count"
      },
      "weekCount": {
        "description": "The number of weeks in the schedule. One extra day is added at the end",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "description",
      "weekCount"
    ],
    "type": "object"
  },
  "BuCreateTimeOffLimitRequest": {
    "properties": {
      "managementUnitId": {
        "description": "The ID of the management unit to which this time-off limit is associated. One of managementUnitId or staffingGroupId must be set. This must not be set if staffingGroupId has value",
        "type": "string"
      },
      "staffingGroupId": {
        "description": "The ID of the staffing group to which this time-off limit is associated. It can be either management unit or business unit level staffing group. One of managementUnitId or staffingGroupId must be set. This must not be set if managementUnitId has value",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuCreateTimeOffPlanRequest": {
    "properties": {
      "activityCodeIds": {
        "description": "The IDs of activity codes to associate with this time-off plan",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "autoApprovalRule": {
        "description": "Auto approval rule for this time-off plan. Default is Never",
        "enum": [
          "Never",
          "Always",
          "CheckLimits",
          "CheckActivityCodes",
          "CheckLimitsAndActivityCodes"
        ],
        "type": "string"
      },
      "businessUnitAssociation": {
        "$ref": "#/definitions/CreateTimeOffPlanBusinessUnitAssociation",
        "description": "Business unit association, if the time-off plan belongs to a business unit. managementUnitAssociation must not be set if this is populated"
      },
      "countAgainstTimeOffLimits": {
        "description": "Whether this time-off plan should count against time-off limits. Default is false",
        "type": "boolean"
      },
      "daysBeforeStartToExpireFromWaitlist": {
        "description": "The number of days before the time-off request start date for when the request will be expired from the waitlist. Default is 0",
        "format": "int32",
        "type": "integer"
      },
      "enabled": {
        "description": "Whether this time-off plan should be used by agents. Default is true",
        "type": "boolean"
      },
      "hrisTimeOffType": {
        "$ref": "#/definitions/HrisTimeOffType",
        "description": "Time-off type, if this time-off plan is associated with the integration"
      },
      "managementUnitAssociation": {
        "$ref": "#/definitions/CreateTimeOffPlanManagementUnitAssociation",
        "description": "Management unit association, if the time-off plan belongs to a management unit. businessUnitAssociation must not be set if this is populated"
      },
      "name": {
        "description": "The name of this time-off plan",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "BuCurrentAgentScheduleSearchResponse": {
    "properties": {
      "agentSchedules": {
        "description": "The requested agent schedules",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleSearchResponse"
        },
        "type": "array"
      },
      "businessUnitTimeZone": {
        "description": "The time zone configured for the business unit to which this schedule applies",
        "type": "string"
      },
      "endDate": {
        "description": "The end date of the schedules. Only populated on notifications. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "publishedSchedules": {
        "description": "References to all published week schedules overlapping the start/end date query parameters",
        "items": {
          "$ref": "#/definitions/BuAgentSchedulePublishedScheduleReference"
        },
        "type": "array"
      },
      "startDate": {
        "description": "The start date of the schedules. Only populated on notifications. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "updates": {
        "description": "The list of updates for the schedule. Only used in notifications",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleUpdate"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuForecastGenerationPlanningGroupResult": {
    "properties": {
      "metricResults": {
        "description": "The generation results for the associated planning group",
        "items": {
          "$ref": "#/definitions/BuForecastTimeSeriesResult"
        },
        "type": "array"
      },
      "planningGroupId": {
        "description": "The ID of the planning group",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuForecastGenerationResult": {
    "properties": {
      "planningGroupResults": {
        "description": "Generation results, broken down by planning group",
        "items": {
          "$ref": "#/definitions/BuForecastGenerationPlanningGroupResult"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuForecastModificationResponse": {
    "properties": {
      "displayGranularity": {
        "description": "The client side display granularity of the modification, expressed in the ISO-8601 duration format. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "enabled": {
        "description": "Whether the modification is enabled for the forecast",
        "type": "boolean"
      },
      "endIntervalIndex": {
        "description": "The number of intervals past referenceStartDate representing the last interval to which this modification applies",
        "format": "int32",
        "type": "integer"
      },
      "granularity": {
        "description": "The actual granularity of the modification as stored behind the scenes, expressed in the ISO-8601 duration format. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "legacyMetric": {
        "description": "The legacy metric to which this modification applies if applicable",
        "enum": [
          "AverageAfterCallWorkTimeSeconds",
          "AverageHandleTimeSeconds",
          "AverageTalkTimeSeconds",
          "Offered"
        ],
        "type": "string"
      },
      "metric": {
        "description": "The metric to which this modification applies",
        "enum": [
          "Offered",
          "AverageHandleTimeSeconds"
        ],
        "type": "string"
      },
      "planningGroupIds": {
        "description": "The IDs of the planning groups to which this forecast modification applies",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "secondaryGranularity": {
        "description": "The granularity of the 'secondaryValues' modification as stored behind the scenes, expressed in the ISO-8601 duration format. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "secondaryValues": {
        "description": "The list of modification secondary values. Only applicable for multi granularity modifications",
        "items": {
          "$ref": "#/definitions/WfmForecastModificationIntervalOffsetValue"
        },
        "type": "array"
      },
      "startIntervalIndex": {
        "description": "The number of intervals past referenceStartDate representing the first interval to which this modification applies",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "The type of the modification",
        "enum": [
          "MinimumPerInterval",
          "MaximumPerInterval",
          "SetValuePerInterval",
          "ChangeValuePerInterval",
          "ChangePercentPerInterval",
          "SetValueOverRange",
          "ChangeValueOverRange",
          "SetValuesForIntervalSet",
          "SetMultiGranularityValuesForIntervalSet"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value of the modification",
        "format": "double",
        "type": "number"
      },
      "values": {
        "description": "The list of modification values. Only applicable for grid-type modifications",
        "items": {
          "$ref": "#/definitions/WfmForecastModificationIntervalOffsetValue"
        },
        "type": "array"
      }
    },
    "required": [
      "displayGranularity",
      "enabled",
      "granularity",
      "metric",
      "planningGroupIds",
      "type",
      "values"
    ],
    "type": "object"
  },
  "BuForecastResult": {
    "properties": {
      "planningGroups": {
        "description": "The forecast data broken up by planning group",
        "items": {
          "$ref": "#/definitions/ForecastPlanningGroupData"
        },
        "type": "array"
      },
      "referenceStartDate": {
        "description": "The reference start date for interval-based data for this forecast. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks in this forecast",
        "format": "int32",
        "type": "integer"
      },
      "weekNumber": {
        "description": "The week number represented by this response",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuForecastResultResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The download url to fetch the result.  Only populated if the result is too large to pass through the api directly",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuForecastResult",
        "description": "The result of the operation.  Populated whenever the result is small enough to pass through the api directly"
      }
    },
    "type": "object"
  },
  "BuForecastStaffingRequirementsResult": {
    "properties": {
      "downloadUrl": {
        "description": "The url to get the requirements results for this week",
        "type": "string"
      },
      "downloadUrlExpirationDate": {
        "description": "The expiration date of the download url, as an ISO-8601 string",
        "format": "date-time",
        "type": "string"
      },
      "planningGroupStaffingRequirements": {
        "description": "Results will always come via downloadUrl, however the schema is included for documentation",
        "items": {
          "$ref": "#/definitions/StaffingRequirementsPlanningGroupData"
        },
        "type": "array"
      },
      "weekNumber": {
        "description": "The week number represented by this response",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "downloadUrl",
      "downloadUrlExpirationDate",
      "weekNumber"
    ],
    "type": "object"
  },
  "BuForecastStaffingRequirementsResultResponse": {
    "properties": {
      "businessUnitId": {
        "description": "The ID of the business unit to which the forecast staffing requirements belongs",
        "type": "string"
      },
      "forecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The forecast reference"
      },
      "intervalLengthMinutes": {
        "description": "The period/interval in minutes for which to aggregate the data",
        "format": "int32",
        "type": "integer"
      },
      "referenceStartDate": {
        "description": "The reference start date for interval-based data for this forecast as an ISO-8601 string",
        "format": "date-time",
        "type": "string"
      },
      "results": {
        "description": "The forecast staffing requirement results, Will be populated when state == 'Complete'",
        "items": {
          "$ref": "#/definitions/BuForecastStaffingRequirementsResult"
        },
        "type": "array"
      },
      "state": {
        "description": "The state of the staffing requirements generation",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks in this forecast",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "businessUnitId",
      "forecast",
      "intervalLengthMinutes",
      "referenceStartDate",
      "state",
      "weekCount"
    ],
    "type": "object"
  },
  "BuForecastTimeSeriesResult": {
    "properties": {
      "forecastType": {
        "description": "The forecasting type in this forecast result",
        "enum": [
          "LongTerm",
          "ShortTerm"
        ],
        "type": "string"
      },
      "forecastingMethod": {
        "description": "The forecasting method that was used for this metric",
        "enum": [
          "AutoRegressiveIntegratedMovingAverage",
          "MovingAverage",
          "SingleExponentialSmoothing",
          "RandomWalk",
          "DecompositionUsingAdditiveSeasonality",
          "DecompositionUsingMultiplicativeSeasonality",
          "HoltWintersAdditiveSeasonality",
          "HoltWintersAdditiveSeasonalityWithDampedTrend",
          "HoltWintersMultiplicativeSeasonality",
          "HoltWintersMultiplicativeSeasonalityWithDampedTrend",
          "DampedLinearExponentialSmoothing",
          "DoubleExponentialSmoothing",
          "DoubleMovingAverage",
          "LinearExponentialSmoothing",
          "LinearWeightedMovingAverage",
          "PointEstimateUsingDampedLinearExponentialSmoothing",
          "PointEstimateUsingDoubleExponentialSmoothing",
          "PointEstimateUsingLatestWeek",
          "PointEstimateUsingLinearExponentialSmoothing",
          "PointEstimateUsingWeightedAverage",
          "CurveFit",
          "MultiLinearRegression",
          "DynamicHarmonicRegression",
          "Theta",
          "Ensemble",
          "Other"
        ],
        "type": "string"
      },
      "metric": {
        "description": "The metric this result applies to",
        "enum": [
          "Offered",
          "AverageHandleTimeSeconds"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuFullDayTimeOffMarker": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with the time off marker",
        "type": "string"
      },
      "businessUnitDate": {
        "description": "The date of the time off marker, interpreted in the business unit's time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "description": {
        "description": "The description of the time off marker",
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the time off marker in minutes",
        "format": "int32",
        "type": "integer"
      },
      "paid": {
        "description": "Whether the time off marker is paid",
        "type": "boolean"
      },
      "payableMinutes": {
        "description": "Payable minutes for the time off marker",
        "format": "int32",
        "type": "integer"
      },
      "timeOffRequestId": {
        "description": "The ID of the time off request",
        "type": "string"
      },
      "timeOffRequestSyncVersion": {
        "description": "The sync version of the full day time off request for which the scheduled activity is associated",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuGenerateScheduleRequest": {
    "properties": {
      "description": {
        "description": "The description for the schedule",
        "type": "string"
      },
      "options": {
        "$ref": "#/definitions/SchedulingOptionsRequest",
        "description": "Additional scheduling options"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The forecast to use when generating the schedule.  Note that the forecast must fully encompass the schedule's start week + week count"
      },
      "weekCount": {
        "description": "The number of weeks in the schedule. One extra day is added at the end",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "description",
      "weekCount"
    ],
    "type": "object"
  },
  "BuGetCurrentAgentScheduleRequest": {
    "properties": {
      "endDate": {
        "description": "End date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startDate": {
        "description": "Start date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "endDate",
      "startDate"
    ],
    "type": "object"
  },
  "BuHeadcountForecast": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BuPlanningGroupHeadcountForecast"
        },
        "type": "array"
      },
      "referenceStartDate": {
        "description": "Reference start date for the interval values in each forecast entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuHeadcountForecastResponse": {
    "properties": {
      "downloadUrl": {
        "description": "Download URL.  Null unless the response is too large to pass directly through the api",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuHeadcountForecast",
        "description": "The headcount forecast, null when downloadUrl is provided"
      }
    },
    "type": "object"
  },
  "BuImportAgentScheduleUploadSchema": {
    "properties": {
      "fullDayTimeOffMarkers": {
        "description": "Any full day time off markers that apply to this agent schedule",
        "items": {
          "$ref": "#/definitions/BuFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "shifts": {
        "description": "The shift definitions for this agent schedule",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleShift"
        },
        "type": "array"
      },
      "userId": {
        "description": "The ID of the user to whom this agent schedule applies",
        "type": "string"
      },
      "workPlanId": {
        "$ref": "#/definitions/ValueWrapperString",
        "description": "The ID of the work plan for this user.  Mutually exclusive with workPlanIdsPerWeek"
      },
      "workPlanIdsPerWeek": {
        "$ref": "#/definitions/ListWrapperString",
        "description": "The IDs of the work plans per week for this user.  Mutually exclusive with workPlanId"
      }
    },
    "required": [
      "userId"
    ],
    "type": "object"
  },
  "BuImportShortTermForecastSchema": {
    "properties": {
      "canUseForScheduling": {
        "description": "Whether this forecast can be used for scheduling",
        "type": "boolean"
      },
      "description": {
        "description": "The description for the forecast",
        "type": "string"
      },
      "longTermPlanningGroups": {
        "description": "The long term planning group data",
        "items": {
          "$ref": "#/definitions/LongTermForecastPlanningGroupData"
        },
        "type": "array"
      },
      "planningGroups": {
        "description": "The short term planning group data",
        "items": {
          "$ref": "#/definitions/ForecastPlanningGroupData"
        },
        "type": "array"
      },
      "weekCount": {
        "description": "The number of weeks covered by the forecast",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "description",
      "planningGroups",
      "weekCount"
    ],
    "type": "object"
  },
  "BuIntradayDataGroup": {
    "properties": {
      "forecastDataPerInterval": {
        "description": "Forecast data per interval for this date range",
        "items": {
          "$ref": "#/definitions/BuIntradayForecastData"
        },
        "type": "array"
      },
      "forecastDataSummary": {
        "$ref": "#/definitions/BuIntradayForecastData",
        "description": "Forecast data summary for this date range"
      },
      "mediaType": {
        "description": "The media type associated with this intraday group",
        "enum": [
          "Voice",
          "Chat",
          "Email",
          "Callback",
          "Message"
        ],
        "type": "string"
      },
      "performancePredictionDataPerInterval": {
        "description": "Performance prediction data per interval for this date range",
        "items": {
          "$ref": "#/definitions/IntradayPerformancePredictionData"
        },
        "type": "array"
      },
      "performancePredictionDataSummary": {
        "$ref": "#/definitions/IntradayPerformancePredictionData",
        "description": "Performance prediction data summary for this date range"
      },
      "scheduleDataPerInterval": {
        "description": "Schedule data per interval for this date range",
        "items": {
          "$ref": "#/definitions/BuIntradayScheduleData"
        },
        "type": "array"
      },
      "scheduleDataSummary": {
        "$ref": "#/definitions/BuIntradayScheduleData",
        "description": "Schedule data summary for this date range"
      }
    },
    "type": "object"
  },
  "BuIntradayForecastData": {
    "properties": {
      "averageHandleTimeSeconds": {
        "description": "The average handle time in seconds an agent spent handling interactions",
        "format": "double",
        "type": "number"
      },
      "offered": {
        "description": "The number of interactions routed into the queues in the selected planning groups for the given media type for an agent to answer",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "BuIntradayResponse": {
    "properties": {
      "categories": {
        "description": "The categories to which this data corresponds",
        "items": {
          "enum": [
            "ForecastData",
            "ScheduleData",
            "PerformancePredictionData"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "endDate": {
        "description": "The end of the date range for which this data applies. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "intervalLengthMinutes": {
        "description": "The aggregation period in minutes, which determines the interval duration of the returned data",
        "format": "int32",
        "type": "integer"
      },
      "intradayDataGroupings": {
        "description": "Intraday data grouped by a single media type and set of planning group IDs",
        "items": {
          "$ref": "#/definitions/BuIntradayDataGroup"
        },
        "type": "array"
      },
      "noDataReason": {
        "description": "If not null, the reason there was no data for the request",
        "enum": [
          "NoPublishedSchedule",
          "NoSourceForecast"
        ],
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/BuScheduleReference",
        "description": "Schedule reference"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "Short term forecast reference"
      },
      "startDate": {
        "description": "The start of the date range for which this data applies.  This is also the start reference point for the intervals represented in the various arrays. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuIntradayScheduleData": {
    "properties": {
      "onQueueTimeSeconds": {
        "description": "The total on-queue time in seconds for all agents in this group",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuListAlternativeShiftTradesResponse": {
    "properties": {
      "job": {
        "$ref": "#/definitions/BuAlternativeShiftJobResponse",
        "description": "The asynchronous job handling the request. Null if result returns synchronously"
      },
      "result": {
        "$ref": "#/definitions/AlternativeShiftTradeListing",
        "description": "The result of the request. May come via notification. Null if job is populated"
      }
    },
    "type": "object"
  },
  "BuManagementUnitScheduleSummary": {
    "properties": {
      "agentCount": {
        "description": "The number of agents from this management unit that are in the schedule",
        "format": "int32",
        "type": "integer"
      },
      "agents": {
        "description": "The agents in the management unit who are part of this schedule, or in schedule change notifications, the agents that were changed. Note this will come back as an empty list unless the appropriate expand query parameter is passed",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array",
        "uniqueItems": true
      },
      "endDate": {
        "description": "The end of the schedule change in the management unit. Only populated in schedule update notifications. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which this summary applies"
      },
      "startDate": {
        "description": "The start of the schedule change in the management unit. Only populated in schedule update notifications. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuNotificationSettingsRequest": {
    "properties": {
      "scheduling": {
        "$ref": "#/definitions/BuScheduleNotificationsSettingsRequest",
        "description": "Schedule notification settings"
      }
    },
    "type": "object"
  },
  "BuNotificationSettingsResponse": {
    "properties": {
      "scheduling": {
        "$ref": "#/definitions/BuScheduleNotificationsSettingsResponse",
        "description": "Schedule notification settings"
      }
    },
    "type": "object"
  },
  "BuPlanningGroupHeadcountForecast": {
    "properties": {
      "planningGroup": {
        "$ref": "#/definitions/PlanningGroupReference",
        "description": "The planning group to which this portion of the headcount forecast applies"
      },
      "requiredPerInterval": {
        "description": "Required headcount per interval, referenced against the reference start date",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "requiredWithoutShrinkagePerInterval": {
        "description": "Required headcount per interval without accounting for shrinkage, referenced against the reference start date",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuQueryAdherenceExplanationsRequest": {
    "properties": {
      "agentIds": {
        "description": "A filter for which agents within the business unit to query. Leave empty or omit entirely for all agents in the business unit (or management units if specified)",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "endDate": {
        "description": "The end date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "managementUnitIds": {
        "description": "A filter for which management units to query. Leave empty or omit entirely for all management units in the business unit",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startDate": {
        "description": "The start date of the range to query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "endDate",
      "startDate"
    ],
    "type": "object"
  },
  "BuQueryAdherenceExplanationsResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The URL from which to download the result. May come via notification",
        "type": "string"
      },
      "job": {
        "$ref": "#/definitions/AdherenceExplanationJobReference",
        "description": "The asynchronous job handling the query"
      },
      "result": {
        "$ref": "#/definitions/AdherenceExplanationListingBuQueryResponse",
        "description": "The result of the query. May come via notification"
      }
    },
    "type": "object"
  },
  "BuQueryAgentSchedulesRequest": {
    "properties": {
      "managementUnitId": {
        "description": "The ID of the management unit to query",
        "type": "string"
      },
      "teamIds": {
        "description": "The teamIds to request. If null or not set, results will be queried for requested users if applicable or otherwise all users in the management unit",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "userIds": {
        "description": "The IDs of the users to query.  Omit to query all user schedules in the management unit. Note: If teamIds is also specified, only schedules for users in the requested teams will be returned",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "managementUnitId"
    ],
    "type": "object"
  },
  "BuRescheduleAgentScheduleResult": {
    "properties": {
      "downloadResult": {
        "$ref": "#/definitions/MuRescheduleResultWrapper",
        "description": "The agent schedules.  Result will always come via the downloadUrl; however the schema is included for documentation"
      },
      "downloadUrl": {
        "description": "The download URL from which to fetch the result",
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which this part of the result applies"
      }
    },
    "type": "object"
  },
  "BuRescheduleRequest": {
    "properties": {
      "activityCodeIds": {
        "description": "The IDs of the activity codes to consider for rescheduling.  Omit to consider all activity codes",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "agentIds": {
        "description": "The IDs of the agents to consider for rescheduling.  Omit to consider all agents in the specified management units.Agents not in the specified management units will be ignored",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "doNotChangeDailyPaidTime": {
        "description": "Instructs the scheduler whether it is allowed to change daily paid time",
        "type": "boolean"
      },
      "doNotChangeManuallyEditedShifts": {
        "description": "Instructs the scheduler whether it is allowed to change manually edited shifts",
        "type": "boolean"
      },
      "doNotChangeShiftStartTimes": {
        "description": "Instructs the scheduler whether it is allowed to change shift start times",
        "type": "boolean"
      },
      "doNotChangeWeeklyPaidTime": {
        "description": "Instructs the scheduler whether it is allowed to change weekly paid time",
        "type": "boolean"
      },
      "endDate": {
        "description": "The end of the range to reschedule.  Defaults the the end of the schedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "managementUnitIds": {
        "description": "The IDs of the management units to reschedule",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startDate": {
        "description": "The start of the range to reschedule.  Defaults to the beginning of the schedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "doNotChangeDailyPaidTime",
      "doNotChangeManuallyEditedShifts",
      "doNotChangeShiftStartTimes",
      "doNotChangeWeeklyPaidTime",
      "managementUnitIds"
    ],
    "type": "object"
  },
  "BuRescheduleResult": {
    "properties": {
      "agentSchedules": {
        "description": "List of download links for agent schedules produced by the rescheduling run",
        "items": {
          "$ref": "#/definitions/BuRescheduleAgentScheduleResult"
        },
        "type": "array"
      },
      "generationResults": {
        "$ref": "#/definitions/ScheduleGenerationResult",
        "description": "The generation results.  Note the result will always be delivered via the generationResultsDownloadUrl; however the schema is included for documentation"
      },
      "generationResultsDownloadUrl": {
        "description": "The download URL from which to fetch the generation results for the rescheduling run",
        "type": "string"
      },
      "headcountForecast": {
        "$ref": "#/definitions/BuHeadcountForecast",
        "description": "The headcount forecast.  Note the result will always be delivered via the headcountForecastDownloadUrl; however the schema is included for documentation"
      },
      "headcountForecastDownloadUrl": {
        "description": "The download URL from which to fetch the headcount forecast for the rescheduling run",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuScheduleListItem": {
    "properties": {
      "description": {
        "description": "The description of this schedule",
        "type": "string"
      },
      "generationResults": {
        "$ref": "#/definitions/ScheduleGenerationResultSummary",
        "description": "Generation result summary for this schedule, if applicable"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this schedule"
      },
      "published": {
        "description": "Whether this schedule is published",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The forecast used for this schedule, if applicable"
      },
      "weekCount": {
        "description": "The number of weeks spanned by this schedule",
        "format": "int32",
        "type": "integer"
      },
      "weekDate": {
        "description": "The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuScheduleListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BuScheduleListItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuScheduleMetadata": {
    "properties": {
      "description": {
        "description": "The description of this schedule",
        "type": "string"
      },
      "generationResults": {
        "$ref": "#/definitions/ScheduleGenerationResultSummary",
        "description": "Generation result summary for this schedule, if applicable"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnits": {
        "description": "High level per-management unit schedule metadata",
        "items": {
          "$ref": "#/definitions/BuManagementUnitScheduleSummary"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this schedule"
      },
      "published": {
        "description": "Whether this schedule is published",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The forecast used for this schedule, if applicable"
      },
      "weekCount": {
        "description": "The number of weeks spanned by this schedule",
        "format": "int32",
        "type": "integer"
      },
      "weekDate": {
        "description": "The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuScheduleNotificationsCategorySettings": {
    "properties": {
      "activityCategory": {
        "description": "The activity category",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "earlyReminderEnabled": {
        "description": "Indicates if agents should receive early schedule reminder notifications.",
        "type": "boolean"
      },
      "onTimeReminderEnabled": {
        "description": "Indicates if agents should receive out of adherence notifications.",
        "type": "boolean"
      }
    },
    "required": [
      "activityCategory",
      "earlyReminderEnabled",
      "onTimeReminderEnabled"
    ],
    "type": "object"
  },
  "BuScheduleNotificationsSettingsRequest": {
    "properties": {
      "activityCategorySettings": {
        "description": "List of activity category notification settings",
        "items": {
          "$ref": "#/definitions/BuScheduleNotificationsCategorySettings"
        },
        "type": "array"
      },
      "earlyReminderMinutes": {
        "description": "The number of minutes prior to the scheduled event to display an early reminder notification",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuScheduleNotificationsSettingsResponse": {
    "properties": {
      "activityCategorySettings": {
        "description": "List of activity category notification settings",
        "items": {
          "$ref": "#/definitions/BuScheduleNotificationsCategorySettings"
        },
        "type": "array"
      },
      "earlyReminderMinutes": {
        "description": "The number of minutes prior to the scheduled event to display an early reminder notification",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "activityCategorySettings",
      "earlyReminderMinutes"
    ],
    "type": "object"
  },
  "BuScheduleReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuScheduleReferenceForMuRoute": {
    "properties": {
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The start week date for this schedule"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuScheduleRun": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intradayRescheduling": {
        "description": "Whether this is an intraday rescheduling run",
        "type": "boolean"
      },
      "messageCount": {
        "description": "The number of schedule generation messages for this schedule generation run",
        "format": "int32",
        "type": "integer"
      },
      "messageSeverityCounts": {
        "description": "The list of schedule generation message counts by severity for this schedule generation run",
        "items": {
          "$ref": "#/definitions/SchedulerMessageSeverityCount"
        },
        "type": "array"
      },
      "percentComplete": {
        "description": "Percent completion of the schedule run",
        "format": "double",
        "type": "number"
      },
      "reschedulingOptions": {
        "$ref": "#/definitions/ReschedulingOptionsRunResponse",
        "description": "Rescheduling options for this run.  Null unless intradayRescheduling is true"
      },
      "reschedulingResultExpiration": {
        "description": "When the reschedule result will expire.  Null unless intradayRescheduling is true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/BuScheduleReference",
        "description": "The generated schedule.  Null unless the schedule run is complete"
      },
      "scheduleDescription": {
        "description": "The description of the generated schedule",
        "type": "string"
      },
      "schedulerRunId": {
        "description": "The scheduler run ID.  Reference this value for support",
        "type": "string"
      },
      "schedulingCanceledBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who canceled the scheduling run, if applicable"
      },
      "schedulingCompletedTime": {
        "description": "When the scheduling run was completed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "schedulingStartTime": {
        "description": "When the schedule generation run started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "schedulingStartedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who started the scheduling run"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the generation run",
        "enum": [
          "None",
          "Queued",
          "Scheduling",
          "Canceled",
          "Failed",
          "Complete"
        ],
        "type": "string"
      },
      "targetWeek": {
        "description": "The start date of the target week. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks spanned by the schedule",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuScheduleRunListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BuScheduleRun"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuSchedulingSettingsRequest": {
    "properties": {
      "allowWorkPlanPerMinuteGranularity": {
        "description": "Indicates whether or not per minute granularity for scheduling will be enabled for this business unit. Defaults to false.",
        "type": "boolean"
      },
      "messageSeverities": {
        "description": "Schedule generation message severity configuration",
        "items": {
          "$ref": "#/definitions/SchedulerMessageTypeSeverity"
        },
        "type": "array"
      },
      "serviceGoalImpact": {
        "$ref": "#/definitions/WfmServiceGoalImpactSettings",
        "description": "Configures the max percent increase and decrease of service goals for this business unit"
      },
      "syncTimeOffProperties": {
        "$ref": "#/definitions/SetWrapperSyncTimeOffProperty",
        "description": "Synchronize set of time off properties from scheduled activities to time off requests when the schedule is published."
      }
    },
    "type": "object"
  },
  "BuSchedulingSettingsResponse": {
    "properties": {
      "allowWorkPlanPerMinuteGranularity": {
        "description": "Indicates whether or not per minute granularity for scheduling will be enabled for this business unit. Defaults to false.",
        "type": "boolean"
      },
      "messageSeverities": {
        "description": "Schedule generation message severity configuration",
        "items": {
          "$ref": "#/definitions/SchedulerMessageTypeSeverity"
        },
        "type": "array"
      },
      "serviceGoalImpact": {
        "$ref": "#/definitions/WfmServiceGoalImpactSettings",
        "description": "Configures the max percent increase and decrease of service goals for this business unit"
      },
      "syncTimeOffProperties": {
        "description": "Synchronize set of time off properties from scheduled activities to time off requests when the schedule is published.",
        "items": {
          "enum": [
            "PayableMinutes"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "BuSearchAgentSchedulesRequest": {
    "properties": {
      "endDate": {
        "description": "End date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startDate": {
        "description": "Start date of the range to search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "userIds": {
        "description": "IDs of the users for whose schedules to search",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "endDate",
      "startDate"
    ],
    "type": "object"
  },
  "BuServiceLevel": {
    "properties": {
      "include": {
        "description": "Whether to include service level targets in the associated configuration",
        "type": "boolean"
      },
      "percent": {
        "description": "Service level target percent answered. Required if include == true",
        "format": "int32",
        "type": "integer"
      },
      "seconds": {
        "description": "Service level target answer time. Required if include == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "include"
    ],
    "type": "object"
  },
  "BuSetTimeOffLimitValuesRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time-off limit"
      },
      "values": {
        "items": {
          "$ref": "#/definitions/BuTimeOffLimitRange"
        },
        "type": "array"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "BuShortTermForecast": {
    "properties": {
      "canUseForScheduling": {
        "description": "Whether this forecast can be used for scheduling",
        "type": "boolean"
      },
      "creationMethod": {
        "description": "The method by which this forecast was created",
        "enum": [
          "Import",
          "ImportedHistoricalWeightedAverage",
          "HistoricalWeightedAverage",
          "Advanced"
        ],
        "type": "string"
      },
      "description": {
        "description": "The description of this forecast",
        "type": "string"
      },
      "generationResults": {
        "$ref": "#/definitions/BuForecastGenerationResult",
        "description": "Generation result metadata"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "legacy": {
        "description": "Whether this forecast contains modifications on legacy metrics",
        "readOnly": true,
        "type": "boolean"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Metadata for this forecast"
      },
      "modifications": {
        "description": "Any manual modifications applied to this forecast",
        "items": {
          "$ref": "#/definitions/BuForecastModificationResponse"
        },
        "type": "array"
      },
      "planningGroups": {
        "$ref": "#/definitions/ForecastPlanningGroupsResponse",
        "description": "A snapshot of the planning groups used for this forecast as of the version number indicated"
      },
      "planningGroupsVersion": {
        "description": "The version of the planning groups that was used for this forecast",
        "format": "int32",
        "type": "integer"
      },
      "referenceStartDate": {
        "description": "The reference start date for interval-based data for this forecast. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceDays": {
        "description": "The source day pointers for this forecast",
        "items": {
          "$ref": "#/definitions/ForecastSourceDayPointer"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "The time zone for this forecast",
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks this forecast covers",
        "format": "int32",
        "type": "integer"
      },
      "weekDate": {
        "description": "The start week date of this forecast in yyyy-MM-dd.  Must fall on the start day of week for the associated business unit. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuShortTermForecastListItem": {
    "properties": {
      "canUseForScheduling": {
        "description": "Whether this forecast can be used for scheduling",
        "type": "boolean"
      },
      "creationMethod": {
        "description": "The method by which this forecast was created",
        "enum": [
          "Import",
          "ImportedHistoricalWeightedAverage",
          "HistoricalWeightedAverage",
          "Advanced"
        ],
        "type": "string"
      },
      "description": {
        "description": "The description of this forecast",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "legacy": {
        "description": "Whether this forecast contains modifications on legacy metrics",
        "readOnly": true,
        "type": "boolean"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Metadata for this forecast"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks this forecast covers",
        "format": "int32",
        "type": "integer"
      },
      "weekDate": {
        "description": "The start week date of this forecast in yyyy-MM-dd.  Must fall on the start day of week for the associated business unit. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuShortTermForecastListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BuShortTermForecastListItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuShortTermForecastReference": {
    "properties": {
      "description": {
        "description": "The description of the short term forecast",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The weekDate of the short term forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "weekDate"
    ],
    "type": "object"
  },
  "BuShortTermForecastWeekReference": {
    "properties": {
      "description": {
        "description": "The description of the short term forecast",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "Forecast id used in this work plan bid",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The weekDate of the short term forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "weekNumber": {
        "description": "The week number used for this bid. First week starts with number 1",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "id",
      "weekDate",
      "weekNumber"
    ],
    "type": "object"
  },
  "BuShortTermForecastingSettings": {
    "properties": {
      "defaultHistoryWeeks": {
        "description": "The number of historical weeks to consider when creating a forecast. This setting is only used for legacy weighted average forecasts",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BuTimeOffLimitListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BuTimeOffLimitResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuTimeOffLimitRange": {
    "properties": {
      "limitMinutesPerDay": {
        "description": "The list of time-off limit values in minutes per day. If 'null' is specified, then the day-specific value is cleared. Such a day will have a value of 0",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "startDate": {
        "description": "Start date of the range. The end date is determined by the size of 'limitMinutesPerDay'. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "limitMinutesPerDay",
      "startDate"
    ],
    "type": "object"
  },
  "BuTimeOffLimitReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuTimeOffLimitResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which this time-off limit is associated. If staffingGroup is set, then the limit is associated with that staffing group, which belongs to this management unit.At least one of managementUnit and staffingGroup must be set"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time-off limit"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "staffingGroup": {
        "$ref": "#/definitions/StaffingGroupReference",
        "description": "The staffing group to which this time-off limit is associated. If managementUnit is set, then the staffing group belongs to that management unit.Otherwise, if managementUnit is not set, it is a business unit level staffing group.At least one of managementUnit and staffingGroup must be set"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "BuTimeOffLimitValueRange": {
    "properties": {
      "allocatedMinutesPerInterval": {
        "description": "A list of allocated time-off minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity choice for time-off limit",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "limitMinutesPerInterval": {
        "description": "A list of time-off limit values in minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time-off limit"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "Start date of the requested date range, in ISO-8601 format. The end date is determined by the size of interval lists",
        "format": "date",
        "type": "string"
      },
      "timeOffLimit": {
        "$ref": "#/definitions/BuTimeOffLimitReference",
        "description": "The ID of the time-off limit"
      },
      "waitlistedMinutesPerInterval": {
        "description": "A list of waitlisted time-off minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "waitlistedRequestsPerInterval": {
        "description": "The current number of waitlisted time-off requests for every interval per granularity",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "required": [
      "allocatedMinutesPerInterval",
      "granularity",
      "limitMinutesPerInterval",
      "metadata",
      "startDate",
      "timeOffLimit",
      "waitlistedMinutesPerInterval",
      "waitlistedRequestsPerInterval"
    ],
    "type": "object"
  },
  "BuTimeOffLimitValuesResponse": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/BuTimeOffLimitValueRange"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuTimeOffPlanListing": {
    "properties": {
      "downloadUrl": {
        "description": "URL from which to fetch results for requests with a large result set. If populated, the downloaded data will conform to the same schema as would normally be returned, excepting downloaded data will never itself contain a downloadUrl",
        "type": "string"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/BuTimeOffPlanResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BuTimeOffPlanResponse": {
    "properties": {
      "activityCodeIds": {
        "description": "The IDs of activity codes associated with this time-off plan",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "autoApprovalRule": {
        "description": "Auto approval rule for this time-off plan",
        "enum": [
          "Never",
          "Always",
          "CheckLimits",
          "CheckActivityCodes",
          "CheckLimitsAndActivityCodes"
        ],
        "type": "string"
      },
      "businessUnitAssociation": {
        "$ref": "#/definitions/TimeOffPlanBusinessUnitAssociation",
        "description": "Business unit association, if the time-off plan belongs to a business unit. managementUnitAssociation must not be set if this is populated"
      },
      "countAgainstTimeOffLimits": {
        "description": "Whether this time-off plan counts against time-off limits",
        "type": "boolean"
      },
      "daysBeforeStartToExpireFromWaitlist": {
        "description": "The number of days before the time-off request start date for when the request will be expired from the waitlist",
        "format": "int32",
        "type": "integer"
      },
      "enabled": {
        "description": "Whether this time-off plan is currently being used by agents",
        "type": "boolean"
      },
      "hrisTimeOffType": {
        "$ref": "#/definitions/HrisTimeOffType",
        "description": "Time-off type, if this time-off plan is associated with the integration"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnitAssociation": {
        "$ref": "#/definitions/TimeOffPlanManagementUnitAssociation",
        "description": "Management Unit association, if the time-off plan belongs to a management unit. businessUnitAssociation must not be set if this is populated"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time-off plan"
      },
      "name": {
        "description": "The name of this time-off plan",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeOffLimits": {
        "description": "The IDs of time-off limits associated with this time-off plan",
        "items": {
          "$ref": "#/definitions/BuTimeOffLimitReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "activityCodeIds",
      "autoApprovalRule",
      "countAgainstTimeOffLimits",
      "daysBeforeStartToExpireFromWaitlist",
      "enabled",
      "metadata",
      "name"
    ],
    "type": "object"
  },
  "BuUpdateAgentScheduleShift": {
    "properties": {
      "activities": {
        "description": "The activities associated with this shift",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleActivity"
        },
        "type": "array"
      },
      "delete": {
        "description": "Set to true to delete the shift from the agent's schedule",
        "type": "boolean"
      },
      "id": {
        "description": "The ID of the shift",
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of this shift in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "manuallyEdited": {
        "description": "Whether this shift was manually edited. This is only set by clients and is used for rescheduling",
        "type": "boolean"
      },
      "schedule": {
        "$ref": "#/definitions/BuScheduleReference",
        "description": "The schedule to which this shift belongs",
        "readOnly": true
      },
      "startDate": {
        "description": "The start date of this shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BuUpdateAgentScheduleUploadSchema": {
    "properties": {
      "delete": {
        "description": "Whether to delete this agent's schedule. Defaults to false if not set",
        "type": "boolean"
      },
      "fullDayTimeOffMarkers": {
        "description": "Any full day time off markers that apply to this agent schedule",
        "items": {
          "$ref": "#/definitions/BuFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this agent schedule. Required if updating or deleting an existing agent schedule, otherwise should be omitted"
      },
      "shifts": {
        "description": "The shift definitions for this agent schedule",
        "items": {
          "$ref": "#/definitions/BuUpdateAgentScheduleShift"
        },
        "type": "array"
      },
      "userId": {
        "description": "The ID of the user to whom this agent schedule applies",
        "type": "string"
      },
      "workPlanId": {
        "$ref": "#/definitions/ValueWrapperString",
        "description": "The ID of the work plan for this user.  Mutually exclusive with workPlanIdsPerWeek"
      },
      "workPlanIdsPerWeek": {
        "$ref": "#/definitions/ListWrapperString",
        "description": "The IDs of the work plans per week for this user.  Mutually exclusive with workPlanId"
      }
    },
    "required": [
      "userId"
    ],
    "type": "object"
  },
  "BuUpdateTimeOffPlanRequest": {
    "properties": {
      "activityCodeIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The IDs of activity codes to associate with this time-off plan"
      },
      "autoApprovalRule": {
        "description": "Auto approval rule for this time-off plan",
        "enum": [
          "Never",
          "Always",
          "CheckLimits",
          "CheckActivityCodes",
          "CheckLimitsAndActivityCodes"
        ],
        "type": "string"
      },
      "businessUnitAssociation": {
        "$ref": "#/definitions/UpdateTimeOffPlanBusinessUnitAssociation",
        "description": "Business unit association, if the time-off plan belongs to a business unit. managementUnitAssociation must not be set if this is populated"
      },
      "countAgainstTimeOffLimits": {
        "description": "Whether this time-off plan should count against time-off limits",
        "type": "boolean"
      },
      "daysBeforeStartToExpireFromWaitlist": {
        "description": "The number of days before the time-off request start date for when the request will be expired from the waitlist",
        "format": "int32",
        "type": "integer"
      },
      "enabled": {
        "description": "Whether this time-off plan should be used by agents",
        "type": "boolean"
      },
      "hrisTimeOffType": {
        "$ref": "#/definitions/ValueWrapperHrisTimeOffType",
        "description": "Time-off type, if this time-off plan is associated with the integration"
      },
      "managementUnitAssociation": {
        "$ref": "#/definitions/UpdateTimeOffPlanManagementUnitAssociation",
        "description": "Management unit association, if the time-off plan belongs to a management unit. businessUnitAssociation must not be set if this is populated"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this time-off plan"
      },
      "name": {
        "description": "The name of this time-off plan",
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "BulkCallbackDisconnectRequest": {
    "properties": {
      "callbackDisconnectIdentifiers": {
        "description": "The list of requests to disconnect callbacks in bulk",
        "items": {
          "$ref": "#/definitions/CallbackDisconnectIdentifier"
        },
        "type": "array"
      }
    },
    "required": [
      "callbackDisconnectIdentifiers"
    ],
    "type": "object"
  },
  "BulkCallbackPatchRequest": {
    "properties": {
      "patchCallbackRequests": {
        "description": "The list of requests to update callbacks in bulk",
        "items": {
          "$ref": "#/definitions/PatchCallbackRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "patchCallbackRequests"
    ],
    "type": "object"
  },
  "BulkCallbackPatchResponse": {
    "properties": {
      "errorCount": {
        "description": "The number of errors from the bulk operation.",
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "description": "An index of where the errors are in the listing.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "description": "A list of the results from the bulk operation.",
        "items": {
          "$ref": "#/definitions/BulkResult"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkContactsRequest": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalContact"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkContactsResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultExternalContactExternalContact"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkDeleteResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultVoidEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkError": {
    "properties": {
      "code": {
        "description": "Error code of the bulk operation result.",
        "type": "string"
      },
      "message": {
        "description": "Error message of the bulk operation result.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "BulkErrorDetail": {
    "properties": {
      "fieldName": {
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "BulkErrorEntity": {
    "properties": {
      "code": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/BulkErrorDetail"
        },
        "type": "array"
      },
      "entity": {
        "$ref": "#/definitions/Entity"
      },
      "message": {
        "type": "string"
      },
      "retryable": {
        "type": "boolean"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BulkErrorExternalContact": {
    "properties": {
      "code": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/BulkErrorDetail"
        },
        "type": "array"
      },
      "entity": {
        "$ref": "#/definitions/ExternalContact"
      },
      "message": {
        "type": "string"
      },
      "retryable": {
        "type": "boolean"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BulkErrorExternalOrganization": {
    "properties": {
      "code": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/BulkErrorDetail"
        },
        "type": "array"
      },
      "entity": {
        "$ref": "#/definitions/ExternalOrganization"
      },
      "message": {
        "type": "string"
      },
      "retryable": {
        "type": "boolean"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BulkErrorNote": {
    "properties": {
      "code": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/BulkErrorDetail"
        },
        "type": "array"
      },
      "entity": {
        "$ref": "#/definitions/Note"
      },
      "message": {
        "type": "string"
      },
      "retryable": {
        "type": "boolean"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BulkErrorRelationship": {
    "properties": {
      "code": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/BulkErrorDetail"
        },
        "type": "array"
      },
      "entity": {
        "$ref": "#/definitions/Relationship"
      },
      "message": {
        "type": "string"
      },
      "retryable": {
        "type": "boolean"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "BulkFetchContactsResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultExternalContactEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkFetchNotesResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultNoteEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkFetchOrganizationsResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultExternalOrganizationEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkFetchRelationshipsResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultRelationshipEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkIdsRequest": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalContactsEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkNotesRequest": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Note"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkNotesResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultNoteNote"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkOrganizationsRequest": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalOrganization"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkOrganizationsResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultExternalOrganizationExternalOrganization"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkRelationshipsRequest": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Relationship"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkRelationshipsResponse": {
    "properties": {
      "errorCount": {
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "items": {
          "$ref": "#/definitions/BulkResponseResultRelationshipRelationship"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkResponse": {
    "properties": {
      "errorCount": {
        "description": "The number of errors from the bulk operation.",
        "format": "int32",
        "type": "integer"
      },
      "errorIndexes": {
        "description": "An index of where the errors are in the listing.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "results": {
        "description": "A list of the results from the bulk operation.",
        "items": {
          "$ref": "#/definitions/BulkResult"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkResponseResultExternalContactEntity": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/ExternalContact"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorEntity"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultExternalContactExternalContact": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/ExternalContact"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorExternalContact"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultExternalOrganizationEntity": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/ExternalOrganization"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorEntity"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultExternalOrganizationExternalOrganization": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/ExternalOrganization"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorExternalOrganization"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultNoteEntity": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/Note"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorEntity"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultNoteNote": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/Note"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorNote"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultRelationshipEntity": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/Relationship"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorEntity"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultRelationshipRelationship": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/Relationship"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorRelationship"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResponseResultVoidEntity": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/Void"
      },
      "error": {
        "$ref": "#/definitions/BulkErrorEntity"
      },
      "id": {
        "type": "string"
      },
      "success": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "BulkResult": {
    "properties": {
      "entity": {
        "description": "The result of the operation if it succeeded.",
        "type": "object"
      },
      "error": {
        "$ref": "#/definitions/BulkError",
        "description": "Error details if the operation failed."
      }
    },
    "type": "object"
  },
  "BulkShiftTradeStateUpdateRequest": {
    "properties": {
      "entities": {
        "description": "The shift trades to update",
        "items": {
          "$ref": "#/definitions/BulkUpdateShiftTradeStateRequestItem"
        },
        "type": "array"
      }
    },
    "required": [
      "entities"
    ],
    "type": "object"
  },
  "BulkUpdateShiftTradeStateRequestItem": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the shift trade"
      },
      "state": {
        "description": "The new state to set on the shift trade",
        "enum": [
          "Unmatched",
          "Matched",
          "Approved",
          "Denied",
          "Expired",
          "Canceled"
        ],
        "type": "string"
      }
    },
    "required": [
      "metadata",
      "state"
    ],
    "type": "object"
  },
  "BulkUpdateShiftTradeStateResponse": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BulkUpdateShiftTradeStateResult",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "BulkUpdateShiftTradeStateResult": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BulkUpdateShiftTradeStateResultItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BulkUpdateShiftTradeStateResultItem": {
    "properties": {
      "failureReason": {
        "description": "The reason the update failed, if applicable",
        "enum": [
          "InitiatingAgentScheduleNotFound",
          "InitiatingAgentShiftHasExternalActivities",
          "InitiatingAgentShiftNotFound",
          "ReceivingAgentNotFound",
          "ReceivingAgentScheduleNotFound",
          "ReceivingAgentShiftHasExternalActivities",
          "ReceivingAgentShiftNotFound",
          "ScheduleNotPublished",
          "TransitionNotAllowed"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the shift trade"
      },
      "reviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who reviewed the request, if applicable"
      },
      "reviewedDate": {
        "description": "The date the request was reviewed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The state of the shift trade after the update request is processed",
        "enum": [
          "Unmatched",
          "Matched",
          "Approved",
          "Denied",
          "Expired",
          "Canceled"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Bullseye": {
    "properties": {
      "rings": {
        "description": "The bullseye rings configured for this queue.",
        "items": {
          "$ref": "#/definitions/Ring"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BusinessUnitActivityCode": {
    "properties": {
      "active": {
        "description": "Whether this activity code is active or has been deleted",
        "type": "boolean"
      },
      "agentTimeOffSelectable": {
        "description": "Whether an agent can select this activity code when creating or editing a time off request. Null if the activity's category is not time off.",
        "type": "boolean"
      },
      "category": {
        "description": "The category of the activity code",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "countsAsPaidTime": {
        "description": "Whether an agent is paid while performing this activity",
        "type": "boolean"
      },
      "countsAsWorkTime": {
        "description": "Indicates whether or not the activity should be counted as contiguous work time for calculating daily constraints",
        "type": "boolean"
      },
      "countsTowardShrinkage": {
        "description": "Whether or not this activity code counts toward shrinkage calculations",
        "type": "boolean"
      },
      "defaultCode": {
        "description": "Whether this is a default activity code",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interruptible": {
        "description": "Whether this activity code is considered interruptible",
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The default length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata of this activity code"
      },
      "name": {
        "type": "string"
      },
      "plannedShrinkage": {
        "description": "Whether this activity code is considered planned or unplanned shrinkage",
        "type": "boolean"
      },
      "secondaryPresences": {
        "description": "The secondary presences of this activity code",
        "items": {
          "$ref": "#/definitions/SecondaryPresence"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BusinessUnitActivityCodeListing": {
    "properties": {
      "downloadUrl": {
        "description": "URL from which to fetch results for requests with a large result set. If populated, the downloaded data will conform to the same schema as would normally be returned, excepting downloaded data will never itself contain a downloadUrl",
        "type": "string"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/BusinessUnitActivityCode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BusinessUnitListItem": {
    "properties": {
      "authorized": {
        "description": "Whether the user has authorization to interact with this business unit",
        "readOnly": true,
        "type": "boolean"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BusinessUnitListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BusinessUnitListItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "BusinessUnitReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "BusinessUnitResponse": {
    "properties": {
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/BusinessUnitSettingsResponse",
        "description": "Settings for this business unit"
      }
    },
    "type": "object"
  },
  "BusinessUnitSettingsResponse": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this business unit"
      },
      "scheduling": {
        "$ref": "#/definitions/BuSchedulingSettingsResponse",
        "description": "Scheduling settings"
      },
      "shortTermForecasting": {
        "$ref": "#/definitions/BuShortTermForecastingSettings",
        "description": "Short term forecasting settings"
      },
      "startDayOfWeek": {
        "description": "The start day of week for this business unit",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for this business unit, using the Olsen tz database format",
        "type": "string"
      }
    },
    "required": [
      "metadata",
      "startDayOfWeek",
      "timeZone"
    ],
    "type": "object"
  },
  "ButtonComponent": {
    "description": "Structured template button object.",
    "properties": {
      "actions": {
        "$ref": "#/definitions/ContentActions",
        "description": "The button actions (Deprecated)."
      },
      "title": {
        "description": "Text to show inside the button.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ButtonResponse": {
    "properties": {
      "messageType": {
        "description": "Button response message type that captures QuickReply , Cards and Carousel .This is used  as label for Card selection",
        "enum": [
          "QuickReply",
          "Card",
          "Carousel"
        ],
        "type": "string"
      },
      "payload": {
        "description": "Content of the textback payload after clicking a button",
        "type": "string"
      },
      "text": {
        "description": "Text to show inside the Button reply. This is also used as the response text after clicking on the Button.",
        "type": "string"
      },
      "type": {
        "description": "Button response type that captures Button and QuickReply type responses",
        "enum": [
          "Button",
          "DatePicker",
          "QuickReply"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "CachedMediaItem": {
    "description": "Defines an external media that has been ingested and cached by Genesys Cloud for conversation messaging",
    "properties": {
      "contentLengthBytes": {
        "description": "The content length of the media represented by the URL, in bytes.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "dateCreated": {
        "description": "The date the cached item was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateExpires": {
        "description": "The date the cached item expires and will be removed from the cache. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "downloadUrl": {
        "description": "A URL to fetch the cached media",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The unique identifier for the cached media.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The media type for the URL",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "The URL that represents the external media that has been cached",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CachedMediaItemEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CachedMediaItem"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CalendarUrlResponse": {
    "properties": {
      "calendarUrl": {
        "description": "The calendar url for the user to subscribe with supported clients",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Calibration": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/User"
      },
      "averageScore": {
        "format": "int32",
        "type": "integer"
      },
      "calibrator": {
        "$ref": "#/definitions/User"
      },
      "contextId": {
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/ConversationReference"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      },
      "evaluations": {
        "items": {
          "$ref": "#/definitions/Evaluation"
        },
        "type": "array"
      },
      "evaluators": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "expertEvaluator": {
        "$ref": "#/definitions/User"
      },
      "highScore": {
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lowScore": {
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "scoringIndex": {
        "$ref": "#/definitions/Evaluation"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CalibrationAssignment": {
    "properties": {
      "calibrator": {
        "$ref": "#/definitions/User"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      },
      "evaluators": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "expertEvaluator": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "CalibrationCreate": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/User"
      },
      "averageScore": {
        "format": "int32",
        "type": "integer"
      },
      "calibrator": {
        "$ref": "#/definitions/User"
      },
      "contextId": {
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/ConversationReference",
        "description": "The conversation to use for the calibration."
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      },
      "evaluations": {
        "items": {
          "$ref": "#/definitions/Evaluation"
        },
        "type": "array"
      },
      "evaluators": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "expertEvaluator": {
        "$ref": "#/definitions/User"
      },
      "highScore": {
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lowScore": {
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "scoringIndex": {
        "$ref": "#/definitions/Evaluation"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "conversation"
    ],
    "type": "object"
  },
  "CalibrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Calibration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Call": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "agentAssistantId": {
        "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation.",
        "type": "string"
      },
      "confined": {
        "description": "True if this call is held and the person on this side hears hold music.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the call",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectReasons": {
        "description": "List of reasons that this call was disconnected. This will be set once the call disconnects.",
        "items": {
          "$ref": "#/definitions/DisconnectReason"
        },
        "type": "array"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "disposition": {
        "$ref": "#/definitions/Disposition",
        "description": "Call resolution data for Dialer bulk make calls commands."
      },
      "documentId": {
        "description": "If call is an outbound fax of a document from content management, then this is the id in content management.",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo"
      },
      "faxStatus": {
        "$ref": "#/definitions/FaxStatus",
        "description": "Extra information on fax transmission."
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "none"
        ],
        "type": "string"
      },
      "muted": {
        "description": "True if this call is muted so that remote participants can't hear any audio from this end.",
        "type": "boolean"
      },
      "other": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the call.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "recording": {
        "description": "True if this call is being recorded.",
        "type": "boolean"
      },
      "recordingId": {
        "description": "A globally unique identifier for the recording associated with this call.",
        "type": "string"
      },
      "recordingState": {
        "description": "State of recording on this call.",
        "enum": [
          "none",
          "active",
          "paused"
        ],
        "type": "string"
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "securePause": {
        "description": "True when the recording of this call is in secure pause status.",
        "type": "boolean"
      },
      "segments": {
        "description": "The time line of the participant's call, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "self": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the call was placed on hold in the cloud clock if the call is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "none"
        ],
        "type": "string"
      },
      "uuiData": {
        "description": "User to User Information (UUI) data managed by SIP session application.",
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "CallBasic": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "agentAssistantId": {
        "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation.",
        "type": "string"
      },
      "confined": {
        "description": "True if this call is held and the person on this side hears hold music.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the call",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectReasons": {
        "description": "List of reasons that this call was disconnected. This will be set once the call disconnects.",
        "items": {
          "$ref": "#/definitions/DisconnectReason"
        },
        "type": "array"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "disposition": {
        "$ref": "#/definitions/Disposition",
        "description": "Call resolution data for Dialer bulk make calls commands."
      },
      "documentId": {
        "description": "If call is an outbound fax of a document from content management, then this is the id in content management.",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo"
      },
      "faxStatus": {
        "$ref": "#/definitions/FaxStatus",
        "description": "Extra information on fax transmission."
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "none"
        ],
        "type": "string"
      },
      "muted": {
        "description": "True if this call is muted so that remote participants can't hear any audio from this end.",
        "type": "boolean"
      },
      "other": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the call.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "recording": {
        "description": "True if this call is being recorded.",
        "type": "boolean"
      },
      "recordingId": {
        "description": "A globally unique identifier for the recording associated with this call.",
        "type": "string"
      },
      "recordingState": {
        "description": "State of recording on this call.",
        "enum": [
          "none",
          "active",
          "paused"
        ],
        "type": "string"
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "securePause": {
        "description": "True when the recording of this call is in secure pause status.",
        "type": "boolean"
      },
      "segments": {
        "description": "The time line of the participant's call, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "self": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the call was placed on hold in the cloud clock if the call is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "none"
        ],
        "type": "string"
      },
      "uuiData": {
        "description": "User to User Information (UUI) data managed by SIP session application.",
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "CallCommand": {
    "properties": {
      "callNumber": {
        "description": "The phone number to dial for this call.",
        "type": "string"
      },
      "phoneColumn": {
        "description": "For a dialer preview or scheduled callback, the phone column associated with the phone number",
        "type": "string"
      }
    },
    "required": [
      "callNumber"
    ],
    "type": "object"
  },
  "CallConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxParticipants": {
        "description": "If this is a conference conversation, then this field indicates the maximum number of participants allowed to participant in the conference.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "otherMediaUris": {
        "description": "The list of other media channels involved in the conversation.",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/CallMediaParticipant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "recordingState": {
        "enum": [
          "none",
          "active",
          "paused"
        ],
        "type": "string"
      },
      "securePause": {
        "description": "True when the recording of this conversation is in secure pause status.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CallConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CallConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CallForwarding": {
    "properties": {
      "calls": {
        "description": "An ordered list of CallRoutes to be executed when CallForwarding is enabled",
        "items": {
          "$ref": "#/definitions/CallRoute"
        },
        "type": "array"
      },
      "enabled": {
        "description": "Whether or not CallForwarding is enabled",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "phoneNumber": {
        "description": "This property is deprecated. Please use the calls property",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      },
      "voicemail": {
        "description": "The type of voicemail to use with the callForwarding configuration",
        "enum": [
          "PURECLOUD",
          "LASTCALL",
          "NONE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "CallHistoryConversation": {
    "properties": {
      "direction": {
        "description": "The direction of the call relating to the current user",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "hadCobrowse": {
        "description": "Did this conversation have a cobrowse session",
        "type": "boolean"
      },
      "hadScreenShare": {
        "description": "Did this conversation have a screen share session",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "missedCall": {
        "description": "Did the user not answer this conversation",
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/CallHistoryParticipant"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startTime": {
        "description": "The time the user joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "wasCallback": {
        "description": "Was this conversation a callback",
        "type": "boolean"
      },
      "wasConference": {
        "description": "Was this conversation a conference",
        "type": "boolean"
      },
      "wasOutboundCampaign": {
        "description": "Was this conversation associated with an outbound campaign",
        "type": "boolean"
      },
      "wentToVoicemail": {
        "description": "Did the call end in the current user's voicemail",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "CallHistoryConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CallHistoryConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CallHistoryParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "ani": {
        "description": "The call ANI.",
        "type": "string"
      },
      "didInteract": {
        "description": "Indicates whether the contact ever connected",
        "type": "boolean"
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "dnis": {
        "description": "The call DNIS.",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalContact": {
        "$ref": "#/definitions/ExternalContact",
        "description": "The PureCloud external contact"
      },
      "externalOrganization": {
        "$ref": "#/definitions/ExternalOrganization",
        "description": "The PureCloud external organization"
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "group": {
        "$ref": "#/definitions/Group",
        "description": "The group involved in the group ring call."
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "outboundCampaign": {
        "$ref": "#/definitions/Campaign",
        "description": "The outbound campaign associated with the participant"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/Queue",
        "description": "The PureCloud queue for this participant."
      },
      "sipResponseCodes": {
        "description": "Indicates SIP Response codes associated with the participant",
        "items": {
          "format": "int64",
          "type": "integer"
        },
        "type": "array"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "The PureCloud user for this participant."
      }
    },
    "type": "object"
  },
  "CallMediaParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "ani": {
        "description": "The call ANI.",
        "type": "string"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of ad-hoc attributes for the participant.",
        "type": "object"
      },
      "bargedParticipantId": {
        "description": "If this participant barged in a participant's call, then this will be the id of the targeted participant.",
        "type": "string"
      },
      "bargedTime": {
        "description": "The timestamp when this participant was connected to the barge conference in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "coachedParticipantId": {
        "description": "The ID of the participant being coached when performing a call coach.",
        "type": "string"
      },
      "confined": {
        "description": "Value is true when the call is confined.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "consultParticipantId": {
        "description": "The ID of the consult transfer target participant when performing a consult transfer.",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "disposition": {
        "$ref": "#/definitions/Disposition",
        "description": "Call resolution data for Dialer bulk make calls commands."
      },
      "dnis": {
        "description": "The call DNIS.",
        "type": "string"
      },
      "documentId": {
        "description": "The ID of the Content Management document if the call is a fax.",
        "type": "string"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "If the conversation ends in error, contains additional error details."
      },
      "externalContact": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external contact, then this will be the reference for the external contact."
      },
      "externalOrganization": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external org, then this will be the reference for the external org."
      },
      "faxStatus": {
        "$ref": "#/definitions/FaxStatus",
        "description": "Extra fax information if the call is a fax."
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "group": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The group involved in the group ring call."
      },
      "held": {
        "description": "Value is true when the participant is on hold.",
        "type": "boolean"
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context."
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "monitoredParticipantId": {
        "description": "The ID of the participant being monitored when performing a call monitor.",
        "type": "string"
      },
      "muted": {
        "description": "Value is true when the call is muted.",
        "type": "boolean"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "parkTime": {
        "description": "The time when this participant's communication was last parked.  Does not reset on resume. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peer": {
        "description": "The peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud queue for this participant."
      },
      "recording": {
        "description": "Value is true when the call is being recorded.",
        "type": "boolean"
      },
      "recordingState": {
        "description": "The state of the call recording.",
        "enum": [
          "none",
          "active",
          "paused"
        ],
        "type": "string"
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Engage script that should be used by this participant."
      },
      "securePause": {
        "description": "True when the recording of this call is in secure pause status.",
        "type": "boolean"
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud team for this participant."
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud user for this participant."
      },
      "uuiData": {
        "description": "User-to-User information which maps to a SIP header field defined in RFC7433. UUI data is used in the Public Switched Telephone Network (PSTN) for use cases described in RFC6567.",
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Wrapup for this participant, if it has been applied."
      },
      "wrapupPrompt": {
        "description": "The wrap-up prompt indicating the type of wrap-up to be performed.",
        "type": "string"
      },
      "wrapupRequired": {
        "description": "Value is true when the participant requires wrap-up.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "Value is true when the participant has skipped wrap-up.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "The amount of time the participant has to complete wrap-up.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CallMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/PolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/CallMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "CallMediaPolicyConditions": {
    "properties": {
      "dateRanges": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "directions": {
        "items": {
          "enum": [
            "INBOUND",
            "OUTBOUND"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "duration": {
        "$ref": "#/definitions/DurationCondition"
      },
      "forQueues": {
        "items": {
          "$ref": "#/definitions/Queue"
        },
        "type": "array"
      },
      "forUsers": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "languages": {
        "items": {
          "$ref": "#/definitions/Language"
        },
        "type": "array"
      },
      "teams": {
        "description": "Teams to match conversations against",
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "timeAllowed": {
        "$ref": "#/definitions/TimeAllowed"
      },
      "wrapupCodes": {
        "items": {
          "$ref": "#/definitions/WrapupCode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CallRecord": {
    "properties": {
      "lastAttempt": {
        "description": "Timestamp of the last attempt to reach this number. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "lastResult": {
        "description": "Result of the last attempt to reach this number",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CallRoute": {
    "properties": {
      "targets": {
        "description": "A list of CallTargets to be called when the CallRoute is executed",
        "items": {
          "$ref": "#/definitions/CallTarget"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CallTarget": {
    "properties": {
      "type": {
        "description": "The type of call",
        "enum": [
          "STATION",
          "PHONENUMBER"
        ],
        "type": "string"
      },
      "value": {
        "description": "The id of the station or an E.164 formatted phone number",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CallToAction": {
    "properties": {
      "target": {
        "description": "Where the URL should be opened when the user clicks on the call to action button.",
        "enum": [
          "Blank",
          "Self"
        ],
        "type": "string"
      },
      "text": {
        "description": "Text displayed on the call to action button.",
        "type": "string"
      },
      "url": {
        "description": "URL to open when user clicks on the call to action button.",
        "type": "string"
      }
    },
    "required": [
      "url"
    ],
    "type": "object"
  },
  "CallableContactsDiagnostic": {
    "properties": {
      "attemptLimits": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Attempt limits for the campaign's contact list",
        "readOnly": true
      },
      "callableTimeSet": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Callable time sets for the campaign",
        "readOnly": true
      },
      "dncLists": {
        "description": "Do not call lists for the campaign",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "ruleSets": {
        "description": "Rule sets for the campaign",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "CallableTime": {
    "properties": {
      "timeSlots": {
        "description": "The time intervals for which it is acceptable to place outbound calls.",
        "items": {
          "$ref": "#/definitions/CampaignTimeSlot"
        },
        "type": "array"
      },
      "timeZoneId": {
        "description": "The time zone for the time slots; for example, Africa/Abidjan",
        "example": "Africa/Abidjan",
        "type": "string"
      }
    },
    "required": [
      "timeSlots",
      "timeZoneId"
    ],
    "type": "object"
  },
  "CallableTimeSet": {
    "properties": {
      "callableTimes": {
        "description": "The list of CallableTimes for which it is acceptable to place outbound calls.",
        "items": {
          "$ref": "#/definitions/CallableTime"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the CallableTimeSet.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "callableTimes",
      "name"
    ],
    "type": "object"
  },
  "CallableTimeSetEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CallableTimeSet"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CallableWindow": {
    "properties": {
      "mapped": {
        "$ref": "#/definitions/AtzmTimeSlot",
        "description": "The time interval to place outbound calls, for contacts that can be mapped to a time zone."
      },
      "unmapped": {
        "$ref": "#/definitions/AtzmTimeSlotWithTimeZone",
        "description": "The time interval and time zone to place outbound calls, for contacts that cannot be mapped to a time zone."
      }
    },
    "type": "object"
  },
  "Callback": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "automatedCallbackConfigId": {
        "description": "The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal.",
        "type": "string"
      },
      "callbackNumbers": {
        "description": "The phone number(s) to use to place the callback.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackScheduledTime": {
        "description": "The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "callbackUserName": {
        "description": "The name of the user requesting a callback.",
        "type": "string"
      },
      "callerId": {
        "description": "The phone number displayed to recipients of the phone call. The value should conform to the E164 format.",
        "type": "string"
      },
      "callerIdName": {
        "description": "The name displayed to recipients of the phone call.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dialerPreview": {
        "$ref": "#/definitions/DialerPreview",
        "description": "The preview data to be used when this callback is a Preview."
      },
      "direction": {
        "description": "The direction of the call",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalCampaign": {
        "description": "True if the call for the callback uses external dialing.",
        "type": "boolean"
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "scheduled",
          "none"
        ],
        "type": "string"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the callback.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's callback, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "skipEnabled": {
        "description": "True if the ability to skip a callback should be enabled.",
        "type": "boolean"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "scheduled",
          "none"
        ],
        "type": "string"
      },
      "timeoutSeconds": {
        "description": "The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled.",
        "format": "int32",
        "type": "integer"
      },
      "voicemail": {
        "$ref": "#/definitions/Voicemail",
        "description": "The voicemail data to be used when this callback is an ACD voicemail."
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "CallbackBasic": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "automatedCallbackConfigId": {
        "description": "The id of the config for automatically placing the callback (and handling the disposition). If null, the callback will not be placed automatically but routed to an agent as per normal.",
        "type": "string"
      },
      "callbackNumbers": {
        "description": "The phone number(s) to use to place the callback.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackScheduledTime": {
        "description": "The timestamp when this communication is scheduled in the provider clock. If this value is missing it indicates the callback will be placed immediately. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "callbackUserName": {
        "description": "The name of the user requesting a callback.",
        "type": "string"
      },
      "callerId": {
        "description": "The phone number displayed to recipients of the phone call. The value should conform to the E164 format.",
        "type": "string"
      },
      "callerIdName": {
        "description": "The name displayed to recipients of the phone call.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dialerPreview": {
        "$ref": "#/definitions/DialerPreview",
        "description": "The preview data to be used when this callback is a Preview."
      },
      "direction": {
        "description": "The direction of the call",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalCampaign": {
        "description": "True if the call for the callback uses external dialing.",
        "type": "boolean"
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "scheduled",
          "none"
        ],
        "type": "string"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the callback.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's callback, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "skipEnabled": {
        "description": "True if the ability to skip a callback should be enabled.",
        "type": "boolean"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the callback was placed on hold in the cloud clock if the callback is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "scheduled",
          "none"
        ],
        "type": "string"
      },
      "timeoutSeconds": {
        "description": "The number of seconds before the system automatically places a call for a callback.  0 means the automatic placement is disabled.",
        "format": "int32",
        "type": "integer"
      },
      "voicemail": {
        "$ref": "#/definitions/Voicemail",
        "description": "The voicemail data to be used when this callback is an ACD voicemail."
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "CallbackConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "otherMediaUris": {
        "description": "The list of other media channels involved in the conversation.",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/CallbackMediaParticipant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CallbackConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CallbackConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CallbackDisconnectIdentifier": {
    "properties": {
      "callbackId": {
        "description": "The callback id.",
        "type": "string"
      },
      "conversationId": {
        "description": "The Conversation Id.",
        "type": "string"
      }
    },
    "required": [
      "callbackId",
      "conversationId"
    ],
    "type": "object"
  },
  "CallbackIdentifier": {
    "properties": {
      "id": {
        "description": "The identifier of the callback",
        "type": "string"
      },
      "type": {
        "description": "The type of the associated callback participant",
        "enum": [
          "ACD",
          "EXTERNAL"
        ],
        "type": "string"
      }
    },
    "required": [
      "id",
      "type"
    ],
    "type": "object"
  },
  "CallbackMediaParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of ad-hoc attributes for the participant.",
        "type": "object"
      },
      "automatedCallbackConfigId": {
        "description": "The id of the config for automatically placing the callback (and handling the disposition). If absent, the callback will not be placed automatically but routed to an agent as per normal.",
        "type": "string"
      },
      "callbackNumbers": {
        "description": "The list of phone number to use for this callback.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackScheduledTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "callbackUserName": {
        "description": "The name of the callback target.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "If the conversation ends in error, contains additional error details."
      },
      "externalCampaign": {
        "description": "True if the call for the callback uses external dialing.",
        "type": "boolean"
      },
      "externalContact": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external contact, then this will be the reference for the external contact."
      },
      "externalOrganization": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external org, then this will be the reference for the external org."
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "held": {
        "description": "Value is true when the participant is on hold.",
        "type": "boolean"
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context."
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "outboundPreview": {
        "$ref": "#/definitions/DialerPreview",
        "description": "The outbound preview associated with this callback."
      },
      "parkTime": {
        "description": "The time when this participant's communication was last parked.  Does not reset on resume. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peer": {
        "description": "The peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud queue for this participant."
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Engage script that should be used by this participant."
      },
      "skipEnabled": {
        "description": "If true, the callback can be skipped.",
        "type": "boolean"
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud team for this participant."
      },
      "timeoutSeconds": {
        "description": "Duration in seconds before the callback will be auto-dialed.",
        "format": "int32",
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud user for this participant."
      },
      "voicemail": {
        "$ref": "#/definitions/Voicemail",
        "description": "The voicemail associated with this callback."
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Wrapup for this participant, if it has been applied."
      },
      "wrapupPrompt": {
        "description": "The wrap-up prompt indicating the type of wrap-up to be performed.",
        "type": "string"
      },
      "wrapupRequired": {
        "description": "Value is true when the participant requires wrap-up.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "Value is true when the participant has skipped wrap-up.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "The amount of time the participant has to complete wrap-up.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CallbackMediaSettings": {
    "properties": {
      "alertingTimeoutSeconds": {
        "description": "The alerting timeout for the media type, in seconds",
        "format": "int32",
        "type": "integer"
      },
      "autoAnswerAlertToneSeconds": {
        "description": "How long to play the alerting tone for an auto-answer interaction",
        "format": "double",
        "type": "number"
      },
      "autoDialDelaySeconds": {
        "description": "Time in seconds after agent connects to callback before outgoing call is auto-dialed. Allowable values in range 0 - 1200 seconds. Defaults to 300 seconds.",
        "format": "int32",
        "type": "integer"
      },
      "autoEndDelaySeconds": {
        "description": "Time in seconds after agent disconnects from the outgoing call before the encasing callback is auto-ended. Allowable values in range 0 - 1200 seconds. Defaults to 300 seconds.",
        "format": "int32",
        "type": "integer"
      },
      "enableAutoAnswer": {
        "description": "Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.",
        "type": "boolean"
      },
      "enableAutoDialAndEnd": {
        "description": "Flag to enable Auto-Dial and Auto-End automation for callbacks on this queue.",
        "type": "boolean"
      },
      "manualAnswerAlertToneSeconds": {
        "description": "How long to play the alerting tone for a manual-answer interaction",
        "format": "double",
        "type": "number"
      },
      "serviceLevel": {
        "$ref": "#/definitions/ServiceLevel",
        "description": "The targeted service level for the media type"
      },
      "subTypeSettings": {
        "additionalProperties": {
          "$ref": "#/definitions/BaseMediaSettings"
        },
        "description": "Map of media subtype to media subtype specific settings.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "Callheader": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": "parsed SIP headers",
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Callmessage": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "description": "raw SIP message",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Campaign": {
    "properties": {
      "abandonRate": {
        "description": "The targeted compliance abandon rate percentage. Required for power and predictive campaigns.",
        "format": "double",
        "type": "number"
      },
      "alwaysRunning": {
        "description": "Indicates (when true) that the campaign will remain on after contacts are depleted, allowing additional contacts to be appended/added to the contact list and processed by the still-running campaign. The campaign can still be turned off manually.",
        "type": "boolean"
      },
      "callAnalysisLanguage": {
        "description": "The language the edge will use to analyze the call.",
        "type": "string"
      },
      "callAnalysisResponseSet": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The call analysis response set to handle call analysis results from the edge. Required for all dialing modes except preview."
      },
      "callableTimeSet": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The callable time set for this campaign to check before placing a call."
      },
      "callbackAutoAnswer": {
        "description": "The option manages the auto-answer callback calls",
        "type": "boolean"
      },
      "callerAddress": {
        "description": "The caller id phone number to be displayed on the outbound call.",
        "example": "(555) 555-5555",
        "type": "string"
      },
      "callerName": {
        "description": "The caller id name to be displayed on the outbound call.",
        "type": "string"
      },
      "campaignStatus": {
        "description": "The current status of the Campaign. A Campaign may be turned 'on' or 'off'. Required for updates.",
        "enum": [
          "on",
          "stopping",
          "off",
          "complete",
          "invalid",
          "forced_off",
          "forced_stopping"
        ],
        "type": "string"
      },
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The ContactList for this Campaign to dial."
      },
      "contactListFilters": {
        "description": "Filter to apply to the contact list before dialing. Currently a campaign can only have one filter applied.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "contactSort": {
        "$ref": "#/definitions/ContactSort",
        "description": "The order in which to sort contacts for dialing, based on a column."
      },
      "contactSorts": {
        "description": "The order in which to sort contacts for dialing, based on up to four columns.",
        "items": {
          "$ref": "#/definitions/ContactSort"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dialingMode": {
        "description": "The strategy this Campaign will use for dialing.",
        "enum": [
          "agentless",
          "preview",
          "power",
          "predictive",
          "progressive",
          "external"
        ],
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The division this campaign belongs to."
      },
      "dncLists": {
        "description": "DncLists for this Campaign to check before placing a call.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "dynamicContactQueueingSettings": {
        "$ref": "#/definitions/DynamicContactQueueingSettings",
        "description": "Settings for dynamic queueing of contacts."
      },
      "dynamicLineBalancingSettings": {
        "$ref": "#/definitions/DynamicLineBalancingSettings",
        "description": "Dynamic line balancing settings"
      },
      "edgeGroup": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The EdgeGroup that will place the calls. Required for all dialing modes except preview."
      },
      "errors": {
        "description": "A list of current error conditions associated with the campaign.",
        "items": {
          "$ref": "#/definitions/RestErrorDetail"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxCallsPerAgent": {
        "description": "The maximum number of calls that can be placed per agent on this campaign",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The name of the Campaign.",
        "type": "string"
      },
      "noAnswerTimeout": {
        "description": "How long to wait before dispositioning a call as 'no-answer'. Default 30 seconds. Only applicable to non-preview campaigns.",
        "format": "int32",
        "type": "integer"
      },
      "outboundLineCount": {
        "description": "The number of outbound lines to be concurrently dialed. Only applicable to non-preview campaigns; only required for agentless.",
        "format": "int32",
        "type": "integer"
      },
      "phoneColumns": {
        "description": "The ContactPhoneNumberColumns on the ContactList that this Campaign should dial.",
        "items": {
          "$ref": "#/definitions/PhoneColumn"
        },
        "type": "array"
      },
      "previewTimeOutSeconds": {
        "description": "The number of seconds before a call will be automatically placed on a preview. A value of 0 indicates no automatic placement of calls. Only applicable to preview campaigns.",
        "format": "int64",
        "type": "integer"
      },
      "priority": {
        "description": "The priority of this campaign relative to other campaigns that are running on the same queue. 5 is the highest priority, 1 the lowest.",
        "format": "int32",
        "type": "integer"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Queue for this Campaign to route calls to. Required for all dialing modes except agentless."
      },
      "ruleSets": {
        "description": "Rule sets to be applied while this campaign is dialing.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Script to be displayed to agents that are handling outbound calls. Required for all dialing modes except agentless."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The identifier of the site to be used for dialing; can be set in place of an edge group."
      },
      "skipPreviewDisabled": {
        "description": "Whether or not agents can skip previews without placing a call. Only applicable for preview campaigns.",
        "type": "boolean"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "callerAddress",
      "callerName",
      "contactList",
      "dialingMode",
      "name",
      "phoneColumns"
    ],
    "type": "object"
  },
  "CampaignBusinessCategoryMetrics": {
    "properties": {
      "failureCount": {
        "description": "Number of calls categorized as business failure",
        "format": "int32",
        "type": "integer"
      },
      "neutralCount": {
        "description": "Number of calls categorized as business neutral",
        "format": "int32",
        "type": "integer"
      },
      "successCount": {
        "description": "Number of calls categorized as business success",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignDiagnostics": {
    "properties": {
      "callableContacts": {
        "$ref": "#/definitions/CallableContactsDiagnostic",
        "description": "Campaign properties that can impact which contacts are callable",
        "readOnly": true
      },
      "campaignSkillStatistics": {
        "$ref": "#/definitions/CampaignSkillStatistics",
        "description": "Information regarding the campaign's skills",
        "readOnly": true
      },
      "filteredOutContactsCount": {
        "description": "Number of contacts that don't match filter. This is currently supported only for Campaigns with dynamic filter on.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "outstandingInteractionsCount": {
        "description": "Current number of outstanding interactions on the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "queueUtilizationDiagnostic": {
        "$ref": "#/definitions/QueueUtilizationDiagnostic",
        "description": "Information regarding the campaign's queue",
        "readOnly": true
      },
      "ruleSetDiagnostics": {
        "description": "Information regarding the campaign's rule sets",
        "items": {
          "$ref": "#/definitions/RuleSetDiagnostic"
        },
        "readOnly": true,
        "type": "array"
      },
      "scheduledInteractionsCount": {
        "description": "Current number of scheduled interactions on the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "timeZoneRescheduledCallsCount": {
        "description": "Current number of time zone rescheduled calls on the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignDivisionView": {
    "properties": {
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CampaignDivisionViewListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CampaignDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Campaign"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignInteraction": {
    "properties": {
      "activePreviewCall": {
        "description": "Boolean value if there is an active preview call on the interaction",
        "type": "boolean"
      },
      "agent": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "callPlacedTime": {
        "description": "The time when the agent or system places the call. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "callRoutedTime": {
        "description": "The time when the agent was connected to the call. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "callerAddress": {
        "type": "string"
      },
      "callerName": {
        "type": "string"
      },
      "campaign": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "contact": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "conversation": {
        "$ref": "#/definitions/ConversationBasic"
      },
      "creationTime": {
        "description": "The time when dialer created the interaction. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "destinationAddress": {
        "type": "string"
      },
      "dialerSystemParticipantId": {
        "description": "conversation participant id that is the dialer system participant to monitor the call from dialer perspective",
        "type": "string"
      },
      "dialingMode": {
        "type": "string"
      },
      "disposition": {
        "description": "Describes what happened with call analysis for instance: disposition.classification.callable.person, disposition.classification.callable.noanswer",
        "enum": [
          "DISCONNECT",
          "LIVE_VOICE",
          "BUSY",
          "MACHINE",
          "NO_ANSWER",
          "SIT_CALLABLE",
          "SIT_UNCALLABLE",
          "FAX"
        ],
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "lastActivePreviewWrapupTime": {
        "description": "The time when the last preview of the interaction was wrapped up. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "previewConnectedTime": {
        "description": "The time when the customer and routing participant are connected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "previewPopDeliveredTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "skills": {
        "description": "Any skills that are attached to the call for routing",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "CampaignInteractions": {
    "properties": {
      "campaign": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "interactingInteractions": {
        "items": {
          "$ref": "#/definitions/CampaignInteraction"
        },
        "type": "array"
      },
      "pendingInteractions": {
        "items": {
          "$ref": "#/definitions/CampaignInteraction"
        },
        "type": "array"
      },
      "previewingInteractions": {
        "items": {
          "$ref": "#/definitions/CampaignInteraction"
        },
        "type": "array"
      },
      "proceedingInteractions": {
        "items": {
          "$ref": "#/definitions/CampaignInteraction"
        },
        "type": "array"
      },
      "scheduledInteractions": {
        "items": {
          "$ref": "#/definitions/CampaignInteraction"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CampaignLinesUtilization": {
    "properties": {
      "assignedOutboundLines": {
        "description": "Number of outbound lines assigned to the campaign",
        "format": "int32",
        "type": "integer"
      },
      "totalAvailableOutboundLines": {
        "description": "Total number of available outbound lines in Campaign's Edge Group or Site",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignOutboundLinesAllocation": {
    "properties": {
      "campaign": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Campaign"
      },
      "campaignWeight": {
        "description": "The relative weight of the campaign",
        "format": "int32",
        "type": "integer"
      },
      "legacyWeight": {
        "description": "true if relative weight of the campaign is not explicitly specified, false otherwise",
        "type": "boolean"
      },
      "linesAssigned": {
        "description": "The number of lines dynamically assigned to the campaign",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignOutboundLinesDistribution": {
    "description": "Lines distribution information or Campaign's Edge Group or Site",
    "properties": {
      "availableOutboundLines": {
        "description": "Number of available outbound lines in Campaign's Edge Group or Site",
        "format": "int32",
        "type": "integer"
      },
      "campaign": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The Campaign for which dialing group distribution information was requested"
      },
      "campaignsWithDynamicallyAllocatedLines": {
        "description": "Information about campaigns using dynamic lines allocation in Campaign's Edge Group or Site",
        "items": {
          "$ref": "#/definitions/CampaignOutboundLinesAllocation"
        },
        "type": "array"
      },
      "campaignsWithReservedLines": {
        "description": "Information about campaigns with reserving lines in Campaign's Edge Group or Site",
        "items": {
          "$ref": "#/definitions/CampaignOutboundLinesReservation"
        },
        "type": "array"
      },
      "maxLineUtilization": {
        "description": "Maximum ratio of dialer calls to Campaign's Edge Group or Site capacity",
        "type": "number"
      },
      "maxOutboundLineCount": {
        "description": "Maximum outbound calls that can be placed for Campaign's Edge Group or Site",
        "format": "int32",
        "type": "integer"
      },
      "reservedLines": {
        "description": "Number of reserved outbound lines in Campaign's Edge Group or Site",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignOutboundLinesReservation": {
    "properties": {
      "campaign": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Campaign"
      },
      "linesReserved": {
        "description": "The number of lines reserved for the campaign",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignPatchRequest": {
    "description": "Campaign patch request",
    "properties": {
      "abandonRate": {
        "description": "The targeted compliance abandon rate percentage",
        "type": "number"
      },
      "dynamicLineBalancingSettings": {
        "$ref": "#/definitions/DynamicLineBalancingSettingsPatchRequest",
        "description": "Dynamic line balancing settings"
      },
      "maxCallsPerAgent": {
        "description": "The maximum number of calls that can be placed per agent on this campaign",
        "type": "number"
      },
      "outboundLineCount": {
        "description": "The number of outbound lines to be concurrently dialed.",
        "format": "int32",
        "type": "integer"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The Queue for this Campaign to route calls to."
      }
    },
    "type": "object"
  },
  "CampaignProgress": {
    "properties": {
      "campaign": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Identifier of the campaign"
      },
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Identifier of the contact list"
      },
      "numberOfContactsCalled": {
        "description": "Number of contacts called during the campaign",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "numberOfContactsMessaged": {
        "description": "Number of contacts messaged during the campaign",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "numberOfContactsSkipped": {
        "additionalProperties": {
          "format": "int32",
          "type": "integer"
        },
        "description": "Number of contacts skipped during the campaign",
        "readOnly": true,
        "type": "object"
      },
      "percentage": {
        "description": "Percentage of contacts processed during the campaign",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "totalNumberOfContacts": {
        "description": "Total number of contacts in the campaign",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "campaign",
      "contactList"
    ],
    "type": "object"
  },
  "CampaignRule": {
    "properties": {
      "campaignRuleActions": {
        "description": "The list of actions that are executed if the conditions are satisfied.",
        "items": {
          "$ref": "#/definitions/CampaignRuleAction"
        },
        "type": "array"
      },
      "campaignRuleConditions": {
        "description": "The list of conditions that are evaluated on the entities.",
        "items": {
          "$ref": "#/definitions/CampaignRuleCondition"
        },
        "type": "array"
      },
      "campaignRuleEntities": {
        "$ref": "#/definitions/CampaignRuleEntities",
        "description": "The list of entities that this CampaignRule monitors."
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "enabled": {
        "description": "Whether or not this CampaignRule is currently enabled. Required on updates.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "matchAnyConditions": {
        "type": "boolean"
      },
      "name": {
        "description": "The name of the CampaignRule.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "campaignRuleActions",
      "campaignRuleConditions",
      "campaignRuleEntities",
      "name"
    ],
    "type": "object"
  },
  "CampaignRuleAction": {
    "properties": {
      "actionType": {
        "description": "The action to take on the campaignRuleActionEntities.",
        "enum": [
          "turnOnCampaign",
          "turnOffCampaign",
          "turnOnSequence",
          "turnOffSequence",
          "setCampaignPriority",
          "recycleCampaign",
          "setCampaignDialingMode",
          "setCampaignAbandonRate",
          "setCampaignNumberOfLines",
          "setCampaignWeight",
          "setCampaignMaxCallsPerAgent",
          "changeCampaignQueue"
        ],
        "type": "string"
      },
      "campaignRuleActionEntities": {
        "$ref": "#/definitions/CampaignRuleActionEntities",
        "description": "The list of entities that this action will apply to."
      },
      "id": {
        "type": "string"
      },
      "parameters": {
        "$ref": "#/definitions/CampaignRuleParameters",
        "description": "The parameters for the CampaignRuleAction. Required for certain actionTypes."
      }
    },
    "required": [
      "actionType",
      "campaignRuleActionEntities"
    ],
    "type": "object"
  },
  "CampaignRuleActionEntities": {
    "properties": {
      "campaigns": {
        "description": "The list of campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a campaign.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "sequences": {
        "description": "The list of sequences for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a sequence.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "useTriggeringEntity": {
        "description": "If true, the CampaignRuleAction will apply to the same entity that triggered the CampaignRuleCondition.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "CampaignRuleCondition": {
    "properties": {
      "conditionType": {
        "description": "The type of condition to evaluate.",
        "enum": [
          "campaignProgress",
          "campaignAgents",
          "campaignRecordsAttempted",
          "campaignBusinessSuccess",
          "campaignBusinessFailure",
          "campaignBusinessNeutral",
          "campaignValidAttempts",
          "campaignRightPartyContacts"
        ],
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "parameters": {
        "$ref": "#/definitions/CampaignRuleParameters",
        "description": "The parameters for the CampaignRuleCondition."
      }
    },
    "required": [
      "conditionType",
      "parameters"
    ],
    "type": "object"
  },
  "CampaignRuleConditionGroup": {
    "properties": {
      "conditions": {
        "description": "The parameters for the CampaignRuleCondition.",
        "items": {
          "$ref": "#/definitions/CampaignRuleCondition"
        },
        "type": "array"
      },
      "matchAnyConditions": {
        "description": "Whether or not this condition group should be evaluated as true if any of sub conditions is matched",
        "type": "boolean"
      }
    },
    "required": [
      "conditions",
      "matchAnyConditions"
    ],
    "type": "object"
  },
  "CampaignRuleEntities": {
    "properties": {
      "campaigns": {
        "description": "The list of campaigns for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a campaign.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "sequences": {
        "description": "The list of sequences for a CampaignRule to monitor. Required if the CampaignRule has any conditions that run on a sequence.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CampaignRuleEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CampaignRule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignRuleParameters": {
    "properties": {
      "abandonRate": {
        "description": "The abandon rate to set a campaign to. Required for the 'setCampaignAbandonRate' action.",
        "type": "number"
      },
      "dialingMode": {
        "description": "The dialing mode to set a campaign to. Required for the 'setCampaignDialingMode' action.",
        "enum": [
          "agentless",
          "preview",
          "power",
          "predictive",
          "progressive",
          "external"
        ],
        "type": "string"
      },
      "maxCallsPerAgent": {
        "description": "The maximum number of calls per agent to set a campaign to. Required for the 'setCampaignMaxCallsPerAgent' action.",
        "type": "number"
      },
      "operator": {
        "description": "The operator for comparison. Required for a CampaignRuleCondition.",
        "enum": [
          "equals",
          "greaterThan",
          "greaterThanEqualTo",
          "lessThan",
          "lessThanEqualTo"
        ],
        "type": "string"
      },
      "outboundLineCount": {
        "description": "The  number of outbound lines to set a campaign to. Required for the 'setCampaignNumberOfLines' action.",
        "format": "int32",
        "type": "integer"
      },
      "priority": {
        "description": "The priority to set a campaign to. Required for the 'setCampaignPriority' action.",
        "enum": [
          "1",
          "2",
          "3",
          "4",
          "5"
        ],
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The queue a campaign to. Required for the 'changeCampaignQueue' action."
      },
      "relativeWeight": {
        "description": "The relative weight to set a campaign to. Required for the 'setCampaignWeight' action.",
        "format": "int32",
        "type": "integer"
      },
      "value": {
        "description": "The value for comparison. Required for a CampaignRuleCondition.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CampaignSchedule": {
    "properties": {
      "campaign": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Campaign that this CampaignSchedule is for."
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intervals": {
        "description": "A list of intervals during which to run the associated Campaign.",
        "items": {
          "$ref": "#/definitions/ScheduleInterval"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for this CampaignSchedule. For example, Africa/Abidjan.",
        "example": "Africa/Abidjan",
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "campaign",
      "intervals",
      "timeZone"
    ],
    "type": "object"
  },
  "CampaignSequence": {
    "properties": {
      "campaigns": {
        "description": "The ordered list of Campaigns that this CampaignSequence will run.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "currentCampaign": {
        "description": "A zero-based index indicating which Campaign this CampaignSequence is currently on.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "repeat": {
        "description": "Indicates if a sequence should repeat from the beginning after the last campaign completes. Default is false.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current status of the CampaignSequence. A CampaignSequence can be turned 'on' or 'off'.",
        "enum": [
          "on",
          "off",
          "complete"
        ],
        "type": "string"
      },
      "stopMessage": {
        "description": "A message indicating if and why a CampaignSequence has stopped unexpectedly.",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "campaigns",
      "currentCampaign",
      "status"
    ],
    "type": "object"
  },
  "CampaignSequenceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CampaignSequence"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignSkillStatistics": {
    "properties": {
      "eligibleSkilledAgents": {
        "description": "Number of eligible agents with skills for campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "skillCombinations": {
        "description": "Number of available skill combinations for the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignStats": {
    "properties": {
      "adjustedCallsPerAgent": {
        "description": "Calls per agent adjusted by pace",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "contactRate": {
        "$ref": "#/definitions/ConnectRate",
        "description": "Information regarding the campaign's connect rate",
        "readOnly": true
      },
      "effectiveIdleAgents": {
        "description": "Number of effective available agents not currently being utilized",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "filteredOutContactsCount": {
        "description": "Number of contacts that don't match filter. This is currently supported only for Campaigns with dynamic filter on.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "idleAgents": {
        "description": "Number of available agents not currently being utilized",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "linesUtilization": {
        "$ref": "#/definitions/CampaignLinesUtilization",
        "description": "Information on the campaign's lines utilization",
        "readOnly": true
      },
      "outstandingCalls": {
        "description": "Number of campaign calls currently ongoing",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "scheduledCalls": {
        "description": "Number of campaign calls currently scheduled",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "timeZoneRescheduledCalls": {
        "description": "Number of campaign calls currently timezone rescheduled",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CampaignTimeSlot": {
    "properties": {
      "day": {
        "description": "The day of the interval. Valid values: [1-7], representing Monday through Sunday",
        "example": 1,
        "format": "int32",
        "type": "integer"
      },
      "startTime": {
        "description": "The start time of the interval as an ISO-8601 string, i.e. HH:mm:ss",
        "example": "08:00:00",
        "type": "string"
      },
      "stopTime": {
        "description": "The end time of the interval as an ISO-8601 string, i.e. HH:mm:ss",
        "example": "08:00:00",
        "type": "string"
      }
    },
    "required": [
      "day",
      "startTime",
      "stopTime"
    ],
    "type": "object"
  },
  "CannedResponseLibraries": {
    "properties": {
      "libraryIds": {
        "description": "Set of canned response library IDs associated with the queue only when mode is SelectedOnly.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "mode": {
        "description": "The association mode of canned response libraries to queue",
        "enum": [
          "All",
          "SelectedOnly",
          "None"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Card": {
    "properties": {
      "actions": {
        "description": "List of possible action objects.",
        "items": {
          "$ref": "#/definitions/CardAction"
        },
        "type": "array"
      },
      "defaultAction": {
        "$ref": "#/definitions/CardAction",
        "description": "The default action to be taken."
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      },
      "url": {
        "description": "URL of an image.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CardAction": {
    "description": "A card action that a user can take.",
    "properties": {
      "isSelected": {
        "description": "Indicates if the card option is selected by end customer.",
        "type": "boolean"
      },
      "payload": {
        "description": "Content of the textback payload after clicking a button.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      },
      "type": {
        "description": "Describes the type of action.",
        "enum": [
          "Link",
          "Postback"
        ],
        "type": "string"
      },
      "url": {
        "description": "The location of the image file associated with action.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CategoriesEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/StaCategory"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Category": {
    "description": "List of available Action categories.",
    "properties": {
      "name": {
        "description": "Category name",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CategoryCreateRequest": {
    "properties": {
      "description": {
        "description": "The description for the category.",
        "type": "string"
      },
      "externalId": {
        "description": "The external id associated with the category.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the category.",
        "type": "string"
      },
      "parentCategoryId": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CategoryEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Category"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CategoryListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeCategory"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CategoryReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the category.",
        "type": "string"
      },
      "name": {
        "description": "Category name.",
        "type": "string"
      },
      "parentCategory": {
        "$ref": "#/definitions/CategoryReference",
        "description": "The reference to category to which this category belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "CategoryRequest": {
    "properties": {
      "criteria": {
        "$ref": "#/definitions/Operand",
        "description": "A collection of conditions joined together by logical operation to provide more refined filtering of conversations"
      },
      "description": {
        "description": "The description of the category",
        "type": "string"
      },
      "interactionType": {
        "description": "The type of interaction the category will apply to",
        "enum": [
          "Voice",
          "Digital",
          "All"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the category",
        "type": "string"
      }
    },
    "required": [
      "criteria",
      "interactionType",
      "name"
    ],
    "type": "object"
  },
  "CategoryResponse": {
    "properties": {
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "documentCount": {
        "description": "Number of documents assigned to this category.",
        "format": "int32",
        "type": "integer"
      },
      "externalId": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "The reference to knowledge base to which the category belongs to."
      },
      "name": {
        "description": "The name of the category.",
        "type": "string"
      },
      "parentCategory": {
        "$ref": "#/definitions/CategoryReference",
        "description": "The reference to category to which this category belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CategoryResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CategoryResponse"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CategoryUpdateRequest": {
    "properties": {
      "description": {
        "type": "string"
      },
      "externalId": {
        "description": "The external id associated with the category.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the category.",
        "type": "string"
      },
      "parentCategoryId": {
        "description": "The category to which this category belongs.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Celebration": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The creator of the celebration"
      },
      "dateCreated": {
        "description": "The date the celebration was created on. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2023-01-01T01:01:01Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "note": {
        "description": "The Celebration note",
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/UserReference",
        "description": "The Recipient of the celebration"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceEntity": {
        "$ref": "#/definitions/SourceEntity",
        "description": "The celebration's source entity"
      },
      "title": {
        "description": "The Celebration title",
        "type": "string"
      },
      "type": {
        "description": "The Celebration Type",
        "enum": [
          "Recognition"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "CelebrationStateParam": {
    "properties": {
      "state": {
        "description": "The state of the celebration",
        "enum": [
          "Displayed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Certificate": {
    "description": "Represents a certificate to parse.",
    "properties": {
      "certificate": {
        "description": "The certificate to parse.",
        "type": "string"
      }
    },
    "required": [
      "certificate"
    ],
    "type": "object"
  },
  "CertificateAuthorityEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainCertificateAuthority"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CertificateDetails": {
    "description": "Represents the details of a parsed certificate.",
    "properties": {
      "expirationDate": {
        "description": "The expiration date of the certificate. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "expired": {
        "description": "True if the certificate is expired, false otherwise.",
        "type": "boolean"
      },
      "issueDate": {
        "description": "The issue date of the certificate. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "issuer": {
        "description": "Information about the issuer of the certificate.  The value of this property is a comma separated key=value format.  Each key is one of the attribute names supported by X.500.",
        "type": "string"
      },
      "signatureValid": {
        "type": "boolean"
      },
      "subject": {
        "description": "Information about the subject of the certificate.  The value of this property is a comma separated key=value format.  Each key is one of the attribute names supported by X.500.",
        "type": "string"
      },
      "valid": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ChangeMyPasswordRequest": {
    "properties": {
      "newPassword": {
        "description": "The new password",
        "type": "string"
      },
      "oldPassword": {
        "description": "Your current password",
        "type": "string"
      }
    },
    "required": [
      "newPassword",
      "oldPassword"
    ],
    "type": "object"
  },
  "ChangePasswordRequest": {
    "properties": {
      "newPassword": {
        "description": "The new password",
        "type": "string"
      }
    },
    "required": [
      "newPassword"
    ],
    "type": "object"
  },
  "Channel": {
    "properties": {
      "connectUri": {
        "format": "uri",
        "type": "string"
      },
      "expires": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ChannelEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Channel"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ChannelTopic": {
    "properties": {
      "id": {
        "type": "string"
      },
      "rejectionReason": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "enum": [
          "Permitted",
          "Rejected"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ChannelTopicEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ChannelTopic"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Chat": {
    "properties": {
      "jabberId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ChatConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "otherMediaUris": {
        "description": "The list of other media channels involved in the conversation.",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/ChatMediaParticipant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ChatConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ChatConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ChatMediaParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of ad-hoc attributes for the participant.",
        "type": "object"
      },
      "avatarImageUrl": {
        "description": "If available, the URI to the avatar image of this communication.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "If the conversation ends in error, contains additional error details."
      },
      "externalContact": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external contact, then this will be the reference for the external contact."
      },
      "externalOrganization": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external org, then this will be the reference for the external org."
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "held": {
        "description": "Value is true when the participant is on hold.",
        "type": "boolean"
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context."
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "parkTime": {
        "description": "The time when this participant's communication was last parked.  Does not reset on resume. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peer": {
        "description": "The peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud queue for this participant."
      },
      "roomId": {
        "description": "The ID of the chat room.",
        "type": "string"
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Engage script that should be used by this participant."
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud team for this participant."
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud user for this participant."
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Wrapup for this participant, if it has been applied."
      },
      "wrapupPrompt": {
        "description": "The wrap-up prompt indicating the type of wrap-up to be performed.",
        "type": "string"
      },
      "wrapupRequired": {
        "description": "Value is true when the participant requires wrap-up.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "Value is true when the participant has skipped wrap-up.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "The amount of time the participant has to complete wrap-up.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ChatMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/PolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/ChatMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "ChatMediaPolicyConditions": {
    "properties": {
      "dateRanges": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "duration": {
        "$ref": "#/definitions/DurationCondition"
      },
      "forQueues": {
        "items": {
          "$ref": "#/definitions/Queue"
        },
        "type": "array"
      },
      "forUsers": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "languages": {
        "items": {
          "$ref": "#/definitions/Language"
        },
        "type": "array"
      },
      "teams": {
        "description": "Teams to match conversations against",
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "timeAllowed": {
        "$ref": "#/definitions/TimeAllowed"
      },
      "wrapupCodes": {
        "items": {
          "$ref": "#/definitions/WrapupCode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ChatMessage": {
    "properties": {
      "body": {
        "description": "The message body",
        "type": "string"
      },
      "bodyType": {
        "description": "Type of the message body (v2 chats only)",
        "enum": [
          "STANDARD",
          "ACTIVITY",
          "TYPING",
          "NOTICE",
          "MEMBERJOIN",
          "MEMBERLEAVE",
          "MEDIAREQUEST"
        ],
        "type": "string"
      },
      "chat": {
        "description": "The interaction id (if available)",
        "type": "string"
      },
      "from": {
        "description": "The message sender",
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "message": {
        "description": "The message id",
        "type": "string"
      },
      "participantPurpose": {
        "description": "Participant purpose of sender (v2 chats only)",
        "type": "string"
      },
      "senderCommunicationId": {
        "description": "Communication of sender (v2 chats only)",
        "type": "string"
      },
      "to": {
        "description": "The message recipient",
        "type": "string"
      },
      "type": {
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/ChatMessageUser",
        "description": "The user information for the sender (if available)"
      },
      "utc": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ChatMessageEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ChatMessageResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ChatMessageResponse": {
    "properties": {
      "attachmentDeleted": {
        "description": "If message's attachment was deleted",
        "type": "boolean"
      },
      "body": {
        "description": "Message's body",
        "type": "string"
      },
      "dateCreated": {
        "description": "Message's created time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Message's last updated time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "edited": {
        "description": "If message was edited",
        "type": "boolean"
      },
      "fileUri": {
        "description": "URI of file attachment",
        "type": "string"
      },
      "id": {
        "description": "The id of the message",
        "type": "string"
      },
      "jid": {
        "description": "Jid of message's sender (userJid)",
        "type": "string"
      },
      "mentions": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Message's mentions",
        "type": "object"
      },
      "parentThread": {
        "$ref": "#/definitions/Entity",
        "description": "Parent thread id for thread replies"
      },
      "reactions": {
        "description": "The emoji reactions to this message",
        "items": {
          "$ref": "#/definitions/ChatReaction"
        },
        "type": "array"
      },
      "thread": {
        "$ref": "#/definitions/Entity",
        "description": "The id for a thread this message corresponds to"
      },
      "toJid": {
        "description": "Jid of message's recipient (roomJid or userJid)",
        "type": "string"
      },
      "toUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The receiving user of the message"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The user who sent the message"
      }
    },
    "required": [
      "body",
      "dateCreated",
      "id",
      "jid",
      "thread",
      "toJid"
    ],
    "type": "object"
  },
  "ChatMessageUser": {
    "properties": {
      "displayName": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "username": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ChatReaction": {
    "properties": {
      "emoji": {
        "description": "The emoji string for the reaction",
        "type": "string"
      },
      "users": {
        "description": "The users that reacted with an emoji",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      }
    },
    "required": [
      "emoji",
      "users"
    ],
    "type": "object"
  },
  "ChatReactionUpdate": {
    "properties": {
      "reactions": {
        "description": "Reactions to update",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "reactions"
    ],
    "type": "object"
  },
  "ChatSendMessageResponse": {
    "properties": {
      "id": {
        "description": "The id of the created message",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ChatSettings": {
    "properties": {
      "messageRetentionPeriodDays": {
        "description": "Retention time for messages in days, expressed as int in the range [10,3650]",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Check": {
    "properties": {
      "result": {
        "description": "The result of a check executed. This indicates if the check was successful or not.",
        "enum": [
          "Passed",
          "Failed",
          "Unknown",
          "Skipped",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of check executed.",
        "enum": [
          "HandleTimeValue",
          "TransferRateValue",
          "SalesConversionRateValue",
          "SalesAmountValue",
          "RetentionRateValue",
          "ChurnRateValue",
          "InteractionVolume",
          "UserVariance",
          "DataCoverage",
          "ModelQuality"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ClientApp": {
    "description": "Details for a ClientApp",
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Read-only attributes for the integration.",
        "readOnly": true,
        "type": "object"
      },
      "config": {
        "$ref": "#/definitions/ClientAppConfigurationInfo",
        "description": "Configuration information for the integration.",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationType": {
        "$ref": "#/definitions/IntegrationType",
        "description": "Type of the integration",
        "readOnly": true
      },
      "intendedState": {
        "description": "Configured state of the integration.",
        "enum": [
          "ENABLED",
          "DISABLED",
          "DELETED",
          "RESTORED"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the integration, used to distinguish this integration from others of the same type.",
        "readOnly": true,
        "type": "string"
      },
      "notes": {
        "description": "Notes about the integration.",
        "readOnly": true,
        "type": "string"
      },
      "reportedState": {
        "$ref": "#/definitions/IntegrationStatusInfo",
        "description": "Last reported status of the integration.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "intendedState"
    ],
    "type": "object"
  },
  "ClientAppConfigurationInfo": {
    "description": "Configuration information for the integration",
    "properties": {
      "current": {
        "$ref": "#/definitions/IntegrationConfiguration",
        "description": "The current, active configuration for the integration.",
        "readOnly": true
      },
      "effective": {
        "$ref": "#/definitions/EffectiveConfiguration",
        "description": "The effective configuration for the app, containing the integration specific configuration along with overrides specified in the integration type.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "ClientAppEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ClientApp"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ClonedUser": {
    "description": "Represents a cloned user in a trustor organization.",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "trustor": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The ID of the trustor organization this clone exists in.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "ClonedUserEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ClonedUser"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CloseButtonStyleProperties": {
    "properties": {
      "color": {
        "description": "Color of button. (eg. #FF0000)",
        "type": "string"
      },
      "opacity": {
        "description": "Opacity of button.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "CoachingAnnotation": {
    "properties": {
      "accessType": {
        "description": "Determines the permissions required to view this item.",
        "enum": [
          "Public",
          "Private"
        ],
        "readOnly": true,
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the annotation.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date/time the annotation was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date/time the annotation was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isDeleted": {
        "description": "Flag indicating whether the annotation is deleted.",
        "readOnly": true,
        "type": "boolean"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The last user to modify the annotation.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "text": {
        "description": "The text of the annotation.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "CoachingAnnotationCreateRequest": {
    "properties": {
      "accessType": {
        "description": "Determines the permissions required to view this item.",
        "enum": [
          "Public",
          "Private"
        ],
        "type": "string"
      },
      "text": {
        "description": "The text of the annotation.",
        "type": "string"
      }
    },
    "required": [
      "accessType",
      "text"
    ],
    "type": "object"
  },
  "CoachingAnnotationList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CoachingAnnotation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CoachingAppointmentAggregateRequest": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/QueryRequestFilter",
        "description": "The filter applied to the data"
      },
      "groupBy": {
        "description": "An optional list of items by which to group the result data.",
        "items": {
          "enum": [
            "attendeeId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Interval to aggregate across. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "A list of metrics to aggregate.  If omitted, all metrics are returned.",
        "items": {
          "enum": [
            "nActivities",
            "nPlannedActivities",
            "nInProgressActivities",
            "nCompleteActivities",
            "nOverdueActivities",
            "nInvalidScheduleActivities"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "filter",
      "interval"
    ],
    "type": "object"
  },
  "CoachingAppointmentAggregateResponse": {
    "properties": {
      "results": {
        "description": "The results of the query",
        "items": {
          "$ref": "#/definitions/QueryResponseGroupedData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CoachingAppointmentReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CoachingAppointmentResponse": {
    "description": "Coaching appointment response",
    "properties": {
      "attendees": {
        "description": "The list of attendees attending the coaching",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "conversations": {
        "description": "The list of conversations associated with coaching appointment.",
        "items": {
          "$ref": "#/definitions/ConversationReference"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the coaching appointment",
        "readOnly": true
      },
      "dateCompleted": {
        "description": "The date/time the coaching appointment was set to completed status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date/time the coaching appointment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date/time the coaching appointment was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateStart": {
        "description": "The date/time the coaching appointment starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of coaching appointment",
        "readOnly": true,
        "type": "string"
      },
      "documents": {
        "description": "The list of documents associated with coaching appointment.",
        "items": {
          "$ref": "#/definitions/DocumentReference"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "externalLinks": {
        "description": "The list of external links related to the appointment",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "facilitator": {
        "$ref": "#/definitions/UserReference",
        "description": "The facilitator of coaching appointment",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isOverdue": {
        "description": "Whether the appointment is overdue.",
        "readOnly": true,
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The duration of coaching appointment in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The last user to modify the coaching appointment",
        "readOnly": true
      },
      "name": {
        "description": "The name of coaching appointment",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of coaching appointment",
        "enum": [
          "Scheduled",
          "InProgress",
          "Completed",
          "InvalidSchedule"
        ],
        "readOnly": true,
        "type": "string"
      },
      "wfmSchedule": {
        "$ref": "#/definitions/WfmScheduleReference",
        "description": "The Workforce Management schedule the appointment is associated with.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "CoachingAppointmentResponseList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CoachingAppointmentResponse"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CoachingAppointmentStatusRequest": {
    "properties": {
      "status": {
        "description": "The status of the coaching appointment",
        "enum": [
          "Scheduled",
          "InProgress",
          "Completed"
        ],
        "type": "string"
      }
    },
    "required": [
      "status"
    ],
    "type": "object"
  },
  "CoachingAppointmentStatusResponse": {
    "properties": {
      "appointment": {
        "$ref": "#/definitions/CoachingAppointmentReference",
        "description": "The coaching appointment this status belongs to",
        "readOnly": true
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "User who updated the status",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Creation time of the status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the coaching appointment",
        "enum": [
          "Scheduled",
          "InProgress",
          "Completed",
          "InvalidSchedule"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CoachingAppointmentStatusResponseList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CoachingAppointmentStatusResponse"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CoachingNotification": {
    "properties": {
      "actionType": {
        "description": "Action causing the notification.",
        "enum": [
          "Create",
          "Update",
          "Delete",
          "StatusChange"
        ],
        "readOnly": true,
        "type": "string"
      },
      "appointment": {
        "$ref": "#/definitions/CoachingAppointmentResponse",
        "description": "The appointment",
        "readOnly": true
      },
      "dateStart": {
        "description": "The start time of the appointment relating to this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "The duration of the appointment on this notification",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "markedAsRead": {
        "description": "Indicates if notification is read or unread",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the appointment for this notification.",
        "readOnly": true,
        "type": "string"
      },
      "relationship": {
        "description": "The relationship of this user to this notification's appointment",
        "enum": [
          "Attendee",
          "Creator",
          "Facilitator"
        ],
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the appointment for this notification",
        "enum": [
          "Scheduled",
          "InProgress",
          "Completed",
          "InvalidSchedule"
        ],
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user of this notification",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "CoachingNotificationList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CoachingNotification"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CoachingSlot": {
    "properties": {
      "dateStart": {
        "description": "Start date and time of scheduled coaching appointment slot. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "differenceRating": {
        "description": "Rating based on the staffing difference for scheduled slot",
        "enum": [
          "Poor",
          "Neutral",
          "Good"
        ],
        "readOnly": true,
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "Length of coaching appointment slot in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "staffingDifference": {
        "description": "Difference between scheduled and forecast headcount for this slot after scheduling the coaching appointment",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "wfmSchedule": {
        "$ref": "#/definitions/WfmScheduleReference",
        "description": "Workforce Management schedule information associated with the slot",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "CoachingSlotsRequest": {
    "properties": {
      "attendeeIds": {
        "description": "List of attendees to determine coaching appointment slots",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "facilitatorIds": {
        "description": "List of facilitators to determine coaching appointment slots",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "interruptibleAppointmentIds": {
        "description": "List of appointment ids to exclude from consideration when determining blocked slots",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "interval": {
        "description": "Range of time to get slots for scheduling coaching appointments. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "The duration of coaching appointment to schedule in 15 minutes granularity up to maximum of 60 minutes",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "attendeeIds",
      "interval",
      "lengthInMinutes"
    ],
    "type": "object"
  },
  "CoachingSlotsResponse": {
    "properties": {
      "attendeeSchedules": {
        "description": "Periods of availability for attendees to schedule coaching appointment",
        "items": {
          "$ref": "#/definitions/UserAvailableTimes"
        },
        "readOnly": true,
        "type": "array"
      },
      "facilitatorSchedules": {
        "description": "Periods of availability for facilitators to schedule coaching appointment",
        "items": {
          "$ref": "#/definitions/UserAvailableTimes"
        },
        "readOnly": true,
        "type": "array"
      },
      "suggestedSlots": {
        "description": "List of slots where coaching appointment can be scheduled",
        "items": {
          "$ref": "#/definitions/CoachingSlot"
        },
        "readOnly": true,
        "type": "array"
      },
      "wfmScheduleActivities": {
        "description": "Detailed data for WFM scheduled activities",
        "items": {
          "$ref": "#/definitions/WfmScheduleActivity"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "CobrowseConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "otherMediaUris": {
        "description": "The list of other media channels involved in the conversation.",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/CobrowseMediaParticipant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CobrowseConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CobrowseConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CobrowseMediaParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of ad-hoc attributes for the participant.",
        "type": "object"
      },
      "cobrowseRole": {
        "description": "This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer).",
        "type": "string"
      },
      "cobrowseSessionId": {
        "description": "The co-browse session ID.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "controlling": {
        "description": "ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "If the conversation ends in error, contains additional error details."
      },
      "externalContact": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external contact, then this will be the reference for the external contact."
      },
      "externalOrganization": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external org, then this will be the reference for the external org."
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "held": {
        "description": "Value is true when the participant is on hold.",
        "type": "boolean"
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context."
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "parkTime": {
        "description": "The time when this participant's communication was last parked.  Does not reset on resume. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peer": {
        "description": "The peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "providerEventTime": {
        "description": "The time when the provider event which triggered this conversation update happened in the corrected provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud queue for this participant."
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Engage script that should be used by this participant."
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud team for this participant."
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud user for this participant."
      },
      "viewerUrl": {
        "description": "The URL that can be used to open co-browse session in web browser.",
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Wrapup for this participant, if it has been applied."
      },
      "wrapupPrompt": {
        "description": "The wrap-up prompt indicating the type of wrap-up to be performed.",
        "type": "string"
      },
      "wrapupRequired": {
        "description": "Value is true when the participant requires wrap-up.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "Value is true when the participant has skipped wrap-up.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "The amount of time the participant has to complete wrap-up.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CobrowseSettings": {
    "description": "Settings concerning cobrowse",
    "properties": {
      "allowAgentControl": {
        "description": "Whether the viewer should have option to request control",
        "type": "boolean"
      },
      "allowAgentNavigation": {
        "description": "Whether the viewer should have option to request navigation",
        "type": "boolean"
      },
      "channels": {
        "description": "Cobrowse channels for web messenger",
        "items": {
          "enum": [
            "Webmessaging",
            "Voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "enabled": {
        "description": "Whether or not cobrowse is enabled",
        "type": "boolean"
      },
      "maskSelectors": {
        "description": "Mask patterns that will apply to pages being shared",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pauseCriteria": {
        "description": "Pause criteria that will pause cobrowse if some of them are met in the user's URL",
        "items": {
          "$ref": "#/definitions/PauseCriteria"
        },
        "type": "array"
      },
      "readonlySelectors": {
        "description": "Readonly patterns that will apply to pages being shared",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CobrowseWebMessagingSession": {
    "properties": {
      "communicationType": {
        "description": "CommunicationType for Cobrowse Session",
        "enum": [
          "Call",
          "Message",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "dateOfferEnds": {
        "description": "Date when Cobrowse Offer Expires. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "joinCode": {
        "description": "Cobrowse session join code",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "websocketUrl": {
        "description": "WebSocket URL for the JS client",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Cobrowsesession": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "cobrowseRole": {
        "description": "This value identifies the role of the co-browse client within the co-browse session (a client is a sharer or a viewer).",
        "type": "string"
      },
      "cobrowseSessionId": {
        "description": "The co-browse session ID.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "controlling": {
        "description": "ID of co-browse participants for which this client has been granted control (list is empty if this client cannot control any shared pages).",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "scheduled",
          "none"
        ],
        "type": "string"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the co-browse session.",
        "type": "string"
      },
      "providerEventTime": {
        "description": "The time when the provider event which triggered this conversation update happened in the corrected provider clock (milliseconds since 1970-01-01 00:00:00 UTC). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's call, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "self": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "scheduled",
          "none"
        ],
        "type": "string"
      },
      "viewerUrl": {
        "description": "The URL that can be used to open co-browse session in web browser.",
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "Column": {
    "properties": {
      "columnName": {
        "description": "Column name. Mandatory for Fixed position/length file format.",
        "type": "string"
      },
      "columnNumber": {
        "description": "0 based column number in delimited file format",
        "format": "int32",
        "type": "integer"
      },
      "length": {
        "description": "Column width. Mandatory for Fixed position/length file format.",
        "format": "int32",
        "type": "integer"
      },
      "startPosition": {
        "description": "Zero-based position of the first column's character. Mandatory for Fixed position/length file format.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ColumnDataTypeSpecification": {
    "properties": {
      "columnDataType": {
        "description": "The data type of the column selected for dynamic queueing (TEXT, NUMERIC or TIMESTAMP)",
        "enum": [
          "NUMERIC",
          "TEXT",
          "TIMESTAMP"
        ],
        "type": "string"
      },
      "columnName": {
        "description": "The column name of a column selected for dynamic queueing",
        "type": "string"
      },
      "max": {
        "description": "The maximum length of the numeric column selected for dynamic queueing",
        "format": "int32",
        "type": "integer"
      },
      "maxLength": {
        "description": "The maximum length of the text column selected for dynamic queueing",
        "format": "int32",
        "type": "integer"
      },
      "min": {
        "description": "The minimum length of the numeric column selected for dynamic queueing",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ColumnStatus": {
    "properties": {
      "contactable": {
        "description": "Indicates whether or not an individual contact method column is contactable.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "CommandStatus": {
    "properties": {
      "commandType": {
        "enum": [
          "UPLOAD",
          "COPYDOCUMENT",
          "MOVEDOCUMENT",
          "DELETEWORKSPACE",
          "DELETEDOCUMENT",
          "DELETETAG",
          "UPDATETAG",
          "REINDEX",
          "CLEANUP",
          "REPLACEDOCUMENT"
        ],
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/Document"
      },
      "expiration": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "statusCode": {
        "enum": [
          "INPROGRESS",
          "COMPLETE",
          "ERROR",
          "CANCELING",
          "CANCELED"
        ],
        "type": "string"
      },
      "userId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CommandStatusEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CommandStatus"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CommonAlert": {
    "properties": {
      "active": {
        "description": "Indicates if an alert is currently active.",
        "type": "boolean"
      },
      "alertSummary": {
        "$ref": "#/definitions/AlertSummary",
        "description": "Summary of the alert status of the entities defined in the conditions.  Is set when rule has instance-based or team member based rule predicates"
      },
      "conditions": {
        "$ref": "#/definitions/CommonRuleConditions",
        "description": "The conditions that make up the rule."
      },
      "conversationId": {
        "description": "The id of the conversation instance that caused the alert to trigger.",
        "type": "string"
      },
      "dateEnd": {
        "description": "The timestamp of when the alert ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateMutedUntil": {
        "description": "Timestamp of when the mute status of the alert should end. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateSnoozedUntil": {
        "description": "Timestamp of when the snooze status of the alert should end. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStart": {
        "description": "The timestamp of when the alert was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "muted": {
        "description": "Flag indicating if the alert is in a muted state.",
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "notifications": {
        "description": "The collection of notification methods and the ids of users who were notified by those methods.",
        "items": {
          "$ref": "#/definitions/AlertNotification"
        },
        "type": "array",
        "uniqueItems": true
      },
      "rule": {
        "$ref": "#/definitions/AlertRuleProperties",
        "description": "The properties of the rule that triggered the alert."
      },
      "ruleUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "snoozed": {
        "description": "Flag indicating if the alert is in a snoozed state.",
        "type": "boolean"
      },
      "unread": {
        "description": "Indicates if an alert has not been read.",
        "type": "boolean"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the rule that triggered the alert."
      },
      "waitBetweenNotificationMs": {
        "description": "The amount of time to wait between notification. Time is in milliseconds.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "active",
      "conditions",
      "dateMutedUntil",
      "dateSnoozedUntil",
      "dateStart",
      "muted",
      "notifications",
      "rule",
      "snoozed",
      "unread",
      "user",
      "waitBetweenNotificationMs"
    ],
    "type": "object"
  },
  "CommonAlertBulkUpdateRequest": {
    "properties": {
      "alertIds": {
        "description": "The user supplied alert ids to be muted",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "muteSnooze": {
        "$ref": "#/definitions/MuteSnoozeFields",
        "description": "The fields need for a mute or snooze requests"
      },
      "type": {
        "description": "The action to take",
        "enum": [
          "Mute",
          "Snooze",
          "Unread"
        ],
        "type": "string"
      },
      "unread": {
        "$ref": "#/definitions/UnreadFields",
        "description": "The fields need for an unread update requests"
      }
    },
    "required": [
      "alertIds",
      "type"
    ],
    "type": "object"
  },
  "CommonCampaign": {
    "properties": {
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The media type used for this campaign.",
        "enum": [
          "email",
          "sms",
          "voice"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the Campaign.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CommonCampaignDivisionView": {
    "properties": {
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The media type used for this campaign.",
        "enum": [
          "email",
          "sms",
          "voice"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the Campaign.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CommonCampaignDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CommonCampaignDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CommonCampaignEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CommonCampaign"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CommonRule": {
    "properties": {
      "conditions": {
        "$ref": "#/definitions/CommonRuleConditions",
        "description": "The set of metric conditions that would trigger an alert."
      },
      "dateCreated": {
        "description": "The creation date of the rule when the rule was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateLastModified": {
        "description": "The timestamp of the last update to the rule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of the rule.",
        "type": "string"
      },
      "enabled": {
        "description": "Indicates if the rule is enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inAlarm": {
        "description": "Indicates if the rule is in alarm state.",
        "type": "boolean"
      },
      "name": {
        "description": "Name of the rule",
        "type": "string"
      },
      "notifications": {
        "description": "The alert notification types to trigger when alarm state changes as well as the users they will be sent to.",
        "items": {
          "$ref": "#/definitions/AlertNotification"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sendExitingAlarmNotifications": {
        "description": "Indicates if the alert will send a notification when it is closed.",
        "type": "boolean"
      },
      "type": {
        "description": "The type of the rule.",
        "enum": [
          "ConversationMetrics",
          "UserPresence",
          "WorkforceManagement",
          "Unknown"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The entity that created the rule."
      },
      "version": {
        "description": "The current version number of the rule.",
        "format": "int32",
        "type": "integer"
      },
      "waitBetweenNotificationMs": {
        "description": "The amount of time in milliseconds to wait between notification.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "type"
    ],
    "type": "object"
  },
  "CommonRuleBulkDeleteRequest": {
    "properties": {
      "ruleIds": {
        "description": "The user supplied rule ids to be deleted",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "ruleIds"
    ],
    "type": "object"
  },
  "CommonRuleBulkUpdateNotificationsRequest": {
    "properties": {
      "properties": {
        "$ref": "#/definitions/ModifiableRuleProperties",
        "description": "The rule properties to be updated"
      },
      "ruleIds": {
        "description": "The user supplied rules ids to be updated",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "typesToAdd": {
        "description": "Collection of alerting notification types to add for all entities in the rules",
        "items": {
          "enum": [
            "Sms",
            "Device",
            "Email",
            "Push"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "typesToRemove": {
        "description": "Collection of alerting notification types to remove for all entities in the rules",
        "items": {
          "enum": [
            "Sms",
            "Device",
            "Email",
            "Push"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "ruleIds"
    ],
    "type": "object"
  },
  "CommonRuleConditions": {
    "properties": {
      "clauses": {
        "description": "The list of predicates groups to be evaluated",
        "items": {
          "$ref": "#/definitions/CommonRuleConditions"
        },
        "type": "array"
      },
      "id": {
        "description": "The id.",
        "type": "string"
      },
      "predicates": {
        "description": "The list of rule metric predicates to be evaluated.",
        "items": {
          "$ref": "#/definitions/CommonRulePredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "the logic operator performed.",
        "enum": [
          "And",
          "Or",
          "Not"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "CommonRuleContainer": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CommonRule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CommonRulePredicate": {
    "properties": {
      "comparisonOperator": {
        "description": "The comparison operator being performed on the metric.",
        "enum": [
          "Gt",
          "Gte",
          "Lt",
          "Lte",
          "Eq",
          "Ne"
        ],
        "type": "string"
      },
      "entity": {
        "$ref": "#/definitions/CommonRulePredicateEntity",
        "description": "The entity whose metric is being represented."
      },
      "mediaType": {
        "description": "The media type of the conversation the metric describes.",
        "enum": [
          "Voice",
          "Chat",
          "Email",
          "Callback",
          "Message"
        ],
        "type": "string"
      },
      "metric": {
        "description": "The metric being evaluated.",
        "enum": [
          "nAbandon",
          "nConnected",
          "nInteractions",
          "nOffered",
          "nOutbound",
          "nTransferred",
          "serviceLevel",
          "oServiceLevel",
          "oWaiting",
          "tAbandon",
          "tAcw",
          "tAlert",
          "tAnswered",
          "tHandle",
          "tHeldComplete",
          "tTalkComplete",
          "tWait",
          "tTalk",
          "tHeld",
          "tOrganizationPresence",
          "tSystemPresence",
          "tAgentRoutingStatus",
          "oUserRoutingStatuses",
          "oUserPresences",
          "oInteracting",
          "tFlowOut",
          "tAdherenceStatus"
        ],
        "type": "string"
      },
      "metricType": {
        "description": "The type of metric being evaluated.",
        "enum": [
          "Interval",
          "Instance"
        ],
        "type": "string"
      },
      "metricValueType": {
        "description": "The type of metric value being evaluated.",
        "enum": [
          "Count",
          "Min",
          "Timer",
          "Max",
          "Percentage",
          "Average",
          "Observation"
        ],
        "type": "string"
      },
      "status": {
        "description": "The status of the entity corresponding to the metric.",
        "type": "string"
      },
      "value": {
        "description": "The value the metric will be compared to.",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "comparisonOperator",
      "entity",
      "metric",
      "metricType",
      "metricValueType",
      "value"
    ],
    "type": "object"
  },
  "CommonRulePredicateEntity": {
    "properties": {
      "entityType": {
        "description": "Specifies the type of entity being evaluated",
        "enum": [
          "User",
          "Group",
          "Queue",
          "Team",
          "TeamMembers"
        ],
        "type": "string"
      },
      "group": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Group id of the entity being monitored"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Queue id of the entity being monitored"
      },
      "team": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Team id of the entity being monitored"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "User id of the entity being monitored"
      }
    },
    "required": [
      "entityType"
    ],
    "type": "object"
  },
  "CommunicationAnsweredEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "CommunicationDispositionAppliedEvent": {
    "properties": {
      "code": {
        "description": "The wrapup-code (V4 UUID) used to disposition this interaction. If this value is not provided the disposition is considered skipped.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.",
        "type": "string"
      },
      "tags": {
        "description": "The list of tags selected by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "CommunicationEndedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationConversationId": {
        "description": "The id (V4 UUID) of the conversation that the communication is being moved to when conversations are merged.",
        "type": "string"
      },
      "disconnectType": {
        "description": "Indicates how this communication was ended.",
        "enum": [
          "Error",
          "Peer",
          "Self",
          "System",
          "Transfer",
          "TransferACD",
          "TransferConference",
          "TransferConsult",
          "TransferUser"
        ],
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "disconnectType",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "ComparisonPeriod": {
    "properties": {
      "dateEnded": {
        "description": "End date of the comparison period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateStarted": {
        "description": "Start date of the comparison period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "kpi": {
        "description": "Key Performance Indicator optimised during the comparison period.",
        "readOnly": true,
        "type": "string"
      },
      "kpiResults": {
        "description": "KPI results for each metric",
        "items": {
          "$ref": "#/definitions/KpiResult"
        },
        "readOnly": true,
        "type": "array"
      },
      "percentageBenefit": {
        "description": "The percentage benefit on this queue for the duration of the comparison period",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ComparisonPeriodListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ComparisonPeriod"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ComplexVariableInfo": {
    "description": "Variable type information about a complex type from the bot's definition",
    "properties": {
      "id": {
        "description": "The variable type ID",
        "type": "string"
      },
      "name": {
        "description": "The variable type display name",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "Compliance": {
    "properties": {
      "helpSettings": {
        "description": "List of configurations for 'HelpSettings' compliance",
        "items": {
          "$ref": "#/definitions/HelpSettings"
        },
        "type": "array"
      },
      "optInSettings": {
        "description": "List of configurations for 'OptInSettings' compliance",
        "items": {
          "$ref": "#/definitions/OptInSettings"
        },
        "type": "array"
      },
      "stopSettings": {
        "description": "List of configurations for 'StopSettings' compliance",
        "items": {
          "$ref": "#/definitions/StopSettings"
        },
        "type": "array"
      }
    },
    "required": [
      "helpSettings",
      "optInSettings",
      "stopSettings"
    ],
    "type": "object"
  },
  "ComplianceResponse": {
    "properties": {
      "message": {
        "description": "Message response",
        "type": "string"
      }
    },
    "required": [
      "message"
    ],
    "type": "object"
  },
  "Condition": {
    "properties": {
      "agentWrapupField": {
        "description": "The input field from the data action that the agentWrapup will be passed to for this condition. Valid for a wrapup dataActionCondition.",
        "type": "string"
      },
      "attributeName": {
        "description": "An attribute name associated with this Condition. Required for a contactAttributeCondition.",
        "type": "string"
      },
      "callAnalysisResultField": {
        "description": "The input field from the data action that the callAnalysisResult will be passed to for this condition. Valid for a wrapup dataActionCondition.",
        "type": "string"
      },
      "codes": {
        "description": "List of wrap-up code identifiers. Required for a wrapupCondition.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "contactColumnToDataActionFieldMappings": {
        "description": "A list of mappings defining which contact data fields will be passed to which data action input fields for this condition. Valid for a dataActionCondition.",
        "items": {
          "$ref": "#/definitions/ContactColumnToDataActionFieldMapping"
        },
        "type": "array"
      },
      "contactIdField": {
        "description": "The input field from the data action that the contactId will be passed to for this condition. Valid for a dataActionCondition.",
        "type": "string"
      },
      "dataAction": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Data Action to use for this condition. Required for a dataActionCondition."
      },
      "dataNotFoundResolution": {
        "description": "The result of this condition if the data action returns a result indicating there was no data. Required for a DataActionCondition.",
        "type": "boolean"
      },
      "inverted": {
        "description": "If true, inverts the result of evaluating this Condition. Default is false.",
        "type": "boolean"
      },
      "operator": {
        "description": "An operation with which to evaluate the Condition. Not used for a DataActionCondition.",
        "enum": [
          "EQUALS",
          "LESS_THAN",
          "LESS_THAN_EQUALS",
          "GREATER_THAN",
          "GREATER_THAN_EQUALS",
          "CONTAINS",
          "BEGINS_WITH",
          "ENDS_WITH",
          "BEFORE",
          "AFTER",
          "IN"
        ],
        "type": "string"
      },
      "predicates": {
        "description": "A list of predicates defining the comparisons to use for this condition. Required for a dataActionCondition.",
        "items": {
          "$ref": "#/definitions/DataActionConditionPredicate"
        },
        "type": "array"
      },
      "property": {
        "description": "A value associated with the property type of this Condition. Required for a contactPropertyCondition.",
        "type": "string"
      },
      "propertyType": {
        "description": "The type of the property associated with this Condition. Required for a contactPropertyCondition.",
        "enum": [
          "LAST_ATTEMPT_BY_COLUMN",
          "LAST_ATTEMPT_OVERALL",
          "LAST_WRAPUP_BY_COLUMN",
          "LAST_WRAPUP_OVERALL"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the condition.",
        "enum": [
          "wrapupCondition",
          "systemDispositionCondition",
          "contactAttributeCondition",
          "phoneNumberCondition",
          "phoneNumberTypeCondition",
          "callAnalysisCondition",
          "contactPropertyCondition",
          "dataActionCondition"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value associated with this Condition. This could be text, a number, or a relative time. Not used for a DataActionCondition.",
        "type": "string"
      },
      "valueType": {
        "description": "The type of the value associated with this Condition. Not used for a DataActionCondition.",
        "enum": [
          "STRING",
          "NUMERIC",
          "DATETIME",
          "PERIOD"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConditionalGroupRouting": {
    "properties": {
      "rules": {
        "description": "The set of rules to be executed for each conversation",
        "items": {
          "$ref": "#/definitions/ConditionalGroupRoutingRule"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConditionalGroupRoutingRule": {
    "properties": {
      "conditionValue": {
        "description": "The limit value, beyond which a rule evaluates as true",
        "format": "double",
        "type": "number"
      },
      "groups": {
        "description": "The group(s) to activate if the rule evaluates as true",
        "items": {
          "$ref": "#/definitions/MemberGroup"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metric": {
        "description": "The queue metric being evaluated",
        "enum": [
          "EstimatedWaitTime",
          "ServiceLevel"
        ],
        "type": "string"
      },
      "operator": {
        "description": "The operator that compares the actual value against the condition value",
        "enum": [
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThan",
          "LessThanOrEqualTo"
        ],
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The queue being evaluated for this rule.  If null, the current queue will be used."
      },
      "waitSeconds": {
        "description": "The number of seconds to wait in this rule, if it evaluates as true, before evaluating the next rule.  For the final rule, this is ignored, so need not be specified.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConfigurationOverrides": {
    "properties": {
      "priority": {
        "description": "Indicates whether or not the contact will be placed in front of the queue or at the end of the queue.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ConfusionDetails": {
    "properties": {
      "intents": {
        "description": "Confusion details between this utterance and other intents.",
        "items": {
          "$ref": "#/definitions/ConfusionIntentDetails"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConfusionInfo": {
    "properties": {
      "intents": {
        "description": "Confusion details between this utterance and other intents.",
        "items": {
          "$ref": "#/definitions/ConfusionIntentInfo"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConfusionIntentDetails": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utteranceCount": {
        "description": "Number of utterances in this intent which are similar to parent utterance.",
        "format": "int32",
        "type": "integer"
      },
      "utterances": {
        "description": "List of utterance which are similar to parent utterance.",
        "items": {
          "$ref": "#/definitions/ConfusionUtterance"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConfusionIntentInfo": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the object.",
        "readOnly": true,
        "type": "string"
      },
      "utteranceCount": {
        "description": "Number of utterances in this intent which are similar to parent utterance.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConfusionUtterance": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "similarity": {
        "description": "Utterance's similarity score, 0 being dissimilar and 1 being very similar.",
        "format": "float",
        "type": "number"
      },
      "text": {
        "description": "Utterance Text.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConnectRate": {
    "properties": {
      "attempts": {
        "description": "Number of call attempts made",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "connectRatio": {
        "description": "Ratio of connects to attempts",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "connects": {
        "description": "Number of calls with a live voice detected",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConnectedEdge": {
    "properties": {
      "edgeConnectionList": {
        "items": {
          "$ref": "#/definitions/EdgeConnectionInfo"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interfaceIpAddress": {
        "description": "Edge interface IP address",
        "readOnly": true,
        "type": "string"
      },
      "interfaceName": {
        "description": "Edge interface name used for the connection",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConnectedQueue": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConnectedUser": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConstraintConflictMessage": {
    "properties": {
      "conflictedConstraintMessages": {
        "description": "Messages for the set of conflicted work plan constraints. Each element indicates the message of a work plan constraint that is conflicted in the set",
        "items": {
          "$ref": "#/definitions/WorkPlanConstraintMessage"
        },
        "type": "array"
      },
      "message": {
        "$ref": "#/definitions/WorkPlanConstraintConflictMessage",
        "description": "Message for how to resolve a set of conflicted work plan constraints"
      }
    },
    "type": "object"
  },
  "ConsultTransfer": {
    "properties": {
      "consultingUserId": {
        "description": "The user ID of the person who wants to talk before completing the transfer. Could be the same of the context user ID",
        "type": "string"
      },
      "destination": {
        "$ref": "#/definitions/Destination",
        "description": "Destination phone number and name."
      },
      "speakTo": {
        "description": "Determines to whom the initiating participant is speaking. Defaults to DESTINATION",
        "enum": [
          "DESTINATION",
          "OBJECT",
          "BOTH",
          "CONFERENCE"
        ],
        "type": "string"
      }
    },
    "required": [
      "destination",
      "speakTo"
    ],
    "type": "object"
  },
  "ConsultTransferEvent": {
    "properties": {
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "The id (V4 UUID) of the communication representing the participant that is initiating the transfer.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      }
    },
    "required": [
      "conversationId",
      "destinationCommunicationId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "ConsultTransferResponse": {
    "properties": {
      "destinationParticipantId": {
        "description": "Participant ID to whom the call is being transferred.",
        "type": "string"
      }
    },
    "required": [
      "destinationParticipantId"
    ],
    "type": "object"
  },
  "ConsultTransferToAgent": {
    "properties": {
      "consultingUserId": {
        "description": "The user ID of the person who wants to talk before completing the transfer. Could be the same of the context user ID",
        "type": "string"
      },
      "speakTo": {
        "description": "Determines to whom the initiating participant is speaking. Defaults to DESTINATION",
        "enum": [
          "DESTINATION",
          "OBJECT",
          "BOTH",
          "CONFERENCE"
        ],
        "type": "string"
      },
      "userDisplayName": {
        "description": "The name of the internal user.",
        "type": "string"
      },
      "userId": {
        "description": "The id of the internal user.",
        "type": "string"
      }
    },
    "required": [
      "speakTo"
    ],
    "type": "object"
  },
  "ConsultTransferToExternal": {
    "properties": {
      "address": {
        "description": "The address (like phone number) of the external contact.",
        "type": "string"
      },
      "consultingUserId": {
        "description": "The user ID of the person who wants to talk before completing the transfer. Could be the same of the context user ID",
        "type": "string"
      },
      "speakTo": {
        "description": "Determines to whom the initiating participant is speaking. Defaults to DESTINATION",
        "enum": [
          "DESTINATION",
          "OBJECT",
          "BOTH",
          "CONFERENCE"
        ],
        "type": "string"
      }
    },
    "required": [
      "speakTo"
    ],
    "type": "object"
  },
  "ConsultTransferToQueue": {
    "properties": {
      "consultingUserId": {
        "description": "The user ID of the person who wants to talk before completing the transfer. Could be the same of the context user ID",
        "type": "string"
      },
      "queueId": {
        "description": "The id of the queue.",
        "type": "string"
      },
      "queueName": {
        "description": "The name of the queue.",
        "type": "string"
      },
      "speakTo": {
        "description": "Determines to whom the initiating participant is speaking. Defaults to DESTINATION",
        "enum": [
          "DESTINATION",
          "OBJECT",
          "BOTH",
          "CONFERENCE"
        ],
        "type": "string"
      }
    },
    "required": [
      "speakTo"
    ],
    "type": "object"
  },
  "ConsultTransferUpdate": {
    "properties": {
      "consultingUserId": {
        "description": "The user ID of the person who wants to talk before completing the transfer. Could be the same of the context user ID",
        "type": "string"
      },
      "speakTo": {
        "description": "Determines to whom the initiating participant is speaking.",
        "enum": [
          "DESTINATION",
          "OBJECT",
          "BOTH",
          "CONFERENCE"
        ],
        "type": "string"
      }
    },
    "required": [
      "speakTo"
    ],
    "type": "object"
  },
  "ConsumedResourcesEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Dependency"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConsumingResourcesEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Dependency"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Contact": {
    "properties": {
      "address": {
        "description": "Email address or phone number for this contact type",
        "type": "string"
      },
      "countryCode": {
        "type": "string"
      },
      "display": {
        "description": "Formatted version of the address property",
        "readOnly": true,
        "type": "string"
      },
      "extension": {
        "description": "Use internal extension instead of address. Mutually exclusive with the address field.",
        "type": "string"
      },
      "integration": {
        "description": "Integration tag value if this number is associated with an external integration.",
        "example": "microsoftteams",
        "type": "string"
      },
      "mediaType": {
        "enum": [
          "PHONE",
          "EMAIL",
          "SMS"
        ],
        "type": "string"
      },
      "type": {
        "enum": [
          "PRIMARY",
          "WORK",
          "WORK2",
          "WORK3",
          "WORK4",
          "HOME",
          "MOBILE",
          "MAIN",
          "OTHER"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactAddress": {
    "properties": {
      "address1": {
        "type": "string"
      },
      "address2": {
        "type": "string"
      },
      "city": {
        "type": "string"
      },
      "countryCode": {
        "type": "string"
      },
      "postalCode": {
        "type": "string"
      },
      "state": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactAddressConditionSettings": {
    "properties": {
      "operator": {
        "description": "The operator to use when comparing address values.",
        "enum": [
          "Equals",
          "Contains",
          "BeginsWith",
          "EndsWith"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value to compare against the contact's address.",
        "example": "+1555, outlook.com",
        "type": "string"
      }
    },
    "required": [
      "operator",
      "value"
    ],
    "type": "object"
  },
  "ContactAddressTypeConditionSettings": {
    "properties": {
      "operator": {
        "description": "The operator to use when comparing the address types.",
        "enum": [
          "Equals",
          "Contains",
          "BeginsWith",
          "EndsWith"
        ],
        "type": "string"
      },
      "value": {
        "description": "The type value to compare against the contact column type.",
        "type": "string"
      }
    },
    "required": [
      "operator",
      "value"
    ],
    "type": "object"
  },
  "ContactAddressableEntityRef": {
    "properties": {
      "id": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactBulkEditRequest": {
    "properties": {
      "contact": {
        "$ref": "#/definitions/DialerContact",
        "description": "Contact object with details of fields used for patching."
      },
      "contactIds": {
        "description": "Contact IDs to be bulk edited.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "contactListFilterId": {
        "description": "Contact List Filter ID.",
        "type": "string"
      },
      "criteria": {
        "$ref": "#/definitions/ContactBulkSearchCriteria",
        "description": "Criteria to filter the contacts by."
      }
    },
    "type": "object"
  },
  "ContactBulkSearchCriteria": {
    "properties": {
      "clauses": {
        "description": "Groups of conditions to filter the contacts by.",
        "items": {
          "$ref": "#/definitions/ContactListFilterClause"
        },
        "type": "array"
      },
      "filterType": {
        "description": "How to join clauses together.",
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactBulkSearchParameters": {
    "properties": {
      "contactListFilterId": {
        "description": "Contact List Filter ID. Either this property or criteria is required.",
        "type": "string"
      },
      "criteria": {
        "$ref": "#/definitions/ContactBulkSearchCriteria",
        "description": "Criteria to filter the contacts by. Either this property or contactListFilterId is required."
      }
    },
    "type": "object"
  },
  "ContactCallbackRequest": {
    "properties": {
      "campaignId": {
        "description": "Campaign identifier",
        "type": "string"
      },
      "contactId": {
        "description": "Contact identifier",
        "type": "string"
      },
      "contactListId": {
        "description": "Contact list identifier",
        "type": "string"
      },
      "phoneColumn": {
        "description": "Name of the phone column containing the number to be called",
        "type": "string"
      },
      "schedule": {
        "description": "The scheduled time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ\", example = \"2016-01-02T16:59:59\"",
        "type": "string"
      }
    },
    "required": [
      "campaignId",
      "contactId",
      "contactListId",
      "phoneColumn",
      "schedule"
    ],
    "type": "object"
  },
  "ContactCenterSettings": {
    "properties": {
      "removeSkillsFromBlindTransfer": {
        "description": "Strip skills from transfer",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ContactColumnConditionSettings": {
    "properties": {
      "columnName": {
        "description": "The name of the contact list column to evaluate.",
        "type": "string"
      },
      "operator": {
        "description": "The operator to use when comparing values.",
        "enum": [
          "Equals",
          "LessThan",
          "LessThanEquals",
          "GreaterThan",
          "GreaterThanEquals",
          "Contains",
          "BeginsWith",
          "EndsWith",
          "Before",
          "After"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value to compare against the contact's data.",
        "example": "For Numeric: '1234', '1234.56', '$1,234.56'. For DateTime: '2022-01-01T12:01:23.456-0000'. For Period: 'P1DT1H1M'. ",
        "type": "string"
      },
      "valueType": {
        "description": "The data type the value should be treated as.",
        "enum": [
          "DateTime",
          "Numeric",
          "Period",
          "String"
        ],
        "type": "string"
      }
    },
    "required": [
      "columnName",
      "operator",
      "value",
      "valueType"
    ],
    "type": "object"
  },
  "ContactColumnTimeZone": {
    "properties": {
      "columnType": {
        "description": "Column Type will be either PHONE or ZIP",
        "enum": [
          "PHONE",
          "ZIP"
        ],
        "readOnly": true,
        "type": "string"
      },
      "timeZone": {
        "description": "Time zone that the column matched to. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactColumnToDataActionFieldMapping": {
    "properties": {
      "contactColumnName": {
        "description": "The name of a contact column whose data will be passed to the data action",
        "type": "string"
      },
      "dataActionField": {
        "description": "The name of an input field from the data action that the contact column data will be passed to",
        "type": "string"
      }
    },
    "required": [
      "contactColumnName",
      "dataActionField"
    ],
    "type": "object"
  },
  "ContactIdentifier": {
    "properties": {
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of this identifier",
        "enum": [
          "SocialLine",
          "SocialFacebook",
          "SocialTwitter",
          "SocialWhatsapp",
          "Email",
          "Phone",
          "Cookie",
          "ExternalId"
        ],
        "type": "string"
      },
      "value": {
        "description": "The string value of the identifier. Will vary in syntax by type.",
        "type": "string"
      }
    },
    "required": [
      "type",
      "value"
    ],
    "type": "object"
  },
  "ContactList": {
    "properties": {
      "attemptLimits": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "AttemptLimits for this ContactList."
      },
      "automaticTimeZoneMapping": {
        "description": "Indicates if automatic time zone mapping is to be used for this ContactList.",
        "type": "boolean"
      },
      "columnDataTypeSpecifications": {
        "description": "The settings of the columns selected for dynamic queueing",
        "items": {
          "$ref": "#/definitions/ColumnDataTypeSpecification"
        },
        "type": "array"
      },
      "columnNames": {
        "description": "The names of the contact data columns.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The division this entity belongs to."
      },
      "emailColumns": {
        "description": "Indicates which columns are email addresses",
        "items": {
          "$ref": "#/definitions/EmailColumn"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importStatus": {
        "$ref": "#/definitions/ImportStatus",
        "description": "The status of the import process.",
        "readOnly": true
      },
      "name": {
        "type": "string"
      },
      "phoneColumns": {
        "description": "Indicates which columns are phone numbers.",
        "items": {
          "$ref": "#/definitions/ContactPhoneNumberColumn"
        },
        "type": "array"
      },
      "previewModeAcceptedValues": {
        "description": "The values in the previewModeColumnName column that indicate a contact should always be dialed in preview mode.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "previewModeColumnName": {
        "description": "A column to check if a contact should always be dialed in preview mode.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "size": {
        "description": "The number of contacts in the ContactList.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "trimWhitespace": {
        "description": "Whether to trim white space when importing a contactlist csv file, default value = true",
        "type": "boolean"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      },
      "zipCodeColumnName": {
        "description": "The name of contact list column containing the zip code for use with automatic time zone mapping. Only allowed if 'automaticTimeZoneMapping' is set to true.",
        "type": "string"
      }
    },
    "required": [
      "columnNames"
    ],
    "type": "object"
  },
  "ContactListDivisionView": {
    "properties": {
      "columnNames": {
        "description": "The names of the contact data columns.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "emailColumns": {
        "description": "Indicates which columns are email addresses.",
        "items": {
          "$ref": "#/definitions/EmailColumn"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importStatus": {
        "$ref": "#/definitions/ImportStatus",
        "description": "The status of the import process.",
        "readOnly": true
      },
      "name": {
        "type": "string"
      },
      "phoneColumns": {
        "description": "Indicates which columns are phone numbers.",
        "items": {
          "$ref": "#/definitions/ContactPhoneNumberColumn"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "size": {
        "description": "The number of contacts in the ContactList.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "columnNames"
    ],
    "type": "object"
  },
  "ContactListDivisionViewListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ContactListDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactListEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ContactList"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactListFilter": {
    "properties": {
      "clauses": {
        "description": "Groups of conditions to filter the contacts by.",
        "items": {
          "$ref": "#/definitions/ContactListFilterClause"
        },
        "type": "array"
      },
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The contact list the filter is based on. Required if sourceType is ContactList"
      },
      "contactListTemplate": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The contact list template the filter is based on. Required if sourceType is ContactListTemplate"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "filterType": {
        "description": "How to join clauses together.",
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the list.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceType": {
        "description": "The source type the filter is based on.",
        "enum": [
          "ContactList",
          "ContactListTemplate"
        ],
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ContactListFilterBulkRetrieveBody": {
    "properties": {
      "ids": {
        "description": "The IDs of the Contact List Filters to retrieve.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "ids"
    ],
    "type": "object"
  },
  "ContactListFilterClause": {
    "properties": {
      "filterType": {
        "description": "How to join predicates together.",
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      },
      "predicates": {
        "description": "Conditions to filter the contacts by.",
        "items": {
          "$ref": "#/definitions/ContactListFilterPredicate"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ContactListFilterEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ContactListFilter"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactListFilterPredicate": {
    "properties": {
      "column": {
        "description": "Contact list column from the ContactListFilter's contactList.",
        "type": "string"
      },
      "columnType": {
        "description": "The type of data in the contact column.",
        "enum": [
          "numeric",
          "alphabetic"
        ],
        "type": "string"
      },
      "inverted": {
        "description": "Inverts the result of the predicate (i.e., if the predicate returns true, inverting it will return false).",
        "type": "boolean"
      },
      "operator": {
        "description": "The operator for this ContactListFilterPredicate.",
        "enum": [
          "EQUALS",
          "LESS_THAN",
          "LESS_THAN_EQUALS",
          "GREATER_THAN",
          "GREATER_THAN_EQUALS",
          "CONTAINS",
          "BEGINS_WITH",
          "ENDS_WITH",
          "BEFORE",
          "AFTER",
          "BETWEEN",
          "IN"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/ContactListFilterRange",
        "description": "A range of values. Required for operators BETWEEN and IN."
      },
      "value": {
        "description": "Value with which to compare the contact's data. This could be text, a number, or a relative time. A value for relative time should follow the format PxxDTyyHzzM, where xx, yy, and zz specify the days, hours and minutes. For example, a value of P01DT08H30M corresponds to 1 day, 8 hours, and 30 minutes from now. To specify a time in the past, include a negative sign before each numeric value. For example, a value of P-01DT-08H-30M corresponds to 1 day, 8 hours, and 30 minutes in the past. You can also do things like P01DT00H-30M, which would correspond to 23 hours and 30 minutes from now (1 day - 30 minutes).",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactListFilterRange": {
    "properties": {
      "inSet": {
        "description": "A set of values that the contact data should be in. Required for the IN operator.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "max": {
        "description": "The maximum value of the range. Required for the operator BETWEEN.",
        "type": "string"
      },
      "maxInclusive": {
        "description": "Whether or not to include the maximum in the range.",
        "type": "boolean"
      },
      "min": {
        "description": "The minimum value of the range. Required for the operator BETWEEN.",
        "type": "string"
      },
      "minInclusive": {
        "description": "Whether or not to include the minimum in the range.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ContactListTemplate": {
    "properties": {
      "attemptLimits": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "AttemptLimits for this ContactListTemplate."
      },
      "automaticTimeZoneMapping": {
        "description": "Indicates if automatic time zone mapping is to be used for this ContactListTemplate.",
        "type": "boolean"
      },
      "columnDataTypeSpecifications": {
        "description": "The settings of the columns selected for dynamic queueing",
        "items": {
          "$ref": "#/definitions/ColumnDataTypeSpecification"
        },
        "type": "array"
      },
      "columnNames": {
        "description": "The names of the contact data columns.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "emailColumns": {
        "description": "Indicates which columns are email addresses",
        "items": {
          "$ref": "#/definitions/EmailColumn"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "phoneColumns": {
        "description": "Indicates which columns are phone numbers.",
        "items": {
          "$ref": "#/definitions/ContactPhoneNumberColumn"
        },
        "type": "array"
      },
      "previewModeAcceptedValues": {
        "description": "The values in the previewModeColumnName column that indicate a contact should always be dialed in preview mode.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "previewModeColumnName": {
        "description": "A column to check if a contact should always be dialed in preview mode.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "trimWhitespace": {
        "description": "Whether to trim white space when importing a ContactListTemplate csv file, default value = true",
        "type": "boolean"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      },
      "zipCodeColumnName": {
        "description": "The name of ContactListTemplate column containing the zip code for use with automatic time zone mapping. Only allowed if 'automaticTimeZoneMapping' is set to true.",
        "type": "string"
      }
    },
    "required": [
      "columnNames"
    ],
    "type": "object"
  },
  "ContactListTemplateBulkRetrieveBody": {
    "properties": {
      "ids": {
        "description": "The IDs of the Contact List Templates to retrieve.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "ids"
    ],
    "type": "object"
  },
  "ContactListTemplateEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ContactListTemplate"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalContact"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "partialResults": {
        "type": "boolean"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactListingRequest": {
    "properties": {
      "contactListFilterId": {
        "description": "Contact List Filter ID.",
        "type": "string"
      },
      "contactSorts": {
        "description": "The order in which to sort contacts.",
        "items": {
          "$ref": "#/definitions/ContactSort"
        },
        "type": "array"
      },
      "criteria": {
        "$ref": "#/definitions/ContactBulkSearchCriteria",
        "description": "Criteria to filter the contacts by."
      },
      "pageNumber": {
        "description": "Page number.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size. The max that will be returned is 100.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "pageNumber",
      "pageSize"
    ],
    "type": "object"
  },
  "ContactListingResponse": {
    "properties": {
      "contactsCount": {
        "format": "int64",
        "type": "integer"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/DialerContact"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactPhoneNumberColumn": {
    "properties": {
      "callableTimeColumn": {
        "description": "A column that indicates the timezone to use for a given contact when checking callable times. Not allowed if 'automaticTimeZoneMapping' is set to true.",
        "type": "string"
      },
      "columnName": {
        "description": "The name of the phone column.",
        "type": "string"
      },
      "type": {
        "description": "Indicates the type of the phone column. For example, 'cell' or 'home'.",
        "type": "string"
      }
    },
    "required": [
      "columnName",
      "type"
    ],
    "type": "object"
  },
  "ContactSort": {
    "properties": {
      "direction": {
        "description": "The direction in which to sort contacts.",
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string"
      },
      "fieldName": {
        "type": "string"
      },
      "numeric": {
        "description": "Whether or not the column contains numeric data.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ContactableStatus": {
    "properties": {
      "columnStatus": {
        "additionalProperties": {
          "$ref": "#/definitions/ColumnStatus"
        },
        "description": "A map of individual contact method columns to whether the individual column is contactable for the associated media type.",
        "type": "object"
      },
      "contactable": {
        "description": "Indicates whether or not the entire contact is contactable for the associated media type.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ContactsBulkOperationJob": {
    "properties": {
      "completedRecords": {
        "description": "Amount of records that have been impacted by the bulk operation.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "downloadURI": {
        "description": "URI to download the original backup contacts.",
        "readOnly": true,
        "type": "string"
      },
      "failureReason": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "Information on failure reason.",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique job identifier.",
        "readOnly": true,
        "type": "string"
      },
      "percentComplete": {
        "description": "Percentage of records that have been impacted by the bulk operation.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The job state.",
        "enum": [
          "InProgress",
          "Complete",
          "Failed"
        ],
        "readOnly": true,
        "type": "string"
      },
      "totalRecords": {
        "description": "Total records that will be impacted by the bulk operation.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "type": {
        "description": "The job type.",
        "enum": [
          "BulkDelete",
          "BulkEdit"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContactsBulkOperationJobListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ContactsBulkOperationJob"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ContactsExportRequest": {
    "properties": {
      "contactIds": {
        "description": "Contact IDs to be exported.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "contactListFilterId": {
        "description": "Contact List Filter ID.",
        "type": "string"
      },
      "criteria": {
        "$ref": "#/definitions/ContactBulkSearchCriteria",
        "description": "Criteria to filter the contacts by."
      }
    },
    "type": "object"
  },
  "ContentActions": {
    "description": "User actions available on the content. All actions are optional and all actions are executed simultaneously.",
    "properties": {
      "textback": {
        "description": "Text to be returned as the payload from a ButtonResponse when a button is clicked. The textback and title are a combination which will have to be unique across each card and carousel in order to determine which button was clicked in that card or carousel.",
        "type": "string"
      },
      "url": {
        "description": "A URL of a web page to direct the user to.",
        "type": "string"
      },
      "urlTarget": {
        "description": "The target window in which to open the URL. If empty will open a blank page or tab.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentAttachment": {
    "description": "Attachment object.",
    "properties": {
      "contentSizeBytes": {
        "description": "Size in bytes of the attachment content.",
        "format": "int64",
        "type": "integer"
      },
      "filename": {
        "description": "Suggested file name for attachment.",
        "type": "string"
      },
      "id": {
        "description": "Provider specific ID for attachment. For example, a LINE sticker ID.",
        "type": "string"
      },
      "mediaType": {
        "description": "The type of attachment this instance represents.",
        "enum": [
          "Image",
          "Video",
          "Audio",
          "File",
          "Link"
        ],
        "type": "string"
      },
      "mime": {
        "description": "Attachment mime type (https://www.iana.org/assignments/media-types/media-types.xhtml).",
        "type": "string"
      },
      "sha256": {
        "description": "Secure hash of the attachment content.",
        "type": "string"
      },
      "text": {
        "description": "Text associated with attachment such as an image caption.",
        "type": "string"
      },
      "url": {
        "description": "URL of the attachment.",
        "type": "string"
      }
    },
    "required": [
      "mediaType"
    ],
    "type": "object"
  },
  "ContentButtonResponse": {
    "description": "Button response object representing the click of a structured message button, such as a quick reply.",
    "properties": {
      "id": {
        "description": "An ID assigned to the button response (Deprecated).",
        "type": "string"
      },
      "payload": {
        "description": "The response payload associated with the clicked button.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      },
      "type": {
        "description": "Describes the button that resulted in the Button Response.",
        "enum": [
          "Button",
          "DatePicker",
          "QuickReply"
        ],
        "type": "string"
      }
    },
    "required": [
      "payload",
      "text",
      "type"
    ],
    "type": "object"
  },
  "ContentCard": {
    "description": "Card content object.",
    "properties": {
      "actions": {
        "description": "An array of action objects.",
        "items": {
          "$ref": "#/definitions/ContentCardAction"
        },
        "type": "array"
      },
      "defaultAction": {
        "$ref": "#/definitions/ContentCardAction",
        "description": "The default button action."
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "image": {
        "description": "URL of an image.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      },
      "video": {
        "description": "URL of a video.",
        "type": "string"
      }
    },
    "required": [
      "actions",
      "title"
    ],
    "type": "object"
  },
  "ContentCardAction": {
    "description": "A card action that a user can take.",
    "properties": {
      "payload": {
        "description": "Text to be returned as the payload from a ButtonResponse when a button is clicked. The payload and text are a combination which will have to be unique across each card and carousel in order to determine which button was clicked in that card or carousel.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      },
      "type": {
        "description": "Describes the type of action.",
        "enum": [
          "Link",
          "Postback"
        ],
        "type": "string"
      },
      "url": {
        "description": "A URL of a web page to direct the user to.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentCarousel": {
    "description": "Carousel content object.",
    "properties": {
      "cards": {
        "description": "An array of card objects.",
        "items": {
          "$ref": "#/definitions/ContentCard"
        },
        "type": "array"
      }
    },
    "required": [
      "cards"
    ],
    "type": "object"
  },
  "ContentFilterItem": {
    "properties": {
      "name": {
        "type": "string"
      },
      "operator": {
        "enum": [
          "IN",
          "RANGE",
          "EQUALS",
          "NOTEQUALS",
          "LESSTHAN",
          "LESSTHANEQUALS",
          "GREATERTHAN",
          "GREATERTHANEQUALS",
          "CONTAINS"
        ],
        "type": "string"
      },
      "type": {
        "enum": [
          "NUMBER",
          "STRING",
          "DATE",
          "BOOLEAN",
          "LIST"
        ],
        "type": "string"
      },
      "values": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ContentGeneric": {
    "description": "Deprecated, should use Card.",
    "properties": {
      "actions": {
        "$ref": "#/definitions/ContentActions",
        "description": "Actions to be taken (Deprecated)."
      },
      "components": {
        "description": "An array of component objects.",
        "items": {
          "$ref": "#/definitions/ButtonComponent"
        },
        "type": "array"
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "image": {
        "description": "URL of an image.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      },
      "video": {
        "description": "URL of a video.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentList": {
    "description": "List content object.",
    "properties": {
      "actions": {
        "$ref": "#/definitions/ContentActions",
        "description": "The list actions (Deprecated)."
      },
      "components": {
        "description": "An array of component objects.",
        "items": {
          "$ref": "#/definitions/ListItemComponent"
        },
        "type": "array"
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "id": {
        "description": "A unique ID assigned to this rich message content.",
        "type": "string"
      },
      "listType": {
        "description": "The type of list this instance represents.",
        "enum": [
          "Selection",
          "Vertical"
        ],
        "type": "string"
      },
      "submitLabel": {
        "description": "Label for Submit button.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentLocation": {
    "description": "Location object.",
    "properties": {
      "address": {
        "description": "Location postal address.",
        "type": "string"
      },
      "latitude": {
        "description": "Latitude of the location.",
        "format": "double",
        "type": "number"
      },
      "longitude": {
        "description": "Longitude of the location.",
        "format": "double",
        "type": "number"
      },
      "text": {
        "description": "Location name.",
        "type": "string"
      },
      "url": {
        "description": "URL of the Location.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentNotificationTemplate": {
    "description": "Template notification object.",
    "properties": {
      "body": {
        "$ref": "#/definitions/NotificationTemplateBody",
        "description": "The template body."
      },
      "footer": {
        "$ref": "#/definitions/NotificationTemplateFooter",
        "description": "The template footer."
      },
      "header": {
        "$ref": "#/definitions/NotificationTemplateHeader",
        "description": "The template header."
      },
      "id": {
        "description": "The messaging provider template ID. For WhatsApp, 'namespace@name'.",
        "type": "string"
      },
      "language": {
        "description": "Template language.",
        "type": "string"
      }
    },
    "required": [
      "body"
    ],
    "type": "object"
  },
  "ContentOffer": {
    "properties": {
      "body": {
        "description": "Body text of the content offer.",
        "type": "string"
      },
      "callToAction": {
        "$ref": "#/definitions/CallToAction",
        "description": "Properties customizing the call to action button on the content offer."
      },
      "displayMode": {
        "description": "The display mode of Genesys Widgets when displaying content offer.",
        "enum": [
          "Modal",
          "Overlay",
          "Toast"
        ],
        "type": "string"
      },
      "headline": {
        "description": "Headline displayed above the body text of the content offer.",
        "type": "string"
      },
      "imageUrl": {
        "description": "URL for image displayed to the customer when displaying content offer.",
        "type": "string"
      },
      "layoutMode": {
        "description": "The layout mode of the text shown to the user when displaying content offer.",
        "enum": [
          "TextOnly",
          "ImageOnly",
          "LeftText",
          "RightText",
          "TopText",
          "BottomText"
        ],
        "type": "string"
      },
      "style": {
        "$ref": "#/definitions/ContentOfferStylingConfiguration",
        "description": "Properties customizing the styling of the content offer."
      },
      "title": {
        "description": "Title used in the header of the content offer.",
        "type": "string"
      }
    },
    "required": [
      "displayMode",
      "layoutMode"
    ],
    "type": "object"
  },
  "ContentOfferStyleProperties": {
    "properties": {
      "backgroundColor": {
        "description": "Background color of the offer. (eg. #000000)",
        "type": "string"
      },
      "color": {
        "description": "Text color of the offer. (eg. #FF0000)",
        "type": "string"
      },
      "padding": {
        "description": "Padding of the offer. (eg. 10px)",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentOfferStylingConfiguration": {
    "properties": {
      "body": {
        "$ref": "#/definitions/TextStyleProperties",
        "description": "Properties for customizing the appearance of the body text."
      },
      "closeButton": {
        "$ref": "#/definitions/CloseButtonStyleProperties",
        "description": "Properties for customizing the appearance of the close button."
      },
      "ctaButton": {
        "$ref": "#/definitions/CtaButtonStyleProperties",
        "description": "Properties for customizing the appearance of the CTA button."
      },
      "headline": {
        "$ref": "#/definitions/TextStyleProperties",
        "description": "Properties for customizing the appearance of the headline text."
      },
      "offer": {
        "$ref": "#/definitions/ContentOfferStyleProperties",
        "description": "Properties for customizing the appearance of the content offer."
      },
      "position": {
        "$ref": "#/definitions/ContentPositionProperties",
        "description": "Properties for customizing the positioning of the content offer."
      },
      "title": {
        "$ref": "#/definitions/TextStyleProperties",
        "description": "Properties for customizing the appearance of the title text."
      }
    },
    "type": "object"
  },
  "ContentPositionProperties": {
    "properties": {
      "bottom": {
        "description": "Bottom positioning offset.",
        "type": "string"
      },
      "left": {
        "description": "Left positioning offset.",
        "type": "string"
      },
      "right": {
        "description": "Right positioning offset.",
        "type": "string"
      },
      "top": {
        "description": "Top positioning offset.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ContentPostback": {
    "description": "Postback response object representing the click of a rich media button (Deprecated).",
    "properties": {
      "id": {
        "description": "An ID assigned to the button response.",
        "type": "string"
      },
      "payload": {
        "description": "The response payload associated with the clicked button.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      }
    },
    "required": [
      "payload"
    ],
    "type": "object"
  },
  "ContentQuickReply": {
    "description": "Quick reply object.",
    "properties": {
      "action": {
        "description": "Specifies the type of action that is triggered upon clicking the quick reply.",
        "enum": [
          "Message"
        ],
        "type": "string"
      },
      "id": {
        "description": "A unique ID assigned to the quick reply (Deprecated).",
        "type": "string"
      },
      "image": {
        "description": "URL of an image associated with the quick reply.",
        "type": "string"
      },
      "payload": {
        "description": "Content of the payload included in the quick reply response. Could be an ID identifying the quick reply response.",
        "type": "string"
      },
      "text": {
        "description": "Text to show inside the quick reply. This is also used as the response text after clicking on the quick reply.",
        "type": "string"
      }
    },
    "required": [
      "payload",
      "text"
    ],
    "type": "object"
  },
  "ContentQuickReplyV2": {
    "description": "Quick reply object V2.",
    "properties": {
      "actions": {
        "description": "An array of quick reply objects.",
        "items": {
          "$ref": "#/definitions/ContentQuickReply"
        },
        "type": "array"
      },
      "title": {
        "description": "Text to show as the title of the quick reply.",
        "type": "string"
      }
    },
    "required": [
      "actions",
      "title"
    ],
    "type": "object"
  },
  "ContentReaction": {
    "description": "User reaction to public message.",
    "properties": {
      "count": {
        "description": "Number of users that reacted this way to the message.",
        "format": "int32",
        "type": "integer"
      },
      "reactionType": {
        "description": "Type of reaction.",
        "enum": [
          "Like",
          "Love",
          "Wow",
          "Haha",
          "Sad",
          "Angry",
          "Thankful",
          "Pride",
          "Care",
          "Share",
          "Comment",
          "View"
        ],
        "type": "string"
      }
    },
    "required": [
      "count",
      "reactionType"
    ],
    "type": "object"
  },
  "ContentSetting": {
    "properties": {
      "story": {
        "$ref": "#/definitions/StorySetting",
        "description": "Settings relating to facebook and instagram stories feature"
      }
    },
    "type": "object"
  },
  "ContentStory": {
    "description": "An ephemeral story.",
    "properties": {
      "replyToId": {
        "description": "ID of the ephemeral story being replied to.",
        "type": "string"
      },
      "type": {
        "description": "Type of ephemeral story attachment.",
        "enum": [
          "Mention",
          "Reply"
        ],
        "type": "string"
      },
      "url": {
        "description": "URL to the ephemeral story.",
        "type": "string"
      }
    },
    "required": [
      "type",
      "url"
    ],
    "type": "object"
  },
  "ContentText": {
    "description": "Message content element containing text only.",
    "properties": {
      "body": {
        "description": "Text to be shown for this content element.",
        "type": "string"
      },
      "type": {
        "description": "Type of text content.",
        "enum": [
          "Text"
        ],
        "type": "string"
      }
    },
    "required": [
      "body"
    ],
    "type": "object"
  },
  "Context": {
    "properties": {
      "patterns": {
        "description": "A list of one or more patterns to match.",
        "items": {
          "$ref": "#/definitions/ContextPattern"
        },
        "type": "array"
      }
    },
    "required": [
      "patterns"
    ],
    "type": "object"
  },
  "ContextEntity": {
    "properties": {
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ContextIntent": {
    "properties": {
      "name": {
        "description": "The name of the intent.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ContextPattern": {
    "properties": {
      "criteria": {
        "description": "A list of one or more criteria to satisfy.",
        "items": {
          "$ref": "#/definitions/EntityTypeCriteria"
        },
        "type": "array"
      }
    },
    "required": [
      "criteria"
    ],
    "type": "object"
  },
  "Conversation": {
    "properties": {
      "address": {
        "description": "The address of the conversation as seen from an external participant. For phone calls this will be the DNIS for inbound calls and the ANI for outbound calls. For other media types this will be the address of the destination participant for inbound and the address of the initiating participant for outbound.",
        "type": "string"
      },
      "conversationIds": {
        "description": "A list of conversations to merge into this conversation to create a conference. This field is null except when being used to create a conference.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "divisions": {
        "description": "Identifiers of divisions associated with this conversation",
        "items": {
          "$ref": "#/definitions/ConversationDivisionMembership"
        },
        "type": "array"
      },
      "endTime": {
        "description": "The time when the conversation ended. This will be the time when the last participant left the conversation, or null when the conversation is still active. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalTag": {
        "description": "The external tag associated with the conversation.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxParticipants": {
        "description": "If this is a conference conversation, then this field indicates the maximum number of participants allowed to participant in the conference.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "participants": {
        "description": "The list of all participants in the conversation.",
        "items": {
          "$ref": "#/definitions/Participant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "recordingState": {
        "description": "On update, 'paused' initiates a secure pause, 'active' resumes any paused recordings; otherwise indicates state of conversation recording.",
        "enum": [
          "ACTIVE",
          "PAUSED",
          "NONE"
        ],
        "type": "string"
      },
      "securePause": {
        "description": "True when the recording of this conversation is in secure pause status.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startTime": {
        "description": "The time when the conversation started. This will be the time when the first participant joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The conversation's state",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "required": [
      "participants",
      "startTime"
    ],
    "type": "object"
  },
  "ConversationActivityData": {
    "properties": {
      "data": {
        "description": "Data for metrics",
        "items": {
          "$ref": "#/definitions/ConversationActivityMetricValue"
        },
        "type": "array"
      },
      "entities": {
        "description": "Details for active entities",
        "items": {
          "$ref": "#/definitions/ConversationActivityEntityData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from grouping dimension to value",
        "type": "object"
      },
      "truncated": {
        "description": "Flag for a truncated list of entities. If truncated, the first half of the list of entities will contain the oldest entities and the second half the newest entities.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ConversationActivityEntityData": {
    "properties": {
      "activeRouting": {
        "description": "Active routing method",
        "enum": [
          "Bullseye",
          "Conditional",
          "Direct",
          "Last",
          "Manual",
          "Predictive",
          "Preferred",
          "Standard",
          "Vip"
        ],
        "type": "string"
      },
      "activityDate": {
        "description": "The time at which the activity was observed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "addressFrom": {
        "description": "The address that initiated an action",
        "type": "string"
      },
      "addressTo": {
        "description": "The address receiving an action",
        "type": "string"
      },
      "ani": {
        "description": "Automatic Number Identification (caller's number)",
        "type": "string"
      },
      "conversationId": {
        "description": "Unique identifier for the conversation",
        "type": "string"
      },
      "convertedFrom": {
        "description": "Session media type that was converted from in case of a media type conversion",
        "type": "string"
      },
      "convertedTo": {
        "description": "Session media type that was converted to in case of a media type conversion",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the communication",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "dnis": {
        "description": "Dialed number identification service (number dialed by the calling party)",
        "type": "string"
      },
      "mediaType": {
        "description": "The session media type",
        "enum": [
          "callback",
          "chat",
          "cobrowse",
          "email",
          "message",
          "screenshare",
          "unknown",
          "video",
          "voice"
        ],
        "type": "string"
      },
      "metric": {
        "description": "Activity metric",
        "enum": [
          "oAlerting",
          "oInteracting",
          "oWaiting"
        ],
        "type": "string"
      },
      "participantName": {
        "description": "A human readable name identifying the participant",
        "type": "string"
      },
      "queueId": {
        "description": "Queue identifier",
        "type": "string"
      },
      "requestedLanguageId": {
        "description": "Unique identifier for the language requested for an interaction",
        "type": "string"
      },
      "requestedRoutingSkillIds": {
        "description": "Unique identifier(s) for skill(s) requested for an interaction",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requestedRoutings": {
        "description": "Routing type(s) for requested/attempted routing methods.",
        "items": {
          "enum": [
            "Bullseye",
            "Conditional",
            "Direct",
            "Last",
            "Manual",
            "Predictive",
            "Preferred",
            "Standard",
            "Vip"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "routingPriority": {
        "description": "Routing priority for the current interaction",
        "format": "int64",
        "type": "integer"
      },
      "scoredAgents": {
        "description": "Scored agents",
        "items": {
          "$ref": "#/definitions/ConversationActivityScoredAgent"
        },
        "type": "array"
      },
      "sessionId": {
        "description": "The unique identifier of this session",
        "type": "string"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "usedRouting": {
        "description": "Complete routing method",
        "enum": [
          "Bullseye",
          "Conditional",
          "Direct",
          "Last",
          "Manual",
          "Predictive",
          "Preferred",
          "Standard",
          "Vip"
        ],
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "required": [
      "activityDate"
    ],
    "type": "object"
  },
  "ConversationActivityMetricValue": {
    "properties": {
      "count": {
        "description": "metric count",
        "format": "int32",
        "type": "integer"
      },
      "metric": {
        "description": "metric",
        "enum": [
          "oAlerting",
          "oInteracting",
          "oWaiting"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationActivityQuery": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/ConversationActivityQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "groupBy": {
        "description": "Dimension(s) to group by",
        "items": {
          "enum": [
            "activeRouting",
            "addressFrom",
            "addressTo",
            "agentScore",
            "ani",
            "conversationId",
            "convertedFrom",
            "convertedTo",
            "direction",
            "dnis",
            "mediaType",
            "participantName",
            "queueId",
            "requestedLanguageId",
            "requestedRouting",
            "requestedRoutingSkillId",
            "routingPriority",
            "scoredAgentId",
            "sessionId",
            "teamId",
            "usedRouting",
            "userId"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metrics": {
        "description": "List of requested metrics",
        "items": {
          "$ref": "#/definitions/ConversationActivityQueryMetric"
        },
        "type": "array"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      }
    },
    "required": [
      "groupBy",
      "metrics"
    ],
    "type": "object"
  },
  "ConversationActivityQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ConversationActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "ConversationActivityQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/ConversationActivityQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ConversationActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationActivityQueryMetric": {
    "properties": {
      "details": {
        "description": "Flag for including observation details for this metric in the response",
        "type": "boolean"
      },
      "metric": {
        "description": "The requested metric",
        "enum": [
          "oAlerting",
          "oInteracting",
          "oWaiting"
        ],
        "type": "string"
      }
    },
    "required": [
      "metric"
    ],
    "type": "object"
  },
  "ConversationActivityQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "activeRouting",
          "addressFrom",
          "addressTo",
          "agentScore",
          "ani",
          "conversationId",
          "convertedFrom",
          "convertedTo",
          "direction",
          "dnis",
          "mediaType",
          "participantName",
          "queueId",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "routingPriority",
          "scoredAgentId",
          "sessionId",
          "teamId",
          "usedRouting",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "ConversationActivityResponse": {
    "properties": {
      "entityIdDimension": {
        "description": "Dimension that is used as an entityId",
        "enum": [
          "activeRouting",
          "addressFrom",
          "addressTo",
          "agentScore",
          "ani",
          "conversationId",
          "convertedFrom",
          "convertedTo",
          "direction",
          "dnis",
          "mediaType",
          "participantName",
          "queueId",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "routingPriority",
          "scoredAgentId",
          "sessionId",
          "teamId",
          "usedRouting",
          "userId"
        ],
        "type": "string"
      },
      "results": {
        "description": "Query results",
        "items": {
          "$ref": "#/definitions/ConversationActivityData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConversationActivityScoredAgent": {
    "properties": {
      "agentScore": {
        "description": "Assigned agent score for this conversation (0 - 100, higher being better)",
        "format": "int32",
        "type": "integer"
      },
      "scoredAgentId": {
        "description": "Unique identifier for the agent that was scored for this conversation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "ConversationAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ConversationAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "ConversationAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/ConversationAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ConversationAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "activeRouting",
          "activeSkillId",
          "addressFrom",
          "addressTo",
          "agentAssistantId",
          "agentBullseyeRing",
          "agentOwned",
          "agentRank",
          "agentScore",
          "ani",
          "assignerId",
          "authenticated",
          "canonicalExternalContactId",
          "conversationId",
          "conversationInitiator",
          "convertedFrom",
          "convertedTo",
          "customerParticipation",
          "deliveryStatus",
          "destinationAddress",
          "direction",
          "disconnectType",
          "divisionId",
          "dnis",
          "edgeId",
          "eligibleAgentCount",
          "errorCode",
          "extendedDeliveryStatus",
          "externalContactId",
          "externalMediaCount",
          "externalOrganizationId",
          "externalTag",
          "firstQueue",
          "flaggedReason",
          "flowInType",
          "flowOutType",
          "groupId",
          "interactionType",
          "journeyActionId",
          "journeyActionMapId",
          "journeyActionMapVersion",
          "journeyCustomerId",
          "journeyCustomerIdType",
          "journeyCustomerSessionId",
          "journeyCustomerSessionIdType",
          "knowledgeBaseId",
          "mediaCount",
          "mediaType",
          "messageType",
          "originatingDirection",
          "originatingSocialMediaPublic",
          "outboundCampaignId",
          "outboundContactId",
          "outboundContactListId",
          "participantName",
          "peerId",
          "proposedAgentId",
          "provider",
          "purpose",
          "queueId",
          "remote",
          "removedSkillId",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "roomId",
          "routingPriority",
          "routingRing",
          "routingRule",
          "routingRuleType",
          "scoredAgentId",
          "selectedAgentId",
          "selectedAgentRank",
          "selfServed",
          "sessionDnis",
          "sessionId",
          "stationId",
          "teamId",
          "usedRouting",
          "userId",
          "videoPresent",
          "waitingInteractionCount",
          "wrapUpCode"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "ConversationAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/ConversationAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConversationAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/ConversationAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "activeRouting",
            "activeSkillId",
            "addressFrom",
            "addressTo",
            "agentAssistantId",
            "agentBullseyeRing",
            "agentOwned",
            "agentRank",
            "agentScore",
            "ani",
            "assignerId",
            "authenticated",
            "conversationId",
            "conversationInitiator",
            "convertedFrom",
            "convertedTo",
            "customerParticipation",
            "deliveryStatus",
            "destinationAddress",
            "direction",
            "disconnectType",
            "divisionId",
            "dnis",
            "edgeId",
            "eligibleAgentCount",
            "errorCode",
            "extendedDeliveryStatus",
            "externalContactId",
            "externalMediaCount",
            "externalOrganizationId",
            "externalTag",
            "firstQueue",
            "flaggedReason",
            "flowInType",
            "flowOutType",
            "groupId",
            "interactionType",
            "journeyActionId",
            "journeyActionMapId",
            "journeyActionMapVersion",
            "journeyCustomerId",
            "journeyCustomerIdType",
            "journeyCustomerSessionId",
            "journeyCustomerSessionIdType",
            "knowledgeBaseId",
            "mediaCount",
            "mediaType",
            "messageType",
            "originatingDirection",
            "originatingSocialMediaPublic",
            "outboundCampaignId",
            "outboundContactId",
            "outboundContactListId",
            "participantName",
            "peerId",
            "proposedAgentId",
            "provider",
            "purpose",
            "queueId",
            "remote",
            "removedSkillId",
            "requestedLanguageId",
            "requestedRouting",
            "requestedRoutingSkillId",
            "roomId",
            "routingPriority",
            "routingRing",
            "routingRule",
            "routingRuleType",
            "scoredAgentId",
            "selectedAgentId",
            "selectedAgentRank",
            "selfServed",
            "sessionDnis",
            "sessionId",
            "stationId",
            "teamId",
            "usedRouting",
            "userId",
            "videoPresent",
            "waitingInteractionCount",
            "wrapUpCode"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nBlindTransferred",
            "nBotInteractions",
            "nCobrowseSessions",
            "nConnected",
            "nConsult",
            "nConsultTransferred",
            "nError",
            "nOffered",
            "nOutbound",
            "nOutboundAbandoned",
            "nOutboundAttempted",
            "nOutboundConnected",
            "nOverSla",
            "nStateTransitionError",
            "nTransferred",
            "oExternalMediaCount",
            "oMediaCount",
            "oMessageCount",
            "oMessageSegmentCount",
            "oMessageTurn",
            "oServiceLevel",
            "oServiceTarget",
            "tAbandon",
            "tAcd",
            "tActiveCallback",
            "tActiveCallbackComplete",
            "tAcw",
            "tAgentResponseTime",
            "tAlert",
            "tAnswered",
            "tBarging",
            "tCoaching",
            "tCoachingComplete",
            "tConnected",
            "tContacting",
            "tDialing",
            "tFirstConnect",
            "tFirstDial",
            "tFlowOut",
            "tHandle",
            "tHeld",
            "tHeldComplete",
            "tIvr",
            "tMonitoring",
            "tMonitoringComplete",
            "tNotResponding",
            "tPark",
            "tParkComplete",
            "tShortAbandon",
            "tTalk",
            "tTalkComplete",
            "tUserResponseTime",
            "tVoicemail",
            "tWait"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/ConversationAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "ConversationAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nBlindTransferred",
          "nBotInteractions",
          "nCobrowseSessions",
          "nConnected",
          "nConsult",
          "nConsultTransferred",
          "nError",
          "nOffered",
          "nOutbound",
          "nOutboundAbandoned",
          "nOutboundAttempted",
          "nOutboundConnected",
          "nOverSla",
          "nStateTransitionError",
          "nTransferred",
          "oExternalMediaCount",
          "oMediaCount",
          "oMessageCount",
          "oMessageSegmentCount",
          "oMessageTurn",
          "oServiceLevel",
          "oServiceTarget",
          "tAbandon",
          "tAcd",
          "tActiveCallback",
          "tActiveCallbackComplete",
          "tAcw",
          "tAgentResponseTime",
          "tAlert",
          "tAnswered",
          "tBarging",
          "tCoaching",
          "tCoachingComplete",
          "tConnected",
          "tContacting",
          "tDialing",
          "tFirstConnect",
          "tFirstDial",
          "tFlowOut",
          "tHandle",
          "tHeld",
          "tHeldComplete",
          "tIvr",
          "tMonitoring",
          "tMonitoringComplete",
          "tNotResponding",
          "tPark",
          "tParkComplete",
          "tShortAbandon",
          "tTalk",
          "tTalkComplete",
          "tUserResponseTime",
          "tVoicemail",
          "tWait"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "ConversationAppSettings": {
    "description": "Conversation settings that handles chats within the messenger",
    "properties": {
      "autoStart": {
        "$ref": "#/definitions/AutoStart",
        "description": "The auto start for the messenger conversation"
      },
      "conversationClear": {
        "$ref": "#/definitions/ConversationClearSettings",
        "description": "The conversation clear settings for the messenger app"
      },
      "conversationDisconnect": {
        "$ref": "#/definitions/ConversationDisconnectSettings",
        "description": "The conversation disconnect settings for the messenger app"
      },
      "enabled": {
        "description": "The toggle to enable or disable conversations",
        "type": "boolean"
      },
      "humanize": {
        "$ref": "#/definitions/Humanize",
        "description": "The humanize conversations settings for the messenger app"
      },
      "markdown": {
        "$ref": "#/definitions/Markdown",
        "description": "The markdown for the messenger app"
      },
      "notifications": {
        "$ref": "#/definitions/NotificationsSettings",
        "description": "The notification settings for messenger apps"
      },
      "showAgentTypingIndicator": {
        "description": "The toggle to enable or disable typing indicator for messenger",
        "type": "boolean"
      },
      "showUserTypingIndicator": {
        "description": "The toggle to enable or disable typing indicator for messenger",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ConversationAssociation": {
    "properties": {
      "communicationId": {
        "description": "Communication ID",
        "type": "string"
      },
      "conversationId": {
        "description": "Conversation ID",
        "type": "string"
      },
      "externalContactId": {
        "description": "An external contact ID.  If not supplied, implies the conversation should be disassociated with any external contact.",
        "type": "string"
      },
      "mediaType": {
        "description": "Media type",
        "enum": [
          "CALL",
          "CALLBACK",
          "CHAT",
          "COBROWSE",
          "EMAIL",
          "MESSAGE",
          "SOCIAL_EXPRESSION",
          "VIDEO",
          "SCREENSHARE"
        ],
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "mediaType"
    ],
    "type": "object"
  },
  "ConversationBasic": {
    "properties": {
      "divisions": {
        "description": "Identifiers of divisions associated with this conversation",
        "items": {
          "$ref": "#/definitions/ConversationDivisionMembership"
        },
        "type": "array"
      },
      "endTime": {
        "description": "The time when the conversation ended. This will be the time when the last participant left the conversation, or null when the conversation is still active. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalTag": {
        "description": "The external tag associated with the conversation.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "participants": {
        "items": {
          "$ref": "#/definitions/ParticipantBasic"
        },
        "readOnly": true,
        "type": "array"
      },
      "securePause": {
        "description": "True when the recording of this conversation is in secure pause status.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startTime": {
        "description": "The time when the conversation started. This will be the time when the first participant joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "required": [
      "startTime"
    ],
    "type": "object"
  },
  "ConversationCategoriesEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ConversationCategory"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConversationCategory": {
    "properties": {
      "criteria": {
        "$ref": "#/definitions/Operand",
        "description": "A collection of conditions joined together by logical operation to provide more refined filtering of conversations"
      },
      "description": {
        "description": "The description of the category",
        "type": "string"
      },
      "id": {
        "description": "The id of the category",
        "type": "string"
      },
      "interactionType": {
        "description": "The type of interaction the category will apply to",
        "enum": [
          "Voice",
          "Digital",
          "All"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the category",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationChannel": {
    "properties": {
      "messageType": {
        "description": "Message type for messaging conversations.",
        "enum": [
          "Unknown",
          "Sms",
          "Twitter",
          "Facebook",
          "Line",
          "WhatsApp",
          "WebMessaging",
          "Open",
          "Instagram"
        ],
        "type": "string"
      },
      "platform": {
        "description": "The source provider for the conversation (e.g. Edge, PureCloud Messaging, PureCloud Email).",
        "type": "string"
      },
      "type": {
        "description": "The type or category of this channel.",
        "enum": [
          "Unknown",
          "Call",
          "Callback",
          "Email",
          "GenericObject",
          "Messaging",
          "Social",
          "Webchat",
          "Voice",
          "Chat",
          "Cobrowse",
          "Video",
          "Screenshare",
          "Message"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationChannelMetadata": {
    "description": "Information about the channel.",
    "properties": {},
    "type": "object"
  },
  "ConversationChat": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "avatarImageUrl": {
        "description": "If available, the URI to the avatar image of this communication.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the chat",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "error",
          "peer",
          "other",
          "uncallable",
          "timeout"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context)."
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the email.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "recordingId": {
        "description": "A globally unique identifier for the recording associated with this chat.",
        "type": "string"
      },
      "roomId": {
        "description": "The room id for the chat.",
        "type": "string"
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's chat, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "ConversationClearSettings": {
    "properties": {
      "enabled": {
        "description": "whether or not conversation clear setting is enabled",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ConversationContentAttachment": {
    "description": "Attachment object.",
    "properties": {
      "contentSizeBytes": {
        "description": "Size in bytes of the attachment content.",
        "format": "int64",
        "type": "integer"
      },
      "filename": {
        "description": "Suggested file name for attachment.",
        "type": "string"
      },
      "id": {
        "description": "Provider specific ID for attachment. For example, a LINE sticker ID.",
        "type": "string"
      },
      "mediaType": {
        "description": "The type of attachment this instance represents.",
        "enum": [
          "Image",
          "Video",
          "Audio",
          "File",
          "Link"
        ],
        "type": "string"
      },
      "mime": {
        "description": "Attachment mime type (https://www.iana.org/assignments/media-types/media-types.xhtml).",
        "type": "string"
      },
      "sha256": {
        "description": "Secure hash of the attachment content.",
        "type": "string"
      },
      "text": {
        "description": "Text associated with attachment such as an image caption.",
        "type": "string"
      },
      "url": {
        "description": "URL of the attachment.",
        "type": "string"
      }
    },
    "required": [
      "mediaType"
    ],
    "type": "object"
  },
  "ConversationContentButtonResponse": {
    "description": "Button response object representing the click of a structured message button, such as a quick reply.",
    "properties": {
      "payload": {
        "description": "The response payload associated with the clicked button.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      },
      "type": {
        "description": "Describes the button that resulted in the Button Response.",
        "enum": [
          "Button",
          "QuickReply"
        ],
        "type": "string"
      }
    },
    "required": [
      "payload",
      "text"
    ],
    "type": "object"
  },
  "ConversationContentCard": {
    "description": "Card content object.",
    "properties": {
      "actions": {
        "description": "An array of action objects.",
        "items": {
          "$ref": "#/definitions/ConversationContentCardAction"
        },
        "type": "array"
      },
      "defaultAction": {
        "$ref": "#/definitions/ConversationContentCardAction",
        "description": "The default button action."
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "image": {
        "description": "URL of an image.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      },
      "video": {
        "description": "URL of a video.",
        "type": "string"
      }
    },
    "required": [
      "actions",
      "title"
    ],
    "type": "object"
  },
  "ConversationContentCardAction": {
    "description": "A card action that a user can take.",
    "properties": {
      "payload": {
        "description": "Text to be returned as the payload from a ButtonResponse when a button is clicked. The payload and text are a combination which will have to be unique across each card and carousel in order to determine which button was clicked in that card or carousel.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      },
      "type": {
        "description": "Describes the type of action.",
        "enum": [
          "Link",
          "Postback",
          "Unknown"
        ],
        "type": "string"
      },
      "url": {
        "description": "A URL of a web page to direct the user to.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationContentCarousel": {
    "description": "Carousel content object.",
    "properties": {
      "cards": {
        "description": "An array of card objects.",
        "items": {
          "$ref": "#/definitions/ConversationContentCard"
        },
        "type": "array"
      }
    },
    "required": [
      "cards"
    ],
    "type": "object"
  },
  "ConversationContentLocation": {
    "description": "Location object.",
    "properties": {
      "address": {
        "description": "Location postal address.",
        "type": "string"
      },
      "latitude": {
        "description": "Latitude of the location.",
        "format": "double",
        "type": "number"
      },
      "longitude": {
        "description": "Longitude of the location.",
        "format": "double",
        "type": "number"
      },
      "text": {
        "description": "Location name.",
        "type": "string"
      },
      "url": {
        "description": "URL of the Location.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationContentNotificationTemplate": {
    "description": "Template notification object.",
    "properties": {
      "body": {
        "$ref": "#/definitions/ConversationNotificationTemplateBody",
        "description": "The template body."
      },
      "footer": {
        "$ref": "#/definitions/ConversationNotificationTemplateFooter",
        "description": "The template footer."
      },
      "header": {
        "$ref": "#/definitions/ConversationNotificationTemplateHeader",
        "description": "The template header."
      },
      "id": {
        "description": "The identifier of the message template in 'your-namespace@your-template-id/name' format. For External vendor (e.g WhatsApp), 'your-namespace@your-template-name'. For GenesysCloud canned response message template use 'cannedresponse' as your-namespace and use response ID as your-template-id (e.g. response ID=1234 then 'cannedresponse@1234')",
        "type": "string"
      },
      "language": {
        "description": "Template language.",
        "type": "string"
      }
    },
    "required": [
      "body"
    ],
    "type": "object"
  },
  "ConversationContentQuickReply": {
    "description": "Quick reply object.",
    "properties": {
      "action": {
        "description": "Specifies the type of action that is triggered upon clicking the quick reply.",
        "enum": [
          "Message"
        ],
        "type": "string"
      },
      "image": {
        "description": "URL of an image associated with the quick reply.",
        "type": "string"
      },
      "payload": {
        "description": "Content of the payload included in the quick reply response. Could be an ID identifying the quick reply response.",
        "type": "string"
      },
      "text": {
        "description": "Text to show inside the quick reply. This is also used as the response text after clicking on the quick reply.",
        "type": "string"
      }
    },
    "required": [
      "payload",
      "text"
    ],
    "type": "object"
  },
  "ConversationContentQuickReplyV2": {
    "description": "Quick reply object V2.",
    "properties": {
      "actions": {
        "description": "An array of quick reply objects.",
        "items": {
          "$ref": "#/definitions/ConversationContentQuickReply"
        },
        "type": "array"
      },
      "title": {
        "description": "Text to show as the title of the quick reply.",
        "type": "string"
      }
    },
    "required": [
      "actions",
      "title"
    ],
    "type": "object"
  },
  "ConversationContentReaction": {
    "description": "User reaction to public message.",
    "properties": {
      "count": {
        "description": "Number of users that reacted this way to the message.",
        "format": "int32",
        "type": "integer"
      },
      "reactionType": {
        "description": "Type of reaction.",
        "enum": [
          "None",
          "Like",
          "Love",
          "Wow",
          "Haha",
          "Sad",
          "Angry",
          "Thankful",
          "Pride",
          "Care"
        ],
        "type": "string"
      }
    },
    "required": [
      "count"
    ],
    "type": "object"
  },
  "ConversationContentStory": {
    "description": "An ephemeral story.",
    "properties": {
      "replyToId": {
        "description": "ID of the ephemeral story being replied to.",
        "type": "string"
      },
      "type": {
        "description": "Type of ephemeral story attachment.",
        "enum": [
          "Mention",
          "Reply"
        ],
        "type": "string"
      },
      "url": {
        "description": "URL to the ephemeral story.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationContentText": {
    "description": "Message content element containing text only.",
    "properties": {
      "body": {
        "description": "Text to be shown for this content element.",
        "type": "string"
      },
      "type": {
        "description": "Type of text content (Deprecated).",
        "enum": [
          "Text"
        ],
        "type": "string"
      }
    },
    "required": [
      "body"
    ],
    "type": "object"
  },
  "ConversationDeletionProtectionQuery": {
    "properties": {
      "conversationIds": {
        "description": "This is a list of ConversationIds. The list cannot exceed 100 conversationids.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "conversationIds"
    ],
    "type": "object"
  },
  "ConversationDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ConversationDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "ConversationDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/ConversationDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ConversationDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "conversationEnd",
          "conversationId",
          "conversationInitiator",
          "conversationStart",
          "customerParticipation",
          "divisionId",
          "externalTag",
          "mediaStatsMinConversationMos",
          "originatingDirection"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "metric": {
        "description": "Left hand side for metric predicates",
        "enum": [
          "nBlindTransferred",
          "nBotInteractions",
          "nCobrowseSessions",
          "nConnected",
          "nConsult",
          "nConsultTransferred",
          "nError",
          "nFlow",
          "nFlowMilestone",
          "nFlowOutcome",
          "nFlowOutcomeFailed",
          "nOffered",
          "nOutbound",
          "nOutboundAbandoned",
          "nOutboundAttempted",
          "nOutboundConnected",
          "nOverSla",
          "nStateTransitionError",
          "nTransferred",
          "oExternalMediaCount",
          "oFlowMilestone",
          "oMediaCount",
          "oMessageCount",
          "oMessageSegmentCount",
          "oMessageTurn",
          "tAbandon",
          "tAcd",
          "tActiveCallback",
          "tActiveCallbackComplete",
          "tAcw",
          "tAgentResponseTime",
          "tAlert",
          "tAnswered",
          "tBarging",
          "tCoaching",
          "tCoachingComplete",
          "tConnected",
          "tContacting",
          "tConversationDuration",
          "tDialing",
          "tFirstConnect",
          "tFirstDial",
          "tFlow",
          "tFlowDisconnect",
          "tFlowExit",
          "tFlowOut",
          "tFlowOutcome",
          "tHandle",
          "tHeld",
          "tHeldComplete",
          "tIvr",
          "tMonitoring",
          "tMonitoringComplete",
          "tNotResponding",
          "tPark",
          "tParkComplete",
          "tShortAbandon",
          "tTalk",
          "tTalkComplete",
          "tUserResponseTime",
          "tVoicemail"
        ],
        "type": "string"
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension or metric predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension or metric predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "ConversationDisconnectSettings": {
    "properties": {
      "enabled": {
        "description": "whether or not conversation disconnect setting is enabled",
        "type": "boolean"
      },
      "type": {
        "description": "Conversation disconnect type",
        "enum": [
          "Send",
          "ReadOnly"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationDivisionMembership": {
    "properties": {
      "division": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A division the conversation belongs to."
      },
      "entities": {
        "description": "The entities on the conversation within the division. These are the users, queues, work flows, etc. that can be on conversations and and be assigned to different divisions.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConversationEncryptionConfiguration": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "keyConfigurationType": {
        "description": "Type should be 'KmsSymmetric' when create or update Key configurations, 'None' to disable configuration.",
        "enum": [
          "KmsSymmetric",
          "LocalKeyManager",
          "Native",
          "None"
        ],
        "type": "string"
      },
      "lastError": {
        "$ref": "#/definitions/ErrorBody",
        "description": "The error message related to the configuration"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "keyConfigurationType is always KmsSymmetric, and should be the arn to the key alias for the master key",
        "type": "string"
      }
    },
    "required": [
      "keyConfigurationType",
      "url"
    ],
    "type": "object"
  },
  "ConversationEncryptionConfigurationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ConversationEncryptionConfiguration"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConversationEnrichment": {
    "description": "Metadata enrichments provided by the platform.",
    "properties": {
      "language": {
        "$ref": "#/definitions/ConversationEnrichmentLanguage",
        "description": "Detected language of this message."
      },
      "sentimentV2": {
        "$ref": "#/definitions/ConversationEnrichmentSentimentV2",
        "description": "Detected sentiment of this message."
      }
    },
    "type": "object"
  },
  "ConversationEnrichmentLanguage": {
    "description": "Detected language of this message.",
    "properties": {
      "language": {
        "description": "The ISO 639-3 detected language code of this message.",
        "type": "string"
      }
    },
    "required": [
      "language"
    ],
    "type": "object"
  },
  "ConversationEnrichmentSentimentV2": {
    "description": "Sentiment analysis of this message.",
    "properties": {
      "tag": {
        "description": "Detected Sentiment tag",
        "enum": [
          "Positive",
          "Negative",
          "Neutral"
        ],
        "type": "string"
      }
    },
    "required": [
      "tag"
    ],
    "type": "object"
  },
  "ConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Conversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConversationEventCoBrowse": {
    "description": "A CoBrowse event.",
    "properties": {
      "sessionId": {
        "description": "The CoBrowse session ID.",
        "type": "string"
      },
      "sessionJoinToken": {
        "description": "The CoBrowse session join token.",
        "type": "string"
      },
      "type": {
        "description": "Describes the type of CoBrowse event.",
        "enum": [
          "Offering",
          "OfferingExpired",
          "OfferingAccepted",
          "OfferingRejected"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationEventPresence": {
    "description": "A Presence event.",
    "properties": {
      "type": {
        "description": "Describes the type of Presence event.",
        "enum": [
          "Join",
          "Disconnect",
          "Clear",
          "SignIn"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationEventTyping": {
    "description": "A Typing event.",
    "properties": {
      "duration": {
        "description": "The duration of the Typing event in milliseconds.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "type": {
        "description": "Describes the type of Typing event.",
        "enum": [
          "On"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationEventVideo": {
    "description": "A Video event.",
    "properties": {
      "jwt": {
        "description": "The Video offering JWT token.",
        "type": "string"
      },
      "offeringId": {
        "description": "The Video offering ID.",
        "type": "string"
      },
      "type": {
        "description": "Describes the type of Video event.",
        "enum": [
          "Offering",
          "OfferingExpired",
          "OfferingAccepted",
          "OfferingRejected"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationMessageContent": {
    "description": "Message content element. If contentType = \"Attachment\" only one item is allowed.",
    "properties": {
      "attachment": {
        "$ref": "#/definitions/ConversationContentAttachment",
        "description": "Attachment content."
      },
      "buttonResponse": {
        "$ref": "#/definitions/ConversationContentButtonResponse",
        "description": "Button response content."
      },
      "card": {
        "$ref": "#/definitions/ConversationContentCard",
        "description": "Card content"
      },
      "carousel": {
        "$ref": "#/definitions/ConversationContentCarousel",
        "description": "Carousel content"
      },
      "contentType": {
        "description": "Type of this content element.",
        "enum": [
          "Reactions",
          "Attachment",
          "Location",
          "QuickReply",
          "Notification",
          "ButtonResponse",
          "Story",
          "Mention",
          "Card",
          "Carousel",
          "Text",
          "QuickReplyV2",
          "Unknown"
        ],
        "type": "string"
      },
      "location": {
        "$ref": "#/definitions/ConversationContentLocation",
        "description": "Location content."
      },
      "quickReply": {
        "$ref": "#/definitions/ConversationContentQuickReply",
        "description": "Quick reply content."
      },
      "quickReplyV2": {
        "$ref": "#/definitions/ConversationContentQuickReplyV2",
        "description": "Quick reply V2 content."
      },
      "story": {
        "$ref": "#/definitions/ConversationContentStory",
        "description": "Ephemeral story content."
      },
      "template": {
        "$ref": "#/definitions/ConversationContentNotificationTemplate",
        "description": "Template notification content."
      },
      "text": {
        "$ref": "#/definitions/ConversationContentText",
        "description": "Text content."
      }
    },
    "required": [
      "contentType"
    ],
    "type": "object"
  },
  "ConversationMessageEvent": {
    "description": "Message event element.  Examples include: system messages, typing indicators, cobrowse offerings.",
    "properties": {
      "coBrowse": {
        "$ref": "#/definitions/ConversationEventCoBrowse",
        "description": "CoBrowse event."
      },
      "eventType": {
        "description": "Type of this event element",
        "enum": [
          "CoBrowse",
          "Typing",
          "Presence",
          "Video",
          "Unknown"
        ],
        "type": "string"
      },
      "presence": {
        "$ref": "#/definitions/ConversationEventPresence",
        "description": "Presence event."
      },
      "typing": {
        "$ref": "#/definitions/ConversationEventTyping",
        "description": "Typing event."
      },
      "video": {
        "$ref": "#/definitions/ConversationEventVideo",
        "description": "Video event."
      }
    },
    "required": [
      "eventType"
    ],
    "type": "object"
  },
  "ConversationMessageMetadata": {
    "description": "Metadata information about a message.",
    "properties": {
      "content": {
        "description": "List of message content",
        "items": {
          "$ref": "#/definitions/ConversationMessageMetadataContent"
        },
        "type": "array"
      },
      "events": {
        "description": "List of events metadata",
        "items": {
          "$ref": "#/definitions/ConversationMessageMetadataEvent"
        },
        "type": "array"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Text",
          "Structured",
          "Receipt",
          "Event",
          "Message",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationMessageMetadataContent": {
    "description": "Metadata information about a message content.",
    "properties": {
      "contentType": {
        "description": "Type of this content element.",
        "enum": [
          "Reactions",
          "Attachment",
          "Location",
          "QuickReply",
          "Notification",
          "ButtonResponse",
          "Story",
          "Mention",
          "Card",
          "Carousel",
          "Text",
          "QuickReplyV2",
          "Unknown"
        ],
        "type": "string"
      },
      "subType": {
        "description": "Content subtype",
        "enum": [
          "Image",
          "Video",
          "Audio",
          "File",
          "Link",
          "Mention",
          "Reply",
          "Button",
          "QuickReply",
          "Postback",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationMessageMetadataEvent": {
    "description": "Metadata information about a message event.",
    "properties": {
      "eventType": {
        "description": "Type of this event element",
        "enum": [
          "CoBrowse",
          "Typing",
          "Presence",
          "Video",
          "Unknown"
        ],
        "type": "string"
      },
      "subType": {
        "description": "Event subtype",
        "enum": [
          "On",
          "Join",
          "Offering",
          "OfferingExpired",
          "OfferingAccepted",
          "OfferingRejected",
          "Disconnect",
          "Clear",
          "SignIn",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationMessagingChannel": {
    "description": "Channel-specific information that describes the message and the message channel/provider.",
    "properties": {
      "dateDeleted": {
        "description": "Time the message was deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Time the message was edited. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "from": {
        "$ref": "#/definitions/ConversationMessagingFromRecipient",
        "description": "Information about the recipient the message is received from.",
        "readOnly": true
      },
      "id": {
        "description": "The integration ID.",
        "readOnly": true,
        "type": "string"
      },
      "messageId": {
        "description": "Unique provider ID of the message such as a Facebook message ID.",
        "readOnly": true,
        "type": "string"
      },
      "platform": {
        "description": "The provider type.",
        "enum": [
          "Twitter",
          "Facebook",
          "Instagram",
          "Line",
          "Whatsapp",
          "WebMessaging",
          "Open",
          "Sms"
        ],
        "readOnly": true,
        "type": "string"
      },
      "time": {
        "description": "Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "to": {
        "$ref": "#/definitions/ConversationMessagingToRecipient",
        "description": "Information about the recipient the message is sent to.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "ConversationMessagingFromRecipient": {
    "description": "Information about the recipient the message is received from.",
    "properties": {
      "additionalIds": {
        "description": "List of recipient additional identifiers",
        "items": {
          "$ref": "#/definitions/ConversationRecipientAdditionalIdentifier"
        },
        "readOnly": true,
        "type": "array"
      },
      "email": {
        "description": "E-mail address of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "firstName": {
        "description": "First name of the recipient.",
        "type": "string"
      },
      "id": {
        "description": "The recipient ID specific to the provider.",
        "type": "string"
      },
      "idType": {
        "description": "The recipient ID type. This is used to indicate the format used for the ID.",
        "enum": [
          "Email",
          "Phone",
          "Opaque"
        ],
        "readOnly": true,
        "type": "string"
      },
      "image": {
        "description": "URL of an image that represents the recipient.",
        "type": "string"
      },
      "lastName": {
        "description": "Last name of the recipient.",
        "type": "string"
      },
      "nickname": {
        "description": "Nickname or display name of the recipient.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ConversationMessagingToRecipient": {
    "description": "Information about the recipient the message is sent to.",
    "properties": {
      "additionalIds": {
        "description": "List of recipient additional identifiers",
        "items": {
          "$ref": "#/definitions/ConversationRecipientAdditionalIdentifier"
        },
        "readOnly": true,
        "type": "array"
      },
      "email": {
        "description": "E-mail address of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "firstName": {
        "description": "First name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The recipient ID specific to the provider.",
        "type": "string"
      },
      "idType": {
        "description": "The recipient ID type. This is used to indicate the format used for the ID.",
        "enum": [
          "Email",
          "Phone",
          "Opaque"
        ],
        "readOnly": true,
        "type": "string"
      },
      "image": {
        "description": "URL of an image that represents the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "lastName": {
        "description": "Last name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "nickname": {
        "description": "Nickname or display name of the recipient.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ConversationMetrics": {
    "properties": {
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The Conversation Reference"
      },
      "empathyScores": {
        "description": "The Empathy Scores",
        "items": {
          "$ref": "#/definitions/EmpathyScore"
        },
        "type": "array"
      },
      "participantMetrics": {
        "$ref": "#/definitions/ParticipantMetrics",
        "description": "The Participant Metrics"
      },
      "sentimentScore": {
        "description": "The Sentiment Score",
        "format": "double",
        "type": "number"
      },
      "sentimentTrend": {
        "description": "The Sentiment Trend",
        "format": "double",
        "type": "number"
      },
      "sentimentTrendClass": {
        "description": "The Sentiment Trend Class",
        "enum": [
          "NotCalculated",
          "Declining",
          "SlightlyDeclining",
          "NoChange",
          "SlightlyImproving",
          "Improving"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationNormalizedMessage": {
    "description": "General rich media message structure with normalized feature support across many messaging channels.",
    "properties": {
      "byoSmsIntegrationId": {
        "description": "The internal id representing the customer supplied sms integration message.",
        "type": "string"
      },
      "channel": {
        "$ref": "#/definitions/ConversationMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider.",
        "readOnly": true
      },
      "content": {
        "description": "List of content elements.",
        "items": {
          "$ref": "#/definitions/ConversationMessageContent"
        },
        "type": "array"
      },
      "direction": {
        "description": "The direction of the message.",
        "enum": [
          "Inbound",
          "Outbound"
        ],
        "readOnly": true,
        "type": "string"
      },
      "events": {
        "description": "List of event elements.",
        "items": {
          "$ref": "#/definitions/ConversationMessageEvent"
        },
        "type": "array"
      },
      "id": {
        "description": "Unique ID of the message. Message receipts will have the same ID as the message they reference.",
        "readOnly": true,
        "type": "string"
      },
      "isFinalReceipt": {
        "description": "Indicates if this is the last message receipt for this message, or if another message receipt can be expected.",
        "readOnly": true,
        "type": "boolean"
      },
      "metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this message.",
        "type": "object"
      },
      "originatingEntity": {
        "description": "Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.",
        "enum": [
          "Human",
          "Bot"
        ],
        "type": "string"
      },
      "reasons": {
        "description": "List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.",
        "items": {
          "$ref": "#/definitions/ConversationReason"
        },
        "readOnly": true,
        "type": "array"
      },
      "status": {
        "description": "Message receipt status, only used with type Receipt.",
        "enum": [
          "Sent",
          "Delivered",
          "Read",
          "Failed",
          "Published",
          "Removed"
        ],
        "readOnly": true,
        "type": "string"
      },
      "text": {
        "description": "Message text.",
        "type": "string"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Text",
          "Structured",
          "Receipt",
          "Event",
          "Message",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationNotificationTemplateBody": {
    "description": "Template body object.",
    "properties": {
      "parameters": {
        "description": "Template parameters for placeholders in template.",
        "items": {
          "$ref": "#/definitions/ConversationNotificationTemplateParameter"
        },
        "type": "array"
      },
      "text": {
        "description": "Body text. For WhatsApp, ignored.",
        "type": "string"
      }
    },
    "required": [
      "parameters"
    ],
    "type": "object"
  },
  "ConversationNotificationTemplateFooter": {
    "description": "Template footer object.",
    "properties": {
      "text": {
        "description": "Footer text. For WhatsApp, ignored.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationNotificationTemplateHeader": {
    "description": "Template header object.",
    "properties": {
      "media": {
        "$ref": "#/definitions/ConversationContentAttachment",
        "description": "Media template header image."
      },
      "parameters": {
        "description": "Template parameters for placeholders in template.",
        "items": {
          "$ref": "#/definitions/ConversationNotificationTemplateParameter"
        },
        "type": "array"
      },
      "text": {
        "description": "Header text. For WhatsApp, ignored.",
        "type": "string"
      },
      "type": {
        "description": "Template header type.",
        "enum": [
          "Text",
          "Media"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationNotificationTemplateParameter": {
    "description": "Template parameters for placeholders in template.",
    "properties": {
      "name": {
        "description": "Parameter name.",
        "type": "string"
      },
      "text": {
        "description": "Parameter text value.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "ConversationParticipantSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/ConversationParticipantSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "DATE_RANGE"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ConversationParticipantSearchRequest": {
    "properties": {
      "cursor": {
        "type": "string"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/ConversationParticipantSearchCriteria"
        },
        "type": "array"
      },
      "returnFields": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationProfile": {
    "properties": {
      "languageCode": {
        "description": "The language code supported by the conversation profile belonging to a particular project for Dialogflow.",
        "enum": [
          "en",
          "en-AU",
          "en-CA",
          "en-GB",
          "en-IN",
          "en-US"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the conversation profile belonging to a particular project for Dialogflow",
        "type": "string"
      }
    },
    "required": [
      "languageCode",
      "name"
    ],
    "type": "object"
  },
  "ConversationProperties": {
    "properties": {
      "filterWrapUpNotes": {
        "description": "Indicates filtering for WrapUpNotes",
        "type": "boolean"
      },
      "isAcd": {
        "description": "Indicates filtering for Acd",
        "type": "boolean"
      },
      "isActive": {
        "description": "Indicates filtering for active",
        "type": "boolean"
      },
      "isCobrowse": {
        "description": "Indicates filtering for Cobrowse",
        "type": "boolean"
      },
      "isFlagged": {
        "description": "Indicates filtering for flagged",
        "type": "boolean"
      },
      "isMonitored": {
        "description": "Indicates filtering for monitored",
        "type": "boolean"
      },
      "isPreferred": {
        "description": "Indicates filtering for Preferred Agent Routing",
        "type": "boolean"
      },
      "isScreenMonitored": {
        "description": "Indicates filtering for screenMonitored",
        "type": "boolean"
      },
      "isScreenshare": {
        "description": "Indicates filtering for screenshare",
        "type": "boolean"
      },
      "isVoicemail": {
        "description": "Indicates filtering for Voice mail",
        "type": "boolean"
      },
      "isWaiting": {
        "description": "Indicates filtering for waiting",
        "type": "boolean"
      },
      "matchAll": {
        "description": "Indicates comparison operation, TRUE indicates filters will use AND logic, FALSE indicates OR logic",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ConversationPublicMetadata": {
    "description": "Information about a public message.",
    "properties": {
      "replyToId": {
        "description": "The id of the message this public message is replying to.",
        "type": "string"
      },
      "rootId": {
        "description": "The id of the root public message.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationQuery": {
    "properties": {
      "aggregations": {
        "description": "Include faceted search and aggregate roll-ups describing your search results. This does not function as a filter, but rather, summary data about the data matching your filters",
        "items": {
          "$ref": "#/definitions/AnalyticsQueryAggregation"
        },
        "type": "array"
      },
      "conversationFilters": {
        "description": "Filters that target conversation-level data",
        "items": {
          "$ref": "#/definitions/ConversationDetailQueryFilter"
        },
        "type": "array"
      },
      "evaluationFilters": {
        "description": "Filters that target evaluations",
        "items": {
          "$ref": "#/definitions/EvaluationDetailQueryFilter"
        },
        "type": "array"
      },
      "interval": {
        "description": "Specifies the date and time range of data being queried. Results will only include conversations that started on a day touched by the interval. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      },
      "orderBy": {
        "description": "Specify which data element within the result set to use for sorting. The options  to use as a basis for sorting the results: conversationStart, segmentStart, and segmentEnd. If not specified, the default is conversationStart",
        "enum": [
          "conversationStart",
          "conversationEnd",
          "segmentStart",
          "segmentEnd"
        ],
        "type": "string"
      },
      "paging": {
        "$ref": "#/definitions/PagingSpec",
        "description": "Page size and number to control iterating through large result sets. Default page size is 25"
      },
      "resolutionFilters": {
        "description": "Filters that target resolutions",
        "items": {
          "$ref": "#/definitions/ResolutionDetailQueryFilter"
        },
        "type": "array"
      },
      "segmentFilters": {
        "description": "Filters that target individual segments within a conversation",
        "items": {
          "$ref": "#/definitions/SegmentDetailQueryFilter"
        },
        "type": "array"
      },
      "surveyFilters": {
        "description": "Filters that target surveys",
        "items": {
          "$ref": "#/definitions/SurveyDetailQueryFilter"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "ConversationQueueMediaSettings": {
    "properties": {
      "alertingTimeoutSeconds": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "autoAnswerAlertToneSeconds": {
        "description": "Specifies the duration of the alerting sound to be played for auto answered interactions.",
        "format": "double",
        "type": "number"
      },
      "enableAutoAnswer": {
        "description": "Flag to indicate if auto answer is enabled for the given media type or media subtype.",
        "type": "boolean"
      },
      "manualAnswerAlertToneSeconds": {
        "description": "Specifies the duration of the alerting sound to be played for manually answered interactions.",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "ConversationReason": {
    "description": "Reasons for a failed message receipt.",
    "properties": {
      "code": {
        "description": "The reason code for the failed message receipt.",
        "enum": [
          "MessageExpired",
          "RateLimited",
          "MessageNotAllowed",
          "GeneralError",
          "UnsupportedMessage",
          "UnknownMessage",
          "InvalidMessageStructure",
          "InvalidDestination",
          "ServerError",
          "MediaTypeNotAllowed",
          "InvalidMediaContentLength",
          "RecipientOptedOut"
        ],
        "type": "string"
      },
      "message": {
        "description": "Description of the reason for the failed message receipt.",
        "type": "string"
      }
    },
    "required": [
      "message"
    ],
    "type": "object"
  },
  "ConversationRecipientAdditionalIdentifier": {
    "description": "Additional identifiers for describing messaging recipient.",
    "properties": {
      "type": {
        "description": "Type of the Identifier",
        "enum": [
          "Deployment",
          "Subject",
          "Unknown",
          "Topic",
          "IngestionRule",
          "IngestionRuleVersion"
        ],
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "The Identifier value.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "type",
      "value"
    ],
    "type": "object"
  },
  "ConversationReference": {
    "properties": {
      "id": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ConversationRoutingData": {
    "properties": {
      "label": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      },
      "language": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The language to use for routing decisions"
      },
      "priority": {
        "description": "The priority of the conversation to use for routing decisions",
        "format": "int32",
        "type": "integer"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The queue to use for routing decisions"
      },
      "scoredAgents": {
        "description": "A collection of agents and their assigned scores for this conversation (0 - 100, higher being better), for use in routing to preferred agents",
        "items": {
          "$ref": "#/definitions/ScoredAgent"
        },
        "type": "array"
      },
      "skills": {
        "description": "The skills to use for routing decisions",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ConversationSecureAttributes": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The map of attribute keys to values.",
        "type": "object"
      },
      "version": {
        "description": "The version used to detect conflicting updates when using PUT. Not used for PATCH.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ConversationTagsUpdate": {
    "properties": {
      "externalTag": {
        "description": "The external tag associated with the conversation.",
        "type": "string"
      }
    },
    "required": [
      "externalTag"
    ],
    "type": "object"
  },
  "ConversationThreadingWindow": {
    "properties": {
      "defaultTimeoutMinutes": {
        "description": "The default conversation threading window timeout (Minutes)",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "settings": {
        "description": "The conversation threading window timeout (Minutes) for each messaging type",
        "items": {
          "$ref": "#/definitions/ConversationThreadingWindowSetting"
        },
        "type": "array"
      }
    },
    "required": [
      "settings"
    ],
    "type": "object"
  },
  "ConversationThreadingWindowSetting": {
    "properties": {
      "messengerType": {
        "description": "The type of messenger",
        "enum": [
          "sms",
          "facebook",
          "twitter",
          "whatsapp",
          "webmessaging",
          "instagram",
          "open"
        ],
        "type": "string"
      },
      "timeoutInMinutes": {
        "description": "The conversation threading window timeout (Minutes) of specified messenger type",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "messengerType",
      "timeoutInMinutes"
    ],
    "type": "object"
  },
  "ConversationUser": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for this user.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ConversationUserDisposition": {
    "properties": {
      "code": {
        "description": "User-defined wrap-up code for the conversation.",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the user to describe the call or disposition.",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The user that wrapped up the conversation.",
        "readOnly": true
      }
    },
    "required": [
      "code",
      "user"
    ],
    "type": "object"
  },
  "ConversationUtilizationLabelUpdate": {
    "properties": {
      "utilizationLabelId": {
        "description": "The utilization label associated with the conversation.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Copilot": {
    "properties": {
      "answerGenerationConfig": {
        "$ref": "#/definitions/AnswerGenerationConfig",
        "description": "Answer generation configuration."
      },
      "defaultLanguage": {
        "description": "Copilot default language, e.g. [en-US, es-US, es-ES]. Once set, it can not be modified.",
        "type": "string"
      },
      "enabled": {
        "description": "Copilot is enabled.",
        "readOnly": true,
        "type": "boolean"
      },
      "knowledgeAnswerConfig": {
        "$ref": "#/definitions/KnowledgeAnswerConfig",
        "description": "Knowledge answer configuration."
      },
      "liveOnQueue": {
        "description": "Copilot is live on selected queue.",
        "type": "boolean"
      },
      "nluConfig": {
        "$ref": "#/definitions/NluConfig",
        "description": "NLU configuration."
      },
      "nluEngineType": {
        "description": "Language understanding engine type.",
        "enum": [
          "NluV3"
        ],
        "type": "string"
      },
      "ruleEngineConfig": {
        "$ref": "#/definitions/RuleEngineConfig",
        "description": "Rule engine configuration."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "summaryGenerationConfig": {
        "$ref": "#/definitions/SummaryGenerationConfig",
        "description": "Copilot generated summary configuration."
      },
      "wrapupCodePredictionConfig": {
        "$ref": "#/definitions/WrapupCodePredictionConfig",
        "description": "Copilot generated wrapup code prediction configuration."
      }
    },
    "required": [
      "defaultLanguage",
      "liveOnQueue"
    ],
    "type": "object"
  },
  "CopilotAction": {
    "properties": {
      "actionType": {
        "description": "Type of action.",
        "enum": [
          "KnowledgeArticle",
          "CannedResponse",
          "Script"
        ],
        "type": "string"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Action specific attributes, if any. Maximum 100 of string key-value pair allowed.",
        "type": "object"
      }
    },
    "required": [
      "actionType"
    ],
    "type": "object"
  },
  "CopilotCondition": {
    "properties": {
      "conditionType": {
        "description": "Type of condition.",
        "enum": [
          "Intent",
          "ConversationStart",
          "ConversationTransfer",
          "ConversationEnd"
        ],
        "type": "string"
      },
      "conditionValues": {
        "description": "Condition values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "conditionType",
      "conditionValues"
    ],
    "type": "object"
  },
  "CopilotFallbackAction": {
    "properties": {
      "actionType": {
        "description": "Type of action.",
        "enum": [
          "KnowledgeArticle",
          "CannedResponse",
          "Script",
          "KnowledgeSearch"
        ],
        "type": "string"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Action specific attributes, if any. Maximum 100 of string key-value pair allowed.",
        "type": "object"
      }
    },
    "required": [
      "actionType"
    ],
    "type": "object"
  },
  "CopilotNluDomain": {
    "properties": {
      "id": {
        "description": "Id of the NLU domain.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "useLatestVersion": {
        "description": "Use the latest version of the NLU domain. If false, version is required.",
        "type": "boolean"
      },
      "version": {
        "$ref": "#/definitions/CopilotNluDomainVersion",
        "description": "NLU domain version."
      }
    },
    "required": [
      "id",
      "useLatestVersion"
    ],
    "type": "object"
  },
  "CopilotNluDomainVersion": {
    "properties": {
      "id": {
        "description": "Id of the NLU v3 domain version.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "CopilotRule": {
    "properties": {
      "actions": {
        "description": "List of actions to execute, must have at least 1 element and maximum 100 elements.",
        "items": {
          "$ref": "#/definitions/CopilotAction"
        },
        "type": "array"
      },
      "conditions": {
        "description": "List of conditions to execute actions, must have at least 1 element and maximum 100 elements. Operator in case of multiple conditions: 'OR'.",
        "items": {
          "$ref": "#/definitions/CopilotCondition"
        },
        "type": "array"
      }
    },
    "required": [
      "actions",
      "conditions"
    ],
    "type": "object"
  },
  "CopyAttachmentsRequest": {
    "properties": {
      "attachments": {
        "description": "A list of attachments that will be copied from the source message to the current draft",
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "sourceMessage": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A reference to the email message within the current conversation that owns the attachments to be copied"
      }
    },
    "required": [
      "attachments",
      "sourceMessage"
    ],
    "type": "object"
  },
  "CopyBuForecastRequest": {
    "properties": {
      "description": {
        "description": "The description for the forecast",
        "type": "string"
      },
      "weekDate": {
        "description": "The start date of the new forecast to create from the existing forecast. Must correspond to the start day of week for the business unit. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "description",
      "weekDate"
    ],
    "type": "object"
  },
  "CopyVoicemailMessage": {
    "description": "Used to copy a VoicemailMessage to either a User or a Group",
    "properties": {
      "groupId": {
        "description": "The id of the Group to copy the VoicemailMessage to",
        "type": "string"
      },
      "userId": {
        "description": "The id of the User to copy the VoicemailMessage to",
        "type": "string"
      },
      "voicemailMessageId": {
        "description": "The id of the VoicemailMessage to copy",
        "type": "string"
      }
    },
    "required": [
      "voicemailMessageId"
    ],
    "type": "object"
  },
  "CopyWorkPlan": {
    "properties": {
      "name": {
        "description": "Name of the copied work plan",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CopyWorkPlanBid": {
    "properties": {
      "name": {
        "description": "The name of the new work plan bid",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CopyWorkPlanRotationRequest": {
    "properties": {
      "name": {
        "description": "Name to apply to the new copy of the work plan rotation",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "Coretype": {
    "properties": {
      "current": {
        "description": "A boolean indicating if the core type's version is the current one in use by the system",
        "type": "boolean"
      },
      "dateCreated": {
        "description": "The date the core type was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "itemValidationFields": {
        "description": "Specific to the \"tag\" core type, this is an array of strings naming the tag item fields of the core type subject to validation",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "itemValidationLimits": {
        "$ref": "#/definitions/ItemValidationLimits",
        "description": "A structure denoting the system-imposed minimum and maximum string length for string-array based core types such as \"tag\" and \"enum\".  Forexample, the validationLimits for a schema field using a tag core type specify the min/max values for a minimum string length (minLength) constraint supplied by a schema author on individual tags.  Similarly, the maxLength's min/max specifies maximum string length constraint supplied by a schema author for the same field's tags.",
        "example": "\"validationLimits\": {\n     \"minLength\": {\"min\": 1, \"max\": 100},\n     \"maxLength\": {\"min\": 1, \"max\": 100}\n}"
      },
      "name": {
        "type": "string"
      },
      "schema": {
        "$ref": "#/definitions/Schema",
        "description": "The core type's built-in schema"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "validationFields": {
        "description": "An array of strings naming the fields of the core type subject to validation.  Validation constraints are specified by a schema author using the core type.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "validationLimits": {
        "$ref": "#/definitions/ValidationLimits",
        "description": "A structure denoting the system-imposed minimum and maximum string length (for text-based core types) or numeric values (for number-based) core types.  For example, the validationLimits for a text-based core type specify the min/max values for a minimum string length (minLength) constraint supplied by a schemaauthor on a text field.  Similarly, the maxLength's min/max specifies maximum string length constraint supplied by a schema author for the same field.",
        "example": "\"validationLimits\": {\n\"minLength\": {\"min\": 0, \"max\": 100},\n\"maxLength\": {\"min\": 1, \"max\": 100}\n}"
      },
      "version": {
        "description": "A positive integer denoting the core type's version",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CoretypeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Coretype"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CoverSheet": {
    "properties": {
      "locale": {
        "description": "Locale, e.g. = en-US",
        "type": "string"
      },
      "notes": {
        "description": "Text to be added to the coversheet",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreateActivityCodeRequest": {
    "properties": {
      "agentTimeOffSelectable": {
        "description": "Whether an agent can select this activity code when creating or editing a time off request",
        "type": "boolean"
      },
      "category": {
        "description": "The activity code's category",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "countsAsPaidTime": {
        "description": "Whether an agent is paid while performing this activity",
        "type": "boolean"
      },
      "countsAsWorkTime": {
        "description": "Indicates whether or not the activity should be counted as work time",
        "type": "boolean"
      },
      "countsTowardShrinkage": {
        "description": "Whether or not this activity code counts toward shrinkage calculations",
        "type": "boolean"
      },
      "interruptible": {
        "description": "Whether this activity code is considered interruptible",
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The default length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The name of the activity code",
        "type": "string"
      },
      "plannedShrinkage": {
        "description": "Whether this activity code is considered planned or unplanned shrinkage",
        "type": "boolean"
      },
      "secondaryPresences": {
        "description": "The secondary presences of this activity code",
        "items": {
          "$ref": "#/definitions/SecondaryPresence"
        },
        "type": "array"
      }
    },
    "required": [
      "category",
      "name"
    ],
    "type": "object"
  },
  "CreateActivityPlanRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The activity code associated with the activity plan",
        "type": "string"
      },
      "attendeesSearchRule": {
        "$ref": "#/definitions/UserSearchRule",
        "description": "Attendee search rule for this activity plan"
      },
      "countsAsPaidTime": {
        "description": "Whether the activity should count as paid time",
        "type": "boolean"
      },
      "description": {
        "description": "The description of the activity plan",
        "type": "string"
      },
      "facilitated": {
        "description": "Whether the sessions created by this activity plan should be facilitated",
        "type": "boolean"
      },
      "facilitatorsSearchRule": {
        "$ref": "#/definitions/UserSearchRule",
        "description": "Facilitator search rule for this activity plan"
      },
      "fixedAvailability": {
        "description": "Fixed availability configuration for the activity plan",
        "items": {
          "$ref": "#/definitions/FixedAvailability"
        },
        "type": "array"
      },
      "groupSettings": {
        "$ref": "#/definitions/GroupSettings",
        "description": "Group settings for the activity plan"
      },
      "initialSchedulePeriod": {
        "$ref": "#/definitions/SchedulingPeriod",
        "description": "The initial scheduling period for the activity plan"
      },
      "lengthMinutes": {
        "description": "The length in minutes of the activity plan",
        "format": "int32",
        "type": "integer"
      },
      "managementUnitIds": {
        "description": "The management units to which this activity plan applies. Empty list or null means this activity plan applies to the entire business unit",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the activity plan",
        "type": "string"
      },
      "optimizationObjective": {
        "description": "The optimization objective of this activity plan",
        "enum": [
          "FavorServiceGoals",
          "FavorSchedulingAll"
        ],
        "type": "string"
      },
      "recurrenceSettings": {
        "$ref": "#/definitions/RecurrenceSettings",
        "description": "Settings controlling recurrence for the activity plan. If not set the activity plan will only occur once"
      },
      "serviceGoalImpactOverrides": {
        "$ref": "#/definitions/ActivityPlanServiceGoalImpactOverrides",
        "description": "Allowable service goal impact override settings for this activity plan. If not set the business unit setting will be used"
      },
      "state": {
        "description": "The state of this activity plan",
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "transitionTimeMinutes": {
        "description": "Transition time in minutes between facilitated sessions",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "The type of the activity plan",
        "enum": [
          "Individual",
          "Group"
        ],
        "type": "string"
      }
    },
    "required": [
      "activityCodeId",
      "countsAsPaidTime",
      "initialSchedulePeriod",
      "lengthMinutes",
      "name",
      "optimizationObjective",
      "state",
      "transitionTimeMinutes",
      "type"
    ],
    "type": "object"
  },
  "CreateAdminTimeOffRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "dailyDurationMinutes": {
        "description": "The daily duration of this time off request in minutes",
        "format": "int32",
        "type": "integer"
      },
      "durationMinutes": {
        "description": "Daily durations for each day of this time off request in minutes",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "fullDayManagementUnitDates": {
        "description": "A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "notes": {
        "description": "Notes about the time off request",
        "type": "string"
      },
      "paid": {
        "description": "Whether this is a paid time off request",
        "type": "boolean"
      },
      "partialDayStartDateTimes": {
        "description": "A set of start date-times in ISO-8601 format for partial day requests.",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "payableMinutes": {
        "description": "Payable minutes for each day of this time off request",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "status": {
        "description": "The status of this time off request",
        "enum": [
          "PENDING",
          "APPROVED"
        ],
        "type": "string"
      },
      "users": {
        "description": "A set of IDs for users to associate with this time off request",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "activityCodeId",
      "dailyDurationMinutes",
      "status",
      "users"
    ],
    "type": "object"
  },
  "CreateAgentTimeOffRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "dailyDurationMinutes": {
        "description": "The daily duration of this time off request in minutes",
        "format": "int32",
        "type": "integer"
      },
      "durationMinutes": {
        "description": "Daily durations for each day of this time off request in minutes",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "fullDayManagementUnitDates": {
        "description": "A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "notes": {
        "description": "Notes about the time off request",
        "type": "string"
      },
      "partialDayStartDateTimes": {
        "description": "A set of start date-times in ISO-8601 format for partial day requests.",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "payableMinutes": {
        "description": "Payable minutes for each day of this time off request",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "required": [
      "activityCodeId",
      "dailyDurationMinutes"
    ],
    "type": "object"
  },
  "CreateAlternativeShiftTradeRequest": {
    "properties": {
      "alternativeShiftTradeGranularity": {
        "description": "The granularity of alternative shifts to be traded",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "dropShiftReferenceKeys": {
        "description": "A list of offered shift reference keys an agent wants to drop",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "expirationDate": {
        "description": "The date when the trade will expire in ISO-8601 format. The trade cannot be approved after expiration",
        "format": "date-time",
        "type": "string"
      },
      "jobId": {
        "description": "The ID of this alternative shift job",
        "type": "string"
      },
      "pickupShiftReferenceKeys": {
        "description": "A list of offered shift reference keys an agent wants to pick up",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "alternativeShiftTradeGranularity",
      "jobId"
    ],
    "type": "object"
  },
  "CreateBenefitAssessmentJobRequest": {
    "properties": {
      "divisionIds": {
        "description": "The list of division ids for routing queues that are to be assessed for Predictive Routing benefit.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CreateBenefitAssessmentRequest": {
    "properties": {
      "queueIds": {
        "description": "The list of queue ids that are to be assessed for Predictive Routing benefit.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "queueIds"
    ],
    "type": "object"
  },
  "CreateBusinessUnitRequest": {
    "properties": {
      "divisionId": {
        "description": "The ID of the division to which the business unit should be added",
        "type": "string"
      },
      "name": {
        "description": "The name of the business unit",
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/CreateBusinessUnitSettingsRequest",
        "description": "Configuration for the business unit"
      }
    },
    "required": [
      "divisionId",
      "name",
      "settings"
    ],
    "type": "object"
  },
  "CreateBusinessUnitSettingsRequest": {
    "properties": {
      "scheduling": {
        "$ref": "#/definitions/BuSchedulingSettingsRequest",
        "description": "Scheduling settings"
      },
      "shortTermForecasting": {
        "$ref": "#/definitions/BuShortTermForecastingSettings",
        "description": "Short term forecasting settings"
      },
      "startDayOfWeek": {
        "description": "The start day of week for this business unit",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for this business unit, using the Olsen tz database format",
        "type": "string"
      }
    },
    "required": [
      "startDayOfWeek",
      "timeZone"
    ],
    "type": "object"
  },
  "CreateCallRequest": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The list of attributes to associate with the customer participant.",
        "type": "object"
      },
      "callFromQueueId": {
        "description": "The queue ID to call on behalf of.",
        "type": "string"
      },
      "callQueueId": {
        "description": "The queue ID to call.",
        "type": "string"
      },
      "callUserId": {
        "description": "The user ID to call.",
        "type": "string"
      },
      "callerId": {
        "description": "The caller id phone number for this outbound call.",
        "type": "string"
      },
      "callerIdName": {
        "description": "The caller id name for this outbound call.",
        "type": "string"
      },
      "conversationIds": {
        "description": "The list of existing call conversations to merge into a new ad-hoc conference.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "externalContactId": {
        "description": "The external contact with which to associate the call.",
        "type": "string"
      },
      "label": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      },
      "languageId": {
        "description": "The language skill ID to use for routing this call (if calling a queue).",
        "type": "string"
      },
      "participants": {
        "description": "The list of participants to call to create a new ad-hoc conference.",
        "items": {
          "$ref": "#/definitions/Destination"
        },
        "type": "array"
      },
      "phoneNumber": {
        "description": "The phone number to dial.",
        "type": "string"
      },
      "priority": {
        "description": "The priority to assign to this call (if calling a queue).",
        "format": "int32",
        "type": "integer"
      },
      "routingSkillsIds": {
        "description": "The skill ID's to use for routing this call (if calling a queue).",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "uuiData": {
        "description": "User to User Information (UUI) data managed by SIP session application.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreateCallResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreateCallbackCommand": {
    "properties": {
      "callbackNumbers": {
        "description": "A list of phone numbers for the callback.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackScheduledTime": {
        "description": "The scheduled date-time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ",
        "example": "2015-01-02T16:59:59.000Z",
        "format": "date-time",
        "type": "string"
      },
      "callbackUserName": {
        "description": "The name of the party to be called back.",
        "type": "string"
      },
      "callerId": {
        "description": "The phone number displayed to recipients when a phone call is placed as part of the callback. Must conform to the E.164 format. May be overridden by other settings in the system such as external trunk settings. Telco support for \"callerId\" varies.",
        "type": "string"
      },
      "callerIdName": {
        "description": "The name displayed to recipients when a phone call is placed as part of the callback. May be overridden by other settings in the system such as external trunk settings. Telco support for \"callerIdName\" varies.",
        "type": "string"
      },
      "countryCode": {
        "description": "The country code to be associated with the callback numbers.",
        "type": "string"
      },
      "data": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of key-value pairs containing additional data that can be associated to the callback. These values will appear in the attributes property on the conversation participant. Example: { \"notes\": \"ready to close the deal!\", \"customerPreferredName\": \"Doc\" }",
        "type": "object"
      },
      "queueId": {
        "description": "The identifier of the queue to be used for the callback. Either queueId or routingData is required.",
        "type": "string"
      },
      "routingData": {
        "$ref": "#/definitions/RoutingData",
        "description": "The routing data to be used for the callback. Either queueId or routingData is required."
      },
      "scriptId": {
        "description": "The identifier of the script to be used for the callback",
        "type": "string"
      },
      "validateCallbackNumbers": {
        "description": "Whether or not to validate the callback numbers for phone number format.",
        "type": "boolean"
      }
    },
    "required": [
      "callbackNumbers"
    ],
    "type": "object"
  },
  "CreateCallbackOnConversationCommand": {
    "properties": {
      "callbackNumbers": {
        "description": "A list of phone numbers for the callback.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackScheduledTime": {
        "description": "The scheduled date-time for the callback as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ",
        "example": "2015-01-02T16:59:59.000Z",
        "format": "date-time",
        "type": "string"
      },
      "callbackUserName": {
        "description": "The name of the party to be called back.",
        "type": "string"
      },
      "callerId": {
        "description": "The phone number displayed to recipients when a phone call is placed as part of the callback. Must conform to the E.164 format. May be overridden by other settings in the system such as external trunk settings. Telco support for \"callerId\" varies.",
        "type": "string"
      },
      "callerIdName": {
        "description": "The name displayed to recipients when a phone call is placed as part of the callback. May be overridden by other settings in the system such as external trunk settings. Telco support for \"callerIdName\" varies.",
        "type": "string"
      },
      "countryCode": {
        "description": "The country code to be associated with the callback numbers.",
        "type": "string"
      },
      "data": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of key-value pairs containing additional data that can be associated to the callback. These values will appear in the attributes property on the conversation participant. Example: { \"notes\": \"ready to close the deal!\", \"customerPreferredName\": \"Doc\" }",
        "type": "object"
      },
      "queueId": {
        "description": "The identifier of the queue to be used for the callback. Either queueId or routingData is required.",
        "type": "string"
      },
      "routingData": {
        "$ref": "#/definitions/RoutingData",
        "description": "The routing data to be used for the callback. Either queueId or routingData is required."
      },
      "scriptId": {
        "description": "The identifier of the script to be used for the callback",
        "type": "string"
      },
      "validateCallbackNumbers": {
        "description": "Whether or not to validate the callback numbers for phone number format.",
        "type": "boolean"
      }
    },
    "required": [
      "callbackNumbers"
    ],
    "type": "object"
  },
  "CreateCallbackResponse": {
    "properties": {
      "callbackIdentifiers": {
        "description": "The list of communication identifiers for the callback participants",
        "items": {
          "$ref": "#/definitions/CallbackIdentifier"
        },
        "type": "array"
      },
      "conversation": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The conversation associated with the callback"
      }
    },
    "required": [
      "callbackIdentifiers",
      "conversation"
    ],
    "type": "object"
  },
  "CreateCoachingAppointmentRequest": {
    "description": "Create coaching appointment request",
    "properties": {
      "attendeeIds": {
        "description": "IDs of attendees in the coaching appointment.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "conversationIds": {
        "description": "IDs of conversations associated with this coaching appointment.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "dateStart": {
        "description": "The date/time the coaching appointment starts. Times will be rounded down to the minute. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of coaching appointment.",
        "type": "string"
      },
      "documentIds": {
        "description": "IDs of documents associated with this coaching appointment.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "externalLinks": {
        "description": "The list of external links related to the appointment",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "facilitatorId": {
        "description": "The facilitator ID of coaching appointment.",
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "The duration of coaching appointment in minutes.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The name of coaching appointment.",
        "type": "string"
      },
      "wfmSchedule": {
        "$ref": "#/definitions/WfmScheduleReference",
        "description": "The Workforce Management schedule the appointment is associated with."
      }
    },
    "required": [
      "attendeeIds",
      "dateStart",
      "description",
      "lengthInMinutes",
      "name"
    ],
    "type": "object"
  },
  "CreateEmailRequest": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The list of attributes to associate with the customer participant.",
        "type": "object"
      },
      "direction": {
        "description": "Specify OUTBOUND to send an email on behalf of a queue, or INBOUND to create an external conversation. An external conversation is one where the provider is not PureCloud based.",
        "enum": [
          "OUTBOUND",
          "INBOUND"
        ],
        "type": "string"
      },
      "externalContactId": {
        "description": "The external contact with which the email should be associated. This field is only valid for OUTBOUND email.",
        "type": "string"
      },
      "flowId": {
        "description": "The ID of the flow to use for routing email conversation. This field is mutually exclusive with queueId",
        "type": "string"
      },
      "fromAddress": {
        "description": "The email address of the sender of the email.",
        "type": "string"
      },
      "fromName": {
        "description": "The name of the sender of the email.",
        "type": "string"
      },
      "htmlBody": {
        "description": "An HTML body content of the email.",
        "type": "string"
      },
      "languageId": {
        "description": "The ID of the language to use for routing.",
        "type": "string"
      },
      "priority": {
        "description": "The priority to assign to the conversation for routing.",
        "format": "int64",
        "type": "integer"
      },
      "provider": {
        "description": "The name of the provider that is sourcing the emails. The Provider \"PureCloud Email\" is reserved for native emails.",
        "type": "string"
      },
      "queueId": {
        "description": "The ID of the queue to use for routing the email conversation. This field is mutually exclusive with flowId",
        "type": "string"
      },
      "skillIds": {
        "description": "The list of skill ID's to use for routing.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "subject": {
        "description": "The subject of the email",
        "type": "string"
      },
      "textBody": {
        "description": "A text body content of the email.",
        "type": "string"
      },
      "toAddress": {
        "description": "The email address of the recipient of the email.",
        "type": "string"
      },
      "toName": {
        "description": "The name of the recipient of the email.",
        "type": "string"
      }
    },
    "required": [
      "provider"
    ],
    "type": "object"
  },
  "CreateIntegrationRequest": {
    "description": "Details for an Integration",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationType": {
        "$ref": "#/definitions/IntegrationType",
        "description": "Type of the integration to create."
      },
      "name": {
        "description": "The name of the integration, used to distinguish this integration from others of the same type.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "integrationType",
      "name"
    ],
    "type": "object"
  },
  "CreateManagementUnitApiRequest": {
    "properties": {
      "businessUnitId": {
        "description": "The id of the business unit to which this management unit belongs",
        "type": "string"
      },
      "divisionId": {
        "description": "The id of the division to which this management unit belongs.  Defaults to home division ID",
        "type": "string"
      },
      "name": {
        "description": "The name of the management unit",
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/CreateManagementUnitSettingsRequest",
        "description": "The configuration for the management unit.  If omitted, reasonable defaults will be assigned"
      },
      "startDayOfWeek": {
        "description": "The configured first day of the week for scheduling and forecasting purposes. Moving to Business Unit",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "The default time zone to use for this management unit.  Moving to Business Unit",
        "type": "string"
      }
    },
    "required": [
      "businessUnitId",
      "name"
    ],
    "type": "object"
  },
  "CreateManagementUnitSettingsRequest": {
    "properties": {
      "adherence": {
        "$ref": "#/definitions/AdherenceSettings",
        "description": "Adherence settings for this management unit"
      },
      "scheduling": {
        "$ref": "#/definitions/SchedulingSettingsRequest",
        "description": "Scheduling settings for this management unit"
      },
      "shiftTrading": {
        "$ref": "#/definitions/ShiftTradeSettings",
        "description": "Shift trade settings for this management unit"
      },
      "shortTermForecasting": {
        "$ref": "#/definitions/ShortTermForecastingSettings",
        "description": "Short term forecasting settings for this management unit.  Moving to Business Unit"
      },
      "timeOff": {
        "$ref": "#/definitions/TimeOffRequestSettings",
        "description": "Time off request settings for this management unit"
      }
    },
    "type": "object"
  },
  "CreateMetric": {
    "properties": {
      "externalMetricDefinitionId": {
        "description": "The id of associated external metric definition",
        "type": "string"
      },
      "metricDefinitionId": {
        "description": "The id of associated metric definition",
        "type": "string"
      },
      "name": {
        "description": "The name of this metric",
        "type": "string"
      },
      "objective": {
        "$ref": "#/definitions/CreateObjective",
        "description": "Associated objective for this metric"
      },
      "performanceProfileId": {
        "description": "Performance profile id of this metric",
        "type": "string"
      },
      "precision": {
        "description": "The precision of the metric, must be between 0 and 5",
        "format": "int32",
        "type": "integer"
      },
      "timeDisplayUnit": {
        "description": "The time unit in which the metric should be displayed -- this parameter is ignored when displaying non-time values",
        "enum": [
          "None",
          "Seconds",
          "Minutes",
          "Hours"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateObjective": {
    "properties": {
      "dateStart": {
        "description": "start date of the objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "enabled": {
        "description": "A flag for whether this objective is enabled for the related metric",
        "type": "boolean"
      },
      "evaluationFormContextIds": {
        "description": "The ids of associated evaluation form context, for Quality Evaluation Score metrics",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "initialDirection": {
        "description": "The initial direction to filter on",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "mediaTypes": {
        "description": "A list of media types for the metric",
        "items": {
          "enum": [
            "callback",
            "chat",
            "cobrowse",
            "email",
            "message",
            "screenshare",
            "unknown",
            "video",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "queueIds": {
        "description": "A list of queue ids for the metric",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "templateId": {
        "description": "The id of this objective's base template",
        "type": "string"
      },
      "topicIds": {
        "description": "A list of topic ids for detected topic metrics",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "topicIdsFilterType": {
        "description": "A filter type for topic Ids. It's only used for objectives with topicIds. Default filter behavior is \"or\".",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      },
      "zones": {
        "description": "Objective zone specifies min,max points and values for the associated metric",
        "items": {
          "$ref": "#/definitions/ObjectiveZone"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CreateOutboundMessagingConversationRequest": {
    "properties": {
      "externalContactId": {
        "description": "The external contact with which the message will be associated.",
        "type": "string"
      },
      "queueId": {
        "description": "The ID of the queue to be associated with the message. This will determine the fromAddress of the message, unless useUserFromAddress is true and the queue is configured to use the agent's Direct Routing address as the fromAddress.",
        "type": "string"
      },
      "toAddress": {
        "description": "The messaging address of the recipient of the message. For an SMS messenger type, the phone number address must be in E.164 format. E.g. +13175555555 or +34234234234.  For open messenger type, any string within the outbound.open.messaging.to.address.characters.max limit can be used. For whatsapp messenger type, use a Whatsapp ID of a phone number. E.g for a E.164 formatted phone number `+13175555555`, a Whatsapp ID would be 13175555555",
        "type": "string"
      },
      "toAddressMessengerType": {
        "description": "The messaging address messenger type.",
        "enum": [
          "sms",
          "open",
          "whatsapp"
        ],
        "type": "string"
      },
      "useExistingConversation": {
        "description": "An override to use an existing conversation. \nIf set to true, an existing conversation will be used if there is one within the conversation window. \nIf set to false, create request fails if there is a conversation within the conversation window.",
        "type": "boolean"
      },
      "useUserFromAddress": {
        "description": "An override to attempt to use the user's configured direct routing address as the fromAddress. \nIf set to true, users configured address with 'directrouting' integration will be used as fromAddress. \nIf set to false or not set, the queueId will be used for determining fromAddress.",
        "type": "boolean"
      }
    },
    "required": [
      "queueId",
      "toAddress",
      "toAddressMessengerType"
    ],
    "type": "object"
  },
  "CreateOutboundMessagingConversationResponse": {
    "properties": {
      "id": {
        "description": "The created outbound messaging conversation ID.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreatePerformanceProfile": {
    "properties": {
      "active": {
        "description": "The flag for active profiles",
        "type": "boolean"
      },
      "dateCreated": {
        "description": "Creation date for this performance profile. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "A description about this performance profile",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The associated division for this Performance Profile"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxLeaderboardRankSize": {
        "description": "The maximum rank size for the leaderboard. This counts the number of ranks can be retrieved in a leaderboard queries",
        "format": "int32",
        "type": "integer"
      },
      "memberCount": {
        "description": "The number of members in this performance profile",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "metricOrders": {
        "description": "Order of the associated metrics. The list should contain valid ids for metrics",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "name": {
        "description": "A name for this performance profile",
        "type": "string"
      },
      "reportingIntervals": {
        "description": "The reporting interval periods for this performance profile",
        "items": {
          "$ref": "#/definitions/ReportingInterval"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "active",
      "description",
      "division",
      "maxLeaderboardRankSize",
      "name",
      "reportingIntervals"
    ],
    "type": "object"
  },
  "CreatePlanningGroupRequest": {
    "properties": {
      "name": {
        "description": "The name of the planning group",
        "type": "string"
      },
      "routePaths": {
        "description": "Set of route paths to associate with the planning group",
        "items": {
          "$ref": "#/definitions/RoutePathRequest"
        },
        "type": "array",
        "uniqueItems": true
      },
      "serviceGoalTemplateId": {
        "description": "The ID of the service goal template to associate with this planning group",
        "type": "string"
      }
    },
    "required": [
      "name",
      "routePaths",
      "serviceGoalTemplateId"
    ],
    "type": "object"
  },
  "CreatePredictorRequest": {
    "properties": {
      "kpi": {
        "description": "The KPI that the predictor attempts to maximize/minimize.",
        "type": "string"
      },
      "queueIds": {
        "description": "The queue IDs associated with the predictor.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "routingTimeoutSeconds": {
        "description": "Number of seconds allocated to predictive routing before attempting a different routing method. This is a value between 12 and 900 seconds.",
        "format": "int32",
        "type": "integer"
      },
      "schedule": {
        "$ref": "#/definitions/PredictorSchedule",
        "description": "The predictor schedule that determines when the predictor is used for routing interactions."
      },
      "workloadBalancingConfig": {
        "$ref": "#/definitions/PredictorWorkloadBalancing",
        "description": "The predictor balancing configuration to enable workload balancing"
      }
    },
    "required": [
      "kpi",
      "queueIds"
    ],
    "type": "object"
  },
  "CreateQueueRequest": {
    "properties": {
      "acwSettings": {
        "$ref": "#/definitions/AcwSettings",
        "description": "The ACW settings for the queue."
      },
      "agentOwnedRouting": {
        "$ref": "#/definitions/AgentOwnedRouting",
        "description": "The Agent Owned Routing settings for the queue"
      },
      "autoAnswerOnly": {
        "description": "Specifies whether the configured whisper should play for all ACD calls, or only for those which are auto-answered.",
        "type": "boolean"
      },
      "bullseye": {
        "$ref": "#/definitions/Bullseye",
        "description": "The bullseye settings for the queue."
      },
      "callingPartyName": {
        "description": "The name to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "callingPartyNumber": {
        "description": "The phone number to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "conditionalGroupRouting": {
        "$ref": "#/definitions/ConditionalGroupRouting",
        "description": "The Conditional Group Routing settings for the queue."
      },
      "createdBy": {
        "description": "The ID of the user that created the queue.",
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the queue. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "defaultScripts": {
        "additionalProperties": {
          "$ref": "#/definitions/Script"
        },
        "description": "The default script Ids for the communication types.",
        "type": "object"
      },
      "description": {
        "description": "The queue description.",
        "type": "string"
      },
      "directRouting": {
        "$ref": "#/definitions/DirectRouting",
        "description": "The Direct Routing settings for the queue"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "emailInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for email conversations waiting in queue."
      },
      "enableAudioMonitoring": {
        "description": "Indicates whether audio monitoring is enabled for this queue.",
        "type": "boolean"
      },
      "enableManualAssignment": {
        "description": "Indicates whether manual assignment is enabled for this queue.",
        "type": "boolean"
      },
      "enableTranscription": {
        "description": "Indicates whether voice transcription is enabled for this queue.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "joinedMemberCount": {
        "description": "The number of joined members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "mediaSettings": {
        "$ref": "#/definitions/QueueMediaSettings",
        "description": "The media settings for the queue."
      },
      "memberCount": {
        "description": "The total number of members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "memberGroups": {
        "description": "The groups of agents associated with the queue, if any.  Queue membership will update to match group membership changes.",
        "items": {
          "$ref": "#/definitions/MemberGroup"
        },
        "type": "array",
        "uniqueItems": true
      },
      "messageInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for message conversations waiting in queue."
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the queue.",
        "type": "string"
      },
      "name": {
        "description": "The queue name",
        "type": "string"
      },
      "onHoldPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The audio to be played when calls on this queue are on hold. If not configured, the default on-hold music will play."
      },
      "outboundEmailAddress": {
        "$ref": "#/definitions/QueueEmailAddress"
      },
      "outboundMessagingAddresses": {
        "$ref": "#/definitions/QueueMessagingAddresses",
        "description": "The messaging addresses for the queue."
      },
      "peerId": {
        "description": "The ID of an associated external queue.",
        "type": "string"
      },
      "queueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for call conversations waiting in queue."
      },
      "routingRules": {
        "description": "The routing rules for the queue, used for Preferred Agent Routing.",
        "items": {
          "$ref": "#/definitions/RoutingRule"
        },
        "type": "array"
      },
      "scoringMethod": {
        "description": "The Scoring Method for the queue",
        "enum": [
          "TimestampAndPriority",
          "PriorityOnly"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillEvaluationMethod": {
        "description": "The skill evaluation method to use when routing conversations.",
        "enum": [
          "NONE",
          "BEST",
          "ALL"
        ],
        "type": "string"
      },
      "sourceQueueId": {
        "description": "The id of an existing queue to copy the settings (does not include GPR settings) from when creating a new queue.",
        "type": "string"
      },
      "suppressInQueueCallRecording": {
        "description": "Indicates whether recording in-queue calls is suppressed for this queue.",
        "type": "boolean"
      },
      "userMemberCount": {
        "description": "The number of user members (i.e., non-group members) in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "whisperPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The prompt used for whisper on the queue, if configured."
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateRecognition": {
    "properties": {
      "contextId": {
        "description": "The context id (optional)",
        "type": "string"
      },
      "contextType": {
        "description": "The context type (optional)",
        "enum": [
          "Interaction",
          "Insights",
          "Development",
          "Scorecard"
        ],
        "type": "string"
      },
      "note": {
        "description": "The note of the recognition. Max length of 800 characters (optional)",
        "type": "string"
      },
      "recipientId": {
        "description": "The recipient of the recognition",
        "type": "string"
      },
      "title": {
        "description": "The title of the recognition. Max length of 100 characters (optional)",
        "type": "string"
      },
      "type": {
        "description": "The type of the recognition",
        "enum": [
          "ThankYou",
          "Congratulations",
          "HighPerformance",
          "CompanyValues"
        ],
        "type": "string"
      }
    },
    "required": [
      "recipientId",
      "type"
    ],
    "type": "object"
  },
  "CreateResponseAssetRequest": {
    "properties": {
      "contentMd5": {
        "description": "Content MD-5 of the file to upload",
        "type": "string"
      },
      "divisionId": {
        "description": "Division to associate to this asset. Can only be used with this division.",
        "type": "string"
      },
      "name": {
        "description": "Name of the file to upload. It must not start with a dot and not end with a forward slash. Whitespace and the following characters are not allowed: \\{^}%`]\"\u003e[~\u003c#|",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateResponseAssetResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers when uploading a file through PUT request to the URL",
        "readOnly": true,
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "Pre-signed URL to PUT the file to",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreateRoomRequest": {
    "properties": {
      "description": {
        "description": "Room's description",
        "type": "string"
      },
      "subject": {
        "description": "Room's subject",
        "type": "string"
      },
      "userIds": {
        "description": "Users to add to the room",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "subject"
    ],
    "type": "object"
  },
  "CreateRoomResponse": {
    "properties": {
      "jid": {
        "description": "The jid of the room",
        "type": "string"
      }
    },
    "required": [
      "jid"
    ],
    "type": "object"
  },
  "CreateSecureSession": {
    "properties": {
      "disconnect": {
        "description": "if true, disconnect the agent after creating the session",
        "type": "boolean"
      },
      "flowId": {
        "description": "the flow id to execute in the secure session",
        "type": "string"
      },
      "sourceParticipantId": {
        "description": "requesting participant",
        "type": "string"
      },
      "userData": {
        "description": "user data for the secure session",
        "type": "string"
      }
    },
    "required": [
      "flowId",
      "userData"
    ],
    "type": "object"
  },
  "CreateServiceGoalTemplate": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/BuAbandonRate",
        "description": "Abandon rate targets for this service goal template"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/BuAverageSpeedOfAnswer",
        "description": "Average speed of answer targets for this service goal template"
      },
      "impactOverride": {
        "$ref": "#/definitions/ServiceGoalTemplateImpactOverride",
        "description": "Settings controlling max percent increase and decrease of service goals for this service goal template"
      },
      "name": {
        "description": "The name of the service goal template.",
        "type": "string"
      },
      "serviceLevel": {
        "$ref": "#/definitions/BuServiceLevel",
        "description": "Service level targets for this service goal template"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateShareRequest": {
    "properties": {
      "member": {
        "$ref": "#/definitions/SharedEntity",
        "description": "The member that will have access to this share. Only required if a list of members is not provided."
      },
      "memberType": {
        "enum": [
          "USER",
          "GROUP",
          "PUBLIC"
        ],
        "type": "string"
      },
      "members": {
        "items": {
          "$ref": "#/definitions/CreateShareRequestMember"
        },
        "type": "array"
      },
      "sharedEntity": {
        "$ref": "#/definitions/SharedEntity",
        "description": "The entity that will be shared"
      },
      "sharedEntityType": {
        "description": "The share entity type",
        "enum": [
          "DOCUMENT"
        ],
        "type": "string"
      }
    },
    "required": [
      "sharedEntity",
      "sharedEntityType"
    ],
    "type": "object"
  },
  "CreateShareRequestMember": {
    "properties": {
      "member": {
        "$ref": "#/definitions/MemberEntity"
      },
      "memberType": {
        "enum": [
          "USER",
          "GROUP",
          "PUBLIC"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreateShareResponse": {
    "properties": {
      "failed": {
        "items": {
          "$ref": "#/definitions/Share"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "member": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "memberType": {
        "enum": [
          "USER",
          "GROUP",
          "PUBLIC"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sharedBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "sharedEntity": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "sharedEntityType": {
        "enum": [
          "DOCUMENT"
        ],
        "type": "string"
      },
      "succeeded": {
        "items": {
          "$ref": "#/definitions/Share"
        },
        "type": "array"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "CreateStaffingGroupRequest": {
    "properties": {
      "managementUnitId": {
        "description": "The ID of the management unit to which the staffing group users belong. If undefined the staffing group can include users from the entire business unit",
        "type": "string"
      },
      "name": {
        "description": "The name of the staffing group",
        "type": "string"
      },
      "userIds": {
        "description": "The set of user IDs to associate with the staffing group",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateTimeOffLimitRequest": {
    "properties": {
      "defaultLimitMinutes": {
        "description": "The default limit value in minutes per granularity. If not specified, then 0 is assumed, which means there are no time off minutes available",
        "format": "int32",
        "type": "integer"
      },
      "granularity": {
        "description": "Granularity choice for time off limit. If not specified, 'Daily' is assumed",
        "enum": [
          "Daily"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "CreateTimeOffPlanBusinessUnitAssociation": {
    "properties": {
      "managementUnitIds": {
        "description": "The IDs of management units to which this time-off plan applies. This must not be set if staffingGroupIds is populated",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "staffingGroupIds": {
        "description": "The IDs of staffing groups to which this time-off plan applies. This must not be set if managementUnitIds is populated",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "CreateTimeOffPlanManagementUnitAssociation": {
    "properties": {
      "managementUnitId": {
        "description": "The ID of the management unit to which this time-off plan belongs",
        "type": "string"
      },
      "staffingGroupIds": {
        "description": "A IDs of staffing groups to which this time-off plan applies. If not defined, the plan is applied to the management unit",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "managementUnitId"
    ],
    "type": "object"
  },
  "CreateTimeOffPlanRequest": {
    "properties": {
      "active": {
        "description": "Whether this time off plan should be used by agents.",
        "type": "boolean"
      },
      "activityCodeIds": {
        "description": "The set of activity code IDs to associate with this time off plan.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "autoApprovalRule": {
        "description": "Auto approval rule for the time off plan.",
        "enum": [
          "Never",
          "Always",
          "CheckLimits",
          "CheckActivityCodes",
          "CheckLimitsAndActivityCodes"
        ],
        "type": "string"
      },
      "daysBeforeStartToExpireFromWaitlist": {
        "description": "The number of days before the time off request start date for when the request will be expired from the waitlist.",
        "format": "int32",
        "type": "integer"
      },
      "hrisTimeOffType": {
        "$ref": "#/definitions/HrisTimeOffType",
        "description": "Time off type, if this time off plan is associated with the integration."
      },
      "name": {
        "description": "The name of this time off plan.",
        "type": "string"
      },
      "timeOffLimitIds": {
        "description": "The set of time off limit IDs to associate with this time off plan.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "active",
      "autoApprovalRule",
      "name"
    ],
    "type": "object"
  },
  "CreateTriggerRequest": {
    "properties": {
      "delayBySeconds": {
        "description": "Optional delay invoking target after trigger fires. Must be in the range of 60 to 900 seconds. Only one of eventTTLSeconds or delayBySeconds can be set.",
        "format": "int32",
        "type": "integer"
      },
      "description": {
        "description": "Description of the trigger. Can be up to 512 characters in length.",
        "type": "string"
      },
      "enabled": {
        "description": "Boolean indicating if Trigger is enabled",
        "type": "boolean"
      },
      "eventTTLSeconds": {
        "description": "Optional length of time that events are meaningful after origination. Events older than this threshold may be dropped if the platform is delayed in processing events. Unset means events are valid indefinitely, otherwise must be set to at least 10 seconds. Only one of eventTTLSeconds or delayBySeconds can be set.",
        "format": "int32",
        "type": "integer"
      },
      "matchCriteria": {
        "description": "The configuration for when a trigger is considered to be a match for an event. When not provided, all events will fire the trigger",
        "items": {
          "$ref": "#/definitions/MatchCriteria"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the trigger",
        "type": "string"
      },
      "target": {
        "$ref": "#/definitions/TriggerTarget",
        "description": "The target to invoke when a matching event is received"
      },
      "topicName": {
        "description": "The topic that will cause the trigger to be invoked. Cannot be updated after creation. Valid topics can be found at /processautomation/triggers/topics ",
        "type": "string"
      }
    },
    "required": [
      "enabled",
      "name",
      "target",
      "topicName"
    ],
    "type": "object"
  },
  "CreateUser": {
    "properties": {
      "addresses": {
        "description": "Email addresses and phone numbers for this user",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "department": {
        "type": "string"
      },
      "divisionId": {
        "description": "The division to which this user will belong",
        "type": "string"
      },
      "email": {
        "description": "User's email and username",
        "type": "string"
      },
      "name": {
        "description": "User's full name",
        "type": "string"
      },
      "password": {
        "description": "User's password",
        "type": "string"
      },
      "state": {
        "description": "Optional initialized state of the user. If not specified, state will be Active if invites are sent, otherwise Inactive.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "title": {
        "type": "string"
      }
    },
    "required": [
      "divisionId",
      "email",
      "name"
    ],
    "type": "object"
  },
  "CreateUtilizationLabelRequest": {
    "properties": {
      "name": {
        "description": "The utilization label name.",
        "type": "string"
      },
      "utilization": {
        "$ref": "#/definitions/LabelUtilizationRequest",
        "description": "Org level utilization settings for the new label. If not specified, default utilization settings will be applied."
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateWebChatConversationRequest": {
    "properties": {
      "deploymentId": {
        "description": "The web chat Deployment ID which contains the appropriate settings for this chat conversation.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "A subset of the Journey System's data relevant to this conversation/session request (for external linkage and internal usage/context)."
      },
      "memberAuthToken": {
        "description": "If the guest member is an authenticated member (ie, not anonymous) his JWT is provided here. The token will have been previously generated with the \"POST /api/v2/signeddata\" resource.",
        "type": "string"
      },
      "memberInfo": {
        "$ref": "#/definitions/GuestMemberInfo",
        "description": "The guest member info to use for the new chat conversation."
      },
      "organizationId": {
        "description": "The organization identifier.",
        "type": "string"
      },
      "routingTarget": {
        "$ref": "#/definitions/WebChatRoutingTarget",
        "description": "The routing information to use for the new chat conversation."
      }
    },
    "required": [
      "deploymentId",
      "memberInfo",
      "organizationId",
      "routingTarget"
    ],
    "type": "object"
  },
  "CreateWebChatConversationResponse": {
    "properties": {
      "eventStreamUri": {
        "description": "The URI which provides the conversation event stream.",
        "format": "uri",
        "type": "string"
      },
      "id": {
        "description": "Chat Conversation identifier",
        "type": "string"
      },
      "jwt": {
        "description": "The JWT that you can use to identify subsequent calls on this conversation",
        "type": "string"
      },
      "member": {
        "$ref": "#/definitions/WebChatMemberInfo",
        "description": "Chat Member"
      }
    },
    "type": "object"
  },
  "CreateWebChatMessageRequest": {
    "properties": {
      "body": {
        "description": "The message body. Note that message bodies are limited to 4,000 characters.",
        "type": "string"
      },
      "bodyType": {
        "description": "The purpose of the message within the conversation, such as a standard text entry versus a greeting.",
        "enum": [
          "standard",
          "notice",
          "member-join",
          "member-leave",
          "media-request"
        ],
        "type": "string"
      }
    },
    "required": [
      "body"
    ],
    "type": "object"
  },
  "CreateWebChatRequest": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The list of attributes to associate with the customer participant.",
        "type": "object"
      },
      "customerName": {
        "description": "The name of the customer participating in the web chat.",
        "type": "string"
      },
      "languageId": {
        "description": "The ID of the langauge to use for routing.",
        "type": "string"
      },
      "priority": {
        "description": "The priority to assign to the conversation for routing.",
        "format": "int64",
        "type": "integer"
      },
      "provider": {
        "description": "The name of the provider that is sourcing the web chat.",
        "type": "string"
      },
      "queueId": {
        "description": "The ID of the queue to use for routing the chat conversation.",
        "type": "string"
      },
      "skillIds": {
        "description": "The list of skill ID's to use for routing.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "provider",
      "queueId"
    ],
    "type": "object"
  },
  "CreateWorkPlan": {
    "properties": {
      "agents": {
        "description": "Agents in this work plan",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "constrainMaximumConsecutiveWorkingDays": {
        "description": "Whether to constrain the maximum consecutive working days",
        "type": "boolean"
      },
      "constrainMaximumConsecutiveWorkingWeekends": {
        "description": "Whether to constrain the maximum consecutive working weekends",
        "type": "boolean"
      },
      "constrainMinimumTimeBetweenShifts": {
        "description": "Whether the minimum time between shifts constraint is enabled for this work plan",
        "type": "boolean"
      },
      "constrainPaidTimeGranularity": {
        "description": "Whether paid time granularity should be constrained for this workplan",
        "type": "boolean"
      },
      "constrainWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is enabled for this work plan",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether the work plan is enabled for scheduling",
        "type": "boolean"
      },
      "flexibleWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is flexible for this work plan",
        "type": "boolean"
      },
      "maximumConsecutiveWorkingDays": {
        "description": "The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumConsecutiveWorkingWeekends": {
        "description": "The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work",
        "format": "int32",
        "type": "integer"
      },
      "maximumDays": {
        "description": "Maximum number days in a week allowed to be scheduled for this work plan",
        "format": "int32",
        "type": "integer"
      },
      "maximumDaysOffPerPlanningPeriod": {
        "description": "Maximum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidMinutesPerPlanningPeriod": {
        "description": "Maximum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumConsecutiveNonWorkingMinutesPerWeek": {
        "description": "Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off",
        "format": "int32",
        "type": "integer"
      },
      "minimumDaysOffPerPlanningPeriod": {
        "description": "Minimum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidMinutesPerPlanningPeriod": {
        "description": "Minimum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumShiftStartDistanceMinutes": {
        "description": "The time period in minutes for the duration between the start times of two consecutive working days",
        "format": "int32",
        "type": "integer"
      },
      "minimumTimeBetweenShiftsMinutes": {
        "description": "Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumWorkingDaysPerWeek": {
        "description": "The minimum number of days that agents assigned to a work plan must work per week",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "Name of this work plan",
        "type": "string"
      },
      "optionalDays": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Optional days to schedule for this work plan"
      },
      "paidTimeGranularityMinutes": {
        "description": "Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true",
        "format": "int32",
        "type": "integer"
      },
      "shiftStartVarianceType": {
        "description": "This constraint ensures that an agent starts each workday within a user-defined time threshold",
        "enum": [
          "ShiftStart",
          "ShiftStartAndPaidDuration"
        ],
        "type": "string"
      },
      "shiftStartVariances": {
        "$ref": "#/definitions/ListWrapperShiftStartVariance",
        "description": "Variance in minutes among start times of shifts in this work plan"
      },
      "shifts": {
        "description": "Shifts in this work plan",
        "items": {
          "$ref": "#/definitions/CreateWorkPlanShift"
        },
        "type": "array"
      },
      "weeklyExactPaidMinutes": {
        "description": "Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMaximumPaidMinutes": {
        "description": "Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMinimumPaidMinutes": {
        "description": "Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CreateWorkPlanActivity": {
    "properties": {
      "activityCodeId": {
        "description": "ID of the activity code associated with this activity",
        "type": "string"
      },
      "countsAsContiguousWorkTime": {
        "description": "Whether the activity duration is counted towards contiguous work time",
        "type": "boolean"
      },
      "countsAsPaidTime": {
        "description": "Whether the activity is paid",
        "type": "boolean"
      },
      "description": {
        "description": "Description of the activity",
        "type": "string"
      },
      "earliestStartTimeMinutes": {
        "description": "Earliest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "exactStartTimeMinutes": {
        "description": "Exact activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == false",
        "format": "int32",
        "type": "integer"
      },
      "flexibleStartTime": {
        "description": "Whether the start time of the activity is flexible",
        "type": "boolean"
      },
      "latestStartTimeMinutes": {
        "description": "Latest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "lengthMinutes": {
        "description": "Length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "minimumLengthFromShiftEndMinutes": {
        "description": "The minimum duration between shift item (e.g., break or meal) end and shift end in minutes",
        "format": "int32",
        "type": "integer"
      },
      "minimumLengthFromShiftStartMinutes": {
        "description": "The minimum duration between shift start and shift item (e.g., break or meal) start in minutes",
        "format": "int32",
        "type": "integer"
      },
      "startTimeIncrementMinutes": {
        "description": "Increment in offset minutes that would contribute to different possible start times for the activity",
        "format": "int32",
        "type": "integer"
      },
      "startTimeIsRelativeToShiftStart": {
        "description": "Whether the start time of the activity is relative to the start time of the shift it belongs to",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "CreateWorkPlanBid": {
    "description": "Create work plan bid model",
    "properties": {
      "agentRankingType": {
        "description": "The type of agent ranking selected for this bid",
        "enum": [
          "HireDate",
          "Performance"
        ],
        "type": "string"
      },
      "bidWindowEndDate": {
        "description": "The bid end date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "bidWindowStartDate": {
        "description": "The bid start date where agents start participate in work plan bidding in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "effectiveDate": {
        "description": "The date when agents will be assigned to the new work plan in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "forecast": {
        "$ref": "#/definitions/BuShortTermForecastWeekReference",
        "description": "The selected forecast in this work plan bid"
      },
      "name": {
        "description": "The name of the work plan bid",
        "type": "string"
      },
      "rankingTiebreakerType": {
        "description": "Ranking tiebreaker to be used",
        "enum": [
          "HireDate",
          "Performance",
          "Custom",
          "RandomlyAssign"
        ],
        "type": "string"
      },
      "workPlanFieldsVisibleToAgents": {
        "description": "The work plan fields visible to agents whenever work plan preferences are made",
        "items": {
          "enum": [
            "Name",
            "PaidHours"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "agentRankingType",
      "bidWindowEndDate",
      "bidWindowStartDate",
      "effectiveDate",
      "name",
      "rankingTiebreakerType",
      "workPlanFieldsVisibleToAgents"
    ],
    "type": "object"
  },
  "CreateWorkPlanShift": {
    "properties": {
      "activities": {
        "description": "Activities configured for this shift",
        "items": {
          "$ref": "#/definitions/CreateWorkPlanActivity"
        },
        "type": "array"
      },
      "constrainContiguousWorkTime": {
        "description": "Whether the contiguous time constraint for the shift is enabled",
        "type": "boolean"
      },
      "constrainDayOff": {
        "description": "Whether day off rule is enabled",
        "type": "boolean"
      },
      "constrainEarliestStopTime": {
        "description": "Whether the earliest stop time constraint for the shift is enabled",
        "type": "boolean"
      },
      "constrainLatestStopTime": {
        "description": "Whether the latest stop time constraint for the shift is enabled",
        "type": "boolean"
      },
      "constrainStopTime": {
        "description": "Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead",
        "type": "boolean"
      },
      "dayOffRule": {
        "description": "The day off rule for agents to have next day off or previous day off. used if constrainDayOff = true",
        "enum": [
          "NextDayOff",
          "PreviousDayOff"
        ],
        "type": "string"
      },
      "days": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Days of the week applicable for this shift"
      },
      "earliestStartTimeMinutesFromMidnight": {
        "description": "Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "earliestStopTimeMinutesFromMidnight": {
        "description": "This is the earliest time a shift can end",
        "format": "int32",
        "type": "integer"
      },
      "exactPaidTimeMinutes": {
        "description": "Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "exactStartTimeMinutesFromMidnight": {
        "description": "Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false",
        "format": "int32",
        "type": "integer"
      },
      "flexiblePaidTime": {
        "description": "Whether the paid time setting for the shift is flexible",
        "type": "boolean"
      },
      "flexibleStartTime": {
        "description": "Whether the start time of the shift is flexible",
        "type": "boolean"
      },
      "latestStartTimeMinutesFromMidnight": {
        "description": "Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "latestStopTimeMinutesFromMidnight": {
        "description": "Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumContiguousWorkTimeMinutes": {
        "description": "Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidTimeMinutes": {
        "description": "Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumContiguousWorkTimeMinutes": {
        "description": "Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidTimeMinutes": {
        "description": "Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "Name of the shift",
        "type": "string"
      },
      "startIncrementMinutes": {
        "description": "Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "Credential": {
    "properties": {
      "credentialFields": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "$ref": "#/definitions/CredentialType",
        "description": "The type of credential."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "CredentialInfo": {
    "properties": {
      "createdDate": {
        "description": "Date the credentials were created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date credentials were last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "$ref": "#/definitions/CredentialType",
        "description": "Type of the credentials."
      }
    },
    "type": "object"
  },
  "CredentialInfoListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CredentialInfo"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CredentialSpecification": {
    "description": "Specifies the requirements for a credential that can be provided for configuring an integration",
    "properties": {
      "credentialTypes": {
        "description": "List of acceptable credential types that can be provided for this credential.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "required": {
        "description": "Indicates if the credential must be provided in order for the integration configuration to be valid.",
        "readOnly": true,
        "type": "boolean"
      },
      "title": {
        "description": "Title describing the usage for this credential.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CredentialType": {
    "properties": {
      "displayOrder": {
        "description": "Order in which properties should be displayed in the UI.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "properties": {
        "description": "Properties describing credentials of this type.",
        "readOnly": true,
        "type": "object"
      },
      "required": {
        "description": "Properties that are required fields.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "CredentialTypeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/CredentialType"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Criteria": {
    "properties": {
      "key": {
        "description": "The criteria key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "shouldIgnoreCase": {
        "description": "Should criteria be case insensitive.",
        "type": "boolean"
      },
      "values": {
        "description": "The criteria values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "key",
      "operator",
      "shouldIgnoreCase",
      "values"
    ],
    "type": "object"
  },
  "CriteriaCategoryInfo": {
    "properties": {
      "categoryId": {
        "type": "string"
      },
      "displayOrder": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "CriteriaGroup": {
    "description": "A group of logical or a singular criteria used to create a query of executionData",
    "properties": {
      "and": {
        "description": "These criteriaItems will be AND'd together to find a match.",
        "items": {
          "$ref": "#/definitions/CriteriaItem"
        },
        "type": "array"
      },
      "criteria": {
        "$ref": "#/definitions/CriteriaItem",
        "description": "A singular critieriaItem to match."
      },
      "not": {
        "description": "These criteriaItems must all be false to find a match.",
        "items": {
          "$ref": "#/definitions/CriteriaItem"
        },
        "type": "array"
      },
      "or": {
        "description": "These criteriaItems will be OR'd together to find a match.",
        "items": {
          "$ref": "#/definitions/CriteriaItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CriteriaItem": {
    "description": "A singular criteria used to query executionData.",
    "properties": {
      "key": {
        "description": "The id of the criteria to be checked.",
        "enum": [
          "FlowStartDateTime",
          "FlowEndDateTime",
          "ConversationId",
          "FlowType",
          "FlowId",
          "FlowErrorReason",
          "FlowWarningReason",
          "FlowAlternateExecutionId",
          "FlowObjectExecutionId",
          "FlowActionId",
          "FlowActionType",
          "FlowActionOutputPathId",
          "FlowActionOutputPathName",
          "FlowActionIdOutputPathId",
          "FlowActionIdOutputPathName",
          "FlowActionTypeOutputPathId",
          "FlowActionTypeOutputPathName",
          "BotId",
          "BotErrorReason",
          "BotFlowExecutionId",
          "BotObjectExecutionId"
        ],
        "type": "string"
      },
      "operator": {
        "description": "The operator used to check on the criteria id.",
        "enum": [
          "eq",
          "gt",
          "gte",
          "lt",
          "lte",
          "not",
          "begins",
          "not_null"
        ],
        "type": "string"
      },
      "value": {
        "description": "The target value used to query on.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "CriteriaQuery": {
    "description": "Used to retrieve executionData based upon certain criteria",
    "properties": {
      "query": {
        "description": "A list of CriteriaGroups which will be AND'd together to generate a result set.",
        "items": {
          "$ref": "#/definitions/CriteriaGroup"
        },
        "type": "array"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "CrossPlatformCallMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/CrossPlatformPolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/CallMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "CrossPlatformChatMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/CrossPlatformPolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/ChatMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "CrossPlatformEmailMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/CrossPlatformPolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/EmailMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "CrossPlatformMediaPolicies": {
    "properties": {
      "callPolicy": {
        "$ref": "#/definitions/CrossPlatformCallMediaPolicy",
        "description": "Conditions and actions for calls"
      },
      "chatPolicy": {
        "$ref": "#/definitions/CrossPlatformChatMediaPolicy",
        "description": "Conditions and actions for chats"
      },
      "emailPolicy": {
        "$ref": "#/definitions/CrossPlatformEmailMediaPolicy",
        "description": "Conditions and actions for emails"
      },
      "messagePolicy": {
        "$ref": "#/definitions/CrossPlatformMessageMediaPolicy",
        "description": "Conditions and actions for messages"
      }
    },
    "type": "object"
  },
  "CrossPlatformMessageMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/CrossPlatformPolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/MessageMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "CrossPlatformPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/CrossPlatformPolicyActions",
        "description": "Actions"
      },
      "conditions": {
        "$ref": "#/definitions/PolicyConditions",
        "description": "Conditions"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "enabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaPolicies": {
        "$ref": "#/definitions/CrossPlatformMediaPolicies",
        "description": "Conditions and actions per media type"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "order": {
        "format": "int32",
        "type": "integer"
      },
      "policyErrors": {
        "$ref": "#/definitions/PolicyErrors"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "CrossPlatformPolicyActions": {
    "properties": {
      "alwaysDelete": {
        "description": "true to delete the recording associated with the conversation regardless of the values of retainRecording or deleteRecording. Default = false",
        "type": "boolean"
      },
      "assignCalibrations": {
        "items": {
          "$ref": "#/definitions/CalibrationAssignment"
        },
        "type": "array"
      },
      "assignEvaluations": {
        "items": {
          "$ref": "#/definitions/EvaluationAssignment"
        },
        "type": "array"
      },
      "assignMeteredAssignmentByAgent": {
        "items": {
          "$ref": "#/definitions/MeteredAssignmentByAgent"
        },
        "type": "array"
      },
      "assignMeteredEvaluations": {
        "items": {
          "$ref": "#/definitions/MeteredEvaluationAssignment"
        },
        "type": "array"
      },
      "deleteRecording": {
        "description": "true to delete the recording associated with the conversation. If retainRecording = true, this will be ignored. Default = false",
        "type": "boolean"
      },
      "integrationExport": {
        "$ref": "#/definitions/IntegrationExport",
        "description": "Policy action for exporting recordings using an integration to 3rd party s3."
      },
      "mediaTranscriptions": {
        "items": {
          "$ref": "#/definitions/MediaTranscription"
        },
        "type": "array"
      },
      "retainRecording": {
        "description": "true to retain the recording associated with the conversation. Default = true",
        "type": "boolean"
      },
      "retentionDuration": {
        "$ref": "#/definitions/RetentionDuration"
      }
    },
    "type": "object"
  },
  "CrossPlatformPolicyCreate": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/CrossPlatformPolicyActions",
        "description": "Actions"
      },
      "conditions": {
        "$ref": "#/definitions/PolicyConditions",
        "description": "Conditions"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "enabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaPolicies": {
        "$ref": "#/definitions/CrossPlatformMediaPolicies",
        "description": "Conditions and actions per media type"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The policy name.",
        "type": "string"
      },
      "order": {
        "format": "int32",
        "type": "integer"
      },
      "policyErrors": {
        "$ref": "#/definitions/PolicyErrors"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "CrossPlatformPolicyUpdate": {
    "properties": {
      "enabled": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "CtaButtonStyleProperties": {
    "properties": {
      "backgroundColor": {
        "description": "Background color of the CTA button. (eg. #FF0000)",
        "type": "string"
      },
      "color": {
        "description": "Color of the text. (eg. #FFFFFF)",
        "type": "string"
      },
      "font": {
        "description": "Font of the text. (eg. Helvetica)",
        "type": "string"
      },
      "fontSize": {
        "description": "Font size of the text. (eg. '12')",
        "type": "string"
      },
      "textAlign": {
        "description": "Text alignment.",
        "enum": [
          "Left",
          "Right",
          "Center"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "CurrentUserScheduleRequestBody": {
    "properties": {
      "endDate": {
        "description": "End of the range of schedules to fetch, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "loadFullWeeks": {
        "description": "Whether to load the full week's schedule (for the current user) of any week overlapping the start/end date query parameters, defaults to false",
        "type": "boolean"
      },
      "startDate": {
        "description": "Beginning of the range of schedules to fetch, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "endDate",
      "startDate"
    ],
    "type": "object"
  },
  "CurrentUserTimeOffIntegrationStatusRequest": {
    "properties": {
      "timeOffRequestIds": {
        "description": "A list of time off request IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "timeOffRequestIds"
    ],
    "type": "object"
  },
  "CursorContactListing": {
    "properties": {
      "cursors": {
        "$ref": "#/definitions/Cursors",
        "description": "The cursor that points to the next set of entities being returned."
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalContact"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CursorNoteListing": {
    "properties": {
      "cursors": {
        "$ref": "#/definitions/Cursors",
        "description": "The cursor that points to the next set of entities being returned."
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/Note"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CursorOrganizationListing": {
    "properties": {
      "cursors": {
        "$ref": "#/definitions/Cursors",
        "description": "The cursor that points to the next set of entities being returned."
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalOrganization"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CursorRelationshipListing": {
    "properties": {
      "cursors": {
        "$ref": "#/definitions/Cursors",
        "description": "The cursor that points to the next set of entities being returned."
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/Relationship"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Cursors": {
    "properties": {
      "after": {
        "type": "string"
      },
      "before": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CustomEventAttribute": {
    "properties": {
      "dataType": {
        "description": "The data type of the custom attribute.",
        "type": "string"
      },
      "value": {
        "description": "The value of the custom attribute.",
        "type": "string"
      }
    },
    "required": [
      "dataType",
      "value"
    ],
    "type": "object"
  },
  "CustomEventAttributeList": {
    "properties": {
      "dataType": {
        "description": "The data type of the custom attributes.",
        "type": "string"
      },
      "values": {
        "description": "The list of custom event attribute values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "dataType",
      "values"
    ],
    "type": "object"
  },
  "CustomI18nLabels": {
    "description": "The localization settings for homescreen",
    "properties": {
      "language": {
        "description": "Language of localized labels in homescreen app (eg. en-us, de-de)",
        "type": "string"
      },
      "localizedLabels": {
        "description": "Contains localized labels used in homescreen app",
        "items": {
          "$ref": "#/definitions/LocalizedLabels"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "CustomProvider": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "endpointCompression": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "logoImageData": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "nameIdentifierFormat": {
        "enum": [
          "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:entity",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
        ],
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "signAuthnRequests": {
        "type": "boolean"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoBinding": {
        "enum": [
          "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
          "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"
        ],
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "CustomerInteractionCenter": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DID": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "didPool": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A Uri reference to the owner of this DID, which is either a User or an IVR"
      },
      "ownerType": {
        "enum": [
          "USER",
          "PHONE",
          "IVR_CONFIG",
          "GROUP"
        ],
        "type": "string"
      },
      "phoneNumber": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DIDEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DID"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DIDNumber": {
    "description": "Represents an unassigned or assigned DID in a DID Pool.",
    "properties": {
      "assigned": {
        "description": "True if this DID is assigned to an entity.  False otherwise.",
        "type": "boolean"
      },
      "didPool": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A Uri reference to the DID Pool this DID is a part of."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "number": {
        "description": "The number of the DID formatted as E164.",
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A Uri reference to the owner of this DID.  The owner's type can be found in ownerType.  If the DID is unassigned, this will be NULL."
      },
      "ownerType": {
        "description": "The type of the entity that owns this DID.  If the DID is unassigned, this will be NULL.",
        "enum": [
          "USER",
          "PHONE",
          "IVR_CONFIG",
          "GROUP"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DIDNumberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DIDNumber"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DIDPool": {
    "properties": {
      "comments": {
        "type": "string"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "endPhoneNumber": {
        "description": "The ending phone number for the range of this DID pool. Must be in E.164 format",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "provider": {
        "description": "The provider for this DID pool",
        "enum": [
          "PURE_CLOUD",
          "PURE_CLOUD_VOICE"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startPhoneNumber": {
        "description": "The starting phone number for the range of this DID pool. Must be in E.164 format",
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "endPhoneNumber",
      "name",
      "startPhoneNumber"
    ],
    "type": "object"
  },
  "DIDPoolEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DIDPool"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DailyPossibleShift": {
    "properties": {
      "dayOfWeek": {
        "description": "Day of the shift",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "earliestShiftStartMinutesFromMidnight": {
        "description": "Minutes of the earliest shift start from midnight. Note that midnight is 12:00 am in the time zone specified in the timeZone field (in the top level of the response)",
        "format": "int32",
        "type": "integer"
      },
      "intervalScheduleProbabilities": {
        "description": "The percentage of being scheduled in each interval between the earliest shift start and latest shift end. Range of the values: [0, 100].",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "maximumPaidTimeMinutes": {
        "description": "Maximum paid time in minutes of this daily shift",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidTimeMinutes": {
        "description": "Minimum paid time in minutes of this daily shift",
        "format": "int32",
        "type": "integer"
      },
      "required": {
        "description": "Whether this is a required shift",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DashboardConfiguration": {
    "properties": {
      "columns": {
        "description": "The count of columns for the specific dashboard.",
        "type": "integer"
      },
      "createdBy": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The id of user who created the dashboard",
        "readOnly": true
      },
      "dashboardsSharedWith": {
        "$ref": "#/definitions/DashboardsSharedWith",
        "description": "The list of users and teams the dashboard is shared with"
      },
      "dateCreated": {
        "description": "The created date of the dashboard. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The last modified date of the dashboard. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "favorite": {
        "description": "The flag indicates if the dashboard is favorited by the user",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "layoutType": {
        "description": "The layout type of the dashboard",
        "enum": [
          "Grid",
          "Flow"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of dashboard configuration.",
        "type": "string"
      },
      "publicDashboard": {
        "description": "The flag to indicate if the dashboard is published by an user",
        "type": "boolean"
      },
      "restricted": {
        "description": "The flag to indicate if the dashboard has any restricted data for that user",
        "readOnly": true,
        "type": "boolean"
      },
      "rows": {
        "description": "The count of rows for the specific dashboard configuration.",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shared": {
        "description": "The flag to indicate if the dashboard is shared",
        "type": "boolean"
      },
      "widgets": {
        "description": "List of widgets for dashboard configuration.",
        "items": {
          "$ref": "#/definitions/Widget"
        },
        "type": "array"
      }
    },
    "required": [
      "dateCreated",
      "dateModified",
      "name",
      "widgets"
    ],
    "type": "object"
  },
  "DashboardConfigurationBulkRequest": {
    "properties": {
      "dashboardConfigurationIds": {
        "description": "The user supplied dashboard configuration ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "dashboardConfigurationIds"
    ],
    "type": "object"
  },
  "DashboardConfigurationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DashboardConfiguration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DashboardConfigurationQueryRequest": {
    "properties": {
      "dashboardConfigurationIds": {
        "description": "The user supplied dashboard configuration ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "The page number of the queried response",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of entities to return of the queried response. The max is 25",
        "format": "int32",
        "type": "integer"
      },
      "sortBy": {
        "description": "The order in which response will be sorted",
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      }
    },
    "required": [
      "dashboardConfigurationIds"
    ],
    "type": "object"
  },
  "DashboardUser": {
    "properties": {
      "dashboardCount": {
        "description": "The count of dashboards for the user",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "publicDashboardCount": {
        "description": "The count of public dashboards for the user",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the user",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DashboardUserListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DashboardUser"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DashboardsSharedWith": {
    "properties": {
      "teamIds": {
        "description": "The list of team ids to share the dashboard with",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "userIds": {
        "description": "The list of user ids to share the dashboard with",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DataActionConditionPredicate": {
    "properties": {
      "comparisonValue": {
        "description": "The value to compare against for this condition",
        "type": "string"
      },
      "inverted": {
        "description": "If true, inverts the result of evaluating this Predicate. Default is false.",
        "type": "boolean"
      },
      "outputField": {
        "description": "The name of an output field from the data action's output to use for this condition",
        "type": "string"
      },
      "outputFieldMissingResolution": {
        "description": "The result of this predicate if the requested output field is missing from the data action's result",
        "type": "boolean"
      },
      "outputOperator": {
        "description": "The operation with which to evaluate this condition",
        "enum": [
          "EQUALS",
          "LESS_THAN",
          "LESS_THAN_EQUALS",
          "GREATER_THAN",
          "GREATER_THAN_EQUALS",
          "CONTAINS",
          "BEGINS_WITH",
          "ENDS_WITH",
          "BEFORE",
          "AFTER"
        ],
        "type": "string"
      }
    },
    "required": [
      "comparisonValue",
      "inverted",
      "outputField",
      "outputFieldMissingResolution",
      "outputOperator"
    ],
    "type": "object"
  },
  "DataActionConditionSettings": {
    "properties": {
      "contactColumnToDataActionFieldMappings": {
        "description": "A list of mappings defining which contact data fields will be passed to which data action input fields.",
        "items": {
          "$ref": "#/definitions/DataActionContactColumnFieldMapping"
        },
        "type": "array"
      },
      "contactIdField": {
        "description": "The input field from the data action that the contactId will be passed into.",
        "type": "string"
      },
      "dataActionId": {
        "description": "The Data Action Id to use for this condition.",
        "type": "string"
      },
      "dataNotFoundResolution": {
        "description": "The result of this condition if the data action returns a result indicating there was no data.",
        "type": "boolean"
      },
      "predicates": {
        "description": "A list of predicates defining the comparisons to use for this condition.",
        "items": {
          "$ref": "#/definitions/DigitalDataActionConditionPredicate"
        },
        "type": "array"
      }
    },
    "required": [
      "dataActionId",
      "dataNotFoundResolution"
    ],
    "type": "object"
  },
  "DataActionContactColumnFieldMapping": {
    "properties": {
      "contactColumnName": {
        "description": "The name of a contact column whose data will be passed to the data action",
        "type": "string"
      },
      "dataActionField": {
        "description": "The name of an input field from the data action that the contact column data will be passed to",
        "type": "string"
      }
    },
    "required": [
      "contactColumnName",
      "dataActionField"
    ],
    "type": "object"
  },
  "DataAvailabilityResponse": {
    "properties": {
      "dataAvailabilityDate": {
        "description": "Date and time before which data is guaranteed to be available in the datalake. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DataSchema": {
    "properties": {
      "appliesTo": {
        "description": "One of \"CONTACT\" or \"EXTERNAL_ORGANIZATION\".  Indicates the built-in entity type to which this schema applies.",
        "items": {
          "enum": [
            "CONTACT",
            "EXTERNAL_ORGANIZATION",
            "OPEN_ACTION",
            "WORKITEM"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The URI of the user that created this schema.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date and time this schema was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "enabled": {
        "description": "The schema's enabled/disabled status. A disabled schema cannot be assigned to any other entities, but the data on those entities from the schema still exists.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the schema.  Only required if a schema is used for custom fields during external entity creation or updates.",
        "type": "string"
      },
      "jsonSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "A JSON schema defining the extension to the built-in entity type.",
        "example": "{\n    \"appliesTo\": [\n        \"CONTACT\"\n    ],\n    \"jsonSchema\": {\n        \"title\": \"Example schema\",\n        \"description\": \"Uses all of the core types for illustrative purposes\",\n        \"properties\": {\n            \"field1_text\": {\n                \"title\": \"Field 1\",\n                \"description\": \"field1\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/text\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 39\n            },\n            \"field2_longtext\": {\n                \"title\": \"Field 2\",\n                \"description\": \"field2\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/longtext\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 1000\n            },\n            \"field3_enum\": {\n                \"title\": \"Field 3\",\n                \"description\": \"Field 3\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/enum\" } ],\n                \"enum\": [\n                    \"enum1\",\n                    \"enum2\"\n                ]\n            },\n            \"field4_identifier\": {\n                \"title\": \"field4\",\n                \"description\": \"Field 4\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/identifier\" } ],\n                \"minLength\": 0,\n                \"maxLength\": 37\n            },\n            \"field5_integer\": {\n                \"title\": \"field5\",\n                \"description\": \"Field 5\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/integer\" } ],\n                \"minimum\": 1,\n                \"maximum\": 24\n            },\n            \"field6_number\": {\n                \"title\": \"field6\",\n                \"description\": \"Field 6\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/number\" } ],\n                \"minimum\": 2.7,\n                \"maximum\": 31.3\n            },\n            \"field7_date\": {\n                \"title\": \"field7\",\n                \"description\": \"Field 7\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/date\"}]\n            },\n            \"field8_datetime\": {\n                \"title\": \"field8\",\n                \"description\": \"Field 8\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/datetime\"}]\n            },\n            \"field9_checkbox\": {\n                \"title\": \"field9\",\n                \"description\": \"Field 9\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/checkbox\"}]\n            },\n            \"field10_tag\": {\n                \"title\": \"field10\",\n                \"description\": \"Field 10\",\n                \"allOf\": [ { \"$ref\": \"#/definitions/tag\" } ],\n                \"items\": {\n                    \"minLength\": 1,\n                    \"maxLength\": 20\n                },\n                \"minItems\": 0,\n                \"maxItems\": 10,\n                \"uniqueItems\": true\n            }\n        },\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\"\n    }\n}"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The schema's version, a positive integer. Required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "jsonSchema",
      "version"
    ],
    "type": "object"
  },
  "DataSchemaListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DataSchema"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DataTable": {
    "description": "Contains a metadata representation for a JSON schema stored in DataTables along with an optional field for the schema itself",
    "properties": {
      "description": {
        "description": "The description from the JSON schema (equates to the Description field on the JSON schema.)",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "schema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "the schema as stored in the system."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DataTableExportJob": {
    "description": "State information for an export job of rows from a datatable",
    "properties": {
      "countRecordsProcessed": {
        "description": "The current count of the number of records processed",
        "format": "int32",
        "type": "integer"
      },
      "dateCompleted": {
        "description": "The timestamp of when the export stopped (either successfully or unsuccessfully). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateCreated": {
        "description": "The timestamp of when the export began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "downloadURI": {
        "description": "The URL of the location at which the caller can download the export file, when available",
        "format": "uri",
        "type": "string"
      },
      "errorInformation": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Any error information, or null of the processing is not in an error state"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The PureCloud user who started the export job"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the export job",
        "enum": [
          "Processing",
          "Failed",
          "Succeeded"
        ],
        "type": "string"
      }
    },
    "required": [
      "status"
    ],
    "type": "object"
  },
  "DataTableImportEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DataTableImportJob"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DataTableImportJob": {
    "description": "State information for an import job of rows to a datatable",
    "properties": {
      "countRecordsDeleted": {
        "description": "The current count of the number of records deleted",
        "format": "int32",
        "type": "integer"
      },
      "countRecordsFailed": {
        "description": "The current count of the number of records that failed to import",
        "format": "int32",
        "type": "integer"
      },
      "countRecordsUpdated": {
        "description": "The current count of the number of records processed",
        "format": "int32",
        "type": "integer"
      },
      "dateCompleted": {
        "description": "The timestamp of when the import stopped (either successfully or unsuccessfully). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateCreated": {
        "description": "The timestamp of when the import began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInformation": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Any error information, or null of the processing is not in an error state"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importMode": {
        "description": "The indication of whether the processing should remove rows that don't appear in the import file",
        "enum": [
          "ReplaceAll",
          "Append"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The PureCloud user who started the import job"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the import job",
        "enum": [
          "WaitingForUpload",
          "Processing",
          "Failed",
          "Succeeded"
        ],
        "type": "string"
      },
      "uploadURI": {
        "description": "The URL of the location at which the caller can upload the file to be imported",
        "format": "uri",
        "type": "string"
      }
    },
    "required": [
      "status"
    ],
    "type": "object"
  },
  "DataTableRowEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DataTablesDomainEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DataTable"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DateRange": {
    "properties": {
      "endDate": {
        "description": "The inclusive end of a date range in yyyy-MM-dd format. Should be interpreted in the management unit's configured time zone.",
        "type": "string"
      },
      "startDate": {
        "description": "The inclusive start of a date range in yyyy-MM-dd format. Should be interpreted in the management unit's configured time zone.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DateRangeWithOptionalEnd": {
    "properties": {
      "endBusinessUnitDate": {
        "description": "The end date for work plan rotation or an agent, interpreted in the business unit's time zone. Null denotes open ended date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "startBusinessUnitDate": {
        "description": "The start date for work plan rotation or an agent, interpreted in the business unit's time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "startBusinessUnitDate"
    ],
    "type": "object"
  },
  "DefaultGreetingList": {
    "properties": {
      "createdBy": {
        "format": "uri",
        "type": "string"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "greetings": {
        "additionalProperties": {
          "$ref": "#/definitions/Greeting"
        },
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "format": "uri",
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/GreetingOwner"
      },
      "ownerType": {
        "enum": [
          "USER",
          "ORGANIZATION",
          "GROUP"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DefaultObjective": {
    "properties": {
      "enabled": {
        "description": "A flag for whether this objective is enabled for the related metric",
        "type": "boolean"
      },
      "evaluationFormContextIds": {
        "description": "The ids of associated evaluation form context, for Quality Evaluation Score metrics",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "initialDirection": {
        "description": "The initial direction to filter on",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "mediaTypes": {
        "description": "A list of media types for the metric",
        "items": {
          "enum": [
            "callback",
            "chat",
            "cobrowse",
            "email",
            "message",
            "screenshare",
            "unknown",
            "video",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "queues": {
        "description": "A list of queues for the metric",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "templateId": {
        "description": "The id of this objective's base template",
        "type": "string"
      },
      "topicIdsFilterType": {
        "description": "A filter type for topic Ids. It's only used for objectives with topicIds. Default filter behavior is \"or\".",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      },
      "topics": {
        "description": "A list of topic ids for detected topic metrics",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "zones": {
        "description": "Objective zone specifies min,max points and values for the associated metric",
        "items": {
          "$ref": "#/definitions/ObjectiveZone"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DeletableUserReference": {
    "properties": {
      "delete": {
        "description": "If marked true, the user will be removed an associated entity",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DeleteProgramResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "topicLinksJob": {
        "$ref": "#/definitions/AddressableEntityRef"
      }
    },
    "type": "object"
  },
  "DeleteRetention": {
    "properties": {
      "days": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Dependency": {
    "properties": {
      "deleted": {
        "type": "boolean"
      },
      "id": {
        "description": "The dependency identifier",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "stateUnknown": {
        "type": "boolean"
      },
      "type": {
        "enum": [
          "ACDLANGUAGE",
          "ACDSKILL",
          "ACDWRAPUPCODE",
          "AUDIOCONNECTORBOT",
          "BOTCONNECTORBOT",
          "BOTCONNECTORINTEGRATION",
          "BOTFLOW",
          "BRIDGEACTION",
          "COMMONMODULEFLOW",
          "COMPOSERSCRIPT",
          "CONTACTLIST",
          "DATAACTION",
          "DATATABLE",
          "DIALOGENGINEBOT",
          "DIALOGENGINEBOTVERSION",
          "DIALOGFLOWAGENT",
          "DIALOGFLOWCXAGENT",
          "DIGITALBOTFLOW",
          "EMAILROUTE",
          "EMERGENCYGROUP",
          "FLOWACTION",
          "FLOWDATATYPE",
          "FLOWMILESTONE",
          "FLOWOUTCOME",
          "GRAMMAR",
          "GROUP",
          "IMAGE",
          "INBOUNDCALLFLOW",
          "INBOUNDCHATFLOW",
          "INBOUNDEMAILFLOW",
          "INBOUNDSHORTMESSAGEFLOW",
          "INQUEUECALLFLOW",
          "INQUEUEEMAILFLOW",
          "INQUEUESHORTMESSAGEFLOW",
          "IVRCONFIGURATION",
          "KNOWLEDGEBASE",
          "KNOWLEDGEBASEDOCUMENT",
          "LANGUAGE",
          "LEXBOT",
          "LEXBOTALIAS",
          "LEXV2BOT",
          "LEXV2BOTALIAS",
          "NLUDOMAIN",
          "NUANCEMIXBOT",
          "NUANCEMIXINTEGRATION",
          "OAUTHCLIENT",
          "OUTBOUNDCALLFLOW",
          "QUEUE",
          "RECORDINGPOLICY",
          "RESPONSE",
          "SCHEDULE",
          "SCHEDULEGROUP",
          "SECUREACTION",
          "SECURECALLFLOW",
          "STTENGINE",
          "SURVEYFORM",
          "SURVEYINVITEFLOW",
          "SYSTEMPROMPT",
          "TTSENGINE",
          "TTSVOICE",
          "USER",
          "USERPROMPT",
          "UTILIZATIONLABEL",
          "VOICEFLOW",
          "VOICEMAILFLOW",
          "VOICESURVEYFLOW",
          "WIDGET",
          "WORKFLOW",
          "WORKITEMFLOW",
          "WORKTYPE"
        ],
        "type": "string"
      },
      "updated": {
        "type": "boolean"
      },
      "version": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DependencyObject": {
    "properties": {
      "consumedResources": {
        "items": {
          "$ref": "#/definitions/Dependency"
        },
        "type": "array"
      },
      "consumingResources": {
        "items": {
          "$ref": "#/definitions/Dependency"
        },
        "type": "array"
      },
      "deleted": {
        "type": "boolean"
      },
      "id": {
        "description": "The dependency identifier",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "stateUnknown": {
        "type": "boolean"
      },
      "type": {
        "enum": [
          "ACDLANGUAGE",
          "ACDSKILL",
          "ACDWRAPUPCODE",
          "AUDIOCONNECTORBOT",
          "BOTCONNECTORBOT",
          "BOTCONNECTORINTEGRATION",
          "BOTFLOW",
          "BRIDGEACTION",
          "COMMONMODULEFLOW",
          "COMPOSERSCRIPT",
          "CONTACTLIST",
          "DATAACTION",
          "DATATABLE",
          "DIALOGENGINEBOT",
          "DIALOGENGINEBOTVERSION",
          "DIALOGFLOWAGENT",
          "DIALOGFLOWCXAGENT",
          "DIGITALBOTFLOW",
          "EMAILROUTE",
          "EMERGENCYGROUP",
          "FLOWACTION",
          "FLOWDATATYPE",
          "FLOWMILESTONE",
          "FLOWOUTCOME",
          "GRAMMAR",
          "GROUP",
          "IMAGE",
          "INBOUNDCALLFLOW",
          "INBOUNDCHATFLOW",
          "INBOUNDEMAILFLOW",
          "INBOUNDSHORTMESSAGEFLOW",
          "INQUEUECALLFLOW",
          "INQUEUEEMAILFLOW",
          "INQUEUESHORTMESSAGEFLOW",
          "IVRCONFIGURATION",
          "KNOWLEDGEBASE",
          "KNOWLEDGEBASEDOCUMENT",
          "LANGUAGE",
          "LEXBOT",
          "LEXBOTALIAS",
          "LEXV2BOT",
          "LEXV2BOTALIAS",
          "NLUDOMAIN",
          "NUANCEMIXBOT",
          "NUANCEMIXINTEGRATION",
          "OAUTHCLIENT",
          "OUTBOUNDCALLFLOW",
          "QUEUE",
          "RECORDINGPOLICY",
          "RESPONSE",
          "SCHEDULE",
          "SCHEDULEGROUP",
          "SECUREACTION",
          "SECURECALLFLOW",
          "STTENGINE",
          "SURVEYFORM",
          "SURVEYINVITEFLOW",
          "SYSTEMPROMPT",
          "TTSENGINE",
          "TTSVOICE",
          "USER",
          "USERPROMPT",
          "UTILIZATIONLABEL",
          "VOICEFLOW",
          "VOICEMAILFLOW",
          "VOICESURVEYFLOW",
          "WIDGET",
          "WORKFLOW",
          "WORKITEMFLOW",
          "WORKTYPE"
        ],
        "type": "string"
      },
      "updated": {
        "type": "boolean"
      },
      "version": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DependencyObjectEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DependencyObject"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DependencyStatus": {
    "properties": {
      "buildId": {
        "type": "string"
      },
      "client": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "OAuth client that initiated the build."
      },
      "dateCompleted": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStarted": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "failedObjects": {
        "items": {
          "$ref": "#/definitions/FailedObject"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "BUILDINITIALIZING",
          "BUILDINPROGRESS",
          "NOTBUILT",
          "OPERATIONAL",
          "OPERATIONALNEEDSREBUILD"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "User that initiated the build."
      }
    },
    "type": "object"
  },
  "DependencyType": {
    "properties": {
      "id": {
        "description": "The dependency type identifier",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "versioned": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DependencyTypeEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DependencyType"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DeploymentPing": {
    "properties": {
      "actions": {
        "description": "Collection of actions to be offered or displayed to the visitor.",
        "items": {
          "$ref": "#/definitions/DeploymentWebAction"
        },
        "type": "array"
      },
      "pollIntervalMilliseconds": {
        "description": "Custom poll interval in milliseconds; when the return value is -1, disable pings.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DeploymentWebAction": {
    "properties": {
      "actionMapId": {
        "description": "ID of the action map that triggered the action.",
        "type": "string"
      },
      "actionMapVersion": {
        "description": "Version of the action map that triggered the action.",
        "format": "int32",
        "type": "integer"
      },
      "contentOfferProperties": {
        "$ref": "#/definitions/ContentOffer",
        "description": "Content offer specific properties."
      },
      "customerId": {
        "description": "ID string of the customer that the action was triggered for.",
        "type": "string"
      },
      "customerIdType": {
        "description": "Type of the customer ID that the action was triggered for.",
        "type": "string"
      },
      "id": {
        "description": "System-generated UUID for the action.",
        "type": "string"
      },
      "mediaType": {
        "description": "Action media type used to deliver the action.",
        "enum": [
          "webchat",
          "webMessagingOffer",
          "contentOffer",
          "integrationAction",
          "architectFlow",
          "openAction"
        ],
        "type": "string"
      },
      "openActionProperties": {
        "$ref": "#/definitions/OpenActionProperties",
        "description": "Open action specific properties."
      },
      "sessionId": {
        "description": "ID of the session that the action was triggered for.",
        "type": "string"
      },
      "webMessagingOfferProperties": {
        "$ref": "#/definitions/WebMessagingOfferProperties",
        "description": "Web messaging offer specific properties."
      }
    },
    "required": [
      "actionMapId",
      "actionMapVersion",
      "id",
      "mediaType",
      "sessionId"
    ],
    "type": "object"
  },
  "Destination": {
    "properties": {
      "address": {
        "description": "Address or phone number.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "queueId": {
        "type": "string"
      },
      "userId": {
        "type": "string"
      }
    },
    "required": [
      "address"
    ],
    "type": "object"
  },
  "Detail": {
    "properties": {
      "entityId": {
        "type": "string"
      },
      "entityName": {
        "type": "string"
      },
      "errorCode": {
        "type": "string"
      },
      "fieldName": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DetectedDialogAct": {
    "properties": {
      "name": {
        "description": "The name of the detected dialog act.",
        "readOnly": true,
        "type": "string"
      },
      "probability": {
        "description": "The probability of the detected dialog act.",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "DetectedIntent": {
    "properties": {
      "entities": {
        "description": "The collection of named entities detected.",
        "items": {
          "$ref": "#/definitions/DetectedNamedEntity"
        },
        "readOnly": true,
        "type": "array"
      },
      "name": {
        "description": "The name of the detected intent.",
        "readOnly": true,
        "type": "string"
      },
      "probability": {
        "description": "The probability of the detected intent.",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "DetectedNamedEntity": {
    "properties": {
      "entityType": {
        "description": "The type of the detected named entity.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the detected named entity.",
        "readOnly": true,
        "type": "string"
      },
      "probability": {
        "description": "The probability of the detected named entity.",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "value": {
        "$ref": "#/definitions/DetectedNamedEntityValue",
        "description": "The value of the detected named entity.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "DetectedNamedEntityValue": {
    "properties": {
      "raw": {
        "description": "The raw value of the detected named entity.",
        "readOnly": true,
        "type": "string"
      },
      "resolved": {
        "description": "The resolved value of the detected named entity.",
        "readOnly": true,
        "type": "string"
      },
      "unit": {
        "allowEmptyValue": true,
        "description": "The unit of the detected amount of money entity, e.g. EUR, USD.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DevelopmentActivity": {
    "description": "Development Activity object",
    "properties": {
      "archivalMode": {
        "description": "Module archive type",
        "enum": [
          "Graceful",
          "Immediate"
        ],
        "type": "string"
      },
      "attendees": {
        "description": "List of users attending the activity",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "position": 7,
        "type": "array"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "User that created activity",
        "readOnly": true
      },
      "dateCompleted": {
        "description": "Date that activity was completed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "Date activity was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateDue": {
        "description": "Due date for completion of the activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "position": 5,
        "type": "string"
      },
      "facilitator": {
        "$ref": "#/definitions/UserReference",
        "description": "Facilitator of the activity",
        "position": 6
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isLatest": {
        "description": "True if this is the latest version of assignment assigned to the user",
        "type": "boolean"
      },
      "isModuleArchived": {
        "description": "True if the associated module is archived",
        "type": "boolean"
      },
      "isOverdue": {
        "description": "Indicates if the activity is overdue",
        "position": 8,
        "type": "boolean"
      },
      "isPassed": {
        "description": "True if the activity was passed",
        "readOnly": true,
        "type": "boolean"
      },
      "name": {
        "description": "The name of the activity",
        "position": 2,
        "type": "string"
      },
      "percentageScore": {
        "description": "The user's percentage score for this activity",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the activity",
        "enum": [
          "Planned",
          "InProgress",
          "Completed",
          "InvalidSchedule",
          "NotCompleted"
        ],
        "position": 4,
        "type": "string"
      },
      "type": {
        "description": "The type of activity",
        "enum": [
          "Informational",
          "Coaching",
          "AssessedContent",
          "Assessment",
          "External",
          "Native"
        ],
        "position": 3,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DevelopmentActivityAggregateParam": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/DevelopmentActivityAggregateQueryRequestFilter",
        "description": "The filter applied to the data. This is ANDed with the interval parameter."
      },
      "groupBy": {
        "description": "Specifies if the aggregated data is combined into a single set of metrics (groupBy is empty or not specified), or contains an element per attendeeId (groupBy is \"attendeeId\")",
        "items": {
          "enum": [
            "attendeeId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Specifies the range of due dates to be used for filtering. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "The list of metrics to be returned. If omitted, all metrics are returned.",
        "items": {
          "enum": [
            "nActivities",
            "nPlannedActivities",
            "nInProgressActivities",
            "nCompleteActivities",
            "nOverdueActivities",
            "nInvalidScheduleActivities",
            "nPassedActivities",
            "nFailedActivities",
            "oActivityScore",
            "nNotCompletedActivities"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "filter",
      "interval"
    ],
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryRequestClause": {
    "properties": {
      "predicates": {
        "description": "The list of predicates used to filter the data",
        "items": {
          "$ref": "#/definitions/DevelopmentActivityAggregateQueryRequestPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "The logic used to combine the predicates",
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryRequestFilter": {
    "properties": {
      "clauses": {
        "description": "The list of clauses used to filter the data. Note that clauses must filter by attendeeId and a maximum of 100 user IDs are allowed",
        "items": {
          "$ref": "#/definitions/DevelopmentActivityAggregateQueryRequestClause"
        },
        "type": "array"
      },
      "type": {
        "description": "The logic used to combine the clauses",
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      }
    },
    "required": [
      "clauses",
      "type"
    ],
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryRequestPredicate": {
    "properties": {
      "dimension": {
        "description": "Each predicates specifies a dimension.",
        "enum": [
          "attendeeId",
          "type",
          "moduleId",
          "isPassed"
        ],
        "type": "string"
      },
      "value": {
        "description": "Corresponding value for dimensions in predicates. If the dimension is type, Valid Values: Informational (deprecated), AssessedContent (deprecated), Assessment (deprecated), Coaching, External, Native",
        "type": "string"
      }
    },
    "required": [
      "dimension",
      "value"
    ],
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryResponseData": {
    "properties": {
      "interval": {
        "description": "Specifies the range of due dates to be used for filtering. A maximum of 1 year can be specified in the range. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "The list of aggregated metrics",
        "items": {
          "$ref": "#/definitions/DevelopmentActivityAggregateQueryResponseMetric"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryResponseGroupedData": {
    "properties": {
      "data": {
        "description": "The metrics in this group",
        "items": {
          "$ref": "#/definitions/DevelopmentActivityAggregateQueryResponseData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The group values for this data",
        "type": "object"
      }
    },
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryResponseMetric": {
    "properties": {
      "metric": {
        "description": "The metric this applies to",
        "enum": [
          "nActivities",
          "nPlannedActivities",
          "nInProgressActivities",
          "nCompleteActivities",
          "nOverdueActivities",
          "nInvalidScheduleActivities",
          "nPassedActivities",
          "nFailedActivities",
          "oActivityScore",
          "nNotCompletedActivities"
        ],
        "type": "string"
      },
      "stats": {
        "$ref": "#/definitions/DevelopmentActivityAggregateQueryResponseStatistics",
        "description": "The aggregated values for this metric"
      }
    },
    "type": "object"
  },
  "DevelopmentActivityAggregateQueryResponseStatistics": {
    "properties": {
      "count": {
        "description": "The count for this metric",
        "format": "int32",
        "type": "integer"
      },
      "max": {
        "description": "The maximum value in this metric",
        "type": "number"
      },
      "min": {
        "description": "The minimum value in this metric",
        "type": "number"
      },
      "sum": {
        "description": "The total of the values for this metric",
        "type": "number"
      }
    },
    "type": "object"
  },
  "DevelopmentActivityAggregateResponse": {
    "properties": {
      "results": {
        "description": "The results of the query",
        "items": {
          "$ref": "#/definitions/DevelopmentActivityAggregateQueryResponseGroupedData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DevelopmentActivityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DevelopmentActivity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Device": {
    "properties": {
      "category": {
        "description": "Device category.",
        "enum": [
          "desktop",
          "mobile",
          "tablet",
          "other"
        ],
        "type": "string"
      },
      "fingerprint": {
        "description": "Fingerprint generated by looking at the individual device features.",
        "type": "string"
      },
      "isMobile": {
        "description": "Flag that is true for mobile devices.",
        "type": "boolean"
      },
      "manufacturer": {
        "description": "Manufacturer of the device.",
        "type": "string"
      },
      "osFamily": {
        "description": "Operating system family.",
        "type": "string"
      },
      "osVersion": {
        "description": "Operating system version.",
        "type": "string"
      },
      "screenDensity": {
        "description": "Device's screen density, measured as a scale factor where a value of 1 represents a baseline 1:1 ratio of pixels to logical (device-independent) pixels.",
        "format": "int32",
        "type": "integer"
      },
      "screenHeight": {
        "description": "Device's screen height.",
        "format": "int32",
        "type": "integer"
      },
      "screenWidth": {
        "description": "Device's screen width.",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Device type (e.g. iPad, iPhone, Other).",
        "type": "string"
      }
    },
    "required": [
      "category",
      "isMobile",
      "osFamily",
      "osVersion",
      "type"
    ],
    "type": "object"
  },
  "DialerAction": {
    "properties": {
      "actionTypeName": {
        "description": "Additional type specification for this DialerAction.",
        "enum": [
          "DO_NOT_DIAL",
          "MODIFY_CONTACT_ATTRIBUTE",
          "SWITCH_TO_PREVIEW",
          "APPEND_NUMBER_TO_DNC_LIST",
          "APPEND_CUSTOM_ENTRY_TO_DNC_LIST",
          "SCHEDULE_CALLBACK",
          "CONTACT_UNCALLABLE",
          "NUMBER_UNCALLABLE",
          "SET_CALLER_ID",
          "SET_SKILLS",
          "DATA_ACTION"
        ],
        "type": "string"
      },
      "agentWrapupField": {
        "description": "The input field from the data action that the agentWrapup will be passed to for this condition. Valid for a wrapup dataActionBehavior.",
        "type": "string"
      },
      "callAnalysisResultField": {
        "description": "The input field from the data action that the callAnalysisResult will be passed to for this condition. Valid for a wrapup dataActionBehavior.",
        "type": "string"
      },
      "contactColumnToDataActionFieldMappings": {
        "description": "A list of mappings defining which contact data fields will be passed to which data action input fields for this condition. Valid for a dataActionBehavior.",
        "items": {
          "$ref": "#/definitions/ContactColumnToDataActionFieldMapping"
        },
        "type": "array"
      },
      "contactIdField": {
        "description": "The input field from the data action that the contactId will be passed to for this condition. Valid for a dataActionBehavior.",
        "type": "string"
      },
      "dataAction": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Data Action to use for this action. Required for a dataActionBehavior."
      },
      "properties": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A map of key-value pairs pertinent to the DialerAction. Different types of DialerActions require different properties. MODIFY_CONTACT_ATTRIBUTE with an updateOption of SET takes a contact column as the key and accepts any value. SCHEDULE_CALLBACK takes a key 'callbackOffset' that specifies how far in the future the callback should be scheduled, in minutes. SET_CALLER_ID takes two keys: 'callerAddress', which should be the caller id phone number, and 'callerName'. For either key, you can also specify a column on the contact to get the value from. To do this, specify 'contact.Column', where 'Column' is the name of the contact column from which to get the value. SET_SKILLS takes a key 'skills' with an array of skill ids wrapped into a string (Example: {'skills': '['skillIdHere']'} ).",
        "type": "object"
      },
      "type": {
        "description": "The type of this DialerAction.",
        "enum": [
          "Action",
          "modifyContactAttribute",
          "dataActionBehavior"
        ],
        "type": "string"
      },
      "updateOption": {
        "description": "Specifies how a contact attribute should be updated. Required for MODIFY_CONTACT_ATTRIBUTE.",
        "enum": [
          "SET",
          "INCREMENT",
          "DECREMENT",
          "CURRENT_TIME"
        ],
        "type": "string"
      }
    },
    "required": [
      "actionTypeName",
      "type"
    ],
    "type": "object"
  },
  "DialerContact": {
    "properties": {
      "callRecords": {
        "additionalProperties": {
          "$ref": "#/definitions/CallRecord"
        },
        "description": "A map of call records for the contact phone columns.",
        "readOnly": true,
        "type": "object"
      },
      "callable": {
        "description": "Indicates whether or not the contact can be called.",
        "type": "boolean"
      },
      "configurationOverrides": {
        "$ref": "#/definitions/ConfigurationOverrides",
        "description": "the priority property within ConfigurationOverides indicates whether or not the contact to be placed in front of the queue or at the end of the queue",
        "readOnly": true
      },
      "contactColumnTimeZones": {
        "additionalProperties": {
          "$ref": "#/definitions/ContactColumnTimeZone"
        },
        "description": "Map containing data about the timezone the contact is mapped to. This will only be populated if the contact list has automatic timezone mapping turned on. The key is the column name. The value is the timezone it mapped to and the type of column: Phone or Zip",
        "readOnly": true,
        "type": "object"
      },
      "contactListId": {
        "description": "The identifier of the contact list containing this contact.",
        "type": "string"
      },
      "contactableStatus": {
        "additionalProperties": {
          "$ref": "#/definitions/ContactableStatus"
        },
        "description": "A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using the specified media type.",
        "type": "object"
      },
      "data": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "An ordered map of the contact's columns and corresponding values.",
        "example": "{ 'firstname': 'name', 'surname': 'name2', 'phone': '123456789'}",
        "type": "object"
      },
      "dateCreated": {
        "description": "Timestamp for when the contact was added. Contacts added prior to 2023 September 1 may be missing this value. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "latestEmailEvaluations": {
        "additionalProperties": {
          "$ref": "#/definitions/MessageEvaluation"
        },
        "description": "A map of email records for the contact email columns.",
        "readOnly": true,
        "type": "object"
      },
      "latestSmsEvaluations": {
        "additionalProperties": {
          "$ref": "#/definitions/MessageEvaluation"
        },
        "description": "A map of SMS records for the contact phone columns.",
        "readOnly": true,
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "phoneNumberStatus": {
        "additionalProperties": {
          "$ref": "#/definitions/PhoneNumberStatus"
        },
        "description": "A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.",
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contactListId",
      "data"
    ],
    "type": "object"
  },
  "DialerContactId": {
    "properties": {
      "contactListId": {
        "type": "string"
      },
      "id": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialerEventEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EventLog"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DialerPreview": {
    "properties": {
      "callbackAutoAnswer": {
        "description": "Whether or not to auto answer the callback",
        "type": "boolean"
      },
      "campaignId": {
        "description": "The campaignId associated with this preview data pop.",
        "type": "string"
      },
      "contactId": {
        "description": "The contact associated with this preview data pop",
        "type": "string"
      },
      "contactListId": {
        "description": "The contactList associated with this preview data pop.",
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "phoneNumberColumns": {
        "description": "The phone number columns associated with this campaign",
        "items": {
          "$ref": "#/definitions/PhoneNumberColumn"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DialerRule": {
    "properties": {
      "actions": {
        "description": "The list of actions to be taken if the conditions are true.",
        "items": {
          "$ref": "#/definitions/DialerAction"
        },
        "type": "array"
      },
      "category": {
        "description": "The category of the rule.",
        "enum": [
          "DIALER_PRECALL",
          "DIALER_WRAPUP"
        ],
        "type": "string"
      },
      "conditions": {
        "description": "A list of Conditions. All of the Conditions must evaluate to true to trigger the actions.",
        "items": {
          "$ref": "#/definitions/Condition"
        },
        "type": "array"
      },
      "id": {
        "description": "The identifier of the rule.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the rule.",
        "type": "string"
      },
      "order": {
        "description": "The ranked order of the rule. Rules are processed from lowest number to highest.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "category",
      "conditions",
      "name"
    ],
    "type": "object"
  },
  "DialogflowAgent": {
    "properties": {
      "environments": {
        "description": "Available environments for this agent",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Integration this Dialogflow agent was referenced from."
      },
      "intents": {
        "description": "An array of Intents associated with this agent",
        "items": {
          "$ref": "#/definitions/DialogflowIntent"
        },
        "type": "array"
      },
      "languages": {
        "description": "The supported languages of the Dialogflow agent",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "project": {
        "$ref": "#/definitions/DialogflowProject",
        "description": "The project this Dialogflow agent belongs to"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialogflowAgentSummary": {
    "properties": {
      "description": {
        "description": "A description of the Dialogflow agent.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Integration this Dialogflow agent was referenced from."
      },
      "name": {
        "type": "string"
      },
      "project": {
        "$ref": "#/definitions/DialogflowProject",
        "description": "The project this Dialogflow agent belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialogflowAgentSummaryEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DialogflowAgentSummary"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DialogflowCXAgent": {
    "properties": {
      "environments": {
        "description": "Available environments for this CX agent.",
        "items": {
          "$ref": "#/definitions/DialogflowCXEnvironment"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Integration this Dialogflow CX agent was referenced from."
      },
      "languages": {
        "description": "The supported languages of the Dialogflow CX agent.  Each value will be a language code in the country-locale format. e.g. en-us, es-us, fr-ca, etc.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "project": {
        "$ref": "#/definitions/DialogflowCXProject",
        "description": "The project this Dialogflow CX agent belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialogflowCXAgentSummary": {
    "properties": {
      "description": {
        "description": "A description of the Dialogflow CX agent.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Integration this Dialogflow CX agent was referenced from."
      },
      "name": {
        "type": "string"
      },
      "project": {
        "$ref": "#/definitions/DialogflowCXProject",
        "description": "The project this Dialogflow CX agent belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialogflowCXAgentSummaryEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DialogflowCXAgentSummary"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DialogflowCXEnvironment": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialogflowCXProject": {
    "properties": {
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DialogflowIntent": {
    "properties": {
      "name": {
        "description": "The intent name",
        "type": "string"
      },
      "parameters": {
        "additionalProperties": {
          "$ref": "#/definitions/DialogflowParameter"
        },
        "description": "An object mapping parameter names to Parameter objects",
        "type": "object"
      }
    },
    "required": [
      "name",
      "parameters"
    ],
    "type": "object"
  },
  "DialogflowParameter": {
    "properties": {
      "name": {
        "description": "The parameter name",
        "type": "string"
      },
      "type": {
        "description": "The parameter type",
        "type": "string"
      }
    },
    "required": [
      "name",
      "type"
    ],
    "type": "object"
  },
  "DialogflowProject": {
    "properties": {
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DictionaryFeedback": {
    "properties": {
      "boostValue": {
        "description": "A weighted value assigned to a phrase. The higher the value, the higher the likelihood that the system will choose the word or phrase from the possible alternatives. Boost range is from 1.0 to 10.0. Default is 2.0",
        "format": "float",
        "type": "number"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The Id of the user who created the dictionary feedback",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The Timestamp when dictionary feedback created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The Timestamp when dictionary feedback modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dialect": {
        "description": "The dialect for the given term, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard",
        "example": "en-US",
        "type": "string"
      },
      "examplePhrases": {
        "description": "A list of at least 3 and up to 20 unique phrases that are example usage of the term",
        "items": {
          "$ref": "#/definitions/DictionaryFeedbackExamplePhrase"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The Id of the user who modified the dictionary feedback",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "soundsLike": {
        "description": "A list of up to 10 terms that give examples of how the term sounds",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "source": {
        "description": "The source of the given dictionary feedback",
        "enum": [
          "Manual"
        ],
        "readOnly": true,
        "type": "string"
      },
      "term": {
        "description": "The dictionary term which needs to be added to dictionary feedback system",
        "type": "string"
      }
    },
    "required": [
      "dialect",
      "examplePhrases",
      "term"
    ],
    "type": "object"
  },
  "DictionaryFeedbackEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ListedDictionaryFeedback"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "type": "string"
      },
      "total": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DictionaryFeedbackExamplePhrase": {
    "properties": {
      "phrase": {
        "description": "The Example Phrase text. At least 3 words and up to 20 words",
        "type": "string"
      },
      "source": {
        "description": "The source of the given Example Phrase",
        "enum": [
          "Manual"
        ],
        "type": "string"
      }
    },
    "required": [
      "phrase"
    ],
    "type": "object"
  },
  "DigitLength": {
    "properties": {
      "end": {
        "type": "string"
      },
      "start": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DigitalAction": {
    "properties": {
      "appendToDncActionSettings": {
        "$ref": "#/definitions/AppendToDncActionSettings",
        "description": "The settings for an 'Append to DNC' action."
      },
      "doNotSendActionSettings": {
        "$ref": "#/definitions/DoNotSendActionSettings",
        "description": "The settings for a 'do not send' action."
      },
      "markContactAddressUncontactableActionSettings": {
        "$ref": "#/definitions/MarkContactAddressUncontactableActionSettings",
        "description": "The settings for an 'mark contact address uncontactable' action."
      },
      "markContactUncontactableActionSettings": {
        "$ref": "#/definitions/MarkContactUncontactableActionSettings",
        "description": "The settings for a 'mark contact uncontactable' action."
      },
      "setContentTemplateActionSettings": {
        "$ref": "#/definitions/SetContentTemplateActionSettings",
        "description": "The settings for a 'Set content template' action."
      },
      "setSmsPhoneNumberActionSettings": {
        "$ref": "#/definitions/SetSmsPhoneNumberActionSettings",
        "description": "The settings for a 'set sms phone number' action."
      },
      "updateContactColumnActionSettings": {
        "$ref": "#/definitions/UpdateContactColumnActionSettings",
        "description": "The settings for an 'update contact column' action."
      }
    },
    "type": "object"
  },
  "DigitalCondition": {
    "properties": {
      "contactAddressConditionSettings": {
        "$ref": "#/definitions/ContactAddressConditionSettings",
        "description": "The settings for a 'contact address' condition."
      },
      "contactAddressTypeConditionSettings": {
        "$ref": "#/definitions/ContactAddressTypeConditionSettings",
        "description": "The settings for a 'contact address type' condition."
      },
      "contactColumnConditionSettings": {
        "$ref": "#/definitions/ContactColumnConditionSettings",
        "description": "The settings for a 'contact list column' condition."
      },
      "dataActionConditionSettings": {
        "$ref": "#/definitions/DataActionConditionSettings",
        "description": "The settings for a 'data action' condition."
      },
      "inverted": {
        "description": "If true, inverts the result of evaluating this condition. Default is false.",
        "type": "boolean"
      },
      "lastAttemptByColumnConditionSettings": {
        "$ref": "#/definitions/LastAttemptByColumnConditionSettings",
        "description": "The settings for a 'last attempt by column' condition."
      },
      "lastAttemptOverallConditionSettings": {
        "$ref": "#/definitions/LastAttemptOverallConditionSettings",
        "description": "The settings for a 'last attempt overall' condition."
      },
      "lastResultByColumnConditionSettings": {
        "$ref": "#/definitions/LastResultByColumnConditionSettings",
        "description": "The settings for a 'last result by column' condition."
      },
      "lastResultOverallConditionSettings": {
        "$ref": "#/definitions/LastResultOverallConditionSettings",
        "description": "The settings for a 'last result overall' condition."
      }
    },
    "type": "object"
  },
  "DigitalDataActionConditionPredicate": {
    "properties": {
      "comparisonValue": {
        "description": "The value to compare against for this condition",
        "type": "string"
      },
      "inverted": {
        "description": "If true, inverts the result of evaluating this Predicate. Default is false.",
        "type": "boolean"
      },
      "outputField": {
        "description": "The name of an output field from the data action's output to use for this condition",
        "type": "string"
      },
      "outputFieldMissingResolution": {
        "description": "The result of this predicate if the requested output field is missing from the data action's result",
        "type": "boolean"
      },
      "outputOperator": {
        "description": "The operation with which to evaluate this condition",
        "enum": [
          "Equals",
          "LessThan",
          "LessThanEquals",
          "GreaterThan",
          "GreaterThanEquals",
          "Contains",
          "BeginsWith",
          "EndsWith",
          "Before",
          "After"
        ],
        "type": "string"
      }
    },
    "required": [
      "comparisonValue",
      "inverted",
      "outputField",
      "outputFieldMissingResolution",
      "outputOperator"
    ],
    "type": "object"
  },
  "DigitalRule": {
    "properties": {
      "actions": {
        "description": "The list of actions to be taken if all conditions are true.",
        "items": {
          "$ref": "#/definitions/DigitalAction"
        },
        "type": "array"
      },
      "category": {
        "description": "The category of the rule.",
        "enum": [
          "PreContact",
          "PostContact"
        ],
        "type": "string"
      },
      "conditions": {
        "description": "A list of conditions to evaluate. All of the Conditions must evaluate to true to trigger the actions.",
        "items": {
          "$ref": "#/definitions/DigitalCondition"
        },
        "type": "array"
      },
      "id": {
        "description": "The identifier of the rule.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the rule.",
        "type": "string"
      },
      "order": {
        "description": "The ranked order of the rule. Rules are processed from lowest number to highest.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "actions",
      "category",
      "conditions",
      "name",
      "order"
    ],
    "type": "object"
  },
  "DigitalRuleSet": {
    "properties": {
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A ContactList to provide suggestions for contact columns on relevant conditions and actions."
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "rules": {
        "description": "The list of rules.",
        "items": {
          "$ref": "#/definitions/DigitalRule"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "rules"
    ],
    "type": "object"
  },
  "DigitalRuleSetEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DigitalRuleSet"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Digits": {
    "properties": {
      "digits": {
        "description": "A string representing the digits pressed on phone.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DirectRouting": {
    "properties": {
      "agentWaitSeconds": {
        "description": "Time (in seconds) that a Direct Routing interaction will wait for Direct Routing agent before going to selected backup. Valid range [60, 864000].",
        "format": "int32",
        "type": "integer"
      },
      "backupQueueId": {
        "description": "ID of another queue to be used as the default backup if an agent does not have their Backup Settings configured. If not set, the current queue will be used as backup, but with Direct Routing criteria removed from the conversation.",
        "type": "string"
      },
      "callMediaSettings": {
        "$ref": "#/definitions/DirectRoutingMediaSettings",
        "description": "Direct Routing Settings specific to Call media."
      },
      "emailMediaSettings": {
        "$ref": "#/definitions/DirectRoutingMediaSettings",
        "description": "Direct Routing Settings specific to Email media."
      },
      "messageMediaSettings": {
        "$ref": "#/definitions/DirectRoutingMediaSettings",
        "description": "Direct Routing Settings specific to Message media."
      },
      "waitForAgent": {
        "description": "Flag indicating if Direct Routing interactions should wait for Direct Routing agent or go immediately to selected backup.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DirectRoutingMediaSettings": {
    "properties": {
      "useAgentAddressOutbound": {
        "description": "Toggle that enables using an agent's Direct Routing address outbound on behalf of queue for this media type.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DirectoryUserDevicesListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserDevice"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DisableSiteConnectionsRequest": {
    "properties": {
      "enabled": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DisallowedEntityLearningAssignmentItem": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/LearningAssignmentItem",
        "description": "The entity that was disallowed"
      },
      "errorCode": {
        "description": "The error code associated with this disallowed entity",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DisallowedEntityLearningAssignmentReference": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/LearningAssignmentReference",
        "description": "The entity that was disallowed"
      },
      "errorCode": {
        "description": "The error code associated with this disallowed entity",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DisconnectReason": {
    "properties": {
      "code": {
        "description": "Protocol specific reason code. See the Q.850 and SIP specs.",
        "format": "int32",
        "type": "integer"
      },
      "phrase": {
        "description": "Human readable English description of the disconnect reason.",
        "type": "string"
      },
      "type": {
        "description": "Disconnect reason protocol type.",
        "enum": [
          "q850",
          "sip"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Disposition": {
    "properties": {
      "analyzer": {
        "description": "The final media analyzer result that triggered the disposition result, if any.",
        "type": "string"
      },
      "detectedSpeechEnd": {
        "description": "Absolute time when the speech ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "detectedSpeechStart": {
        "description": "Absolute time when the speech started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dispositionParameters": {
        "$ref": "#/definitions/DispositionParameters",
        "description": "Contains various parameters related to call analysis."
      },
      "name": {
        "description": "Name of the disposition. Either a platform predefined value, or the name of the disposition in the disposition table..",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DispositionParameters": {
    "properties": {
      "adjustableLiveSpeakerDetection": {
        "$ref": "#/definitions/AdjustableLiveSpeakerDetection",
        "description": "ALSD evaluation inputs and output (isPersonalLikely) of the ALSD detector the last time it ran on the call (could be multiple times)"
      }
    },
    "type": "object"
  },
  "Division": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DivisionReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DivsPermittedEntityListing": {
    "properties": {
      "allDivsPermitted": {
        "type": "boolean"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/AuthzDivision"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DncList": {
    "properties": {
      "campaignId": {
        "description": "A dnc.com campaignId. Optional if the dncSourceType is dnc.com.",
        "type": "string"
      },
      "contactMethod": {
        "description": "The contact method. Required if dncSourceType is rds.",
        "enum": [
          "Email",
          "Phone",
          "Any"
        ],
        "type": "string"
      },
      "customExclusionColumn": {
        "description": "The column to evaluate exclusion against. Required if the dncSourceType is rds_custom.",
        "type": "string"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The division this DncList belongs to."
      },
      "dncCodes": {
        "description": "The list of dnc.com codes to be treated as DNC. Required if the dncSourceType is dnc.com.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "dncSourceType": {
        "description": "The type of the DncList.",
        "enum": [
          "rds",
          "rds_custom",
          "dnc.com",
          "gryphon"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importStatus": {
        "$ref": "#/definitions/ImportStatus",
        "description": "The status of the import process",
        "readOnly": true
      },
      "licenseId": {
        "description": "A gryphon license number. Required if the dncSourceType is gryphon.",
        "type": "string"
      },
      "loginId": {
        "description": "A dnc.com loginId. Required if the dncSourceType is dnc.com.",
        "type": "string"
      },
      "name": {
        "description": "The name of the DncList.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "size": {
        "description": "The total number of phone numbers in the DncList.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "dncSourceType",
      "name"
    ],
    "type": "object"
  },
  "DncListCreate": {
    "properties": {
      "campaignId": {
        "description": "A dnc.com campaignId. Optional if the dncSourceType is dnc.com.",
        "type": "string"
      },
      "contactMethod": {
        "description": "The contact method. Required if dncSourceType is rds.",
        "enum": [
          "Email",
          "Phone",
          "Any"
        ],
        "type": "string"
      },
      "customExclusionColumn": {
        "description": "The column to evaluate exclusion against. Required if the dncSourceType is rds_custom.",
        "type": "string"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The division this DncList belongs to."
      },
      "dncCodes": {
        "description": "The list of dnc.com codes to be treated as DNC. Required if the dncSourceType is dnc.com.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "dncSourceType": {
        "description": "The type of the DncList.",
        "enum": [
          "rds",
          "rds_custom",
          "dnc.com",
          "gryphon"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importStatus": {
        "$ref": "#/definitions/ImportStatus",
        "description": "The status of the import process",
        "readOnly": true
      },
      "licenseId": {
        "description": "A gryphon license number. Required if the dncSourceType is gryphon.",
        "type": "string"
      },
      "loginId": {
        "description": "A dnc.com loginId. Required if the dncSourceType is dnc.com.",
        "type": "string"
      },
      "name": {
        "description": "The name of the DncList.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "size": {
        "description": "The total number of phone numbers in the DncList.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "dncSourceType",
      "name"
    ],
    "type": "object"
  },
  "DncListDivisionView": {
    "properties": {
      "contactMethod": {
        "description": "The contact method. Required if dncSourceType is rds.",
        "enum": [
          "Email",
          "Phone",
          "Any"
        ],
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "dncSourceType": {
        "description": "The type of the DncList.",
        "enum": [
          "rds",
          "rds_custom",
          "dnc.com",
          "gryphon"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importStatus": {
        "$ref": "#/definitions/ImportStatus",
        "description": "The status of the import process.",
        "readOnly": true
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "size": {
        "description": "The number of contacts in the DncList.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DncListDivisionViewListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DncListDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DncListEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DncList"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DncPatchCustomExclusionColumnsRequest": {
    "properties": {
      "action": {
        "description": "The action to perform",
        "enum": [
          "Add",
          "Remove"
        ],
        "type": "string"
      },
      "customExclusionColumnEntries": {
        "description": "The list of custom exclusion column entries to Add to / Remove from the DNC list ",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "expirationDateTime": {
        "description": "Expiration date for DNC customExclusionColumnEntries in yyyy-MM-ddTHH:mmZ format",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DncPatchEmailsRequest": {
    "properties": {
      "action": {
        "description": "The action to perform",
        "enum": [
          "Add",
          "Remove"
        ],
        "type": "string"
      },
      "emailAddresses": {
        "description": "The list of email addresses to Add to / Remove from the DNC list ",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "expirationDateTime": {
        "description": "Expiration date for DNC email addresses in yyyy-MM-ddTHH:mmZ format",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DncPatchPhoneNumbersRequest": {
    "properties": {
      "action": {
        "description": "The action to perform",
        "enum": [
          "Add",
          "Remove"
        ],
        "type": "string"
      },
      "expirationDateTime": {
        "description": "Expiration date for DNC phone numbers in yyyy-MM-ddTHH:mmZ format",
        "type": "string"
      },
      "phoneNumbers": {
        "description": "The list of phone numbers to Add to / Remove from the DNC list ",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DnsRecordEntry": {
    "properties": {
      "host": {
        "description": "the hostname of the DNS entry",
        "type": "string"
      },
      "recordContents": {
        "description": "the payload of the DNS entry",
        "type": "string"
      },
      "verificationStatus": {
        "description": "the current status of the related verification process",
        "enum": [
          "Pending",
          "Verified",
          "Failed",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DoNotSendActionSettings": {
    "type": "object"
  },
  "Document": {
    "properties": {
      "acl": {
        "description": "A list of permitted action rights for the user making the request",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "attributes": {
        "items": {
          "$ref": "#/definitions/DocumentAttribute"
        },
        "type": "array"
      },
      "callerAddress": {
        "type": "string"
      },
      "changeNumber": {
        "format": "int32",
        "type": "integer"
      },
      "contentLength": {
        "format": "int64",
        "type": "integer"
      },
      "contentType": {
        "type": "string"
      },
      "contentUri": {
        "format": "uri",
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateUploaded": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "downloadSharingUri": {
        "format": "uri",
        "type": "string"
      },
      "filename": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lockInfo": {
        "$ref": "#/definitions/LockInfo"
      },
      "name": {
        "type": "string"
      },
      "pageCount": {
        "format": "int64",
        "type": "integer"
      },
      "read": {
        "type": "boolean"
      },
      "receiverAddress": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sharingStatus": {
        "enum": [
          "NONE",
          "LIMITED",
          "PUBLIC"
        ],
        "type": "string"
      },
      "sharingUri": {
        "format": "uri",
        "type": "string"
      },
      "systemType": {
        "enum": [
          "DOCUMENT",
          "FAX",
          "RECORDING"
        ],
        "type": "string"
      },
      "tagValues": {
        "items": {
          "$ref": "#/definitions/TagValue"
        },
        "type": "array"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "thumbnails": {
        "items": {
          "$ref": "#/definitions/DocumentThumbnail"
        },
        "type": "array"
      },
      "uploadDestinationUri": {
        "format": "uri",
        "type": "string"
      },
      "uploadMethod": {
        "enum": [
          "SINGLE_PUT",
          "MULTIPART_POST"
        ],
        "type": "string"
      },
      "uploadStatus": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "uploadedBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "DocumentArticle": {
    "properties": {
      "alternatives": {
        "description": "List of Alternative questions related to the title which helps in improving the likelihood of a match to user query.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "content": {
        "$ref": "#/definitions/ArticleContent",
        "description": "The content of the Article.",
        "readOnly": true
      },
      "title": {
        "description": "The title of the Article.",
        "type": "string"
      }
    },
    "required": [
      "title"
    ],
    "type": "object"
  },
  "DocumentAttribute": {
    "properties": {
      "attribute": {
        "$ref": "#/definitions/Attribute"
      },
      "values": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DocumentBody": {
    "properties": {
      "blocks": {
        "description": "The list of building blocks for the document body.",
        "items": {
          "$ref": "#/definitions/DocumentBodyBlock"
        },
        "type": "array"
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentBodyBlock": {
    "properties": {
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "list": {
        "$ref": "#/definitions/DocumentBodyList",
        "description": "List. It must contain a value if the type of the block is UnorderedList or OrderedList."
      },
      "paragraph": {
        "$ref": "#/definitions/DocumentBodyParagraph",
        "description": "Paragraph. It must contain a value if the type of the block is Paragraph."
      },
      "table": {
        "$ref": "#/definitions/DocumentBodyTable",
        "description": "Table. It must contain a value if type of the block is Table."
      },
      "type": {
        "description": "The type of the block for the body. This determines which body block object (paragraph, list, video, image or table) would have a value.",
        "enum": [
          "Paragraph",
          "Image",
          "Video",
          "OrderedList",
          "UnorderedList",
          "Table"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentBodyBlockWithHighlight": {
    "properties": {
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "list": {
        "$ref": "#/definitions/DocumentBodyList",
        "description": "List. It must contain a value if the type of the block is UnorderedList or OrderedList."
      },
      "paragraph": {
        "$ref": "#/definitions/DocumentBodyParagraphWithHighlight",
        "description": "Paragraph. It must contain a value if the type of the block is Paragraph."
      },
      "table": {
        "$ref": "#/definitions/DocumentBodyTable",
        "description": "Table. It must contain a value if type of the block is Table."
      },
      "type": {
        "description": "The type of the block for the body. This determines which body block object (paragraph, list, video, image or table) would have a value.",
        "enum": [
          "Paragraph",
          "Image",
          "Video",
          "OrderedList",
          "UnorderedList",
          "Table"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentBodyImage": {
    "properties": {
      "hyperlink": {
        "description": "The URL of the page OR an email OR the reference to the knowledge article that the hyperlink goes to. Possible URL value types are https://\u003curl link\u003e | mailto:\u003cemail\u003e | grn:knowledge:::documentVariation/\u003cknowledgeBaseId\u003e/\u003cdocumentId\u003e/\u003cvariationId\u003e | grn:knowledge:::document/\u003cknowledgeBaseId\u003e/\u003cdocumentId\u003e | grn:knowledge:::category/\u003cknowledgeBaseId\u003e/\u003ccategoryId\u003e | grn:knowledge:::label/\u003cknowledgeBaseId\u003e/\u003clabelId\u003e",
        "type": "string"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyImageProperties",
        "description": "The properties for the image."
      },
      "url": {
        "description": "The URL for the image.",
        "type": "string"
      }
    },
    "required": [
      "url"
    ],
    "type": "object"
  },
  "DocumentBodyImageProperties": {
    "properties": {
      "align": {
        "description": "The align property for the image.",
        "enum": [
          "Center",
          "Left",
          "Right",
          "Justify"
        ],
        "type": "string"
      },
      "backgroundColor": {
        "description": "The background color property for the image. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "indentation": {
        "description": "The indentation property for the image. The valid values in 'em'.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "DocumentBodyList": {
    "properties": {
      "blocks": {
        "description": "The list of items for an OrderedList or an UnorderedList.",
        "items": {
          "$ref": "#/definitions/DocumentBodyListBlock"
        },
        "type": "array"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyListBlockProperties",
        "description": "Properties for the UnorderedList or OrderedList."
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentBodyListBlock": {
    "properties": {
      "blocks": {
        "description": "The list of items for an OrderedList or an UnorderedList.",
        "items": {
          "$ref": "#/definitions/DocumentListContentBlock"
        },
        "type": "array"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyListItemProperties",
        "description": "The properties for the list block."
      },
      "type": {
        "description": "The type of the list block.",
        "enum": [
          "ListItem"
        ],
        "type": "string"
      }
    },
    "required": [
      "blocks",
      "type"
    ],
    "type": "object"
  },
  "DocumentBodyListBlockProperties": {
    "properties": {
      "orderedType": {
        "description": "The type of icon for the ordered list.",
        "enum": [
          "Number",
          "LowerAlpha",
          "LowerGreek",
          "LowerRoman",
          "UpperAlpha",
          "UpperRoman",
          "None"
        ],
        "type": "string"
      },
      "unorderedType": {
        "description": "The type of icon for the unordered list.",
        "enum": [
          "Normal",
          "Square",
          "Circle",
          "None"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentBodyListItemProperties": {
    "properties": {
      "align": {
        "description": "The align type for the list item.",
        "enum": [
          "Center",
          "Left",
          "Right",
          "Justify"
        ],
        "type": "string"
      },
      "backgroundColor": {
        "description": "The background color for the list item. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "fontSize": {
        "description": "The font size for the list item. The valid values in 'em'.",
        "enum": [
          "XxSmall",
          "XSmall",
          "Small",
          "Medium",
          "Large",
          "XLarge",
          "XxLarge",
          "XxxLarge"
        ],
        "type": "string"
      },
      "fontType": {
        "description": "The font type for the list item.",
        "enum": [
          "Paragraph",
          "Heading1",
          "Heading2",
          "Heading3",
          "Heading4",
          "Heading5",
          "Heading6",
          "Preformatted"
        ],
        "type": "string"
      },
      "indentation": {
        "description": "The indentation property for the list item. The valid values in 'em'.",
        "format": "float",
        "type": "number"
      },
      "orderedType": {
        "description": "The type of icon for the ordered list.",
        "enum": [
          "Number",
          "LowerAlpha",
          "LowerGreek",
          "LowerRoman",
          "UpperAlpha",
          "UpperRoman",
          "None"
        ],
        "type": "string"
      },
      "textColor": {
        "description": "The text color for the list item. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "unorderedType": {
        "description": "The type of icon for the unordered list.",
        "enum": [
          "Normal",
          "Square",
          "Circle",
          "None"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentBodyParagraph": {
    "properties": {
      "blocks": {
        "description": "The list of blocks for the paragraph.",
        "items": {
          "$ref": "#/definitions/DocumentContentBlock"
        },
        "type": "array"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyParagraphProperties",
        "description": "The properties for the paragraph."
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentBodyParagraphProperties": {
    "properties": {
      "align": {
        "description": "The align type for the paragraph.",
        "enum": [
          "Center",
          "Left",
          "Right",
          "Justify"
        ],
        "type": "string"
      },
      "backgroundColor": {
        "description": "The background color for the paragraph. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "fontSize": {
        "description": "The font size for the paragraph. The valid values in 'em'.",
        "enum": [
          "XxSmall",
          "XSmall",
          "Small",
          "Medium",
          "Large",
          "XLarge",
          "XxLarge",
          "XxxLarge"
        ],
        "type": "string"
      },
      "fontType": {
        "description": "The font type for the paragraph.",
        "enum": [
          "Paragraph",
          "Heading1",
          "Heading2",
          "Heading3",
          "Heading4",
          "Heading5",
          "Heading6",
          "Preformatted"
        ],
        "type": "string"
      },
      "indentation": {
        "description": "The indentation color for the paragraph. The valid values in 'em'.",
        "format": "float",
        "type": "number"
      },
      "textColor": {
        "description": "The text color for the paragraph. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentBodyParagraphWithHighlight": {
    "properties": {
      "blocks": {
        "description": "The list of blocks for the paragraph.",
        "items": {
          "$ref": "#/definitions/DocumentContentBlockWithHighlight"
        },
        "type": "array"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyParagraphProperties",
        "description": "The properties for the paragraph."
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentBodyTable": {
    "properties": {
      "properties": {
        "$ref": "#/definitions/DocumentBodyTableProperties",
        "description": "The properties for the table."
      },
      "rows": {
        "description": "The list of rows for the table.",
        "items": {
          "$ref": "#/definitions/DocumentBodyTableRowBlock"
        },
        "type": "array"
      }
    },
    "required": [
      "rows"
    ],
    "type": "object"
  },
  "DocumentBodyTableCaptionBlock": {
    "properties": {
      "blocks": {
        "description": "The list of building blocks for the caption property.",
        "items": {
          "$ref": "#/definitions/DocumentBodyTableCaptionItem"
        },
        "type": "array"
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentBodyTableCaptionItem": {
    "properties": {
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "list": {
        "$ref": "#/definitions/DocumentBodyList",
        "description": "List. It must contain a value if the type of the block is UnorderedList or OrderedList."
      },
      "paragraph": {
        "$ref": "#/definitions/DocumentBodyParagraph",
        "description": "Paragraph. It must contain a value if the type of the block is Paragraph."
      },
      "text": {
        "$ref": "#/definitions/DocumentText",
        "description": "Text. It must contain a value if the type of the block is Text."
      },
      "type": {
        "description": "The type of the caption item.",
        "enum": [
          "Text",
          "Paragraph",
          "Image",
          "Video",
          "OrderedList",
          "UnorderedList"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentBodyTableCellBlock": {
    "properties": {
      "blocks": {
        "description": "The list of content blocks for the table.",
        "items": {
          "$ref": "#/definitions/DocumentTableContentBlock"
        },
        "type": "array"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyTableCellBlockProperties",
        "description": "The properties for the table cell."
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentBodyTableCellBlockProperties": {
    "properties": {
      "backgroundColor": {
        "description": "The background color for the table cell. For example black color - #000000",
        "type": "string"
      },
      "borderColor": {
        "description": "The border color for the table cell. For example black color - #000000",
        "type": "string"
      },
      "borderStyle": {
        "description": "The border style for the table cell.",
        "enum": [
          "Solid",
          "Dotted",
          "Dashed",
          "Double",
          "Groove",
          "Ridge",
          "Inset",
          "Outset",
          "Hidden",
          "None"
        ],
        "type": "string"
      },
      "borderWidth": {
        "description": "The border width for the table cell. The valid values in 'em'",
        "format": "float",
        "type": "number"
      },
      "cellType": {
        "description": "The type of the table cell.",
        "enum": [
          "Cell",
          "HeaderCell"
        ],
        "type": "string"
      },
      "colSpan": {
        "description": "The colSpan for the table cell.",
        "format": "int32",
        "type": "integer"
      },
      "height": {
        "description": "The height for the table cell.",
        "format": "float",
        "type": "number"
      },
      "horizontalAlign": {
        "description": "The horizontal alignment for the table cell.",
        "enum": [
          "Center",
          "Left",
          "Right"
        ],
        "type": "string"
      },
      "rowSpan": {
        "description": "The rowSpan for the table cell.",
        "format": "int32",
        "type": "integer"
      },
      "scope": {
        "description": "The scope for the table cell.",
        "enum": [
          "Row",
          "Column",
          "RowGroup",
          "ColumnGroup",
          "None"
        ],
        "type": "string"
      },
      "verticalAlign": {
        "description": "The vertical alignment for the table cell.",
        "enum": [
          "Top",
          "Middle",
          "Bottom"
        ],
        "type": "string"
      },
      "width": {
        "description": "The width of the table cell converted to em unit.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "DocumentBodyTableProperties": {
    "properties": {
      "alignment": {
        "description": "The alignment for the table.",
        "enum": [
          "Center",
          "Left",
          "Right"
        ],
        "type": "string"
      },
      "backgroundColor": {
        "description": "The background color for the table. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "borderColor": {
        "description": "The border color for the table. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "borderStyle": {
        "description": "The border style for the table.",
        "enum": [
          "Solid",
          "Dotted",
          "Dashed",
          "Double",
          "Groove",
          "Ridge",
          "Inset",
          "Outset",
          "Hidden",
          "None"
        ],
        "type": "string"
      },
      "borderWidth": {
        "description": "The border width for the table. The valid values in 'em'",
        "format": "float",
        "type": "number"
      },
      "caption": {
        "$ref": "#/definitions/DocumentBodyTableCaptionBlock",
        "description": "The caption for the table. The valid values in hex color code representation. For example black color - #000000"
      },
      "cellPadding": {
        "description": "The cell padding for the table. The valid values in 'em'.",
        "format": "float",
        "type": "number"
      },
      "cellSpacing": {
        "description": "The cell spacing for the table. The valid values in 'em'.",
        "format": "float",
        "type": "number"
      },
      "height": {
        "description": "The height for the table.",
        "format": "float",
        "type": "number"
      },
      "width": {
        "description": "The width of the table converted to em unit.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "DocumentBodyTableRowBlock": {
    "properties": {
      "cells": {
        "description": "The list of cells for the table.",
        "items": {
          "$ref": "#/definitions/DocumentBodyTableCellBlock"
        },
        "type": "array"
      },
      "properties": {
        "$ref": "#/definitions/DocumentBodyTableRowBlockProperties",
        "description": "The properties for the table rows."
      }
    },
    "required": [
      "cells"
    ],
    "type": "object"
  },
  "DocumentBodyTableRowBlockProperties": {
    "properties": {
      "alignment": {
        "description": "The alignment for the table row.",
        "enum": [
          "Center",
          "Left",
          "Right"
        ],
        "type": "string"
      },
      "backgroundColor": {
        "description": "The background color for the table row. For example black color - #000000",
        "type": "string"
      },
      "borderColor": {
        "description": "The border color for the table row. For example black color - #000000",
        "type": "string"
      },
      "borderStyle": {
        "description": "The border style for the table row.",
        "enum": [
          "Solid",
          "Dotted",
          "Dashed",
          "Double",
          "Groove",
          "Ridge",
          "Inset",
          "Outset",
          "Hidden",
          "None"
        ],
        "type": "string"
      },
      "height": {
        "description": "The height for the table row.",
        "format": "float",
        "type": "number"
      },
      "rowType": {
        "description": "The type of the table row.",
        "enum": [
          "Header",
          "Footer",
          "Body"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentBodyVideo": {
    "properties": {
      "properties": {
        "$ref": "#/definitions/DocumentBodyVideoProperties",
        "description": "The properties for the video."
      },
      "url": {
        "description": "The URL for the video.",
        "type": "string"
      }
    },
    "required": [
      "url"
    ],
    "type": "object"
  },
  "DocumentBodyVideoProperties": {
    "properties": {
      "align": {
        "description": "The align type for the video.",
        "enum": [
          "Center",
          "Left",
          "Right",
          "Justify"
        ],
        "type": "string"
      },
      "backgroundColor": {
        "description": "The background color for the video. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "indentation": {
        "description": "The indentation for the video. The valid values in 'em'.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "DocumentBodyWithHighlight": {
    "properties": {
      "blocks": {
        "description": "The list of building blocks for the document body.",
        "items": {
          "$ref": "#/definitions/DocumentBodyBlockWithHighlight"
        },
        "type": "array"
      }
    },
    "required": [
      "blocks"
    ],
    "type": "object"
  },
  "DocumentCategoryInput": {
    "properties": {
      "id": {
        "description": "KnowledgeBase Category ID",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "DocumentContentBlock": {
    "properties": {
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "text": {
        "$ref": "#/definitions/DocumentText",
        "description": "Text. It must contain a value if the type of the block is Text."
      },
      "type": {
        "description": "The type of the paragraph block.",
        "enum": [
          "Text",
          "Image",
          "Video"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentContentBlockWithHighlight": {
    "properties": {
      "answerHighlight": {
        "$ref": "#/definitions/DocumentContentHighlightIndex",
        "description": "The block highlight data."
      },
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "text": {
        "$ref": "#/definitions/DocumentText",
        "description": "Text. It must contain a value if the type of the block is Text."
      },
      "type": {
        "description": "The type of the paragraph block.",
        "enum": [
          "Text",
          "Image",
          "Video"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentContentHighlightIndex": {
    "properties": {
      "endIndex": {
        "description": "Highlight text end index.",
        "format": "int32",
        "type": "integer"
      },
      "startIndex": {
        "description": "Highlight text start index.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DocumentElementLength": {
    "properties": {
      "unit": {
        "description": "The unit of length.",
        "enum": [
          "Em",
          "Percentage",
          "Px"
        ],
        "type": "string"
      },
      "value": {
        "description": "The length value of the element in the selected unit.",
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "unit",
      "value"
    ],
    "type": "object"
  },
  "DocumentEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Document"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DocumentFaq": {
    "properties": {
      "alternatives": {
        "description": "List of Alternative questions related to the answer which helps in improving the likelihood of a match to user query",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "answer": {
        "description": "The answer for this FAQ",
        "type": "string"
      },
      "question": {
        "description": "The question for this FAQ",
        "type": "string"
      }
    },
    "required": [
      "answer",
      "question"
    ],
    "type": "object"
  },
  "DocumentListContentBlock": {
    "properties": {
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "list": {
        "$ref": "#/definitions/DocumentBodyList",
        "description": "List. It must contain a value if the type of the block is UnorderedList or OrderedList."
      },
      "text": {
        "$ref": "#/definitions/DocumentText",
        "description": "Text. It must contain a value if the type of the block is Text."
      },
      "type": {
        "description": "The type of the list block.",
        "enum": [
          "Text",
          "Image",
          "OrderedList",
          "UnorderedList",
          "Video"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeDocument"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentQuery": {
    "properties": {
      "clauses": {
        "description": "Documents filter clauses/criteria. Limit of 20 clauses.",
        "items": {
          "$ref": "#/definitions/DocumentQueryClause"
        },
        "type": "array"
      },
      "operator": {
        "description": "Specifies how the filter clauses will be applied together.",
        "enum": [
          "Or",
          "And"
        ],
        "type": "string"
      }
    },
    "required": [
      "clauses",
      "operator"
    ],
    "type": "object"
  },
  "DocumentQueryClause": {
    "properties": {
      "operator": {
        "description": "Specifies how the predicates will be applied together.",
        "enum": [
          "Or",
          "And"
        ],
        "type": "string"
      },
      "predicates": {
        "description": "To apply multiple conditions. Limit of 10 predicates across all clauses.",
        "items": {
          "$ref": "#/definitions/DocumentQueryPredicate"
        },
        "type": "array"
      }
    },
    "required": [
      "operator",
      "predicates"
    ],
    "type": "object"
  },
  "DocumentQueryInterval": {
    "properties": {
      "field": {
        "description": "Specifies the date field to be used for date and time range.",
        "enum": [
          "dateCreated",
          "dateModified",
          "datePublished"
        ],
        "type": "string"
      },
      "value": {
        "description": "Specifies the date and time range for filtering the documents. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentQueryPredicate": {
    "properties": {
      "fields": {
        "description": "Specifies the document fields to be matched against.",
        "items": {
          "enum": [
            "alternatives",
            "categoryId",
            "categoryName",
            "contextId",
            "contextName",
            "contextValueId",
            "contextValueName",
            "documentId",
            "labelId",
            "labelName",
            "title",
            "variationId",
            "visible",
            "state"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "type": {
        "description": "Specifies the matching criteria between the fields and values.",
        "enum": [
          "Equals",
          "NotEquals",
          "Contains",
          "MatchAll",
          "MatchAny"
        ],
        "type": "string"
      },
      "values": {
        "description": "Specifies the values of the fields to be matched against.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "fields",
      "type",
      "values"
    ],
    "type": "object"
  },
  "DocumentReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentTableContentBlock": {
    "properties": {
      "image": {
        "$ref": "#/definitions/DocumentBodyImage",
        "description": "Image. It must contain a value if the type of the block is Image."
      },
      "list": {
        "$ref": "#/definitions/DocumentBodyList",
        "description": "List. It must contain a value if the type of the block is UnorderedList or OrderedList."
      },
      "paragraph": {
        "$ref": "#/definitions/DocumentBodyParagraph",
        "description": "Paragraph. It must contain a value if the type of the block is Paragraph."
      },
      "table": {
        "$ref": "#/definitions/DocumentBodyTable",
        "description": "Table. It must contain a value if the type of the block is Table."
      },
      "text": {
        "$ref": "#/definitions/DocumentText",
        "description": "Text. It must contain a value if the type of the block is Text."
      },
      "type": {
        "description": "The type of the block for the table cell. This determines which body block object (paragraph, list, video, image or table) would have a value.",
        "enum": [
          "Paragraph",
          "Text",
          "Image",
          "Video",
          "OrderedList",
          "UnorderedList",
          "Table"
        ],
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/DocumentBodyVideo",
        "description": "Video. It must contain a value if the type of the block is Video."
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentText": {
    "properties": {
      "hyperlink": {
        "description": "The URL of the page OR an email OR the reference to the knowledge article that the hyperlink goes to. Possible URL value types are https://\u003curl link\u003e | mailto:\u003cemail\u003e | grn:knowledge:::documentVariation/\u003cknowledgeBaseId\u003e/\u003cdocumentId\u003e/\u003cvariationId\u003e | grn:knowledge:::document/\u003cknowledgeBaseId\u003e/\u003cdocumentId\u003e | grn:knowledge:::category/\u003cknowledgeBaseId\u003e/\u003ccategoryId\u003e | grn:knowledge:::label/\u003cknowledgeBaseId\u003e/\u003clabelId\u003e",
        "type": "string"
      },
      "marks": {
        "description": "The unique list of marks (whether it is bold and/or underlined etc.) for the text.",
        "items": {
          "enum": [
            "Bold",
            "Italic",
            "Underline",
            "Strikethrough",
            "Subscript",
            "Superscript"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "properties": {
        "$ref": "#/definitions/DocumentTextProperties",
        "description": "The properties for the text."
      },
      "text": {
        "description": "Text.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "DocumentTextProperties": {
    "properties": {
      "backgroundColor": {
        "description": "The background color for the text. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      },
      "fontSize": {
        "description": "The font size for the text. The valid values in 'em'.",
        "enum": [
          "XxSmall",
          "XSmall",
          "Small",
          "Medium",
          "Large",
          "XLarge",
          "XxLarge",
          "XxxLarge"
        ],
        "type": "string"
      },
      "textColor": {
        "description": "The text color for the text. The valid values in hex color code representation. For example black color - #000000",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentThumbnail": {
    "properties": {
      "height": {
        "format": "int32",
        "type": "integer"
      },
      "imageUri": {
        "type": "string"
      },
      "resolution": {
        "type": "string"
      },
      "width": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DocumentUpdate": {
    "properties": {
      "addTagIds": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "addTags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "changeNumber": {
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The name of the document",
        "type": "string"
      },
      "read": {
        "type": "boolean"
      },
      "removeAttributes": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "removeTagIds": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "removeTags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "updateAttributes": {
        "items": {
          "$ref": "#/definitions/DocumentAttribute"
        },
        "type": "array"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DocumentUpload": {
    "properties": {
      "name": {
        "description": "The name of the document",
        "type": "string"
      },
      "tagIds": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The workspace the document will be uploaded to"
      }
    },
    "required": [
      "name",
      "workspace"
    ],
    "type": "object"
  },
  "DocumentVariation": {
    "properties": {
      "body": {
        "$ref": "#/definitions/DocumentBody",
        "description": "The content for the variation."
      },
      "contexts": {
        "description": "The context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/DocumentVariationContext"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeDocumentReference",
        "description": "The reference to document to which the variation is associated.",
        "readOnly": true
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "id": {
        "description": "The globally unique identifier for the variation.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the variation.",
        "type": "string"
      },
      "priority": {
        "description": "The priority of the variation.",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contexts"
    ],
    "type": "object"
  },
  "DocumentVariationAnswer": {
    "properties": {
      "body": {
        "$ref": "#/definitions/DocumentBodyWithHighlight",
        "description": "The content for the variation."
      },
      "contexts": {
        "description": "The context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/DocumentVariationContext"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeDocumentReference",
        "description": "The reference to document to which the variation is associated.",
        "readOnly": true
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "id": {
        "description": "The globally unique identifier for the variation.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the variation.",
        "type": "string"
      },
      "priority": {
        "description": "The priority of the variation.",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contexts"
    ],
    "type": "object"
  },
  "DocumentVariationContext": {
    "properties": {
      "context": {
        "$ref": "#/definitions/KnowledgeContextReference",
        "description": "The knowledge context associated with the variation."
      },
      "values": {
        "description": "The list of knowledge context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/KnowledgeContextValueReference"
        },
        "type": "array"
      }
    },
    "required": [
      "context",
      "values"
    ],
    "type": "object"
  },
  "DocumentVariationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DocumentVariation"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentationResult": {
    "properties": {
      "categories": {
        "description": "The category of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "content": {
        "description": "The text or html content for the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "description": {
        "description": "The description of the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "excerpt": {
        "description": "The excerpt of the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "facet_feature": {
        "description": "The facet feature of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "facet_role": {
        "description": "The facet role of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "facet_service": {
        "description": "The facet service of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "faq_categories": {
        "description": "The faq categories of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "get_type": {
        "description": "The search type. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "format": "int32",
        "type": "integer"
      },
      "link": {
        "description": "URL link for the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "modified": {
        "description": "The modified date for the documentation entity. Will be returned in responses for certain entities. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The name of the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "releasenote_category": {
        "description": "The releasenote category of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "releasenote_tag": {
        "description": "The releasenote tag of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "service": {
        "description": "The service of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "service-area": {
        "description": "The service area of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "slug": {
        "description": "The slug of the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "title": {
        "description": "The title of the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "video_categories": {
        "description": "The video categories of the documentation entity. Will be returned in responses for certain entities.",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "DocumentationSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "title",
            "content"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/DocumentationSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "STARTS_WITH",
          "CONTAINS",
          "TERM",
          "TERMS",
          "MATCH_ALL",
          "SIMPLE",
          "QUERY_STRING",
          "MULTI_MATCH"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "DocumentationSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/DocumentationSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DocumentationSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/DocumentationResult"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "DomainCapabilities": {
    "properties": {
      "autoMetric": {
        "description": "True if the metric is being calculated automatically for the address family on this interface.",
        "type": "boolean"
      },
      "dhcp": {
        "description": "True if this address family on the interface is using DHCP.",
        "type": "boolean"
      },
      "enabled": {
        "description": "True if this address family on the interface is enabled.",
        "type": "boolean"
      },
      "metric": {
        "description": "The metric being used for the address family on this interface. Lower values will have a higher priority. If autoMetric is true, this value will be the automatically calculated metric. To set this value be sure autoMetric is false. If no value is returned, metric configuration is not supported on this Edge.",
        "format": "int32",
        "type": "integer"
      },
      "pingEnabled": {
        "description": "Set to true to enable this address family on this interface to respond to ping requests.",
        "type": "boolean"
      },
      "supportsMetric": {
        "description": "True if metric configuration is supported.",
        "readOnly": true,
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DomainCertificateAuthority": {
    "description": "A certificate authority represents an organization that has issued a digital certificate for making secure connections with an edge device.",
    "properties": {
      "certificate": {
        "description": "The authorities signed X509 PEM encoded certificate.",
        "type": "string"
      },
      "certificateDetails": {
        "description": "The details of the parsed certificate(s).",
        "items": {
          "$ref": "#/definitions/CertificateDetails"
        },
        "type": "array"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "services": {
        "description": "The service(s) that the authority can be used to authenticate.",
        "items": {
          "enum": [
            "SIP",
            "PROVISION",
            "PROVISION_PHONE"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The certificate authorities type.  Managed certificate authorities are generated and maintained by Interactive Intelligence.  These are read-only and not modifiable by clients.  Remote authorities are customer managed.",
        "enum": [
          "MANAGED",
          "REMOTE"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "certificate",
      "name",
      "services",
      "type"
    ],
    "type": "object"
  },
  "DomainEdgeSoftwareUpdateDto": {
    "properties": {
      "callDrainingWaitTimeSeconds": {
        "format": "int64",
        "type": "integer"
      },
      "current": {
        "type": "boolean"
      },
      "downloadStartTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "edgeUri": {
        "format": "uri",
        "type": "string"
      },
      "executeOnIdle": {
        "type": "boolean"
      },
      "executeStartTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "executeStopTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "maxDownloadRate": {
        "format": "int32",
        "type": "integer"
      },
      "status": {
        "enum": [
          "NONE",
          "INIT",
          "IN_PROGRESS",
          "EXPIRED",
          "EXCEPTION",
          "ABORTED",
          "FAILED",
          "SUCCEEDED",
          "DELETE"
        ],
        "type": "string"
      },
      "version": {
        "$ref": "#/definitions/DomainEdgeSoftwareVersionDto",
        "description": "Version"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "DomainEdgeSoftwareVersionDto": {
    "properties": {
      "current": {
        "type": "boolean"
      },
      "edgeUri": {
        "format": "uri",
        "type": "string"
      },
      "edgeVersion": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "latestRelease": {
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "publishDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainEdgeSoftwareVersionDtoEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainEdgeSoftwareVersionDto"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DomainEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainEntity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DomainEntityListingEvaluationForm": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EvaluationForm"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DomainEntityListingQueryResult": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/QueryResult"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DomainEntityListingSurveyForm": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SurveyForm"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DomainEntityRef": {
    "properties": {
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainLogicalInterface": {
    "properties": {
      "addresses": {
        "description": "The list of IP addresses on this interface.  Priority of dns addresses are based on order in the list.",
        "items": {
          "$ref": "#/definitions/DomainNetworkAddress"
        },
        "type": "array"
      },
      "commandResponses": {
        "items": {
          "$ref": "#/definitions/DomainNetworkCommandResponse"
        },
        "type": "array"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "currentState": {
        "enum": [
          "INIT",
          "CREATING",
          "UPDATING",
          "OK",
          "EXCEPTION",
          "DELETING"
        ],
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edgeAssignedId": {
        "type": "string"
      },
      "edgeUri": {
        "format": "uri",
        "type": "string"
      },
      "endDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalTrunkBaseAssignments": {
        "description": "External trunk base settings to use for external communication from this interface.",
        "items": {
          "$ref": "#/definitions/TrunkBaseAssignment"
        },
        "type": "array"
      },
      "friendlyName": {
        "description": "Friendly Name",
        "type": "string"
      },
      "hardwareAddress": {
        "description": "Hardware Address",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "ifStatus": {
        "type": "string"
      },
      "inheritPhoneTrunkBasesIPv4": {
        "description": "The IPv4 phone trunk base assignment will be inherited from the Edge Group.",
        "type": "boolean"
      },
      "inheritPhoneTrunkBasesIPv6": {
        "description": "The IPv6 phone trunk base assignment will be inherited from the Edge Group.",
        "type": "boolean"
      },
      "interfaceType": {
        "description": "The type of this network interface.",
        "enum": [
          "DIAGNOSTIC",
          "SYSTEM"
        ],
        "readOnly": true,
        "type": "string"
      },
      "ipv4Capabilities": {
        "$ref": "#/definitions/DomainCapabilities",
        "description": "IPv4 interface settings."
      },
      "ipv6Capabilities": {
        "$ref": "#/definitions/DomainCapabilities",
        "description": "IPv6 interface settings."
      },
      "lastModifiedCorrelationId": {
        "type": "string"
      },
      "lastModifiedUserId": {
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "phoneTrunkBaseAssignments": {
        "description": "Phone trunk base settings to use for phone communication from this interface.  These settings will be ignored when \"inheritPhoneTrunkBases\" is true.",
        "items": {
          "$ref": "#/definitions/TrunkBaseAssignment"
        },
        "type": "array"
      },
      "physicalAdapterId": {
        "description": "Physical Adapter Id",
        "type": "string"
      },
      "publicNatAddressIpV4": {
        "description": "IPv4 NENT IP Address",
        "type": "string"
      },
      "publicNatAddressIpV6": {
        "description": "IPv6 NENT IP Address",
        "type": "string"
      },
      "routes": {
        "description": "The list of routes assigned to this interface.",
        "items": {
          "$ref": "#/definitions/DomainNetworkRoute"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "traceEnabled": {
        "type": "boolean"
      },
      "useForCloudProxyEdgeCommunication": {
        "description": "Site Interconnects using the \"Cloud Proxy\" method will broker the connection between them with a Cloud Proxy. This method is required for connections between one or more Sites using Cloud Media, but can optionally be used between two premises Sites if Direct or Indirect are not an option.",
        "type": "boolean"
      },
      "useForIndirectEdgeCommunication": {
        "description": "Site Interconnects using the \"Indirect\" method will communicate using the Public IP Address specified on the interface. Use this option when a NAT enabled firewall is between the Edge and the far end.",
        "type": "boolean"
      },
      "useForInternalEdgeCommunication": {
        "description": "This interface will be used for all internal edge-to-edge communication using settings from the edgeTrunkBaseAssignment on the Edge Group.",
        "type": "boolean"
      },
      "useForWanInterface": {
        "description": "This interface will be used for all communication with the internet.",
        "readOnly": true,
        "type": "boolean"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      },
      "vlanTagId": {
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "friendlyName",
      "hardwareAddress",
      "name",
      "physicalAdapterId"
    ],
    "type": "object"
  },
  "DomainNetworkAddress": {
    "properties": {
      "address": {
        "description": "An IPv4 or IPv6 IP address. When specifying an address of type \"ip\", use CIDR format for the subnet mask.",
        "type": "string"
      },
      "family": {
        "description": "The address family for this address.",
        "enum": [
          2,
          23
        ],
        "format": "int32",
        "type": "integer"
      },
      "persistent": {
        "description": "True if this address will persist on Edge restart.  Addresses assigned by DHCP will be returned as false.",
        "type": "boolean"
      },
      "type": {
        "description": "The type of address.",
        "enum": [
          "ip",
          "dns",
          "gateway",
          "tdm"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainNetworkCommandResponse": {
    "properties": {
      "acknowledged": {
        "type": "boolean"
      },
      "commandName": {
        "type": "string"
      },
      "correlationId": {
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorDetails"
      }
    },
    "type": "object"
  },
  "DomainNetworkRoute": {
    "properties": {
      "family": {
        "description": "The address family for this route.",
        "enum": [
          2,
          23
        ],
        "format": "int32",
        "type": "integer"
      },
      "metric": {
        "description": "The metric being used for route. Lower values will have a higher priority.",
        "format": "int32",
        "type": "integer"
      },
      "nexthop": {
        "description": "The IPv4 or IPv6 nexthop IP address.",
        "type": "string"
      },
      "persistent": {
        "description": "True if this route will persist on Edge restart.  Routes assigned by DHCP will be returned as false.",
        "type": "boolean"
      },
      "prefix": {
        "description": "The IPv4 or IPv6 route prefix in CIDR notation.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainOrgRoleDifference": {
    "properties": {
      "addedPermissionPolicies": {
        "items": {
          "$ref": "#/definitions/DomainPermissionPolicy"
        },
        "type": "array"
      },
      "removedPermissionPolicies": {
        "items": {
          "$ref": "#/definitions/DomainPermissionPolicy"
        },
        "type": "array"
      },
      "roleFromDefault": {
        "$ref": "#/definitions/DomainOrganizationRole"
      },
      "samePermissionPolicies": {
        "items": {
          "$ref": "#/definitions/DomainPermissionPolicy"
        },
        "type": "array"
      },
      "userOrgRole": {
        "$ref": "#/definitions/DomainOrganizationRole"
      }
    },
    "type": "object"
  },
  "DomainOrganizationProduct": {
    "properties": {
      "id": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainOrganizationRole": {
    "properties": {
      "base": {
        "type": "boolean"
      },
      "default": {
        "type": "boolean"
      },
      "defaultRoleId": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "role id",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "permissionPolicies": {
        "items": {
          "$ref": "#/definitions/DomainPermissionPolicy"
        },
        "type": "array",
        "uniqueItems": true
      },
      "permissions": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "roleNeedsUpdate": {
        "description": "Optional unless patch operation.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "unusedPermissions": {
        "description": "A collection of the permissions the role is not using",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "userCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DomainOrganizationRoleCreate": {
    "properties": {
      "base": {
        "type": "boolean"
      },
      "default": {
        "type": "boolean"
      },
      "defaultRoleId": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "role id",
        "type": "string"
      },
      "name": {
        "description": "The role name",
        "type": "string"
      },
      "permissionPolicies": {
        "items": {
          "$ref": "#/definitions/DomainPermissionPolicy"
        },
        "type": "array",
        "uniqueItems": true
      },
      "permissions": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "roleNeedsUpdate": {
        "description": "Optional unless patch operation.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "unusedPermissions": {
        "description": "A collection of the permissions the role is not using",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "userCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DomainOrganizationRoleUpdate": {
    "properties": {
      "base": {
        "type": "boolean"
      },
      "default": {
        "type": "boolean"
      },
      "defaultRoleId": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "role id",
        "type": "string"
      },
      "name": {
        "description": "The name of the role",
        "type": "string"
      },
      "permissionPolicies": {
        "items": {
          "$ref": "#/definitions/DomainPermissionPolicy"
        },
        "type": "array",
        "uniqueItems": true
      },
      "permissions": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "roleNeedsUpdate": {
        "description": "Optional unless patch operation.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "unusedPermissions": {
        "description": "A collection of the permissions the role is not using",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "userCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DomainPermission": {
    "properties": {
      "action": {
        "type": "string"
      },
      "allowsConditions": {
        "type": "boolean"
      },
      "divisionAware": {
        "type": "boolean"
      },
      "domain": {
        "type": "string"
      },
      "entityType": {
        "type": "string"
      },
      "label": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainPermissionCollection": {
    "properties": {
      "domain": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "permissionMap": {
        "additionalProperties": {
          "items": {
            "$ref": "#/definitions/DomainPermission"
          },
          "type": "array"
        },
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainPermissionPolicy": {
    "properties": {
      "actionSet": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "allowConditions": {
        "type": "boolean"
      },
      "domain": {
        "type": "string"
      },
      "entityName": {
        "type": "string"
      },
      "namedResources": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "policyDescription": {
        "type": "string"
      },
      "policyName": {
        "type": "string"
      },
      "resourceConditionNode": {
        "$ref": "#/definitions/DomainResourceConditionNode"
      }
    },
    "type": "object"
  },
  "DomainPhysicalCapabilities": {
    "properties": {
      "team": {
        "type": "boolean"
      },
      "vlan": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DomainPhysicalInterface": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edgeUri": {
        "format": "uri",
        "type": "string"
      },
      "friendlyName": {
        "type": "string"
      },
      "hardwareAddress": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "physicalCapabilities": {
        "$ref": "#/definitions/DomainPhysicalCapabilities"
      },
      "portLabel": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DomainResourceConditionNode": {
    "properties": {
      "conjunction": {
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      },
      "operands": {
        "items": {
          "$ref": "#/definitions/DomainResourceConditionValue"
        },
        "type": "array"
      },
      "operator": {
        "enum": [
          "EQ",
          "IN",
          "GE",
          "GT",
          "LE",
          "LT"
        ],
        "type": "string"
      },
      "terms": {
        "items": {
          "$ref": "#/definitions/DomainResourceConditionNode"
        },
        "type": "array"
      },
      "variableName": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainResourceConditionValue": {
    "properties": {
      "queue": {
        "$ref": "#/definitions/Queue"
      },
      "type": {
        "enum": [
          "SCALAR",
          "VARIABLE",
          "USER",
          "QUEUE"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      },
      "value": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DomainRole": {
    "properties": {
      "id": {
        "description": "The ID of the role",
        "type": "string"
      },
      "name": {
        "description": "The name of the role",
        "type": "string"
      }
    },
    "type": "object"
  },
  "DownloadResponse": {
    "properties": {
      "contentLocationUri": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "imageUri": {
        "type": "string"
      },
      "resultUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      },
      "state": {
        "enum": [
          "Running",
          "Completed"
        ],
        "type": "string"
      },
      "thumbnails": {
        "items": {
          "$ref": "#/definitions/DocumentThumbnail"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Draft": {
    "properties": {
      "dateCreated": {
        "description": "Date when the draft was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-05-20T23:56:07.268",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date when the draft was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-05-20T23:56:07.268",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intents": {
        "description": "Draft intent object.",
        "items": {
          "$ref": "#/definitions/DraftIntents"
        },
        "readOnly": true,
        "type": "array"
      },
      "miner": {
        "$ref": "#/definitions/Miner",
        "description": "Miner to which the draft belongs.",
        "readOnly": true
      },
      "name": {
        "description": "Draft name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "topics": {
        "description": "Draft topic object.",
        "items": {
          "$ref": "#/definitions/DraftTopics"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "DraftIntents": {
    "properties": {
      "id": {
        "description": "Id for an intent.",
        "type": "string"
      },
      "name": {
        "description": "Name/Label for an intent.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utterances": {
        "description": "The utterances that are extracted for an Intent.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "id",
      "name",
      "utterances"
    ],
    "type": "object"
  },
  "DraftListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Draft"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "DraftManipulationRequest": {
    "properties": {
      "draftType": {
        "description": "The kind of draft that as to be treated. Used to prefix response subject or auto-include information",
        "enum": [
          "Reply",
          "ReplyAll",
          "Forward"
        ],
        "type": "string"
      },
      "translate": {
        "$ref": "#/definitions/HistoryHeadersTranslation",
        "description": "A set of definitions to translate email attributes and correctly display date and time, for a given language"
      }
    },
    "type": "object"
  },
  "DraftRequest": {
    "properties": {
      "intents": {
        "description": "Draft intent object.",
        "items": {
          "$ref": "#/definitions/DraftIntents"
        },
        "type": "array"
      },
      "topics": {
        "description": "Draft topic object.",
        "items": {
          "$ref": "#/definitions/DraftTopicRequest"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "DraftTopicRequest": {
    "properties": {
      "id": {
        "description": "Id for a topic.",
        "type": "string"
      },
      "name": {
        "description": "Name/Label for a topic.",
        "type": "string"
      },
      "phrases": {
        "description": "The phrases that are extracted for a topic.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "name",
      "phrases"
    ],
    "type": "object"
  },
  "DraftTopics": {
    "properties": {
      "conversationCount": {
        "description": "Number of conversations where a topic has occurred.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "conversationPercent": {
        "description": "Percentage of conversations where a topic has occurred.",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "id": {
        "description": "Id for a topic.",
        "type": "string"
      },
      "miner": {
        "$ref": "#/definitions/Miner",
        "description": "The miner to which the topic belongs.",
        "readOnly": true
      },
      "name": {
        "description": "Topic name.",
        "type": "string"
      },
      "phraseCount": {
        "description": "Number of unique phrases (sub-utterances) where a topic has occurred.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "phrases": {
        "description": "The phrases that are extracted for a topic.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utteranceCount": {
        "description": "Number of unique utterances where a topic has occurred.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "id",
      "phrases"
    ],
    "type": "object"
  },
  "DraftValidationResult": {
    "description": "Validation results",
    "properties": {
      "errors": {
        "description": "List of errors causing validation failure",
        "items": {
          "$ref": "#/definitions/ErrorBody"
        },
        "type": "array"
      },
      "valid": {
        "description": "Indicates if configuration is valid",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DurationCondition": {
    "properties": {
      "durationMode": {
        "enum": [
          "Between",
          "Over",
          "Under"
        ],
        "type": "string"
      },
      "durationOperator": {
        "type": "string"
      },
      "durationRange": {
        "type": "string"
      },
      "durationTarget": {
        "enum": [
          "DURATION",
          "DURATION_RANGE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "DynamicContactQueueingSettings": {
    "properties": {
      "filter": {
        "description": "Whether to filter contacts dynamically",
        "type": "boolean"
      },
      "sort": {
        "description": "Whether to sort contacts dynamically",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "DynamicLineBalancingSettings": {
    "properties": {
      "enabled": {
        "description": "Indicates that this campaign is subject of dynamic line balancing",
        "type": "boolean"
      },
      "relativeWeight": {
        "description": "Relative weight of this campaign in dynamic line balancing",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "DynamicLineBalancingSettingsPatchRequest": {
    "properties": {
      "enabled": {
        "description": "Indicates that this campaign is subject of dynamic line balancing",
        "type": "boolean"
      },
      "relativeWeight": {
        "description": "Relative weight of this campaign in dynamic line balancing",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Edge": {
    "properties": {
      "apiVersion": {
        "type": "string"
      },
      "callDrainingState": {
        "description": "The current state of the Edge's call draining process before it can be safely rebooted or updated.",
        "enum": [
          "NONE",
          "WAIT",
          "WAIT_TIMEOUT",
          "TERMINATE",
          "COMPLETE"
        ],
        "readOnly": true,
        "type": "string"
      },
      "certType": {
        "description": "The type of certificate used to communicate with edge-proxy.",
        "enum": [
          "PureCloud",
          "Public",
          "China",
          "NotRequested"
        ],
        "type": "string"
      },
      "conversationCount": {
        "description": "The remaining number of conversations the Edge has to drain before it can be safely rebooted or updated. When an Edge is not draining conversations, this will be NULL or 0.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "currentVersion": {
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edgeDeploymentType": {
        "enum": [
          "HARDWARE",
          "LDM",
          "CDM",
          "CHS",
          "INVALID"
        ],
        "type": "string"
      },
      "edgeGroup": {
        "$ref": "#/definitions/EdgeGroup"
      },
      "fingerprint": {
        "type": "string"
      },
      "fingerprintHint": {
        "type": "string"
      },
      "fullSoftwareVersion": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interfaces": {
        "description": "The list of interfaces for the edge. (Deprecated) Replaced by configuring trunks/ip info on the logical interface instead",
        "items": {
          "$ref": "#/definitions/EdgeInterface"
        },
        "type": "array"
      },
      "make": {
        "type": "string"
      },
      "managed": {
        "type": "boolean"
      },
      "model": {
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "offlineConfigCalled": {
        "description": "True if the offline edge configuration endpoint has been called for this edge.",
        "readOnly": true,
        "type": "boolean"
      },
      "onlineStatus": {
        "enum": [
          "ONLINE",
          "OFFLINE"
        ],
        "type": "string"
      },
      "osName": {
        "description": "The name provided by the operating system of the Edge.",
        "readOnly": true,
        "type": "string"
      },
      "pairingId": {
        "description": "The pairing Id for a hardware Edge in the format: 00000-00000-00000-00000-00000. This field is only required when creating an Edge with a deployment type of HARDWARE.",
        "type": "string"
      },
      "patch": {
        "type": "string"
      },
      "physicalEdge": {
        "type": "boolean"
      },
      "proxy": {
        "description": "Edge HTTP proxy configuration for the WAN port. The field can be a hostname, FQDN, IPv4 or IPv6 address. If port is not included, port 80 is assumed.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serialNumber": {
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/Site",
        "description": "The Site to which the Edge is assigned."
      },
      "softwareStatus": {
        "$ref": "#/definitions/DomainEdgeSoftwareUpdateDto",
        "description": "Details about an in-progress or recently in-progress Edge software upgrade. This node appears only if a software upgrade was recently initiated for this Edge."
      },
      "softwareVersion": {
        "type": "string"
      },
      "softwareVersionConfiguration": {
        "type": "string"
      },
      "softwareVersionPlatform": {
        "type": "string"
      },
      "softwareVersionTimestamp": {
        "type": "string"
      },
      "stagedVersion": {
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "statusCode": {
        "description": "The current status of the Edge.",
        "enum": [
          "NEW",
          "AWAITING_CONNECTION",
          "AWAITING_FINGERPRINT",
          "AWAITING_FINGERPRINT_VERIFICATION",
          "FINGERPRINT_VERIFIED",
          "AWAITING_BOOTSTRAP",
          "ACTIVE",
          "INACTIVE",
          "RMA",
          "UNPAIRING",
          "UNPAIRED",
          "INITIALIZING"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EdgeAutoUpdateConfig": {
    "properties": {
      "end": {
        "description": "Date time is represented as an ISO-8601 string without a timezone. For example: yyyy-MM-ddTHH:mm:ss.SSS",
        "format": "local-date-time",
        "type": "string"
      },
      "rrule": {
        "description": "The recurrence rule for updating the Edges assigned to the site. The only supported frequencies are daily and weekly. Weekly frequencies require a day list with at least oneday specified. All other configurations are not supported.",
        "type": "string"
      },
      "start": {
        "description": "Date time is represented as an ISO-8601 string without a timezone. For example: yyyy-MM-ddTHH:mm:ss.SSS",
        "format": "local-date-time",
        "type": "string"
      },
      "timeZone": {
        "description": "The timezone of the window in which any updates to the edges assigned to the site can be applied. The minimum size of the window is 2 hours.",
        "type": "string"
      }
    },
    "required": [
      "end",
      "rrule",
      "start",
      "timeZone"
    ],
    "type": "object"
  },
  "EdgeConnectionInfo": {
    "properties": {
      "connectionErrors": {
        "description": "Connection errors",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interfaceIpAddress": {
        "description": "IP address of the interface",
        "readOnly": true,
        "type": "string"
      },
      "interfaceName": {
        "description": "Interface used for the connection on the edge",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/AddressableEntityRef"
      }
    },
    "type": "object"
  },
  "EdgeEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Edge"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EdgeGroup": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edgeTrunkBaseAssignment": {
        "$ref": "#/definitions/TrunkBaseAssignment",
        "description": "A trunk base settings assignment of trunkType \"EDGE\" to use for edge-to-edge communication."
      },
      "hybrid": {
        "description": "Is this edge group hybrid.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managed": {
        "description": "Is this edge group being managed remotely.",
        "type": "boolean"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "phoneTrunkBases": {
        "description": "Trunk base settings of trunkType \"PHONE\" to inherit to edge logical interface for phone communication.",
        "items": {
          "$ref": "#/definitions/TrunkBase"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "edgeTrunkBaseAssignment",
      "name",
      "phoneTrunkBases"
    ],
    "type": "object"
  },
  "EdgeGroupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EdgeGroup"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EdgeInterface": {
    "properties": {
      "addressFamilyId": {
        "type": "string"
      },
      "endpoints": {
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "ifName": {
        "type": "string"
      },
      "ipAddress": {
        "type": "string"
      },
      "lineTypes": {
        "items": {
          "enum": [
            "TIE",
            "NETWORK",
            "TRUNK",
            "STATION"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "macAddress": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EdgeLogsJob": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "files": {
        "description": "The files available to upload from the Edge to the cloud.",
        "items": {
          "$ref": "#/definitions/EdgeLogsJobFile"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EdgeLogsJobFile": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "downloadId": {
        "description": "The download ID to use with the downloads API.",
        "type": "string"
      },
      "edgePath": {
        "description": "The path of this file on the Edge.",
        "format": "uri",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sizeBytes": {
        "description": "The size of this file in bytes.",
        "format": "double",
        "type": "number"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "timeCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "timeModified": {
        "description": "The time this log file was last modified on the Edge. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "uploadStatus": {
        "description": "The status of the upload of this file from the Edge to the cloud.  Use /upload to start an upload.",
        "enum": [
          "UPLOADING",
          "NOT_UPLOADED",
          "UPLOADED",
          "ERROR_ON_UPLOAD"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EdgeLogsJobRequest": {
    "properties": {
      "path": {
        "description": "A relative directory to the root Edge log folder to query from.",
        "type": "string"
      },
      "query": {
        "description": "The pattern to use when searching for logs, which may include the wildcards {*, ?}.  Multiple search patterns may be combined using a pipe '|' as a delimiter.",
        "type": "string"
      },
      "recurse": {
        "description": "Boolean whether or not to recurse into directories.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "EdgeLogsJobResponse": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The created job id.",
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EdgeLogsJobUploadRequest": {
    "properties": {
      "fileIds": {
        "description": "A list of file ids to upload.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "fileIds"
    ],
    "type": "object"
  },
  "EdgeMetrics": {
    "properties": {
      "disks": {
        "items": {
          "$ref": "#/definitions/EdgeMetricsDisk"
        },
        "type": "array"
      },
      "edge": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "eventTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "memory": {
        "items": {
          "$ref": "#/definitions/EdgeMetricsMemory"
        },
        "type": "array"
      },
      "networks": {
        "items": {
          "$ref": "#/definitions/EdgeMetricsNetwork"
        },
        "type": "array"
      },
      "processors": {
        "items": {
          "$ref": "#/definitions/EdgeMetricsProcessor"
        },
        "type": "array"
      },
      "subsystems": {
        "items": {
          "$ref": "#/definitions/EdgeMetricsSubsystem"
        },
        "type": "array"
      },
      "upTimeMsec": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EdgeMetricsDisk": {
    "properties": {
      "availableBytes": {
        "description": "Available memory in bytes.",
        "format": "double",
        "type": "number"
      },
      "partitionName": {
        "description": "Disk partition name.",
        "type": "string"
      },
      "totalBytes": {
        "description": "Total memory in bytes.",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "EdgeMetricsMemory": {
    "properties": {
      "availableBytes": {
        "description": "Available memory in bytes.",
        "format": "double",
        "type": "number"
      },
      "totalBytes": {
        "description": "Total memory in bytes.",
        "format": "double",
        "type": "number"
      },
      "type": {
        "description": "Type of memory. Virtual or physical.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EdgeMetricsNetwork": {
    "properties": {
      "bandwidthBitsPerSec": {
        "description": "Total bandwidth of the adapter in bits per second.",
        "format": "double",
        "type": "number"
      },
      "ifname": {
        "description": "Identifier for the network adapter.",
        "type": "string"
      },
      "receivedBytesPerSec": {
        "description": "Number of byes received per second.",
        "format": "int32",
        "type": "integer"
      },
      "sentBytesPerSec": {
        "description": "Number of byes sent per second.",
        "format": "int32",
        "type": "integer"
      },
      "utilizationPct": {
        "description": "Percent utilization of the network adapter.",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "EdgeMetricsProcessor": {
    "properties": {
      "activeTimePct": {
        "description": "Percent time processor was active.",
        "format": "double",
        "type": "number"
      },
      "cpuId": {
        "description": "Machine CPU identifier. 'total' will always be included in the array and is the total of all CPU resources.",
        "type": "string"
      },
      "idleTimePct": {
        "description": "Percent time processor was idle.",
        "format": "double",
        "type": "number"
      },
      "privilegedTimePct": {
        "description": "Percent time processor spent in privileged mode.",
        "format": "double",
        "type": "number"
      },
      "userTimePct": {
        "description": "Percent time processor spent in user mode.",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "EdgeMetricsSubsystem": {
    "properties": {
      "delayMs": {
        "description": "Delay in milliseconds.",
        "format": "int32",
        "type": "integer"
      },
      "mediaSubsystem": {
        "$ref": "#/definitions/EdgeMetricsSubsystem",
        "description": "Subsystem for an Edge device."
      },
      "processName": {
        "description": "Name of the Edge process.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EdgeNetworkDiagnostic": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EdgeNetworkDiagnosticRequest": {
    "properties": {
      "host": {
        "description": "IPv4/6 address or host to be probed for connectivity. No port allowed.",
        "type": "string"
      }
    },
    "required": [
      "host"
    ],
    "type": "object"
  },
  "EdgeNetworkDiagnosticResponse": {
    "properties": {
      "commandCorrelationId": {
        "description": "UUID of each executed command on edge",
        "type": "string"
      },
      "diagnostics": {
        "description": "Response string of executed command from edge",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EdgeRebootParameters": {
    "properties": {
      "callDrainingWaitTimeSeconds": {
        "description": "The number of seconds to wait for call draining to complete before initiating the reboot. A value of 0 will prevent call draining and all calls will disconnect immediately.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EdgeServiceStateRequest": {
    "properties": {
      "callDrainingWaitTimeSeconds": {
        "description": "The number of seconds to wait for call draining to complete before initiating the reboot. A value of 0 will prevent call draining and all calls will disconnect immediately.",
        "format": "int32",
        "type": "integer"
      },
      "inService": {
        "description": "A boolean that sets the Edge in-service or out-of-service.",
        "type": "boolean"
      }
    },
    "required": [
      "inService"
    ],
    "type": "object"
  },
  "EdgeTrunkBase": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inboundSite": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Allows a customer to set the site to which inbound calls will be routed"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Used to determine the media regions for inbound and outbound calls through a trunk. Also determines the dial plan to use for calls that came in on a trunk and have to be sent out on it as well."
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "trunkMetabase": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The meta-base this trunk is based on."
      },
      "trunkType": {
        "description": "The type of this trunk base.",
        "enum": [
          "EXTERNAL",
          "PHONE",
          "EDGE"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "trunkMetabase",
      "trunkType"
    ],
    "type": "object"
  },
  "EdgeVersionInformation": {
    "properties": {
      "softwareVersion": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EdgeVersionReport": {
    "properties": {
      "newestVersion": {
        "$ref": "#/definitions/EdgeVersionInformation"
      },
      "oldestVersion": {
        "$ref": "#/definitions/EdgeVersionInformation"
      }
    },
    "type": "object"
  },
  "Education": {
    "properties": {
      "dateEnd": {
        "description": "Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStart": {
        "description": "Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "fieldOfStudy": {
        "type": "string"
      },
      "notes": {
        "description": "Notes about education has a 2000 character limit",
        "type": "string"
      },
      "school": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EffectiveConfiguration": {
    "description": "Effective Configuration for an ClientApp. This is comprised of the integration specific configuration along with overrides specified in the integration type.",
    "properties": {
      "advanced": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Advanced configuration described by the schema in the advancedSchemaUri field.",
        "type": "object"
      },
      "credentials": {
        "additionalProperties": {
          "$ref": "#/definitions/CredentialInfo"
        },
        "description": "Credentials required by the integration. The required keys are indicated in the credentials property of the Integration Type",
        "type": "object"
      },
      "name": {
        "description": "The name of the integration, used to distinguish this integration from others of the same type.",
        "type": "string"
      },
      "notes": {
        "description": "Notes about the integration.",
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Key-value configuration settings described by the schema in the propertiesSchemaUri field.",
        "type": "object"
      }
    },
    "required": [
      "advanced",
      "credentials",
      "name",
      "notes",
      "properties"
    ],
    "type": "object"
  },
  "Email": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "autoGenerated": {
        "description": "Indicates that the email was auto-generated like an Out of Office reply.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the email",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "draftAttachments": {
        "description": "A list of uploaded attachments on the email draft.",
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorBody"
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "connected",
          "disconnected",
          "none",
          "parked",
          "transmitting"
        ],
        "type": "string"
      },
      "messageId": {
        "description": "A globally unique identifier for the stored content of this communication.",
        "type": "string"
      },
      "messagesSent": {
        "description": "The number of email messages sent by this participant.",
        "format": "int32",
        "type": "integer"
      },
      "parkTime": {
        "description": "Represents the time when an email was put into parked state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the email.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "recordingId": {
        "description": "A globally unique identifier for the recording associated with this call.",
        "type": "string"
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's email, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "spam": {
        "description": "Indicates if the inbound email was marked as spam.",
        "type": "boolean"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the email was placed on hold in the cloud clock if the email is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "connected",
          "disconnected",
          "none",
          "parked",
          "transmitting"
        ],
        "type": "string"
      },
      "subject": {
        "description": "The subject for the initial email that started this conversation.",
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "EmailAddress": {
    "properties": {
      "email": {
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmailAttachment": {
    "properties": {
      "attachmentId": {
        "type": "string"
      },
      "contentLength": {
        "format": "int32",
        "type": "integer"
      },
      "contentPath": {
        "type": "string"
      },
      "contentType": {
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmailBeginTransmittingEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "EmailCampaignSchedule": {
    "properties": {
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "emailCampaign": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Campaign that this email campaign schedule is for."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intervals": {
        "description": "A list of intervals during which to run the associated Campaign.",
        "items": {
          "$ref": "#/definitions/ScheduleInterval"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for this email campaign schedule.",
        "example": "Africa/Abidjan",
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "emailCampaign",
      "intervals"
    ],
    "type": "object"
  },
  "EmailCampaignScheduleEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EmailCampaignSchedule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmailColumn": {
    "properties": {
      "columnName": {
        "description": "The name of the email column.",
        "type": "string"
      },
      "contactableTimeColumn": {
        "description": "A column that indicates the timezone to use for a given contact when checking contactable times.",
        "type": "string"
      },
      "type": {
        "description": "Indicates the type of the email column. For example, 'work' or 'personal'.",
        "type": "string"
      }
    },
    "required": [
      "columnName",
      "type"
    ],
    "type": "object"
  },
  "EmailCommunicationAnsweredEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "EmailCommunicationDispositionAppliedEvent": {
    "properties": {
      "code": {
        "description": "The wrapup-code (V4 UUID) used to disposition this interaction. If this value is not provided the disposition is considered skipped.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.",
        "type": "string"
      },
      "tags": {
        "description": "The list of tags selected by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "EmailCommunicationEndedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "disconnectType": {
        "description": "Indicates how this communication was ended.",
        "enum": [
          "Unknown",
          "Self",
          "Peer",
          "System",
          "Error",
          "Spam",
          "Transfer",
          "TransferACD",
          "TransferUser"
        ],
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "disconnectType",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "EmailCommunicationRepliedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "EmailConfig": {
    "properties": {
      "contentTemplate": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The content template used to formulate the email to send to the contact."
      },
      "emailColumns": {
        "description": "The contact list columns specifying the email address(es) of the contact.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "fromAddress": {
        "$ref": "#/definitions/FromEmailAddress",
        "description": "The email address that will be used as the sender of the email."
      },
      "replyToAddress": {
        "$ref": "#/definitions/ReplyToEmailAddress",
        "description": "The email address from which any reply will be sent."
      }
    },
    "required": [
      "emailColumns",
      "fromAddress"
    ],
    "type": "object"
  },
  "EmailConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "otherMediaUris": {
        "description": "The list of other media channels involved in the conversation.",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/EmailMediaParticipant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmailConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EmailConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmailEndTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used to identify the transfer already started by the external platform.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "finalState": {
        "description": "Indicates whether the transfer completed successfully, was cancelled, or failed for some reason.",
        "enum": [
          "Completed",
          "Canceled",
          "Failed"
        ],
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that was being transferred.",
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "finalState",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "EmailErrorInfo": {
    "properties": {
      "code": {
        "description": "Error Code",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "description": "Error Message",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmailExternalEstablishedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "displayName": {
        "description": "A name for the participant if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "includeMessage": {
        "description": "Indicates that established communication has an initial email. If true, the initial messagesSent value will be initialized to 1.",
        "type": "boolean"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/EmailInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "EmailFlowEstablishedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/EmailInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "EmailHoldUpdatedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "held": {
        "description": "Indicates whether this communication is held.",
        "type": "boolean"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "held"
    ],
    "type": "object"
  },
  "EmailInitialConfiguration": {
    "properties": {
      "additionalInfo": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this session which should be recorded by the platform but which will not be indexed or searchable. Primarily for diagnostic value. Any information that needs to be accessible through other components like Analytics should be moved to dedicated fields.",
        "type": "object"
      },
      "alerting": {
        "description": "Indicates that this communication's initial state is alerting. If false, the communication started in a connected state.",
        "type": "boolean"
      },
      "bcc": {
        "description": "An email addresses that this email is blind carbon copied to.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "cc": {
        "description": "An email addresses that this email is carbon copied to.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "from": {
        "description": "An email address that this email is from.",
        "type": "string"
      },
      "held": {
        "description": "Indicates that this communication's initial state is held.",
        "type": "boolean"
      },
      "inbound": {
        "description": "Indicates the direction of this communication with respect to the contact center. `true` means the communication is INBOUND. `false` means the communication is OUTBOUND.",
        "type": "boolean"
      },
      "invitedBy": {
        "description": "The id of the communication (the \"peer\") that \"invited\" this communication, if this occurred.",
        "type": "string"
      },
      "previousEmailId": {
        "description": "UUID identifying the most recent previous email communication ID from the same participant on this email conversation. Will be null if this is a new participant.",
        "type": "string"
      },
      "subject": {
        "description": "The subject for this email.",
        "type": "string"
      },
      "to": {
        "description": "An email address that this email is to.",
        "type": "string"
      }
    },
    "required": [
      "from",
      "to"
    ],
    "type": "object"
  },
  "EmailMediaParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of ad-hoc attributes for the participant.",
        "type": "object"
      },
      "autoGenerated": {
        "description": "Indicates that the email was auto-generated like an Out of Office reply.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "draftAttachments": {
        "description": "A list of uploaded attachments on the email draft.",
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "If the conversation ends in error, contains additional error details."
      },
      "externalContact": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external contact, then this will be the reference for the external contact."
      },
      "externalOrganization": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external org, then this will be the reference for the external org."
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "held": {
        "description": "Value is true when the participant is on hold.",
        "type": "boolean"
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context."
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "messageId": {
        "description": "A globally unique identifier for the stored content of this communication.",
        "type": "string"
      },
      "messagesSent": {
        "description": "The number of messages that have been sent in this email conversation.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "parkTime": {
        "description": "The time when this participant's communication was last parked.  Does not reset on resume. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peer": {
        "description": "The peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud queue for this participant."
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Engage script that should be used by this participant."
      },
      "spam": {
        "description": "Indicates if the inbound email was marked as spam.",
        "type": "boolean"
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "subject": {
        "description": "The subject of the email.",
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud team for this participant."
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud user for this participant."
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Wrapup for this participant, if it has been applied."
      },
      "wrapupPrompt": {
        "description": "The wrap-up prompt indicating the type of wrap-up to be performed.",
        "type": "string"
      },
      "wrapupRequired": {
        "description": "Value is true when the participant requires wrap-up.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "Value is true when the participant has skipped wrap-up.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "The amount of time the participant has to complete wrap-up.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmailMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/PolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/EmailMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "EmailMediaPolicyConditions": {
    "properties": {
      "customerParticipation": {
        "enum": [
          "YES",
          "NO"
        ],
        "type": "string"
      },
      "dateRanges": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "forQueues": {
        "items": {
          "$ref": "#/definitions/Queue"
        },
        "type": "array"
      },
      "forUsers": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "languages": {
        "items": {
          "$ref": "#/definitions/Language"
        },
        "type": "array"
      },
      "teams": {
        "description": "Teams to match conversations against",
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "timeAllowed": {
        "$ref": "#/definitions/TimeAllowed"
      },
      "wrapupCodes": {
        "items": {
          "$ref": "#/definitions/WrapupCode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EmailMessage": {
    "properties": {
      "attachments": {
        "description": "The attachments of the email message.",
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "bcc": {
        "description": "The recipients that were blind copied on the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "cc": {
        "description": "The recipients that were copied on the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "draftType": {
        "description": "The type of draft that need to be treated.",
        "enum": [
          "Reply",
          "ReplyAll",
          "Forward"
        ],
        "type": "string"
      },
      "emailSizeBytes": {
        "description": "Indicates an estimation of the size of the current email as a whole, in its final, ready to be sent form.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "from": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The sender of the email message."
      },
      "historyIncluded": {
        "description": "Indicates whether the history of previous emails of the conversation is included within the email bodies of this message.",
        "type": "boolean"
      },
      "htmlBody": {
        "description": "The html body of the email message.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxEmailSizeBytes": {
        "description": "Indicates the maximum allowed size for an email to be send via SMTP server, based on the email domain configuration",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "replyTo": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The receiver of the reply email message."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the current draft.",
        "enum": [
          "Created",
          "Ready",
          "Edited"
        ],
        "type": "string"
      },
      "subject": {
        "description": "The subject of the email message.",
        "type": "string"
      },
      "textBody": {
        "description": "The text body of the email message.",
        "type": "string"
      },
      "time": {
        "description": "The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "description": "The recipients of the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "required": [
      "from",
      "textBody",
      "to"
    ],
    "type": "object"
  },
  "EmailMessagePreview": {
    "properties": {
      "attachments": {
        "description": "The attachments of the email message.",
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "bcc": {
        "description": "The recipients that were blind copied on the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "cc": {
        "description": "The recipients that were copied on the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "draftType": {
        "description": "The type of draft that need to be treated.",
        "enum": [
          "Reply",
          "ReplyAll",
          "Forward"
        ],
        "type": "string"
      },
      "emailSizeBytes": {
        "description": "Indicates an estimation of the size of the current email as a whole, in its final, ready to be sent form.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "from": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The sender of the email message."
      },
      "historyIncluded": {
        "description": "Indicates whether the history of previous emails of the conversation is included within the email bodies of this message.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxEmailSizeBytes": {
        "description": "Indicates the maximum allowed size for an email to be send via SMTP server, based on the email domain configuration",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "replyTo": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The receiver of the reply email message."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the current draft.",
        "enum": [
          "Created",
          "Ready",
          "Edited"
        ],
        "type": "string"
      },
      "subject": {
        "description": "The subject of the email message.",
        "type": "string"
      },
      "textBodyPreview": {
        "description": "A truncated version of the textBody",
        "type": "string"
      },
      "time": {
        "description": "The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "description": "The recipients of the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "required": [
      "from",
      "to"
    ],
    "type": "object"
  },
  "EmailMessagePreviewListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EmailMessagePreview"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmailMessageReply": {
    "properties": {
      "attachments": {
        "description": "The attachments of the email message.",
        "items": {
          "$ref": "#/definitions/Attachment"
        },
        "type": "array"
      },
      "bcc": {
        "description": "The recipients that were blind copied on the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "cc": {
        "description": "The recipients that were copied on the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "emailSizeBytes": {
        "description": "Indicates an estimation of the size of the current email as a whole, in its final, ready to be sent form.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "from": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The sender of the email message."
      },
      "historyIncluded": {
        "description": "Indicates whether the history of previous emails of the conversation is included within the email bodies of this message.",
        "type": "boolean"
      },
      "htmlBody": {
        "description": "The html body of the email message.",
        "type": "string"
      },
      "maxEmailSizeBytes": {
        "description": "Indicates the maximum allowed size for an email to be send via SMTP server, based on the email domain configuration",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "replyTo": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The receiver of the reply email message."
      },
      "subject": {
        "description": "The subject of the email message.",
        "type": "string"
      },
      "textBody": {
        "description": "The text body of the email message.",
        "type": "string"
      },
      "time": {
        "description": "The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "description": "The recipients of the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "required": [
      "from",
      "textBody",
      "to"
    ],
    "type": "object"
  },
  "EmailOutboundDomainResult": {
    "properties": {
      "dnsCnameBounceRecord": {
        "$ref": "#/definitions/DnsRecordEntry"
      },
      "dnsTxtSendingRecord": {
        "$ref": "#/definitions/DnsRecordEntry"
      },
      "domainName": {
        "type": "string"
      },
      "senderStatus": {
        "enum": [
          "RequestReceived",
          "ProvisionRequestSentVendor",
          "Provisioned",
          "Error",
          "Deprovisioned"
        ],
        "type": "string"
      },
      "senderType": {
        "enum": [
          "Unknown",
          "EmailDomain",
          "MockEmailDomain"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmailProgressTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used to identify the transfer already started by the external platform.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationCommunicationId",
      "eventDateTime",
      "eventId",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "EmailRoutingEstablishedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/EmailInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "label": {
        "description": "An optional label that categorizes the conversation. Max-utilization settings can be configured at a per-label level.",
        "type": "string"
      },
      "languageId": {
        "description": "The unique identifier for the language that should be used to determine the destination for the conversation.",
        "type": "string"
      },
      "queueId": {
        "description": "The id of the queue that is routing this conversation.",
        "type": "string"
      },
      "skillIds": {
        "description": "The unique identifiers for the skills that should be used to determine the destination for the conversation.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "queueId",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "EmailRoutingTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent *Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationQueueId": {
        "description": "The id (V4 UUID) of the desired destination queue that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "Indicates the desired type of transfer.",
        "type": "string"
      },
      "languageId": {
        "description": "The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "skillIds": {
        "description": "The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationQueueId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "EmailSettings": {
    "properties": {
      "multipleRouteDestinationsOnInboundEmailEnabled": {
        "description": "This setting allows a single inbound email that contains multiple routes configured in Genesys Cloud to create a conversation per route. When this setting is disabled only a single conversation will be created",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "EmailSetup": {
    "properties": {
      "rootDomain": {
        "description": "The root PureCloud domain that all sub-domains are created from.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmailUserEstablishedEvent": {
    "properties": {
      "afterCallWorkRequired": {
        "description": "Indicates whether or not this user will be required to complete after call work.",
        "type": "boolean"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/EmailInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "queueId": {
        "description": "A unique Id (V4 UUID) identifying the queue that the user is emailing on behalf of. Applies to outbound emails only.",
        "type": "string"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      },
      "userId": {
        "description": "A unique Id (V4 UUID) identifying the user this communication belongs to.",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration",
      "userId"
    ],
    "type": "object"
  },
  "EmailUserTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationUserId": {
        "description": "The id (V4 UUID) of the desired destination user that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "The id (V4 UUID) of the communication representing the participant that is initiating the transfer.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationUserId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "EmailsSettings": {
    "properties": {
      "sendingSizeLimit": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmbeddedIntegration": {
    "properties": {
      "domainWhitelist": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "enableWhitelist": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "EmergencyCallFlow": {
    "description": "An emergency flow associates a call flow to use in an emergency with the ivr(s) to route to it.",
    "properties": {
      "emergencyFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The call flow to execute in an emergency."
      },
      "ivrs": {
        "description": "The IVR(s) to route to the call flow during an emergency.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EmergencyGroup": {
    "description": "A group of emergency call flows to use in an emergency.",
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "emergencyCallFlows": {
        "description": "The emergency call flow(s) to use during an emergency.",
        "items": {
          "$ref": "#/definitions/EmergencyCallFlow"
        },
        "type": "array"
      },
      "enabled": {
        "description": "True if an emergency is occurring and the associated emergency call flow(s) should be used.  False otherwise.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EmergencyGroupDivisionView": {
    "description": "A group of call flows.",
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The emergency group identifier",
        "type": "string"
      },
      "name": {
        "description": "The emergency group name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EmergencyGroupDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EmergencyGroupDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmergencyGroupListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EmergencyGroup"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EmergencyLocation": {
    "properties": {
      "address": {
        "$ref": "#/definitions/LocationAddress",
        "description": "Emergency address"
      },
      "did": {
        "description": "Phone number in E164 format",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "source",
        "enum": [
          "Admin",
          "User"
        ],
        "type": "string"
      }
    },
    "required": [
      "address",
      "did",
      "source"
    ],
    "type": "object"
  },
  "EmpathyScore": {
    "properties": {
      "score": {
        "description": "Empathy score of the agent involved in the conversation",
        "format": "double",
        "type": "number"
      },
      "userId": {
        "description": "UserId of the agent involved in the conversation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EmployerInfo": {
    "properties": {
      "dateHire": {
        "type": "string"
      },
      "employeeId": {
        "type": "string"
      },
      "employeeType": {
        "type": "string"
      },
      "officialName": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Empty": {
    "type": "object"
  },
  "EncryptionKey": {
    "properties": {
      "createDate": {
        "description": "create date of the key pair. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "keyConfigurationType": {
        "description": "Key type used in this configuration",
        "enum": [
          "KmsSymmetric",
          "LocalKeyManager",
          "Native",
          "None"
        ],
        "type": "string"
      },
      "keydataSummary": {
        "description": "key data summary (base 64 encoded public key)",
        "type": "string"
      },
      "kmsKeyArn": {
        "description": "ARN of internal key to be wrapped by AWS KMS Symmetric key",
        "type": "string"
      },
      "localEncryptionConfiguration": {
        "$ref": "#/definitions/LocalEncryptionConfiguration",
        "description": "Local configuration"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "user that requested generation of public key"
      }
    },
    "type": "object"
  },
  "EncryptionKeyEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EncryptionKey"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EndConsultTransferEvent": {
    "properties": {
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "EndTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used to identify the transfer already started by the external platform.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "finalState": {
        "description": "Indicates whether the transfer completed successfully, was cancelled, or failed for some reason.",
        "enum": [
          "Completed",
          "Canceled",
          "Failed"
        ],
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that was being transferred.",
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "finalState",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "Endpoint": {
    "properties": {
      "count": {
        "format": "int32",
        "type": "integer"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "dids": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "enabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Name",
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "schema": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Schema"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "schema"
    ],
    "type": "object"
  },
  "EngineIntegration": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Entity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EntityChange": {
    "properties": {
      "entityId": {
        "description": "Id of the entity that was changed",
        "type": "string"
      },
      "entityName": {
        "description": "Name of the entity that was changed",
        "type": "string"
      },
      "entityType": {
        "description": "Type of the entity that was changed",
        "type": "string"
      },
      "newValues": {
        "description": "New values for the entity.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "oldValues": {
        "description": "Previous values for the entity.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EntityListing": {
    "properties": {
      "entities": {
        "items": {
          "type": "object"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EntityReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "EntityTypeCriteria": {
    "properties": {
      "entityType": {
        "description": "The entity to match the pattern against.",
        "enum": [
          "visit"
        ],
        "type": "string"
      },
      "key": {
        "description": "The criteria key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "shouldIgnoreCase": {
        "description": "Should criteria be case insensitive.",
        "type": "boolean"
      },
      "values": {
        "description": "The criteria values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "entityType",
      "key",
      "operator",
      "shouldIgnoreCase",
      "values"
    ],
    "type": "object"
  },
  "ErrorBody": {
    "properties": {
      "code": {
        "type": "string"
      },
      "contextId": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/Detail"
        },
        "type": "array"
      },
      "entityId": {
        "type": "string"
      },
      "entityName": {
        "type": "string"
      },
      "errors": {
        "items": {
          "$ref": "#/definitions/ErrorBody"
        },
        "type": "array"
      },
      "limit": {
        "$ref": "#/definitions/Limit"
      },
      "message": {
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "messageWithParams": {
        "type": "string"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ErrorDetails": {
    "properties": {
      "code": {
        "type": "string"
      },
      "contextId": {
        "type": "string"
      },
      "details": {
        "format": "uri",
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "messageWithParams": {
        "type": "string"
      },
      "nested": {
        "$ref": "#/definitions/ErrorDetails"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ErrorInfo": {
    "properties": {
      "code": {
        "type": "string"
      },
      "message": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EstimateAvailableFullDayTimeOffRequest": {
    "properties": {
      "date": {
        "description": "Date in yyyy-MM-dd format for full day request. Should be interpreted in the business unit's configured time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "requestedDurationMinutes": {
        "description": "A requested length of time off request in minutes. If the value is null, then the system will use activity code length setting",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "date"
    ],
    "type": "object"
  },
  "EstimateAvailableFullDayTimeOffResponse": {
    "properties": {
      "date": {
        "description": "Date in yyyy-MM-dd format for full day request. Should be interpreted in the business unit's configured time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "durationMinutes": {
        "description": "An estimation of time off request length in minutes",
        "format": "int32",
        "type": "integer"
      },
      "flexible": {
        "description": "Whether there is flexibility for a user to choose different hours than the system estimated",
        "type": "boolean"
      },
      "payableMinutes": {
        "description": "An estimation of payable part of time off request in minutes",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "date",
      "durationMinutes",
      "flexible",
      "payableMinutes"
    ],
    "type": "object"
  },
  "EstimateAvailablePartialDayTimeOffRequest": {
    "properties": {
      "date": {
        "description": "Start date-time in ISO-8601 format for partial day request",
        "format": "date-time",
        "type": "string"
      },
      "requestedDurationMinutes": {
        "description": "A requested length of time off request in minutes. If the value is null, then the system will use activity code length setting",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "date"
    ],
    "type": "object"
  },
  "EstimateAvailablePartialDayTimeOffResponse": {
    "properties": {
      "date": {
        "description": "Start date-time in ISO-8601 format for partial day request",
        "format": "date-time",
        "type": "string"
      },
      "durationMinutes": {
        "description": "An estimation of time off request length in minutes",
        "format": "int32",
        "type": "integer"
      },
      "flexible": {
        "description": "Whether there is flexibility for a user to choose different hours than the system estimated",
        "type": "boolean"
      },
      "payableMinutes": {
        "description": "An estimation of payable part of time off request in minutes",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "date",
      "durationMinutes",
      "flexible",
      "payableMinutes"
    ],
    "type": "object"
  },
  "EstimateAvailableTimeOffRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with the time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "fullDayDates": {
        "description": "Full day dates. partialDayDates must be empty if this field is populated",
        "items": {
          "$ref": "#/definitions/EstimateAvailableFullDayTimeOffRequest"
        },
        "type": "array"
      },
      "paid": {
        "description": "Whether this estimate is for a paid time off request",
        "type": "boolean"
      },
      "partialDayDates": {
        "description": "Partial day dates. fullDayDates must be empty if this field is populated",
        "items": {
          "$ref": "#/definitions/EstimateAvailablePartialDayTimeOffRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "activityCodeId",
      "paid"
    ],
    "type": "object"
  },
  "EstimateAvailableTimeOffResponse": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with the time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "fullDayDates": {
        "description": "Full day dates. partialDayDates must be empty if this field is populated",
        "items": {
          "$ref": "#/definitions/EstimateAvailableFullDayTimeOffResponse"
        },
        "type": "array"
      },
      "paid": {
        "description": "Whether this estimate is for a paid time off request",
        "type": "boolean"
      },
      "partialDayDates": {
        "description": "Partial day dates. fullDayDates must be empty if this field is populated",
        "items": {
          "$ref": "#/definitions/EstimateAvailablePartialDayTimeOffResponse"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user to whom the time off request belongs"
      }
    },
    "required": [
      "activityCodeId",
      "paid",
      "user"
    ],
    "type": "object"
  },
  "EstimateJobAsyncResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EstimatedWaitTimePredictions": {
    "properties": {
      "results": {
        "description": "Returned upon a successful estimated wait time request.",
        "items": {
          "$ref": "#/definitions/PredictionResults"
        },
        "type": "array"
      }
    },
    "required": [
      "results"
    ],
    "type": "object"
  },
  "Evaluation": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/User"
      },
      "agentHasRead": {
        "type": "boolean"
      },
      "agentTeam": {
        "$ref": "#/definitions/Team",
        "description": "Team of the evaluation agent"
      },
      "answers": {
        "$ref": "#/definitions/EvaluationScoringSet"
      },
      "assigned": {
        "description": "Set to false to unassign the evaluation. This cannot be set to false when assignee is also set.",
        "type": "boolean"
      },
      "assignedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "assignee": {
        "$ref": "#/definitions/User"
      },
      "assigneeApplicable": {
        "description": "Indicates whether an assignee is applicable for the evaluation. Set to false when assignee is not applicable.",
        "type": "boolean"
      },
      "authorizedActions": {
        "description": "List of user authorized actions on evaluation. Possible values: assign, edit, editScore, editAgentSignoff, delete, release, viewAudit",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "calibration": {
        "$ref": "#/definitions/Calibration"
      },
      "changedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/ConversationReference"
      },
      "conversationDate": {
        "description": "Date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationEndDate": {
        "description": "End date of conversation if it had completed before evaluation creation. Null if created before the conversation ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateAssigneeChanged": {
        "description": "Date when the assignee was last changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm",
        "description": "Evaluation form used for evaluation."
      },
      "evaluationSource": {
        "$ref": "#/definitions/EvaluationSource",
        "description": "The source that created the evaluation.",
        "readOnly": true
      },
      "evaluator": {
        "$ref": "#/definitions/User"
      },
      "hasAssistanceFailed": {
        "description": "Is true when evaluation assistance didn't execute successfully",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isScoringIndex": {
        "type": "boolean"
      },
      "mediaType": {
        "description": "List of different communication types used in conversation.",
        "items": {
          "enum": [
            "CALL",
            "CALLBACK",
            "CHAT",
            "COBROWSE",
            "EMAIL",
            "MESSAGE",
            "SOCIAL_EXPRESSION",
            "VIDEO",
            "SCREENSHARE"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "neverRelease": {
        "description": "Signifies if the evaluation is never to be released. This cannot be set true if release date is also set.",
        "type": "boolean"
      },
      "queue": {
        "$ref": "#/definitions/Queue"
      },
      "redacted": {
        "description": "Is only true when the user making the request does not have sufficient permissions to see evaluation",
        "type": "boolean"
      },
      "releaseDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "rescore": {
        "description": "Is only true when evaluation is re-scored.",
        "type": "boolean"
      },
      "resourceId": {
        "description": "Only used for email evaluations. Will be null for all other evaluations.",
        "type": "string"
      },
      "resourceType": {
        "description": "The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources.",
        "enum": [
          "EMAIL"
        ],
        "type": "string"
      },
      "revisionCreatedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "PENDING",
          "INPROGRESS",
          "FINISHED",
          "INREVIEW",
          "RETRACTED"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "EvaluationAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/EvaluationAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "EvaluationAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/EvaluationAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/EvaluationAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "EvaluationAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "assigneeApplicable",
          "assigneeId",
          "calibrationId",
          "contextId",
          "conversationId",
          "conversationStart",
          "divisionId",
          "evaluationContextId",
          "evaluationCreatedDate",
          "evaluationId",
          "evaluationReleaseDate",
          "evaluatorId",
          "formId",
          "mediaType",
          "queueId",
          "released",
          "rescored",
          "teamId",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "EvaluationAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/EvaluationAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EvaluationAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "conversationStart",
          "evaluationCreatedDate",
          "evaluationReleaseDate",
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/EvaluationAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "assigneeApplicable",
            "assigneeId",
            "calibrationId",
            "contextId",
            "conversationId",
            "divisionId",
            "evaluationContextId",
            "evaluationId",
            "evaluatorId",
            "formId",
            "mediaType",
            "queueId",
            "released",
            "rescored",
            "teamId",
            "userId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nEvaluations",
            "nEvaluationsDeleted",
            "nEvaluationsRescored",
            "oTotalCriticalScore",
            "oTotalScore"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/EvaluationAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "EvaluationAggregationQueryMe": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "conversationStart",
          "evaluationCreatedDate",
          "evaluationReleaseDate",
          "eventTime"
        ],
        "type": "string"
      },
      "contextId": {
        "description": "Evaluation context Id",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "assigneeApplicable",
            "assigneeId",
            "calibrationId",
            "contextId",
            "conversationId",
            "divisionId",
            "evaluationContextId",
            "evaluationId",
            "evaluatorId",
            "formId",
            "mediaType",
            "queueId",
            "released",
            "rescored",
            "teamId",
            "userId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nEvaluations",
            "nEvaluationsDeleted",
            "nEvaluationsRescored",
            "oTotalCriticalScore",
            "oTotalScore"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "EvaluationAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nEvaluations",
          "nEvaluationsDeleted",
          "nEvaluationsRescored",
          "oTotalCriticalScore",
          "oTotalScore"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "EvaluationAssignment": {
    "properties": {
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      },
      "user": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "EvaluationCreateBody": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/EvaluationCreateUser",
        "description": "User ID of the agent (must be included for a successful request)"
      },
      "agentHasRead": {
        "type": "boolean"
      },
      "answers": {
        "$ref": "#/definitions/EvaluationScoringSet"
      },
      "assignee": {
        "$ref": "#/definitions/EvaluationCreateUser"
      },
      "calibration": {
        "$ref": "#/definitions/EvaluationCreateCalibration"
      },
      "conversation": {
        "$ref": "#/definitions/EvaluationCreateConversation"
      },
      "dateAssigneeChanged": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluationContextId": {
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationCreateEvalForm",
        "description": "Evaluation form used for evaluation (must be included for a successful request)"
      },
      "evaluationSource": {
        "$ref": "#/definitions/EvaluationSource"
      },
      "evaluator": {
        "$ref": "#/definitions/EvaluationCreateUser",
        "description": "User ID of the evaluator (must be included for a successful request)"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "neverRelease": {
        "type": "boolean"
      },
      "queue": {
        "$ref": "#/definitions/EvaluationCreateQueue"
      },
      "releaseDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "rescore": {
        "type": "boolean"
      },
      "resourceType": {
        "enum": [
          "EMAIL"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "PENDING",
          "INPROGRESS",
          "FINISHED",
          "INREVIEW",
          "RETRACTED"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationCreateCalibration": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationCreateConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationCreateEvalForm": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationCreateQueue": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationCreateUser": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "EvaluationDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/EvaluationDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "EvaluationDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/EvaluationDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/EvaluationDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "EvaluationDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "assigneeApplicable",
          "assigneeId",
          "calibrationId",
          "contextId",
          "deleted",
          "evaluationId",
          "evaluationStatus",
          "evaluatorId",
          "eventTime",
          "formId",
          "formName",
          "queueId",
          "released",
          "rescored",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "metric": {
        "description": "Left hand side for metric predicates",
        "enum": [
          "oTotalCriticalScore",
          "oTotalScore"
        ],
        "type": "string"
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension or metric predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension or metric predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "EvaluationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Evaluation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EvaluationForm": {
    "properties": {
      "contextId": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The evaluation form name",
        "type": "string"
      },
      "published": {
        "type": "boolean"
      },
      "publishedVersions": {
        "$ref": "#/definitions/DomainEntityListingEvaluationForm",
        "description": "A list of the published versions of this form. Not populated by default, its availability depends on the endpoint. Use the 'expand=publishHistory' query parameter to retrieve this data where applicable (refer to the endpoint description to see if it is applicable)."
      },
      "questionGroups": {
        "description": "A list of question groups",
        "items": {
          "$ref": "#/definitions/EvaluationQuestionGroup"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name",
      "questionGroups"
    ],
    "type": "object"
  },
  "EvaluationFormAndScoringSet": {
    "properties": {
      "answers": {
        "$ref": "#/definitions/EvaluationScoringSet"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      }
    },
    "type": "object"
  },
  "EvaluationFormResponse": {
    "properties": {
      "contextId": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The evaluation form name",
        "type": "string"
      },
      "published": {
        "type": "boolean"
      },
      "publishedVersions": {
        "$ref": "#/definitions/DomainEntityListingEvaluationForm",
        "description": "A list of the published versions of this form. Not populated by default, its availability depends on the endpoint. Use the 'expand=publishHistory' query parameter to retrieve this data where applicable (refer to the endpoint description to see if it is applicable)."
      },
      "questionGroups": {
        "description": "A list of question groups",
        "items": {
          "$ref": "#/definitions/EvaluationQuestionGroup"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weightMode": {
        "description": "Mode for evaluation form weight",
        "enum": [
          "SCALED",
          "OFF"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "EvaluationFormResponseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EvaluationFormResponse"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "EvaluationQuestion": {
    "properties": {
      "answerOptions": {
        "description": "Options from which to choose an answer for this question. Only used by Multiple Choice type questions.",
        "items": {
          "$ref": "#/definitions/AnswerOption"
        },
        "type": "array"
      },
      "commentsRequired": {
        "type": "boolean"
      },
      "helpText": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "isCritical": {
        "type": "boolean"
      },
      "isKill": {
        "type": "boolean"
      },
      "naEnabled": {
        "type": "boolean"
      },
      "text": {
        "type": "string"
      },
      "type": {
        "enum": [
          "multipleChoiceQuestion",
          "freeTextQuestion",
          "npsQuestion",
          "readOnlyTextBlockQuestion"
        ],
        "type": "string"
      },
      "visibilityCondition": {
        "$ref": "#/definitions/VisibilityCondition"
      }
    },
    "type": "object"
  },
  "EvaluationQuestionGroup": {
    "properties": {
      "defaultAnswersToHighest": {
        "type": "boolean"
      },
      "defaultAnswersToNA": {
        "type": "boolean"
      },
      "id": {
        "type": "string"
      },
      "manualWeight": {
        "type": "boolean"
      },
      "naEnabled": {
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "questions": {
        "items": {
          "$ref": "#/definitions/EvaluationQuestion"
        },
        "type": "array"
      },
      "type": {
        "type": "string"
      },
      "visibilityCondition": {
        "$ref": "#/definitions/VisibilityCondition"
      },
      "weight": {
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "EvaluationQuestionGroupScore": {
    "properties": {
      "markedNA": {
        "description": "True when the evaluation is submitted with a question group that does not have any answers. Only allowed when naEnabled is true or if set by the system",
        "type": "boolean"
      },
      "maxTotalCriticalScore": {
        "description": "Maximum possible score of only the critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "maxTotalCriticalScoreUnweighted": {
        "description": "Maximum possible unweighted score of only the critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "maxTotalNonCriticalScore": {
        "description": "Maximum possible score of only the non critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "maxTotalNonCriticalScoreUnweighted": {
        "description": "Maximum possible unweighted score of only the non critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "maxTotalScore": {
        "description": "Maximum possible score of all questions in the group",
        "format": "float",
        "type": "number"
      },
      "maxTotalScoreUnweighted": {
        "description": "Maximum possible unweighted score of all questions in the group",
        "format": "float",
        "type": "number"
      },
      "questionGroupId": {
        "type": "string"
      },
      "questionScores": {
        "items": {
          "$ref": "#/definitions/EvaluationQuestionScore"
        },
        "type": "array"
      },
      "systemMarkedNA": {
        "description": "If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.",
        "type": "boolean"
      },
      "totalCriticalScore": {
        "description": "Score of only the critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "totalCriticalScoreUnweighted": {
        "description": "Unweighted score of only the critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "totalNonCriticalScore": {
        "description": "Score of only the non critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "totalNonCriticalScoreUnweighted": {
        "description": "Unweighted score of only the non critical questions in the group",
        "format": "float",
        "type": "number"
      },
      "totalScore": {
        "description": "Score of all questions in the group",
        "format": "float",
        "type": "number"
      },
      "totalScoreUnweighted": {
        "description": "Unweighted score of all questions in the group",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "EvaluationQuestionScore": {
    "properties": {
      "answerId": {
        "type": "string"
      },
      "assistedAnswerId": {
        "description": "AnswerId found with evaluation assistance conditions",
        "type": "string"
      },
      "comments": {
        "description": "Comments from the evaluator specific to this question",
        "type": "string"
      },
      "failedKillQuestion": {
        "description": "Applicable only on fatal questions. Indicates that the answer selected was not the highest score available for the question",
        "type": "boolean"
      },
      "markedNA": {
        "description": "True when the evaluation is submitted with a question that does not have an answer. Only allowed when naEnabled is true or if set by the system",
        "type": "boolean"
      },
      "questionId": {
        "type": "string"
      },
      "score": {
        "description": "Unweighted score of the question",
        "format": "int32",
        "type": "integer"
      },
      "systemMarkedNA": {
        "description": "If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "EvaluationReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationResponse": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/User"
      },
      "agentHasRead": {
        "type": "boolean"
      },
      "answers": {
        "$ref": "#/definitions/EvaluationScoringSet"
      },
      "assigned": {
        "description": "Set to false to unassign the evaluation. This cannot be set to false when assignee is also set.",
        "type": "boolean"
      },
      "assignedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "assignee": {
        "$ref": "#/definitions/User"
      },
      "assigneeApplicable": {
        "description": "Indicates whether an assignee is applicable for the evaluation. Set to false when assignee is not applicable.",
        "type": "boolean"
      },
      "authorizedActions": {
        "description": "List of user authorized actions on evaluation. Possible values: assign, edit, editScore, editAgentSignoff, delete, release, viewAudit",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "calibration": {
        "$ref": "#/definitions/Calibration"
      },
      "changedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/ConversationReference"
      },
      "conversationDate": {
        "description": "Date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationEndDate": {
        "description": "End date of conversation if it had completed before evaluation creation. Null if created before the conversation ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateAssigneeChanged": {
        "description": "Date when the assignee was last changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationFormResponse",
        "description": "Evaluation form used for evaluation."
      },
      "evaluationSource": {
        "$ref": "#/definitions/EvaluationSource",
        "description": "The source that created the evaluation.",
        "readOnly": true
      },
      "evaluator": {
        "$ref": "#/definitions/User"
      },
      "hasAssistanceFailed": {
        "description": "Is true when evaluation assistance didn't execute successfully",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isScoringIndex": {
        "type": "boolean"
      },
      "mediaType": {
        "description": "List of different communication types used in conversation.",
        "items": {
          "enum": [
            "CALL",
            "CALLBACK",
            "CHAT",
            "COBROWSE",
            "EMAIL",
            "MESSAGE",
            "SOCIAL_EXPRESSION",
            "VIDEO",
            "SCREENSHARE"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "neverRelease": {
        "description": "Signifies if the evaluation is never to be released. This cannot be set true if release date is also set.",
        "type": "boolean"
      },
      "queue": {
        "$ref": "#/definitions/Queue"
      },
      "redacted": {
        "description": "Is only true when the user making the request does not have sufficient permissions to see evaluation",
        "type": "boolean"
      },
      "releaseDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "rescore": {
        "description": "Is only true when evaluation is re-scored.",
        "type": "boolean"
      },
      "resourceId": {
        "description": "Only used for email evaluations. Will be null for all other evaluations.",
        "type": "string"
      },
      "resourceType": {
        "description": "The type of resource. Only used for email evaluations. Will be null for evaluations on all other resources.",
        "enum": [
          "EMAIL"
        ],
        "type": "string"
      },
      "revisionCreatedDate": {
        "description": "Date of when evaluation revision is created. Null if there is no revision. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "PENDING",
          "INPROGRESS",
          "FINISHED",
          "INREVIEW",
          "RETRACTED"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationScoringSet": {
    "properties": {
      "agentComments": {
        "description": "Comments from the agent while reviewing evaluation results",
        "type": "string"
      },
      "anyFailedKillQuestions": {
        "description": "Indicates that at least one fatal question was answered without having the highest score available for the question",
        "type": "boolean"
      },
      "comments": {
        "description": "Overall comments from the evaluator",
        "type": "string"
      },
      "privateComments": {
        "description": "Overall private comments from the evaluator",
        "type": "string"
      },
      "questionGroupScores": {
        "items": {
          "$ref": "#/definitions/EvaluationQuestionGroupScore"
        },
        "type": "array"
      },
      "totalCriticalScore": {
        "description": "Score of only the critical questions",
        "format": "float",
        "type": "number"
      },
      "totalNonCriticalScore": {
        "description": "Score of only the non-critical questions",
        "format": "float",
        "type": "number"
      },
      "totalScore": {
        "description": "Score of all questions",
        "format": "float",
        "type": "number"
      },
      "transcriptTopics": {
        "description": "List of topics found within the conversation's transcripts",
        "items": {
          "$ref": "#/definitions/TranscriptTopic"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EvaluationSettings": {
    "properties": {},
    "type": "object"
  },
  "EvaluationSettingsAssignee": {
    "properties": {},
    "type": "object"
  },
  "EvaluationSource": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Type of the evaluation source.",
        "enum": [
          "Policy",
          "User",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluationVersion": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluatorActivity": {
    "properties": {
      "evaluator": {
        "$ref": "#/definitions/User"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "numCalibrationsAssigned": {
        "format": "int32",
        "type": "integer"
      },
      "numCalibrationsCompleted": {
        "format": "int32",
        "type": "integer"
      },
      "numCalibrationsStarted": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluationsAssigned": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluationsCompleted": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluationsStarted": {
        "format": "int32",
        "type": "integer"
      },
      "numEvaluationsWithoutViewPermission": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EvaluatorActivityEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EvaluatorActivity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Event": {
    "properties": {
      "appEvent": {
        "$ref": "#/definitions/AppEvent",
        "description": "Event that tracks user interactions with content in an application such as screen views, searches, etc."
      },
      "correlationId": {
        "description": "UUID corresponding to triggering action that caused this event (e.g. HTTP POST, SIP invite, another event).",
        "type": "string"
      },
      "createdDate": {
        "description": "Timestamp indicating when the event actually took place. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerId": {
        "description": "Primary identifier of the customer in the source of the events.",
        "type": "string"
      },
      "customerIdType": {
        "description": "Type of primary identifier (e.g. cookie, email, phone).",
        "type": "string"
      },
      "eventType": {
        "description": "The name representing the type of event.",
        "type": "string"
      },
      "id": {
        "description": "System-generated UUID for the event.",
        "type": "string"
      },
      "outcomeAchievedEvent": {
        "$ref": "#/definitions/OutcomeAchievedEvent",
        "description": "Event where a customer has achieved a specific outcome or goal."
      },
      "segmentAssignmentEvent": {
        "$ref": "#/definitions/SegmentAssignmentEvent",
        "description": "Event that represents a segment being assigned."
      },
      "session": {
        "$ref": "#/definitions/EventSession",
        "description": "The session that the event belongs to."
      },
      "webActionEvent": {
        "$ref": "#/definitions/WebActionEvent",
        "description": "Event triggered by web actions."
      },
      "webEvent": {
        "$ref": "#/definitions/WebEvent",
        "description": "Event that tracks user interactions with content in a browser such as pageviews, downloads, mobile ad clicks, etc."
      }
    },
    "required": [
      "correlationId",
      "createdDate",
      "eventType",
      "id",
      "session"
    ],
    "type": "object"
  },
  "EventAction": {
    "properties": {
      "createdDate": {
        "description": "Timestamp indicating when the action was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "ID of the action.",
        "type": "string"
      },
      "mediaType": {
        "description": "The media type used to deliver the action (e.g. email, webhook).",
        "enum": [
          "webchat",
          "webMessagingOffer",
          "contentOffer",
          "integrationAction",
          "architectFlow",
          "openAction"
        ],
        "type": "string"
      },
      "prompt": {
        "description": "Prompt of the action to be displayed/sent to the visitor.",
        "type": "string"
      },
      "state": {
        "description": "Current state of the action (e.g. qualified, succeeded, errored).",
        "enum": [
          "accepted",
          "rejected",
          "timedout",
          "errored",
          "ignored",
          "qualified",
          "offered",
          "started",
          "engaged",
          "qualifiedOutsideSchedule",
          "offeredOutsideSchedule",
          "abandoned",
          "completed",
          "frequencyCapReached"
        ],
        "type": "string"
      }
    },
    "required": [
      "createdDate",
      "id",
      "mediaType",
      "prompt",
      "state"
    ],
    "type": "object"
  },
  "EventCondition": {
    "properties": {
      "eventName": {
        "description": "The name of the event for which this condition can be satisfied.",
        "type": "string"
      },
      "key": {
        "description": "The event key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "sessionType": {
        "description": "The session type for which this condition can be satisfied.",
        "type": "string"
      },
      "streamType": {
        "description": "The stream type for which this condition can be satisfied.",
        "enum": [
          "Web",
          "Custom",
          "Conversation",
          "App"
        ],
        "type": "string"
      },
      "values": {
        "description": "The event values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "key",
      "sessionType",
      "streamType",
      "values"
    ],
    "type": "object"
  },
  "EventDefinition": {
    "properties": {
      "description": {
        "description": "description",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the object.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "EventDefinitionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EventDefinition"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EventError": {
    "properties": {
      "eventId": {
        "description": "The eventId (V4 UUID) for the event that encountered an error.",
        "type": "string"
      },
      "message": {
        "description": "A message describing the error.",
        "type": "string"
      },
      "retryable": {
        "description": "The event for this eventId can be resubmitted if this value is true.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "EventListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Event"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "EventLog": {
    "properties": {
      "category": {
        "enum": [
          "CALLBACK",
          "CALL_RESTRICTION",
          "CALL_RULE",
          "CAMPAIGN",
          "CAMPAIGN_RULE",
          "CONTACT",
          "CONTACT_LIST_FILTER",
          "DIGITAL_RULE",
          "DNC_LIST",
          "ENTITY_LIMIT",
          "IMPORT_ERROR",
          "MESSAGE_RESTRICTION",
          "MESSAGING_CAMPAIGN",
          "IMPORT_TEMPLATE",
          "ORGANIZATION_CONFIGURATION",
          "SCHEDULE",
          "MESSAGING_CAMPAIGN_SCHEDULE",
          "EMAIL_CAMPAIGN_SCHEDULE"
        ],
        "type": "string"
      },
      "correlationId": {
        "type": "string"
      },
      "errorEntity": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "eventMessage": {
        "$ref": "#/definitions/EventMessage"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "level": {
        "enum": [
          "INFO",
          "WARNING",
          "ERROR"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relatedEntity": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timestamp": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "EventMessage": {
    "properties": {
      "code": {
        "enum": [
          "ACTIVE_CAMPAIGNS_LIMIT_EXCEEDED",
          "ALL_CAMPAIGNS_BLACKLISTED",
          "ANOTHER_CAMPAIGN_STARTING",
          "APPROACHING_CONTACT_LIMIT",
          "APPROACHING_DNC_LIST_PHONE_NUMBER_LIMIT",
          "APPROACHING_DNC_ORGANIZATION_PHONE_NUMBER_LIMIT",
          "APPROACHING_ENTITY_LIMIT",
          "AUTOMATIC_TIME_ZONE_ZIP_CODE_INVALID",
          "CAMPAIGN_BLACKLISTED",
          "CAMPAIGN_CONTENT_TEMPLATE_SUBSTITUTION_MISMATCH",
          "CAMPAIGN_EMAIL_BODY_CHARACTER_LIMIT_EXCEEDED",
          "CAMPAIGN_EMAIL_SUBJECT_CHARACTER_LIMIT_EXCEEDED",
          "CAMPAIGN_INVALIDATED",
          "CAMPAIGN_FORCE_STOPPED",
          "CAMPAIGN_MESSAGE_CHARACTER_LIMIT_EXCEEDED",
          "CAMPAIGN_START_ERROR",
          "CAMPAIGN_RULE_START_ERROR",
          "CAMPAIGN_SET_DIALING_MODE_ERROR",
          "CAMPAIGN_STOPPED",
          "CAMPAIGN_THROTTLED",
          "CAMPAIGN_QUEUE_MEMBERS_LIMIT_EXCEEDED",
          "INVALID_CALLABLE_TIME_ZONE",
          "CALLBACK_CREATION_INVALID_NUMBER",
          "CALL_RULE_INVALID_CONTACT_COLUMN",
          "CALL_RULE_MISSING_DATA_ACTION_INPUT",
          "CALL_RULE_MISMATCH_TYPE",
          "CALL_RULE_INVALID_OPERATOR",
          "CALL_RULE_NO_DNC_LISTS_CONFIGURED",
          "CALL_RULE_UPDATED_PHONE_COLUMN",
          "CONTACT_LIST_FILTER_EVALUATION_FAILED",
          "CONTACT_LIST_FILTER_INTERNAL_ERROR",
          "CONTACT_COLUMNS_LIMIT_EXCEEDED",
          "CONTACT_COLUMN_LENGTH_LIMIT_EXCEEDED",
          "CONTACT_ID_LENGTH_LIMIT_EXCEEDED",
          "CONTACT_DATUM_LENGTH_LIMIT_EXCEEDED",
          "CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID",
          "DATA_ACTION_EXECUTION_FAILED",
          "DATA_ACTION_AUTHENTICATION_FAILURE",
          "DATA_ACTION_NOT_FOUND",
          "DATA_ACTION_TOO_MANY_REQUESTS",
          "DATA_ACTION_TOO_MANY_REQUESTS_REMOTE",
          "ACTION_EXECUTION_FAILED",
          "ACTION_EXECUTION_FAILED_INVALID_PARAMETER",
          "DIGITAL_RULE_EVALUATION_FAILED",
          "DIGITAL_RULE_INTERNAL_ERROR",
          "DIGITAL_RULE_NO_DNC_LISTS_CONFIGURED",
          "DIGITAL_RULE_UPDATED_CONTACT_ADDRESS",
          "DIGITAL_RULE_SMS_PHONE_NUMBER_TYPE_MISMATCH",
          "DIGITAL_RULE_ERROR_SKIPPED",
          "DNC_AUTHENTICATION_FAILURE",
          "EXCEEDED_CONTACT_LIMIT",
          "EXCEEDED_DNC_RECORD_LIMIT",
          "EXCEEDED_DNC_PHONE_NUMBER_LENGTH",
          "INACTIVE_EDGES_FAILED_PLACE_CALLS",
          "INACTIVE_EDGES_TURNED_CAMPAIGN_OFF",
          "INVALID_AGENT",
          "INVALID_EMAIL_ADDRESS",
          "INVALID_PHONE_NUMBER",
          "IMPORT_FAILED_TO_READ_HEADERS",
          "IMPORT_COULD_NOT_PARSE_AN_ENTRY",
          "IMPORT_CONTACT_DOES_NOT_MATCH_LIST_FORMAT",
          "IMPORT_ENTRY_DOES_NOT_ALIGN_WITH_HEADERS",
          "IMPORT_INVALID_CUSTOM_ID",
          "IMPORT_INVALID_DATA",
          "IMPORT_INVALID_EMAIL_ADDRESSES",
          "IMPORT_INVALID_PHONE_NUMBERS",
          "IMPORT_INVALID_EXPIRATION_DATE",
          "IMPORT_EXPIRATION_DATE_EXCEEDS_MAX_DAYS",
          "IMPORT_COLUMN_EXCEEDS_LENGTH_LIMIT",
          "IMPORT_DATUM_EXCEEDS_LENGTH_LIMIT",
          "IMPORT_MISSING_CUSTOM_ID",
          "IMPORT_NO_COLUMNS_DEFINED",
          "IMPORT_COLUMNS_DO_NOT_EXIST_ON_LIST",
          "IMPORT_LIST_NO_LONGER_EXISTS",
          "IMPORT_NO_LISTS_CREATED_NO_CONTACTS_MATCH_FILTER",
          "IMPORT_TARGET_CONTACT_LIST_NAME_EXISTS",
          "IMPORT_FAILED_CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID",
          "IMPORT_FAILED_CONTACT_DATA_GREATER_THAN_MAX_LENGTH",
          "IMPORT_FAILED_CONTACT_DATA_NOT_WITHIN_MIN_MAX_RANGE",
          "IMPORT_FAILED_CONTACT_DATA_INVALID_DATATYPE",
          "IMPORT_TOO_MANY_COLUMNS",
          "IMPORT_TOO_MANY_EXTRA_COLUMNS",
          "IMPORT_CONTACT_LIST_NAME_LENGTH_EXCEEDED",
          "ORGANIZATION_HAS_NO_DOMAIN_SET",
          "QUEUE_NOT_FOUND",
          "RECYCLE_CAMPAIGN",
          "SCHEDULED_CAMPAIGN_INVALID",
          "SCHEDULE_UNKNOWN_ERROR",
          "SMS_CONTENT_TEMPLATE_NOT_FOUND",
          "RECURRING_SCHEDULE_NEXT_OCCURRENCE_FAILURE",
          "RECURRING_SCHEDULE_ENDED",
          "RECURRING_SCHEDULE_MISSED_OCCURRENCES",
          "VERSION_CONFLICT"
        ],
        "type": "string"
      },
      "documentationUri": {
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "messageWithParams": {
        "type": "string"
      },
      "resourceURIs": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "EventSession": {
    "properties": {
      "id": {
        "description": "The ID of the session.",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "type": {
        "description": "Session types indicate the type or category of sessions (e.g. web, app).",
        "type": "string"
      }
    },
    "required": [
      "id",
      "type"
    ],
    "type": "object"
  },
  "EventSetting": {
    "properties": {
      "typing": {
        "$ref": "#/definitions/TypingSetting",
        "description": "Settings regarding typing events"
      }
    },
    "type": "object"
  },
  "ExecuteRecordingJobsQuery": {
    "properties": {
      "state": {
        "description": "The desired state for the job to be set to.",
        "enum": [
          "PROCESSING"
        ],
        "type": "string"
      }
    },
    "required": [
      "state"
    ],
    "type": "object"
  },
  "ExecutionDataEntity": {
    "description": "Represents an individual result of an execution data lookup",
    "properties": {
      "downloadUri": {
        "description": "A downloadable link to the execution data file.",
        "type": "string"
      },
      "failed": {
        "description": "If the retrieval failed (not found, no permission, etc;), this will be set true.",
        "type": "boolean"
      },
      "id": {
        "description": "The id of the execution requested",
        "type": "string"
      },
      "statusCode": {
        "description": "This will contain the http status code for the failure",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExecutionDataFlowSettingsResponse": {
    "properties": {
      "dateModified": {
        "description": "The time this setting was set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "enabled": {
        "description": "whether or not the setting is enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "User that last changed the setting."
      },
      "modifiedByClient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "OAuth client that last changed the setting."
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExecutionDataGlobalSettingsResponse": {
    "properties": {
      "dateModified": {
        "description": "The time this setting was set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "enabled": {
        "description": "whether or not the setting is enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "User that last changed the setting."
      },
      "modifiedByClient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "OAuth client that last changed the setting."
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExecutionDataRequest": {
    "description": "Used to retrieve a set of executionData history by the respective ids",
    "properties": {
      "ids": {
        "description": "A list of ids to retrieve",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "ids"
    ],
    "type": "object"
  },
  "ExecutionDataSettingsRequest": {
    "properties": {
      "enabled": {
        "description": "whether or not the setting is enabled.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "ExpandableWebDeployment": {
    "description": "Details about a Web Deployment",
    "properties": {
      "allowAllDomains": {
        "description": "Property indicates whether all domains are allowed or not. allowedDomains must be empty when this is set as true.",
        "type": "boolean"
      },
      "allowedDomains": {
        "description": "The list of domains that are approved to use this deployment; the list will be added to CORS headers for ease of web use.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "configuration": {
        "$ref": "#/definitions/WebDeploymentConfigurationVersionResponse",
        "description": "The config version this deployment uses"
      },
      "dateCreated": {
        "description": "The date the deployment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date the deployment was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of the config",
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A reference to the inboundshortmessage flow used by this deployment"
      },
      "id": {
        "description": "The deployment ID",
        "readOnly": true,
        "type": "string"
      },
      "lastModifiedUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who most recently modified the deployment",
        "readOnly": true
      },
      "name": {
        "description": "The deployment name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "snippet": {
        "description": "Javascript snippet used to load the config",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current status of the deployment",
        "enum": [
          "Pending",
          "Active",
          "Inactive",
          "Error",
          "Deleting"
        ],
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "The supported content profile for a deployment"
      }
    },
    "required": [
      "configuration",
      "name"
    ],
    "type": "object"
  },
  "ExpandableWebDeploymentEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExpandableWebDeployment"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExpansionCriterium": {
    "properties": {
      "threshold": {
        "format": "double",
        "type": "number"
      },
      "type": {
        "enum": [
          "TIMEOUT_SECONDS"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExpiredEdgeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ExportScriptRequest": {
    "description": "Creating an exported script via Download Service",
    "properties": {
      "fileName": {
        "description": "The final file name (no extension) of the script download: \u003cfileName\u003e.script",
        "type": "string"
      },
      "versionId": {
        "description": "The UUID version of the script to be exported.  Defaults to the current editable version.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExportScriptResponse": {
    "properties": {
      "url": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExportUri": {
    "properties": {
      "exportTimestamp": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "uri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Extension": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "extensionPool": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "number": {
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A Uri reference to the owner of this extension, which is either a User or an IVR"
      },
      "ownerType": {
        "enum": [
          "USER",
          "PHONE",
          "IVR_CONFIG",
          "GROUP"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ExtensionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Extension"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExtensionPool": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "endNumber": {
        "description": "The ending phone number for the range of this Extension pool. The number must be between 3 and 9 digits in length and the same length as the startNumber.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startNumber": {
        "description": "The starting phone number for the range of this Extension pool. The number must be between 3 and 9 digits in length and the same length as the endNumber.",
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ExtensionPoolDivisionView": {
    "properties": {
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The extension pool identifier",
        "type": "string"
      },
      "name": {
        "description": "The start number of the extension pool.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ExtensionPoolDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExtensionPoolDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExtensionPoolEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExtensionPool"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExternalContact": {
    "properties": {
      "address": {
        "$ref": "#/definitions/ContactAddress"
      },
      "canonicalContact": {
        "$ref": "#/definitions/ContactAddressableEntityRef",
        "description": "The contact at the head of the merge tree. If null, this contact is not a part of any merge.",
        "readOnly": true
      },
      "cellPhone": {
        "$ref": "#/definitions/PhoneNumber"
      },
      "createDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by schemaId and schemaVersion.",
        "type": "object"
      },
      "externalDataSources": {
        "description": "Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.",
        "items": {
          "$ref": "#/definitions/ExternalDataSource"
        },
        "readOnly": true,
        "type": "array"
      },
      "externalOrganization": {
        "$ref": "#/definitions/ExternalOrganization"
      },
      "externalSystemUrl": {
        "description": "A string that identifies an external system-of-record resource that may have more detailed information on the contact. It should be a valid URL (including the http/https protocol, port, and path [if any]). The value is automatically trimmed of any leading and trailing whitespace.",
        "type": "string"
      },
      "facebookId": {
        "$ref": "#/definitions/FacebookId"
      },
      "firstName": {
        "description": "The first name of the contact.",
        "type": "string"
      },
      "homePhone": {
        "$ref": "#/definitions/PhoneNumber"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "lastName": {
        "description": "The last name of the contact.",
        "type": "string"
      },
      "lineId": {
        "$ref": "#/definitions/LineId"
      },
      "mergeOperation": {
        "$ref": "#/definitions/MergeOperation",
        "description": "Information about the merge history of this contact. If null, this contact is not a part of any merge.",
        "readOnly": true
      },
      "mergeSet": {
        "description": "The set of all contacts that are a part of the merge tree. If null, this contact is not a part of any merge.",
        "items": {
          "$ref": "#/definitions/ContactAddressableEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "middleName": {
        "type": "string"
      },
      "modifyDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "otherEmail": {
        "type": "string"
      },
      "otherPhone": {
        "$ref": "#/definitions/PhoneNumber"
      },
      "personalEmail": {
        "type": "string"
      },
      "salutation": {
        "type": "string"
      },
      "schema": {
        "$ref": "#/definitions/DataSchema",
        "description": "The schema defining custom fields for this contact"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "surveyOptOut": {
        "type": "boolean"
      },
      "title": {
        "type": "string"
      },
      "twitterId": {
        "$ref": "#/definitions/TwitterId"
      },
      "type": {
        "description": "The type of contact",
        "enum": [
          "Ephemeral",
          "Identified",
          "Curated"
        ],
        "readOnly": true,
        "type": "string"
      },
      "whatsAppId": {
        "$ref": "#/definitions/WhatsAppId"
      },
      "workEmail": {
        "type": "string"
      },
      "workPhone": {
        "$ref": "#/definitions/PhoneNumber"
      }
    },
    "type": "object"
  },
  "ExternalContactReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExternalContactsEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExternalDataSource": {
    "description": "Describes a link to a record in an external system that contributed data to a Relate record",
    "properties": {
      "platform": {
        "description": "The platform that was the source of the data.  Example: a CRM like SALESFORCE.",
        "enum": [
          "SALESFORCE"
        ],
        "type": "string"
      },
      "url": {
        "description": "An URL that links to the source record that contributed data to the associated entity.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExternalEstablishedEvent": {
    "properties": {
      "ani": {
        "description": "The automatic number identification if it is available for this conversation.",
        "type": "string"
      },
      "aniName": {
        "description": "The automatic number identification name if it is available for this conversation.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "dnis": {
        "description": "The dialed number identification if it is available for this conversation.",
        "type": "string"
      },
      "dnisName": {
        "description": "The dialed number identification name if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/InitialConfiguration",
        "description": "Metadata about this communication."
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "ExternalId": {
    "properties": {
      "externalSource": {
        "$ref": "#/definitions/ExternalSource"
      },
      "value": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExternalMetricDataItem": {
    "properties": {
      "count": {
        "description": "The number of data points. The default value is 0 when type is Cumulative and the metric data already exists, otherwise 1. When total count reaches 0, the metric data will be deleted.",
        "format": "int32",
        "type": "integer"
      },
      "dateOccurred": {
        "description": "The date of the metric data. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "metricId": {
        "description": "The ID of the external metric definition",
        "type": "string"
      },
      "type": {
        "description": "The type of the metric data. The default value is Total.",
        "enum": [
          "Total",
          "Cumulative"
        ],
        "type": "string"
      },
      "userEmail": {
        "description": "The user main email used in user's GenesysCloud account. Must provide either userId or userEmail, but not both.",
        "type": "string"
      },
      "userId": {
        "description": "The user ID. Must provide either userId or userEmail, but not both.",
        "type": "string"
      },
      "value": {
        "description": "The value of the metric data. When value is null, the metric data will be deleted.",
        "type": "number"
      }
    },
    "required": [
      "dateOccurred",
      "metricId",
      "value"
    ],
    "type": "object"
  },
  "ExternalMetricDataProcessedItem": {
    "properties": {
      "count": {
        "description": "The number of data points. The default value is 0 when type is Cumulative and the metric data already exists, otherwise 1. When total count reaches 0, the metric data will be deleted.",
        "format": "int32",
        "type": "integer"
      },
      "dateOccurred": {
        "description": "The date of the metric data. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "metricId": {
        "description": "The ID of the external metric definition",
        "type": "string"
      },
      "totalCount": {
        "description": "The total number of data points.",
        "format": "int32",
        "type": "integer"
      },
      "totalValue": {
        "description": "The total value of the metric data.",
        "type": "number"
      },
      "type": {
        "description": "The type of the metric data. The default value is Total.",
        "enum": [
          "Total",
          "Cumulative"
        ],
        "type": "string"
      },
      "userEmail": {
        "description": "The user main email used in user's GenesysCloud account. Must provide either userId or userEmail, but not both.",
        "type": "string"
      },
      "userId": {
        "description": "The user ID. Must provide either userId or userEmail, but not both.",
        "type": "string"
      },
      "value": {
        "description": "The value of the metric data. When value is null, the metric data will be deleted.",
        "type": "number"
      }
    },
    "required": [
      "dateOccurred",
      "metricId",
      "value"
    ],
    "type": "object"
  },
  "ExternalMetricDataUnprocessedItem": {
    "properties": {
      "code": {
        "description": "The error code",
        "type": "string"
      },
      "count": {
        "description": "The number of data points. The default value is 0 when type is Cumulative and the metric data already exists, otherwise 1. When total count reaches 0, the metric data will be deleted.",
        "format": "int32",
        "type": "integer"
      },
      "dateOccurred": {
        "description": "The date of the metric data. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "message": {
        "description": "The error message",
        "type": "string"
      },
      "metricId": {
        "description": "The ID of the external metric definition",
        "type": "string"
      },
      "type": {
        "description": "The type of the metric data. The default value is Total.",
        "enum": [
          "Total",
          "Cumulative"
        ],
        "type": "string"
      },
      "userEmail": {
        "description": "The user main email used in user's GenesysCloud account. Must provide either userId or userEmail, but not both.",
        "type": "string"
      },
      "userId": {
        "description": "The user ID. Must provide either userId or userEmail, but not both.",
        "type": "string"
      },
      "value": {
        "description": "The value of the metric data. When value is null, the metric data will be deleted.",
        "type": "number"
      }
    },
    "required": [
      "dateOccurred",
      "metricId",
      "value"
    ],
    "type": "object"
  },
  "ExternalMetricDataWriteRequest": {
    "properties": {
      "items": {
        "description": "A list of external metric data items. A maximum of 100 items are allowed.",
        "items": {
          "$ref": "#/definitions/ExternalMetricDataItem"
        },
        "type": "array"
      }
    },
    "required": [
      "items"
    ],
    "type": "object"
  },
  "ExternalMetricDataWriteResponse": {
    "description": "External metric data write response",
    "properties": {
      "processedEntities": {
        "description": "The list of processed entities",
        "items": {
          "$ref": "#/definitions/ExternalMetricDataProcessedItem"
        },
        "type": "array"
      },
      "unprocessedEntities": {
        "description": "The list of unprocessed entities",
        "items": {
          "$ref": "#/definitions/ExternalMetricDataUnprocessedItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ExternalMetricDefinition": {
    "properties": {
      "dateLastRefreshed": {
        "description": "The last date and time that the metric data was refreshed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "defaultObjectiveType": {
        "description": "The default objective type of the External Metric Definition",
        "enum": [
          "HigherIsBetter",
          "LowerIsBetter",
          "TargetArea"
        ],
        "type": "string"
      },
      "enabled": {
        "description": "True if the External Metric Definition is enabled",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inUse": {
        "description": "True if the External Metric Definition is in use",
        "readOnly": true,
        "type": "boolean"
      },
      "name": {
        "description": "The name of the External Metric Definition",
        "type": "string"
      },
      "precision": {
        "description": "The decimal precision of the External Metric Definition",
        "format": "int32",
        "type": "integer"
      },
      "retentionMonths": {
        "description": "The retention in months of the External Metric Definition",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "unit": {
        "description": "The unit of the External Metric Definition",
        "enum": [
          "Seconds",
          "Percent",
          "Number",
          "Currency"
        ],
        "type": "string"
      },
      "unitDefinition": {
        "description": "The unit definition of the External Metric Definition",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExternalMetricDefinitionCreateRequest": {
    "properties": {
      "defaultObjectiveType": {
        "description": "The default objective type of the External Metric Definition",
        "enum": [
          "HigherIsBetter",
          "LowerIsBetter",
          "TargetArea"
        ],
        "type": "string"
      },
      "enabled": {
        "description": "True if the External Metric Definition is enabled",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the External Metric Definition",
        "type": "string"
      },
      "precision": {
        "description": "The decimal precision of the External Metric Definition. Must be at least 0 and at most 5",
        "format": "int32",
        "maximum": 5,
        "minimum": 0,
        "type": "integer"
      },
      "unit": {
        "description": "The unit of the External Metric Definition",
        "enum": [
          "Seconds",
          "Percent",
          "Number",
          "Currency"
        ],
        "type": "string"
      },
      "unitDefinition": {
        "description": "The unit definition of the External Metric Definition",
        "type": "string"
      }
    },
    "required": [
      "defaultObjectiveType",
      "enabled",
      "name",
      "precision",
      "unit"
    ],
    "type": "object"
  },
  "ExternalMetricDefinitionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalMetricDefinition"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExternalMetricDefinitionUpdateRequest": {
    "properties": {
      "defaultObjectiveType": {
        "description": "The default objective type of the External Metric Definition",
        "enum": [
          "HigherIsBetter",
          "LowerIsBetter",
          "TargetArea"
        ],
        "type": "string"
      },
      "enabled": {
        "description": "True if the External Metric Definition is enabled",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the External Metric Definition",
        "type": "string"
      },
      "precision": {
        "description": "The decimal precision of the External Metric Definition. Must be at least 0 and at most 5",
        "format": "int32",
        "maximum": 5,
        "minimum": 0,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExternalOrganization": {
    "properties": {
      "address": {
        "$ref": "#/definitions/ContactAddress"
      },
      "companyType": {
        "type": "string"
      },
      "createDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by schemaId and schemaVersion.",
        "type": "object"
      },
      "employeeCount": {
        "format": "int64",
        "type": "integer"
      },
      "externalDataSources": {
        "description": "Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.",
        "items": {
          "$ref": "#/definitions/ExternalDataSource"
        },
        "readOnly": true,
        "type": "array"
      },
      "externalSystemUrl": {
        "description": "A string that identifies an external system-of-record resource that may have more detailed information on the organization. It should be a valid URL (including the http/https protocol, port, and path [if any]). The value is automatically trimmed of any leading and trailing whitespace.",
        "type": "string"
      },
      "faxNumber": {
        "$ref": "#/definitions/PhoneNumber"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "industry": {
        "type": "string"
      },
      "modifyDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The name of the company.",
        "type": "string"
      },
      "phoneNumber": {
        "$ref": "#/definitions/PhoneNumber"
      },
      "primaryContactId": {
        "type": "string"
      },
      "revenue": {
        "format": "int64",
        "type": "integer"
      },
      "schema": {
        "$ref": "#/definitions/DataSchema",
        "description": "The schema defining custom fields for this contact"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "tickers": {
        "items": {
          "$ref": "#/definitions/Ticker"
        },
        "type": "array"
      },
      "trustor": {
        "$ref": "#/definitions/Trustor"
      },
      "twitterId": {
        "$ref": "#/definitions/TwitterId"
      },
      "websites": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ExternalOrganizationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ExternalOrganization"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "partialResults": {
        "type": "boolean"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ExternalOrganizationTrustorLink": {
    "properties": {
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "externalOrganizationId": {
        "description": "The id of a PureCloud External Organization entity in the External Contacts system that will be used to represent the trustor org",
        "type": "string"
      },
      "externalOrganizationUri": {
        "description": "The URI for the External Organization that is linked to the trustor org",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "trustorOrgId": {
        "description": "The id of a PureCloud organization that has granted trust to this PureCloud organization",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ExternalSegment": {
    "properties": {
      "id": {
        "description": "Identifier for the external segment in the system where it originates from.",
        "type": "string"
      },
      "name": {
        "description": "Name for the external segment in the system where it originates from.",
        "type": "string"
      },
      "source": {
        "description": "The external system where the segment originates from.",
        "enum": [
          "AdobeExperiencePlatform",
          "Custom"
        ],
        "type": "string"
      }
    },
    "required": [
      "id",
      "name",
      "source"
    ],
    "type": "object"
  },
  "ExternalSource": {
    "properties": {
      "active": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "linkConfiguration": {
        "$ref": "#/definitions/LinkConfiguration"
      },
      "name": {
        "description": "The name of the external source.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FacebookAppCredentials": {
    "properties": {
      "id": {
        "description": "Genesys Cloud Facebook App Id",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "FacebookId": {
    "description": "User information for a Facebook user interacting with a page or app",
    "properties": {
      "displayName": {
        "description": "The displayName of this person's Facebook account. Roughly translates to user.first_name + ' ' + user.last_name in the Facebook API.",
        "type": "string"
      },
      "ids": {
        "description": "The set of scopedIds that this person has. Each scopedId is specific to a page or app that the user interacts with.",
        "items": {
          "$ref": "#/definitions/FacebookScopedId"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "FacebookIntegration": {
    "properties": {
      "appId": {
        "description": "The App Id from Facebook messenger",
        "type": "string"
      },
      "createError": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error information returned, if createStatus is set to Error",
        "readOnly": true
      },
      "createStatus": {
        "description": "Status of asynchronous create operation",
        "enum": [
          "Initiated",
          "Completed",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Integration"
      },
      "dateCreated": {
        "description": "Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this Integration was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A unique Integration Id.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingReference"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that last modified this Integration"
      },
      "name": {
        "description": "The name of the Facebook Integration",
        "type": "string"
      },
      "pageId": {
        "description": "The Page Id from Facebook messenger",
        "type": "string"
      },
      "pageName": {
        "description": "The name of the Facebook page",
        "readOnly": true,
        "type": "string"
      },
      "pageProfileImageUrl": {
        "description": "The url of the profile image of the Facebook page",
        "readOnly": true,
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The recipient reference associated to the Facebook Integration. This recipient is used to associate a flow to an integration",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Facebook Integration",
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "appId",
      "id",
      "name",
      "version"
    ],
    "type": "object"
  },
  "FacebookIntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FacebookIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FacebookIntegrationRequest": {
    "properties": {
      "appId": {
        "description": "The app Id of Facebook app. The appId is required when a customer wants to use their own approved Facebook app.",
        "type": "string"
      },
      "appSecret": {
        "description": "The app Secret of Facebook app. The appSecret is required when appId is provided.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the Facebook Integration",
        "type": "string"
      },
      "pageAccessToken": {
        "description": "The long-lived Page Access Token of Facebook page. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nWhen a pageAccessToken is provided, pageId and userAccessToken are not required.",
        "type": "string"
      },
      "pageId": {
        "description": "The page Id of Facebook page. The pageId is required when userAccessToken is provided.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "userAccessToken": {
        "description": "The short-lived User Access Token of the Facebook user logged into the Facebook app. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nWhen userAccessToken is provided, pageId is mandatory. \nWhen userAccessToken/pageId combination is provided, pageAccessToken is not required.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FacebookIntegrationUpdateRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the Facebook Integration",
        "type": "string"
      },
      "pageAccessToken": {
        "description": "The long-lived Page Access Token of Facebook page. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nEither pageAccessToken or userAccessToken should be provided.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "userAccessToken": {
        "description": "The short-lived User Access Token of the Facebook user logged into the Facebook app. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nEither pageAccessToken or userAccessToken should be provided.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FacebookPermission": {
    "description": "Facebook Permissions Model",
    "properties": {
      "name": {
        "description": "Facebook permission name",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Facebook permission type",
        "enum": [
          "FacebookPrivate",
          "FacebookPublic",
          "InstagramPrivate",
          "WhatsAppPrivate"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FacebookPermissionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FacebookPermission"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FacebookScopedId": {
    "description": "Scoped ID for a Facebook user interacting with a page or app",
    "properties": {
      "scopedId": {
        "description": "The unique page/app-specific scopedId for the user",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Facet": {
    "properties": {
      "name": {
        "description": "The name of the field on which to facet.",
        "type": "string"
      },
      "type": {
        "description": "The type of the facet, DATE or STRING.",
        "type": "string"
      }
    },
    "required": [
      "name",
      "type"
    ],
    "type": "object"
  },
  "FacetEntry": {
    "properties": {
      "attribute": {
        "$ref": "#/definitions/TermAttribute"
      },
      "missing": {
        "format": "int64",
        "type": "integer"
      },
      "other": {
        "format": "int64",
        "type": "integer"
      },
      "statistics": {
        "$ref": "#/definitions/FacetStatistics"
      },
      "termCount": {
        "format": "int32",
        "type": "integer"
      },
      "termType": {
        "enum": [
          "TERM",
          "NUMBERRANGE",
          "NUMBERHISTOGRAM",
          "DATERANGE",
          "DATEHISTOGRAM",
          "ID"
        ],
        "type": "string"
      },
      "terms": {
        "items": {
          "$ref": "#/definitions/FacetTerm"
        },
        "type": "array"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FacetKeyAttribute": {
    "properties": {
      "count": {
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "FacetStatistics": {
    "properties": {
      "count": {
        "format": "int64",
        "type": "integer"
      },
      "dateMax": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateMin": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "max": {
        "format": "double",
        "type": "number"
      },
      "mean": {
        "format": "double",
        "type": "number"
      },
      "min": {
        "format": "double",
        "type": "number"
      },
      "stdDeviation": {
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "FacetTerm": {
    "properties": {
      "count": {
        "format": "int64",
        "type": "integer"
      },
      "id": {
        "type": "string"
      },
      "key": {
        "format": "int64",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "term": {
        "type": "string"
      },
      "time": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FailedObject": {
    "properties": {
      "errorCode": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "version": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "FailedRecordingEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RecordingJobFailedRecording"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Fallback": {
    "properties": {
      "actions": {
        "description": "Fallback actions.",
        "items": {
          "$ref": "#/definitions/CopilotFallbackAction"
        },
        "type": "array"
      },
      "enabled": {
        "description": "Fallback actions are enabled.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Faq": {
    "properties": {
      "answer": {
        "description": "Answer from the knowledge base corresponding to the identified question.",
        "readOnly": true,
        "type": "string"
      },
      "confidence": {
        "description": "Value between 0 and 1. 1 corresponds to very confident, 0 to not confident at all",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "documentDisplayName": {
        "description": "A human-readable description of the document, e.g. 'Sample store FAQ'",
        "readOnly": true,
        "type": "string"
      },
      "documentUrl": {
        "description": "URL pointing to a web page if document was sourced from a URL.",
        "readOnly": true,
        "type": "string"
      },
      "question": {
        "description": "Question from the knowledge base that was matched to user request.",
        "readOnly": true,
        "type": "string"
      },
      "sourceUri": {
        "description": "A URI uniquely identifying the document, e.g. projects/acme-inc/knowledgeBases/MTAyNjgxNDU1Nzc3NTM1NzU0MjQ/documents/MTI5ODc3NzQzOTQ5MTc5NzgxMTI.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FaxConfig": {
    "properties": {
      "disableEmailPii": {
        "description": "Whether to disable PII for email notifications",
        "type": "boolean"
      },
      "sendEmailNotifications": {
        "description": "Whether to enable email notifications for this organization",
        "type": "boolean"
      }
    },
    "required": [
      "disableEmailPii",
      "sendEmailNotifications"
    ],
    "type": "object"
  },
  "FaxDocument": {
    "properties": {
      "callerAddress": {
        "type": "string"
      },
      "contentLength": {
        "format": "int64",
        "type": "integer"
      },
      "contentType": {
        "type": "string"
      },
      "contentUri": {
        "format": "uri",
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "downloadSharingUri": {
        "format": "uri",
        "type": "string"
      },
      "filename": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "pageCount": {
        "format": "int64",
        "type": "integer"
      },
      "read": {
        "type": "boolean"
      },
      "receiverAddress": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sharingUri": {
        "format": "uri",
        "type": "string"
      },
      "thumbnails": {
        "items": {
          "$ref": "#/definitions/DocumentThumbnail"
        },
        "type": "array"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "FaxDocumentEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FaxDocument"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FaxSendRequest": {
    "properties": {
      "addresses": {
        "description": "A list of outbound fax dialing addresses. E.g. +13175555555 or 3175555555",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "contentType": {
        "description": "The content type that is going to be uploaded. If Content Management document is used for faxing, contentType will be ignored",
        "enum": [
          "application/pdf",
          "image/tiff",
          "application/msword",
          "application/vnd.oasis.opendocument.text",
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        ],
        "type": "string"
      },
      "coverSheet": {
        "$ref": "#/definitions/CoverSheet",
        "description": "Data for coversheet generation."
      },
      "documentId": {
        "description": "DocumentId of Content Management artifact. If Content Management document is not used for faxing, documentId should be null",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeZoneOffsetMinutes": {
        "description": "Time zone offset minutes from GMT",
        "format": "int32",
        "type": "integer"
      },
      "workspace": {
        "$ref": "#/definitions/Workspace",
        "description": "Workspace in which the document should be stored. If Content Management document is used for faxing, workspace will be ignored"
      }
    },
    "required": [
      "addresses"
    ],
    "type": "object"
  },
  "FaxSendResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "uploadDestinationUri": {
        "format": "uri",
        "type": "string"
      },
      "uploadMethodType": {
        "enum": [
          "SINGLE_PUT",
          "MULTIPART_POST"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "FaxStatus": {
    "properties": {
      "activePage": {
        "description": "Active page of the transmission.",
        "format": "int64",
        "type": "integer"
      },
      "baudRate": {
        "description": "Current signaling rate of transmission, baud rate.",
        "format": "int64",
        "type": "integer"
      },
      "bytesTransmitted": {
        "description": "Number of bytes that have competed transmission.",
        "format": "int64",
        "type": "integer"
      },
      "direction": {
        "description": "The fax direction, either \"send\" or \"receive\".",
        "type": "string"
      },
      "expectedPages": {
        "description": "Total number of expected pages, if known.",
        "format": "int64",
        "type": "integer"
      },
      "lineErrors": {
        "description": "Number of line errors.",
        "format": "int64",
        "type": "integer"
      },
      "linesTransmitted": {
        "description": "Number of lines that have completed transmission.",
        "format": "int64",
        "type": "integer"
      },
      "pageErrors": {
        "description": "Number of page errors.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FaxSummary": {
    "properties": {
      "readCount": {
        "format": "int32",
        "type": "integer"
      },
      "totalCount": {
        "format": "int32",
        "type": "integer"
      },
      "unreadCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FeatureState": {
    "properties": {
      "enabled": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Feedback": {
    "properties": {
      "relevance": {
        "description": "Feedback relevance.",
        "enum": [
          "Unknown",
          "Relevant",
          "Irrelevant"
        ],
        "type": "string"
      },
      "suggestionId": {
        "description": "Feedback suggestion id.",
        "type": "string"
      },
      "userProvided": {
        "description": "Indicates whether the answer/item was clicked by the human agent or not.",
        "type": "boolean"
      }
    },
    "required": [
      "relevance",
      "suggestionId"
    ],
    "type": "object"
  },
  "FeedbackAddRequest": {
    "properties": {
      "rating": {
        "description": "Agent’s rating for the system-generated summary.",
        "enum": [
          "Positive",
          "Negative"
        ],
        "type": "string"
      },
      "summary": {
        "description": "Agent's summary for the conversation",
        "example": "Customer wants to cancel the ticket and he is happy with the service.",
        "type": "string"
      }
    },
    "required": [
      "summary"
    ],
    "type": "object"
  },
  "FieldConfig": {
    "properties": {
      "entityType": {
        "enum": [
          "person",
          "group",
          "org"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "schemaVersion": {
        "type": "string"
      },
      "sections": {
        "items": {
          "$ref": "#/definitions/Section"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "type": "string"
      },
      "version": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "FieldConfigs": {
    "properties": {
      "group": {
        "$ref": "#/definitions/FieldConfig"
      },
      "org": {
        "$ref": "#/definitions/FieldConfig"
      },
      "person": {
        "$ref": "#/definitions/FieldConfig"
      }
    },
    "type": "object"
  },
  "FieldList": {
    "properties": {
      "customLabels": {
        "type": "boolean"
      },
      "gdpr": {
        "type": "boolean"
      },
      "instructionText": {
        "type": "string"
      },
      "key": {
        "type": "string"
      },
      "labelKeys": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "params": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "repeatable": {
        "type": "boolean"
      },
      "required": {
        "type": "boolean"
      },
      "state": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "FileSpecificationTemplate": {
    "properties": {
      "columnInformation": {
        "description": "Columns specification",
        "items": {
          "$ref": "#/definitions/Column"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "delimiter": {
        "description": "Kind of delimiter",
        "enum": [
          "Comma",
          "Pipe",
          "Colon",
          "Tab",
          "Semicolon",
          "Custom"
        ],
        "type": "string"
      },
      "delimiterValue": {
        "description": "Delimiter character, used only when delimiter=\"Custom\"",
        "type": "string"
      },
      "description": {
        "description": "Description of the file specification template",
        "type": "string"
      },
      "format": {
        "description": "File format",
        "enum": [
          "FixedLength",
          "Delimited"
        ],
        "type": "string"
      },
      "header": {
        "description": "If true indicates that delimited file has a header row, which can provide column names",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the File Specification template.",
        "type": "string"
      },
      "numberOfHeadingLinesSkipped": {
        "description": "Number of heading lines to be skipped",
        "format": "int32",
        "type": "integer"
      },
      "numberOfTrailingLinesSkipped": {
        "description": "Number of trailing lines to be skipped",
        "format": "int32",
        "type": "integer"
      },
      "preprocessingRules": {
        "description": "Preprocessing rules",
        "items": {
          "$ref": "#/definitions/PreprocessingRule"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "format",
      "name"
    ],
    "type": "object"
  },
  "FileSpecificationTemplateEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FileSpecificationTemplate"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FileUploadMode": {
    "properties": {
      "fileTypes": {
        "description": "A list of supported content types for uploading files.",
        "items": {
          "enum": [
            "image/jpeg",
            "image/gif",
            "image/png"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "maxFileSizeKB": {
        "description": "The maximum file size for file uploads in kilobytes. Default is 10240 (10 MB)",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FileUploadSettings": {
    "description": "File upload settings for messenger",
    "properties": {
      "enableAttachments": {
        "description": "whether or not attachments are enabled",
        "type": "boolean"
      },
      "modes": {
        "description": "The list of supported file upload modes",
        "items": {
          "$ref": "#/definitions/FileUploadMode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Filter": {
    "properties": {
      "name": {
        "description": "The name of the field by which to filter.",
        "type": "string"
      },
      "operator": {
        "description": "The operation that the filter performs.",
        "type": "string"
      },
      "type": {
        "description": "The type of the filter, DATE or STRING.",
        "type": "string"
      },
      "values": {
        "description": "The values to make the filter comparison against.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "name",
      "operator",
      "type",
      "values"
    ],
    "type": "object"
  },
  "FilterPreviewResponse": {
    "properties": {
      "filteredContacts": {
        "format": "int64",
        "type": "integer"
      },
      "preview": {
        "items": {
          "$ref": "#/definitions/DialerContact"
        },
        "type": "array"
      },
      "totalContacts": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FixedAvailability": {
    "properties": {
      "availabilityRange": {
        "$ref": "#/definitions/AvailabilityRange",
        "description": "The range of time of day the activity can be scheduled"
      },
      "dateRange": {
        "$ref": "#/definitions/RequiredLocalDateRange",
        "description": "The range of date for which the activity plan could be scheduled"
      },
      "daysOfWeek": {
        "description": "The days of week available for scheduling. Empty list or null means daysOfWeek is not considered",
        "items": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Flow": {
    "properties": {
      "active": {
        "type": "boolean"
      },
      "checkedInVersion": {
        "$ref": "#/definitions/FlowVersion"
      },
      "compatibleFlowTypes": {
        "description": "Compatible flow types designate which flow types are allowed to embed a flow’s configuration within their own flow configuration.  Currently the only flows that can be embedded are Common Module flows and the embedding flow can invoke them using the Call Common Module action.",
        "items": {
          "enum": [
            "BOT",
            "COMMONMODULE",
            "DIGITALBOT",
            "INBOUNDCALL",
            "INBOUNDCHAT",
            "INBOUNDEMAIL",
            "INBOUNDSHORTMESSAGE",
            "INQUEUECALL",
            "INQUEUEEMAIL",
            "INQUEUESHORTMESSAGE",
            "OUTBOUNDCALL",
            "SECURECALL",
            "SPEECH",
            "SURVEYINVITE",
            "VOICE",
            "VOICEMAIL",
            "VOICESURVEY",
            "WORKFLOW",
            "WORKITEM"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "currentOperation": {
        "$ref": "#/definitions/Operation"
      },
      "debugVersion": {
        "$ref": "#/definitions/FlowVersion"
      },
      "deleted": {
        "type": "boolean"
      },
      "description": {
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The flow identifier",
        "type": "string"
      },
      "inputSchema": {
        "description": "json schema describing the inputs for the flow",
        "type": "object"
      },
      "lockedClient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "OAuth client that has the flow locked."
      },
      "lockedUser": {
        "$ref": "#/definitions/User",
        "description": "User that has the flow locked."
      },
      "name": {
        "description": "The flow name",
        "type": "string"
      },
      "nluInfo": {
        "$ref": "#/definitions/NluInfo",
        "description": "Information about the natural language understanding configuration for the published version of the flow",
        "readOnly": true
      },
      "outputSchema": {
        "description": "json schema describing the outputs for the flow",
        "type": "object"
      },
      "publishedBy": {
        "$ref": "#/definitions/User"
      },
      "publishedVersion": {
        "$ref": "#/definitions/FlowVersion"
      },
      "savedVersion": {
        "$ref": "#/definitions/FlowVersion"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedLanguages": {
        "description": "List of supported languages for the published version of the flow.",
        "items": {
          "$ref": "#/definitions/SupportedLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "system": {
        "type": "boolean"
      },
      "type": {
        "enum": [
          "BOT",
          "COMMONMODULE",
          "DIGITALBOT",
          "INBOUNDCALL",
          "INBOUNDCHAT",
          "INBOUNDEMAIL",
          "INBOUNDSHORTMESSAGE",
          "INQUEUECALL",
          "INQUEUEEMAIL",
          "INQUEUESHORTMESSAGE",
          "OUTBOUNDCALL",
          "SECURECALL",
          "SPEECH",
          "SURVEYINVITE",
          "VOICE",
          "VOICEMAIL",
          "VOICESURVEY",
          "WORKFLOW",
          "WORKITEM"
        ],
        "type": "string"
      },
      "virtualAgentEnabled": {
        "type": "boolean"
      },
      "worktypeId": {
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FlowActivityData": {
    "properties": {
      "data": {
        "description": "Data for metrics",
        "items": {
          "$ref": "#/definitions/FlowActivityMetricValue"
        },
        "type": "array"
      },
      "entities": {
        "description": "Details for active entities",
        "items": {
          "$ref": "#/definitions/FlowActivityEntityData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from grouping dimension to value",
        "type": "object"
      },
      "truncated": {
        "description": "Flag for a truncated list of entities. If truncated, the first half of the list of entities will contain the oldest entities and the second half the newest entities.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "FlowActivityEntityData": {
    "properties": {
      "activeRouting": {
        "description": "Active routing method",
        "enum": [
          "Bullseye",
          "Conditional",
          "Direct",
          "Last",
          "Manual",
          "Predictive",
          "Preferred",
          "Standard",
          "Vip"
        ],
        "type": "string"
      },
      "activityDate": {
        "description": "The time at which the activity was observed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "addressFrom": {
        "description": "The address that initiated an action",
        "type": "string"
      },
      "addressTo": {
        "description": "The address receiving an action",
        "type": "string"
      },
      "ani": {
        "description": "Automatic Number Identification (caller's number)",
        "type": "string"
      },
      "conversationId": {
        "description": "Unique identifier for the conversation",
        "type": "string"
      },
      "convertedFrom": {
        "description": "Session media type that was converted from in case of a media type conversion",
        "type": "string"
      },
      "convertedTo": {
        "description": "Session media type that was converted to in case of a media type conversion",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the communication",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "dnis": {
        "description": "Dialed number identification service (number dialed by the calling party)",
        "type": "string"
      },
      "flowId": {
        "description": "The unique identifier of this flow",
        "type": "string"
      },
      "flowType": {
        "description": "The type of this flow",
        "enum": [
          "BOT",
          "COMMONMODULE",
          "DIGITALBOT",
          "INBOUNDCALL",
          "INBOUNDCHAT",
          "INBOUNDEMAIL",
          "INBOUNDSHORTMESSAGE",
          "INQUEUECALL",
          "INQUEUEEMAIL",
          "INQUEUESHORTMESSAGE",
          "OUTBOUNDCALL",
          "SECURECALL",
          "SPEECH",
          "SURVEYINVITE",
          "VOICE",
          "VOICEMAIL",
          "VOICESURVEY",
          "WORKFLOW",
          "WORKITEM"
        ],
        "type": "string"
      },
      "mediaType": {
        "description": "The session media type",
        "enum": [
          "callback",
          "chat",
          "cobrowse",
          "email",
          "message",
          "screenshare",
          "unknown",
          "video",
          "voice"
        ],
        "type": "string"
      },
      "metric": {
        "description": "Activity metric",
        "enum": [
          "oFlow"
        ],
        "type": "string"
      },
      "participantName": {
        "description": "A human readable name identifying the participant",
        "type": "string"
      },
      "queueId": {
        "description": "Queue identifier",
        "type": "string"
      },
      "requestedLanguageId": {
        "description": "Unique identifier for the language requested for an interaction",
        "type": "string"
      },
      "requestedRoutingSkillIds": {
        "description": "Unique identifier(s) for skill(s) requested for an interaction",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requestedRoutings": {
        "description": "Routing type(s) for requested/attempted routing methods.",
        "items": {
          "enum": [
            "Bullseye",
            "Conditional",
            "Direct",
            "Last",
            "Manual",
            "Predictive",
            "Preferred",
            "Standard",
            "Vip"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "routingPriority": {
        "description": "Routing priority for the current interaction",
        "format": "int64",
        "type": "integer"
      },
      "scoredAgents": {
        "description": "Scored agents",
        "items": {
          "$ref": "#/definitions/FlowActivityScoredAgent"
        },
        "type": "array"
      },
      "sessionId": {
        "description": "The unique identifier of this session",
        "type": "string"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "usedRouting": {
        "description": "Complete routing method",
        "enum": [
          "Bullseye",
          "Conditional",
          "Direct",
          "Last",
          "Manual",
          "Predictive",
          "Preferred",
          "Standard",
          "Vip"
        ],
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "required": [
      "activityDate"
    ],
    "type": "object"
  },
  "FlowActivityMetricValue": {
    "properties": {
      "count": {
        "description": "metric count",
        "format": "int32",
        "type": "integer"
      },
      "metric": {
        "description": "metric",
        "enum": [
          "oFlow"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowActivityQuery": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/FlowActivityQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "groupBy": {
        "description": "Dimension(s) to group by",
        "items": {
          "enum": [
            "activeRouting",
            "addressFrom",
            "addressTo",
            "agentScore",
            "ani",
            "conversationId",
            "convertedFrom",
            "convertedTo",
            "direction",
            "dnis",
            "flowId",
            "flowType",
            "mediaType",
            "participantName",
            "queueId",
            "requestedLanguageId",
            "requestedRouting",
            "requestedRoutingSkillId",
            "routingPriority",
            "scoredAgentId",
            "sessionId",
            "teamId",
            "usedRouting",
            "userId"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metrics": {
        "description": "List of requested metrics",
        "items": {
          "$ref": "#/definitions/FlowActivityQueryMetric"
        },
        "type": "array"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      }
    },
    "required": [
      "groupBy",
      "metrics"
    ],
    "type": "object"
  },
  "FlowActivityQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "FlowActivityQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/FlowActivityQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "FlowActivityQueryMetric": {
    "properties": {
      "details": {
        "description": "Flag for including observation details for this metric in the response",
        "type": "boolean"
      },
      "metric": {
        "description": "The requested metric",
        "enum": [
          "oFlow"
        ],
        "type": "string"
      }
    },
    "required": [
      "metric"
    ],
    "type": "object"
  },
  "FlowActivityQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "activeRouting",
          "addressFrom",
          "addressTo",
          "agentScore",
          "ani",
          "conversationId",
          "convertedFrom",
          "convertedTo",
          "direction",
          "dnis",
          "flowId",
          "flowType",
          "mediaType",
          "participantName",
          "queueId",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "routingPriority",
          "scoredAgentId",
          "sessionId",
          "teamId",
          "usedRouting",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "FlowActivityResponse": {
    "properties": {
      "entityIdDimension": {
        "description": "Dimension that is used as an entityId",
        "enum": [
          "activeRouting",
          "addressFrom",
          "addressTo",
          "agentScore",
          "ani",
          "conversationId",
          "convertedFrom",
          "convertedTo",
          "direction",
          "dnis",
          "flowId",
          "flowType",
          "mediaType",
          "participantName",
          "queueId",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "routingPriority",
          "scoredAgentId",
          "sessionId",
          "teamId",
          "usedRouting",
          "userId"
        ],
        "type": "string"
      },
      "results": {
        "description": "Query results",
        "items": {
          "$ref": "#/definitions/FlowActivityData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FlowActivityScoredAgent": {
    "properties": {
      "agentScore": {
        "description": "Assigned agent score for this conversation (0 - 100, higher being better)",
        "format": "int32",
        "type": "integer"
      },
      "scoredAgentId": {
        "description": "Unique identifier for the agent that was scored for this conversation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "FlowAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "FlowAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/FlowAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "FlowAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "activeRouting",
          "activeSkillId",
          "addressFrom",
          "addressTo",
          "agentAssistantId",
          "agentBullseyeRing",
          "agentOwned",
          "agentRank",
          "agentScore",
          "ani",
          "assignerId",
          "authenticated",
          "canonicalExternalContactId",
          "conversationId",
          "conversationInitiator",
          "convertedFrom",
          "convertedTo",
          "customerParticipation",
          "deliveryStatus",
          "destinationAddress",
          "direction",
          "disconnectType",
          "divisionId",
          "dnis",
          "edgeId",
          "eligibleAgentCount",
          "endingLanguage",
          "entryReason",
          "entryType",
          "errorCode",
          "exitReason",
          "extendedDeliveryStatus",
          "externalContactId",
          "externalMediaCount",
          "externalOrganizationId",
          "externalTag",
          "firstQueue",
          "flaggedReason",
          "flowId",
          "flowInType",
          "flowMilestoneId",
          "flowName",
          "flowOutType",
          "flowOutcome",
          "flowOutcomeId",
          "flowOutcomeValue",
          "flowSubType",
          "flowType",
          "flowVersion",
          "groupId",
          "interactionType",
          "journeyActionId",
          "journeyActionMapId",
          "journeyActionMapVersion",
          "journeyCustomerId",
          "journeyCustomerIdType",
          "journeyCustomerSessionId",
          "journeyCustomerSessionIdType",
          "knowledgeBaseId",
          "mediaCount",
          "mediaType",
          "messageType",
          "originatingDirection",
          "outboundCampaignId",
          "outboundContactId",
          "outboundContactListId",
          "participantName",
          "peerId",
          "proposedAgentId",
          "provider",
          "purpose",
          "queueId",
          "recognitionFailureReason",
          "remote",
          "removedSkillId",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "roomId",
          "routingPriority",
          "routingRing",
          "routingRule",
          "routingRuleType",
          "scoredAgentId",
          "selectedAgentId",
          "selectedAgentRank",
          "selfServed",
          "sessionDnis",
          "sessionId",
          "startingLanguage",
          "stationId",
          "teamId",
          "transferTargetAddress",
          "transferTargetName",
          "transferType",
          "usedRouting",
          "userId",
          "videoPresent",
          "waitingInteractionCount",
          "wrapUpCode"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "FlowAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/FlowAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FlowAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/FlowAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "activeRouting",
            "activeSkillId",
            "addressFrom",
            "addressTo",
            "agentAssistantId",
            "agentBullseyeRing",
            "agentOwned",
            "agentRank",
            "agentScore",
            "ani",
            "assignerId",
            "authenticated",
            "conversationId",
            "conversationInitiator",
            "convertedFrom",
            "convertedTo",
            "customerParticipation",
            "deliveryStatus",
            "destinationAddress",
            "direction",
            "disconnectType",
            "divisionId",
            "dnis",
            "edgeId",
            "eligibleAgentCount",
            "endingLanguage",
            "entryReason",
            "entryType",
            "errorCode",
            "exitReason",
            "extendedDeliveryStatus",
            "externalContactId",
            "externalMediaCount",
            "externalOrganizationId",
            "externalTag",
            "firstQueue",
            "flaggedReason",
            "flowId",
            "flowInType",
            "flowMilestoneId",
            "flowName",
            "flowOutType",
            "flowOutcome",
            "flowOutcomeId",
            "flowOutcomeValue",
            "flowSubType",
            "flowType",
            "flowVersion",
            "groupId",
            "interactionType",
            "journeyActionId",
            "journeyActionMapId",
            "journeyActionMapVersion",
            "journeyCustomerId",
            "journeyCustomerIdType",
            "journeyCustomerSessionId",
            "journeyCustomerSessionIdType",
            "knowledgeBaseId",
            "mediaCount",
            "mediaType",
            "messageType",
            "originatingDirection",
            "outboundCampaignId",
            "outboundContactId",
            "outboundContactListId",
            "participantName",
            "peerId",
            "proposedAgentId",
            "provider",
            "purpose",
            "queueId",
            "recognitionFailureReason",
            "remote",
            "removedSkillId",
            "requestedLanguageId",
            "requestedRouting",
            "requestedRoutingSkillId",
            "roomId",
            "routingPriority",
            "routingRing",
            "routingRule",
            "routingRuleType",
            "scoredAgentId",
            "selectedAgentId",
            "selectedAgentRank",
            "selfServed",
            "sessionDnis",
            "sessionId",
            "startingLanguage",
            "stationId",
            "teamId",
            "transferTargetAddress",
            "transferTargetName",
            "transferType",
            "usedRouting",
            "userId",
            "videoPresent",
            "waitingInteractionCount",
            "wrapUpCode"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nFlow",
            "nFlowMilestone",
            "nFlowOutcome",
            "nFlowOutcomeFailed",
            "oFlowMilestone",
            "tFlow",
            "tFlowDisconnect",
            "tFlowExit",
            "tFlowOutcome"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/FlowAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "FlowAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nFlow",
          "nFlowMilestone",
          "nFlowOutcome",
          "nFlowOutcomeFailed",
          "oFlowMilestone",
          "tFlow",
          "tFlowDisconnect",
          "tFlowExit",
          "tFlowOutcome"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "FlowCharacteristics": {
    "description": "This is a set of enabled characteristics for the loglevel",
    "properties": {
      "communications": {
        "description": "Communications are either audio or digital communications sent to or received from a participant.  An example here would be the initial greeting in an inbound call flow where it plays a greeting message to the participant.",
        "type": "boolean"
      },
      "eventError": {
        "description": "Whether to report flow error events.",
        "type": "boolean"
      },
      "eventOther": {
        "description": "Whether to report events other than errors or warnings such as a language change, loop event.",
        "type": "boolean"
      },
      "eventWarning": {
        "description": "Whether to report flow warning events.",
        "type": "boolean"
      },
      "executionInputOutputs": {
        "description": "Whether to report input setting input setting values and output data values for individual execution items above.  For example, if you have FlowExecutionInputOutputs and a Call Data Action ran in a flow, if FlowExecutionItems was enabled you'd see the fact a Call Data Action ran and the output path it took but nothing about which Data Action it ran, the input data sent to it at flow runtime and the data returned from it.  If you enable this characteristic, execution data will contain this additional detail.",
        "type": "boolean"
      },
      "executionItems": {
        "description": "Whether to report execution data about individual actions, menus, states, tasks, etc. etc. that ran during execution of the flow.",
        "type": "boolean"
      },
      "names": {
        "description": "This characteristic specifies whether or not name information should be emitted in execution data such as action, task, state or even the flow name itself.  Names are very handy from a readability standpoint but they do take up additional space in flow execution data instances.",
        "type": "boolean"
      },
      "variables": {
        "description": "Whether to report assignment of values to variables in flow execution data. It's important to remember there is a difference between variable value assignments and output data from an action.  If you have a Call Digital Bot flow action in an Inbound Message flow and there is no variable bound to the Exit Reason output but FlowExecutionInputOutputs is enabled, you will still be able to see the exit reason from the digital bot flow in execution data even though it is not bound to a variable.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "FlowDiagnosticInfo": {
    "properties": {
      "lastActionId": {
        "description": "The step number of the survey invite flow where the error occurred.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowDivisionView": {
    "properties": {
      "debugVersion": {
        "$ref": "#/definitions/FlowVersion",
        "description": "debug version information if there is a debug version"
      },
      "description": {
        "description": "the flow description",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The flow identifier",
        "type": "string"
      },
      "inputSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "json schema describing the inputs for the flow"
      },
      "name": {
        "description": "The flow name",
        "type": "string"
      },
      "outputSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "json schema describing the outputs for the flow"
      },
      "publishedVersion": {
        "$ref": "#/definitions/FlowVersion",
        "description": "published version information if there is a published version"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedLanguages": {
        "description": "List of supported languages for the published version of the flow.",
        "items": {
          "$ref": "#/definitions/SupportedLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "type": {
        "enum": [
          "BOT",
          "COMMONMODULE",
          "DIGITALBOT",
          "INBOUNDCALL",
          "INBOUNDCHAT",
          "INBOUNDEMAIL",
          "INBOUNDSHORTMESSAGE",
          "INQUEUECALL",
          "INQUEUEEMAIL",
          "INQUEUESHORTMESSAGE",
          "OUTBOUNDCALL",
          "SECURECALL",
          "SPEECH",
          "SURVEYINVITE",
          "VOICE",
          "VOICEMAIL",
          "VOICESURVEY",
          "WORKFLOW",
          "WORKITEM"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FlowDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Flow"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowExecutionAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "FlowExecutionAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowExecutionAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "FlowExecutionAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/FlowExecutionAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowExecutionAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "FlowExecutionAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "divisionId",
          "flowId",
          "flowObjectId",
          "flowVersion"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "FlowExecutionAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/FlowExecutionAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FlowExecutionAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/FlowExecutionAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "divisionId",
            "flowId",
            "flowObjectId",
            "flowVersion"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nFlowExecutions"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/FlowExecutionAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "FlowExecutionAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nFlowExecutions"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "FlowExecutionDataQueryResult": {
    "description": "This is the metadata of an executionData entry for a flow.",
    "properties": {
      "conversationId": {
        "description": "The id of the conversation that executed this flow.",
        "type": "string"
      },
      "endDateTime": {
        "description": "The end time for the execution of this flow. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "flowErrorReason": {
        "description": "If the flow errored out this is the reason.",
        "type": "string"
      },
      "flowId": {
        "description": "The id of the flow that was executed.",
        "type": "string"
      },
      "flowName": {
        "description": "The name of the flow.",
        "type": "string"
      },
      "flowType": {
        "description": "The type of flow.",
        "enum": [
          "bot",
          "commonmodule",
          "digitalbot",
          "inboundcall",
          "inboundchat",
          "inboundemail",
          "inboundshortmessage",
          "inqueuecall",
          "inqueueshortmessage",
          "inqueueemail",
          "outboundcall",
          "securecall",
          "surveyinvite",
          "voice",
          "voicemail",
          "voicesurvey",
          "workflow",
          "workitem"
        ],
        "type": "string"
      },
      "flowVersion": {
        "description": "The version of the flow that was executed.",
        "type": "string"
      },
      "flowWarningReason": {
        "description": "If the flow had a warning, this is the reason.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDateTime": {
        "description": "The start time for the execution of this flow. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowExecutionLaunchRequest": {
    "description": "Parameters for launching a flow.",
    "properties": {
      "flowId": {
        "description": "ID of the flow to launch.",
        "type": "string"
      },
      "flowVersion": {
        "description": "The version of the flow to launch. Omit this value (or supply null/empty) to use the latest published version.",
        "type": "string"
      },
      "inputData": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Input values to the flow. Valid values are defined by a flow's input JSON schema.",
        "type": "object"
      },
      "name": {
        "description": "A displayable name to assign to the new flow execution",
        "type": "string"
      }
    },
    "required": [
      "flowId"
    ],
    "type": "object"
  },
  "FlowExecutionLaunchResponse": {
    "description": "Response object from launching a flow.",
    "properties": {
      "flowVersion": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The version of the flow that launched"
      },
      "id": {
        "description": "The flow execution ID",
        "type": "string"
      },
      "name": {
        "description": "The flow execution name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealth": {
    "properties": {
      "flowVersionInfo": {
        "$ref": "#/definitions/FlowHealthVersionInfo",
        "description": "Info about given flow version."
      },
      "intents": {
        "description": "Health metrics information for the intents.",
        "items": {
          "$ref": "#/definitions/FlowHealthIntentInfo"
        },
        "type": "array"
      },
      "languageInfo": {
        "additionalProperties": {
          "$ref": "#/definitions/LocaleInfo"
        },
        "description": "Each language's status about its health computation.",
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealthErrorInfo": {
    "properties": {
      "code": {
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Map of variables and params for the error message.",
        "type": "object"
      },
      "messageWithParams": {
        "description": "Error message with params included.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealthIntent": {
    "properties": {
      "flowVersionInfo": {
        "$ref": "#/definitions/FlowHealthIntentVersionInfo",
        "description": "Info about given flow version."
      },
      "health": {
        "$ref": "#/definitions/HealthInfo",
        "description": "Health computation details for given language."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "Language provided for this intent's health.",
        "enum": [
          "en-us",
          "en-gb",
          "en-au",
          "en-za",
          "en-nz",
          "en-ie",
          "fr-ca",
          "fr-fr",
          "es-us",
          "es-es",
          "es-mx",
          "de-de",
          "it-it",
          "pt-br",
          "pt-pt",
          "nl-nl"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealthIntentInfo": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "languageHealth": {
        "additionalProperties": {
          "$ref": "#/definitions/LocaleHealth"
        },
        "description": "Health computation info for each language.",
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealthIntentUtterance": {
    "properties": {
      "confusionInfo": {
        "$ref": "#/definitions/ConfusionInfo",
        "description": "Confusion details with other utterances."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issueCount": {
        "description": "Number of issues found for this utterance.",
        "format": "int64",
        "type": "integer"
      },
      "outlierInfo": {
        "$ref": "#/definitions/OutlierInfo",
        "description": "Details about this utterance being an outlier or not."
      },
      "staticValidationResults": {
        "description": "Validation results for this utterance.",
        "items": {
          "enum": [
            "TooFewUtterances",
            "TooManyUtterances",
            "UtteranceTooShort",
            "UtteranceTooLong"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "text": {
        "description": "Utterance Text.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealthIntentVersionInfo": {
    "properties": {
      "flowVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Given flow's Version Info.",
        "readOnly": true
      },
      "nluDomain": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "NLU Domain Info for this flow version.",
        "readOnly": true
      },
      "nluVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "NLU Version Info for this flow version.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "FlowHealthUtterance": {
    "properties": {
      "confusionInfo": {
        "$ref": "#/definitions/ConfusionDetails",
        "description": "Confusion details with other utterances."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issueCount": {
        "description": "Number of issues found for this utterance.",
        "format": "int64",
        "type": "integer"
      },
      "language": {
        "description": "Language provided for this utterance's health.",
        "enum": [
          "en-us",
          "en-gb",
          "en-au",
          "en-za",
          "en-nz",
          "en-ie",
          "fr-ca",
          "fr-fr",
          "es-us",
          "es-es",
          "es-mx",
          "de-de",
          "it-it",
          "pt-br",
          "pt-pt",
          "nl-nl"
        ],
        "type": "string"
      },
      "outlierInfo": {
        "$ref": "#/definitions/OutlierInfo",
        "description": "Details about this utterance being an outlier or not."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "staticValidationResults": {
        "description": "Validation results for the utterance.",
        "items": {
          "enum": [
            "TooFewUtterances",
            "TooManyUtterances",
            "UtteranceTooShort",
            "UtteranceTooLong"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "text": {
        "description": "Utterance Text.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowHealthVersionInfo": {
    "properties": {
      "flowVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Given flow's Version Info.",
        "readOnly": true
      },
      "nluDomain": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "NLU Domain Info for this flow version.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "FlowLogLevel": {
    "description": "This is a table of settings per a loglevel that define what will be logged in executionData when enabled (true)",
    "properties": {
      "characteristics": {
        "$ref": "#/definitions/FlowCharacteristics",
        "description": "Shows what characteristics are enabled for this log level"
      },
      "level": {
        "description": "The logLevel for this characteristics set",
        "enum": [
          "Unknown",
          "Disabled",
          "Base",
          "Notes",
          "VerboseNotes",
          "All"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowLogLevelCharacteristicsDefinition": {
    "description": "Defines a characteristic that can be captured by data providers",
    "properties": {
      "dependsOn": {
        "$ref": "#/definitions/FlowCharacteristics",
        "description": "If set, this is the id of the characteristic that this one depends on and it must be enabled for this to be enabled.",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "minimumLevel": {
        "description": "The minimum level required for this characteristic to be enabled.",
        "enum": [
          "Unknown",
          "Disabled",
          "Base",
          "Notes",
          "VerboseNotes",
          "All"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowLogLevelCharacteristicsDefinitions": {
    "description": "A set of available characteristic definitions",
    "properties": {
      "characteristics": {
        "description": "A list of characteristics that the loglevels will have that are available to the organization..",
        "items": {
          "$ref": "#/definitions/FlowLogLevelCharacteristicsDefinition"
        },
        "readOnly": true,
        "type": "array"
      },
      "logLevels": {
        "description": "A list of flow log levels available to the organization.",
        "items": {
          "$ref": "#/definitions/FlowLogLevel"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "FlowLogLevelRequest": {
    "description": "Used to set the log level of a particular flow",
    "properties": {
      "logLevelCharacteristics": {
        "$ref": "#/definitions/FlowLogLevel",
        "description": "The log level characteristics currently set for this flow"
      }
    },
    "required": [
      "logLevelCharacteristics"
    ],
    "type": "object"
  },
  "FlowMilestone": {
    "properties": {
      "description": {
        "description": "The flow milestone description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The flow milestone identifier",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The flow milestone name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FlowMilestoneDivisionView": {
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The flow milestone identifier",
        "type": "string"
      },
      "name": {
        "description": "The flow milestone name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FlowMilestoneDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowMilestoneDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowMilestoneListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowMilestone"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowObservationDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/ObservationMetricData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "FlowObservationQuery": {
    "properties": {
      "detailMetrics": {
        "description": "Metrics for which to include additional detailed observations",
        "items": {
          "enum": [
            "oFlow"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "filter": {
        "$ref": "#/definitions/FlowObservationQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "oFlow"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "filter",
      "metrics"
    ],
    "type": "object"
  },
  "FlowObservationQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowObservationQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "FlowObservationQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/FlowObservationQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/FlowObservationQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "FlowObservationQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "flowId",
          "mediaType"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "FlowObservationQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/FlowObservationDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FlowOutcome": {
    "properties": {
      "currentOperation": {
        "$ref": "#/definitions/Operation"
      },
      "description": {
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The flow outcome identifier",
        "type": "string"
      },
      "name": {
        "description": "The flow outcome name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FlowOutcomeDivisionView": {
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The flow outcome identifier",
        "type": "string"
      },
      "name": {
        "description": "The flow outcome name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "FlowOutcomeDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowOutcomeDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowOutcomeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowOutcome"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowPaths": {
    "properties": {
      "category": {
        "description": "Category (use case) of the paths within a given domain.",
        "enum": [
          "All",
          "Abandoned",
          "AgentEscalation",
          "Complete",
          "Disconnect",
          "Error",
          "RecognitionFailure",
          "Transfer"
        ],
        "type": "string"
      },
      "elements": {
        "additionalProperties": {
          "$ref": "#/definitions/FlowPathsElement"
        },
        "description": "Unique element identifiers and their corresponding elements in the trie data structure representing the paths.",
        "type": "object"
      }
    },
    "required": [
      "category",
      "elements"
    ],
    "type": "object"
  },
  "FlowPathsElement": {
    "properties": {
      "count": {
        "description": "Count of all journeys that include this element.",
        "format": "int32",
        "type": "integer"
      },
      "flowMilestone": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The flow milestone, set if the element type is Milestone.",
        "readOnly": true
      },
      "flowOutcome": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The flow outcome, set if the element type is Outcome or Milestone.",
        "readOnly": true
      },
      "flowOutcomeValue": {
        "description": "The value of the flow outcome, if the element type is Outcome.",
        "enum": [
          "FAILURE",
          "SUCCESS",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "flows": {
        "description": "Details of flows involved in journeys that include this element.",
        "items": {
          "$ref": "#/definitions/FlowPathsFlowDetails"
        },
        "type": "array"
      },
      "parentId": {
        "description": "Unique identifier of the parent element. Will be null for the root element.",
        "type": "string"
      },
      "type": {
        "description": "Type of the element.",
        "enum": [
          "Abandoned",
          "AgentEscalation",
          "Disconnect",
          "Error",
          "Exit",
          "Milestone",
          "Outcome",
          "RecognitionFailure",
          "Root",
          "TransferToAcd"
        ],
        "type": "string"
      }
    },
    "required": [
      "count",
      "flows",
      "type"
    ],
    "type": "object"
  },
  "FlowPathsFlowDetails": {
    "properties": {
      "count": {
        "description": "Count of all journeys that include this element in the given flow.",
        "format": "int32",
        "type": "integer"
      },
      "flow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The identifier of the flow.",
        "readOnly": true
      },
      "type": {
        "description": "The type of the flow.",
        "enum": [
          "DigitalBot",
          "Bot",
          "InboundCall",
          "SecureCall",
          "InboundShortMessage",
          "InboundEmail",
          "OutboundCall"
        ],
        "type": "string"
      },
      "version": {
        "description": "The version of the flow.",
        "type": "string"
      }
    },
    "required": [
      "count",
      "flow",
      "type",
      "version"
    ],
    "type": "object"
  },
  "FlowPathsFlowFilter": {
    "properties": {
      "id": {
        "description": "The identifier of the flow.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "FlowPathsQuery": {
    "properties": {
      "category": {
        "description": "Category (use case) of the paths within a given domain.",
        "enum": [
          "All",
          "Abandoned",
          "AgentEscalation",
          "Complete",
          "Disconnect",
          "Error",
          "RecognitionFailure",
          "Transfer"
        ],
        "type": "string"
      },
      "flows": {
        "description": "List of flows to query the paths result.",
        "items": {
          "$ref": "#/definitions/FlowPathsFlowFilter"
        },
        "type": "array"
      }
    },
    "required": [
      "category",
      "flows"
    ],
    "type": "object"
  },
  "FlowResultEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowExecutionDataQueryResult"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowRuntimeExecution": {
    "description": "Details about the current state of a Flow execution",
    "properties": {
      "completionReason": {
        "description": "The completion reason set at the flow completion time, if applicable.",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The conversation to which this Flow execution is related"
      },
      "dateCompleted": {
        "description": "The time the flow completed, if applicable. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateLaunched": {
        "description": "The time the flow was launched. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "flowErrorInfo": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Additional information if the flow is in error"
      },
      "flowVersion": {
        "$ref": "#/definitions/FlowVersion",
        "description": "The Version of the flow definition of the flow execution."
      },
      "id": {
        "description": "The flow execution ID",
        "type": "string"
      },
      "name": {
        "description": "The flow execution name.",
        "type": "string"
      },
      "outputData": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "List of the flow's output variables, if any. Output variables are only supplied for Completed flows.",
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The flow's running status, which indicates whether the flow is running normally or completed, etc.",
        "enum": [
          "UNKNOWN",
          "RUNNING",
          "ERROR",
          "TERMINATED",
          "COMPLETED",
          "FAILED"
        ],
        "type": "string"
      }
    },
    "required": [
      "dateLaunched",
      "flowVersion",
      "status"
    ],
    "type": "object"
  },
  "FlowSettingsResponse": {
    "description": "This is a table of settings per a loglevel that define what will be logged in executionData when enabled (true)",
    "properties": {
      "dateModified": {
        "description": "The time this log level was set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "logLevelCharacteristics": {
        "$ref": "#/definitions/FlowLogLevel",
        "description": "The log level set for this flow"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "User that last changed the log level setting."
      },
      "modifiedByClient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "OAuth client that last changed the log level setting."
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The Flow Type",
        "enum": [
          "bot",
          "commonmodule",
          "digitalbot",
          "inboundcall",
          "inboundchat",
          "inboundemail",
          "inboundshortmessage",
          "inqueuecall",
          "inqueueshortmessage",
          "inqueueemail",
          "outboundcall",
          "securecall",
          "surveyinvite",
          "voice",
          "voicemail",
          "voicesurvey",
          "workflow",
          "workitem"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "FlowSettingsResponseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowSettingsResponse"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowVersion": {
    "properties": {
      "commitVersion": {
        "type": "string"
      },
      "compatibleFlowTypes": {
        "description": "Compatible flow types designate which flow types are allowed to embed a flow’s configuration within their own flow configuration.  Currently the only flows that can be embedded are Common Module flows and the embedding flow can invoke them using the Call Common Module action.",
        "items": {
          "enum": [
            "BOT",
            "COMMONMODULE",
            "DIGITALBOT",
            "INBOUNDCALL",
            "INBOUNDCHAT",
            "INBOUNDEMAIL",
            "INBOUNDSHORTMESSAGE",
            "INQUEUECALL",
            "INQUEUEEMAIL",
            "INQUEUESHORTMESSAGE",
            "OUTBOUNDCALL",
            "SECURECALL",
            "SPEECH",
            "SURVEYINVITE",
            "VOICE",
            "VOICEMAIL",
            "VOICESURVEY",
            "WORKFLOW",
            "WORKITEM"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "configurationUri": {
        "type": "string"
      },
      "configurationVersion": {
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/User"
      },
      "createdByClient": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "dateCheckedIn": {
        "format": "int64",
        "type": "integer"
      },
      "dateCreated": {
        "format": "int64",
        "type": "integer"
      },
      "datePublished": {
        "description": "The date this version became the published version of the flow. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "datePublishedEnd": {
        "description": "The date this version was no longer the published version of the flow. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateSaved": {
        "format": "int64",
        "type": "integer"
      },
      "debug": {
        "type": "boolean"
      },
      "generationId": {
        "type": "string"
      },
      "id": {
        "description": "The flow version identifier",
        "type": "string"
      },
      "inputSchema": {
        "$ref": "#/definitions/JsonSchemaDocument"
      },
      "name": {
        "type": "string"
      },
      "nluInfo": {
        "$ref": "#/definitions/NluInfo",
        "description": "Information about the natural language understanding configuration for the flow version",
        "readOnly": true
      },
      "outputSchema": {
        "$ref": "#/definitions/JsonSchemaDocument"
      },
      "publishResultUri": {
        "format": "uri",
        "type": "string"
      },
      "secure": {
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedLanguages": {
        "description": "List of supported languages for this version of the flow",
        "items": {
          "$ref": "#/definitions/SupportedLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "type": {
        "enum": [
          "PUBLISH",
          "CHECKIN",
          "SAVE"
        ],
        "type": "string"
      },
      "virtualAgentEnabled": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "FlowVersionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/FlowVersion"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "FlowsQueryCriteriaResponse": {
    "description": "The response for QueryCapabilities which contains the allowed criteria, flow types and action types for the organization.",
    "properties": {
      "actionTypes": {
        "description": "The is a list of action types the organization has access to.",
        "items": {
          "enum": [
            "actionAbortSurveyInvite",
            "actionAddFlowMilestone",
            "actionAskForBoolean",
            "actionAskForNLUIntent",
            "actionAskForNLUNextIntent",
            "actionAskForSlot",
            "actionCallBotConnector",
            "actionCallBotFlow",
            "actionCallCommonModule",
            "actionCallData",
            "actionCallDataSecure",
            "actionCallDialogEngineBot",
            "actionCallDialogflowBot",
            "actionCallDialogflowCxBot",
            "actionCallDigitalBotFlow",
            "actionCallLexBot",
            "actionCallLexV2Bot",
            "actionCallNuanceMixBot",
            "actionCallTask",
            "actionChangeState",
            "actionClearSlot",
            "actionClearVoicemailSnippet",
            "actionCollectInput",
            "actionCommunicate",
            "actionCompleteSurveyInvite",
            "actionCreateCallback",
            "actionDataTableLookup",
            "actionDecision",
            "actionDecryptData",
            "actionDetectSilence",
            "actionDialExtension",
            "actionDialName",
            "actionDigitalMenu",
            "actionDisconnect",
            "actionEnableParticipantRecord",
            "actionEncryptData",
            "actionEndState",
            "actionEndTask",
            "actionEndWorkflow",
            "actionEvaluateSchedule",
            "actionEvaluateScheduleGroup",
            "actionExitBotFlow",
            "actionExitLoop",
            "actionExtractSecureData",
            "actionFindEmergencyGroup",
            "actionFindGroup",
            "actionFindLanguageSkill",
            "actionFindQueue",
            "actionFindQueueById",
            "actionFindSchedule",
            "actionFindScheduleGroup",
            "actionFindSkill",
            "actionFindSystemPrompt",
            "actionFindUser",
            "actionFindUserById",
            "actionFindUserPrompt",
            "actionFindUsersById",
            "actionFlushAudio",
            "actionGetConversationData",
            "actionGetExternalContact",
            "actionGetExternalOrganization",
            "actionGetJourneyOutcome",
            "actionGetJourneyOutcomeScoresBySession",
            "actionGetJourneySegment",
            "actionGetJourneySession",
            "actionGetJourneySessionsByCustomer",
            "actionGetJourneySessionsByExternalContact",
            "actionGetParticipantData",
            "actionGetResponse",
            "actionGetSecuredData",
            "actionHoldMusic",
            "actionInitializeFlowOutcome",
            "actionJumpToMenu",
            "actionJumpToTask",
            "actionLoop",
            "actionLoopUntil",
            "actionNextLoop",
            "actionPlayAudio",
            "actionPlayAudioOnSilence",
            "actionPlayEstimatedWaitTime",
            "actionPlayPositionInQueue",
            "actionPlayUserGreeting",
            "actionPlayUserName",
            "actionPreviousMenu",
            "actionProcessVoicemailInput",
            "actionRepeatMenu",
            "actionReturnToAgent",
            "actionSaveWorkitem",
            "actionScreenPop",
            "actionSearchExternalContacts",
            "actionSendAutoReply",
            "actionSendResponse",
            "actionSetActiveIntent",
            "actionSetConversationData",
            "actionSetExternalTag",
            "actionSetFlowOutcome",
            "actionSetLocale",
            "actionSetParticipantData",
            "actionSetPriority",
            "actionSetSecuredData",
            "actionSetSkills",
            "actionSetUUIData",
            "actionSetWhisperAudio",
            "actionSetWrapupCode",
            "actionShowKnowledgeArticle",
            "actionSubmitVoicemailSnippet",
            "actionSwitch",
            "actionTranscription",
            "actionTransferExternal",
            "actionTransferFlow",
            "actionTransferFlowSecure",
            "actionTransferGroup",
            "actionTransferToAcd",
            "actionTransferUser",
            "actionTransferVoicemail",
            "actionUpdateData",
            "actionWait",
            "actionWaitForInput",
            "menuDialExtension",
            "menuDialName",
            "menuDisconnect",
            "menuJumpToMenu",
            "menuJumpToTask",
            "menuMenu",
            "menuPreviousMenu",
            "menuRepeatMenu",
            "menuShowKnowledgeArticle",
            "menuTask",
            "menuTransferToAcd",
            "menuTransferFlow",
            "menuTransferGroup",
            "menuTransferExternal",
            "menuTransferFlowSecure",
            "menuTransferUser",
            "menuTransferVoicemail"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "criteria": {
        "description": "The is a list of allowed criteria to query on.",
        "items": {
          "$ref": "#/definitions/QueryCriteria"
        },
        "type": "array"
      },
      "errorCodes": {
        "description": "The is a list of potential error codes the organization may encounter.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowTypes": {
        "description": "The is a list of flow types the organization has access to.",
        "items": {
          "enum": [
            "bot",
            "commonmodule",
            "digitalbot",
            "inboundcall",
            "inboundchat",
            "inboundemail",
            "inboundshortmessage",
            "inqueuecall",
            "inqueueshortmessage",
            "inqueueemail",
            "outboundcall",
            "securecall",
            "surveyinvite",
            "voice",
            "voicemail",
            "voicesurvey",
            "workflow",
            "workitem"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "warningCodes": {
        "description": "The is a list of potential warning codes the organization may encounter.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FooterTemplate": {
    "description": "The Footer template identifies the Footer type and its footerUsage",
    "properties": {
      "applicableResources": {
        "description": "Specifies the canned response template where the footer can be used.",
        "items": {
          "enum": [
            "Campaign"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "type": {
        "description": "Specifies the type represented by Footer.",
        "enum": [
          "Signature"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ForecastAbandonRateResponse": {
    "properties": {
      "percent": {
        "description": "The target percent abandon rate goal",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ForecastAverageSpeedOfAnswerResponse": {
    "properties": {
      "seconds": {
        "description": "the average speed of answer goal in seconds",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ForecastPlanningGroupData": {
    "properties": {
      "averageHandleTimeSecondsPerInterval": {
        "description": "Forecast average handle time per 15 minute interval in seconds",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "offeredPerInterval": {
        "description": "Forecast offered counts per 15 minute interval for this week of the forecast",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "planningGroupId": {
        "description": "The ID of the planning group to which this data applies. Note this is a snapshot of the planning group at the time of forecast creation and may not correspond to the current configuration",
        "type": "string"
      }
    },
    "required": [
      "averageHandleTimeSecondsPerInterval",
      "offeredPerInterval",
      "planningGroupId"
    ],
    "type": "object"
  },
  "ForecastPlanningGroupResponse": {
    "properties": {
      "id": {
        "description": "The ID of the planning group",
        "type": "string"
      },
      "name": {
        "description": "The name of the planning group",
        "type": "string"
      },
      "routePaths": {
        "description": "Route path configuration for this planning group",
        "items": {
          "$ref": "#/definitions/RoutePathResponse"
        },
        "type": "array"
      },
      "serviceGoalTemplate": {
        "$ref": "#/definitions/ForecastServiceGoalTemplateResponse",
        "description": "Service goals for this planning group"
      }
    },
    "type": "object"
  },
  "ForecastPlanningGroupsResponse": {
    "properties": {
      "businessUnitServiceGoalImpact": {
        "$ref": "#/definitions/WfmServiceGoalImpactSettings",
        "description": "A snapshot of a business unit’s service goal impact settings taken at forecast generation time."
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/ForecastPlanningGroupResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ForecastServiceGoalTemplateImpactOverrideResponse": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/WfmServiceGoalImpact",
        "description": "Allowed abandon rate percent increase and decrease; undefined if the goal is not enabled"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/WfmServiceGoalImpact",
        "description": "Allowed average speed of answer percent increase and decrease; undefined if the goal is not enabled"
      },
      "serviceLevel": {
        "$ref": "#/definitions/WfmServiceGoalImpact",
        "description": "Allowed service level percent increase and decrease; undefined if the goal is not enabled"
      }
    },
    "type": "object"
  },
  "ForecastServiceGoalTemplateResponse": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/ForecastAbandonRateResponse",
        "description": "The abandon rate goal for this forecast"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/ForecastAverageSpeedOfAnswerResponse",
        "description": "The average speed of answer goal for this forecast"
      },
      "impactOverride": {
        "$ref": "#/definitions/ForecastServiceGoalTemplateImpactOverrideResponse",
        "description": "The service goal impact overrides for this forecast"
      },
      "serviceLevel": {
        "$ref": "#/definitions/ForecastServiceLevelResponse",
        "description": "The service level goal for this forecast"
      }
    },
    "type": "object"
  },
  "ForecastServiceLevelResponse": {
    "properties": {
      "percent": {
        "description": "The percent of calls to answer in the number of seconds defined",
        "format": "int32",
        "type": "integer"
      },
      "seconds": {
        "description": "The number of seconds to define for the percent of calls to be answered",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ForecastSourceDayPointer": {
    "properties": {
      "dataKey": {
        "description": "The key to look up the forecast source data for this source day",
        "type": "string"
      },
      "date": {
        "description": "The date this source data represents, in yyyy-MM-dd format",
        "type": "string"
      },
      "dayOfWeek": {
        "description": "The forecast day of week for this source data",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "EighthDay"
        ],
        "type": "string"
      },
      "fileName": {
        "description": "The name of the source file this data came from if it originated from a data import",
        "type": "string"
      },
      "weight": {
        "description": "The relative weight to apply to this source data item for weighted averages",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Format": {
    "properties": {
      "flags": {
        "description": "The Set of prompt segment format flags i.e. each entry is a part of describing the overall format. E.g. \"format\": { \"flags\": [StringPlayChars] }",
        "items": {
          "enum": [
            "BoolPlayYesNo",
            "CurrencyAsMinorUnits",
            "CurrencyMajorUnitsOnly",
            "CurrencyMinorUnitsOnly",
            "CurrencyPlayDigits",
            "DateLongYear",
            "DateShortYear",
            "DateShortMonthAndDay",
            "DateDayOfWeekOnly",
            "DateDayOnly",
            "DateMonthOnly",
            "DateShortYearOnly",
            "DateLongYearOnly",
            "TimeTwentyFourHours",
            "TimeTwelveHours",
            "TimePartDays",
            "TimePartHours",
            "TimePartMinutes",
            "TimePartSeconds",
            "StringPlayChars",
            "NumberPlayDigits",
            "NumberOrdinal",
            "LanguageCaseArticle",
            "LanguageCaseAccusative",
            "LanguageCaseDative",
            "LanguageCaseGenitive",
            "LanguageCaseNominative",
            "LanguageQuantityPlural",
            "LanguageQuantitySingular",
            "LanguageGenderCommon",
            "LanguageGenderFeminine",
            "LanguageGenderMasculine",
            "LanguageGenderNeuter",
            "CaseArticle",
            "CaseAccusative",
            "CaseDative",
            "CaseGenitive",
            "CaseNominative",
            "QuantityPlural",
            "QuantitySingular",
            "GenderCommon",
            "GenderFeminine",
            "GenderMasculine",
            "GenderNeuter"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "FormsTrackTrigger": {
    "description": "Details about a forms tracking event trigger",
    "properties": {
      "captureDataOnFormAbandon": {
        "description": "Whether to capture the form data in the form abandoned event.",
        "type": "boolean"
      },
      "captureDataOnFormSubmit": {
        "description": "Whether to capture the form data in the form submitted event.",
        "type": "boolean"
      },
      "formName": {
        "description": "Prefix for the form submitted or abandoned event name.",
        "type": "string"
      },
      "selector": {
        "description": "Form element that triggers the form submitted or abandoned event.",
        "type": "string"
      }
    },
    "required": [
      "captureDataOnFormAbandon",
      "captureDataOnFormSubmit",
      "formName",
      "selector"
    ],
    "type": "object"
  },
  "FreeTrialLimit": {
    "properties": {
      "defaultValue": {
        "format": "int64",
        "type": "integer"
      },
      "description": {
        "type": "string"
      },
      "key": {
        "type": "string"
      },
      "resource": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "FreeTrialLimitDocs": {
    "properties": {
      "namespaces": {
        "items": {
          "$ref": "#/definitions/FreeTrialNamespace"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FreeTrialNamespace": {
    "properties": {
      "friendlyName": {
        "type": "string"
      },
      "limits": {
        "items": {
          "$ref": "#/definitions/FreeTrialLimit"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "FromEmailAddress": {
    "properties": {
      "domain": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The OutboundDomain used for the email address."
      },
      "friendlyName": {
        "description": "The friendly name of the email address.",
        "type": "string"
      },
      "localPart": {
        "description": "The local part of the email address.",
        "type": "string"
      }
    },
    "required": [
      "domain"
    ],
    "type": "object"
  },
  "FullDayTimeOffMarker": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with the time off marker",
        "type": "string"
      },
      "businessUnitDate": {
        "description": "The date of the time off marker, interpreted in the business unit's time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "description": {
        "description": "The description of the time off marker",
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the time off marker in minutes",
        "format": "int32",
        "type": "integer"
      },
      "paid": {
        "description": "Whether the time off marker is paid",
        "type": "boolean"
      },
      "timeOffRequestId": {
        "description": "The ID of the time off request",
        "type": "string"
      }
    },
    "type": "object"
  },
  "GDPRJourneyCustomer": {
    "properties": {
      "id": {
        "description": "An ID of a customer within the Journey System at a point-in-time. Required if `type` is defined.",
        "type": "string"
      },
      "type": {
        "description": "The type of the customerId within the Journey System (e.g. cookie). Required if `id` is defined.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "GDPRRequest": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The user that created this request",
        "readOnly": true
      },
      "createdDate": {
        "description": "When the request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "replacementTerms": {
        "description": "The replacement terms for the provided search terms, in the case of a GDPR_UPDATE request",
        "example": "[ { \"type\": \"EMAIL\": \"existingValue\": \"personal.email@domain.com\", \"updatedValue\": \"updated.personal.email@domain.com\" } ]",
        "items": {
          "$ref": "#/definitions/ReplacementTerm"
        },
        "type": "array"
      },
      "requestType": {
        "description": "The type of GDPR request",
        "enum": [
          "GDPR_EXPORT",
          "GDPR_UPDATE",
          "GDPR_DELETE"
        ],
        "type": "string"
      },
      "resultsUrl": {
        "description": "The location where the results of the request can be retrieved",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the request",
        "enum": [
          "INITIATED",
          "SEARCHING",
          "UPDATING",
          "DELETING",
          "COMPLETED",
          "ERROR",
          "FINALIZING"
        ],
        "readOnly": true,
        "type": "string"
      },
      "subject": {
        "$ref": "#/definitions/GDPRSubject",
        "description": "The subject of the GDPR request",
        "example": "{ \"emailAddresses\": [\"personal.email@domain.com\"], \"phoneNumbers\": [\"+13115552368\"] }"
      }
    },
    "required": [
      "createdBy",
      "createdDate",
      "requestType",
      "status",
      "subject"
    ],
    "type": "object"
  },
  "GDPRRequestEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/GDPRRequest"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GDPRSubject": {
    "properties": {
      "addresses": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "dialerContactId": {
        "$ref": "#/definitions/DialerContactId"
      },
      "emailAddresses": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "externalContactId": {
        "type": "string"
      },
      "externalId": {
        "type": "string"
      },
      "journeyCustomer": {
        "$ref": "#/definitions/GDPRJourneyCustomer"
      },
      "name": {
        "type": "string"
      },
      "phoneNumbers": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "socialHandle": {
        "$ref": "#/definitions/SocialHandle"
      },
      "userId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "GDPRSubjectEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/GDPRSubject"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GKNDocumentationResult": {
    "properties": {
      "_type": {
        "description": "The search type. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "content": {
        "description": "The text or html content for the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "link": {
        "description": "URL link for the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      },
      "title": {
        "description": "The title of the documentation entity. Will be returned in responses for certain entities.",
        "type": "string"
      }
    },
    "required": [
      "_type"
    ],
    "type": "object"
  },
  "GKNDocumentationSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "title",
            "content"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/GKNDocumentationSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "SIMPLE"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "GKNDocumentationSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/GKNDocumentationSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "GKNDocumentationSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/GKNDocumentationResult"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "GSuite": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "GamificationStatus": {
    "properties": {
      "automaticUserAssignment": {
        "description": "Automatic assignment of users to the default profile",
        "type": "boolean"
      },
      "dateStart": {
        "description": "Gamification start date. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartPersonalBest": {
        "description": "Personal best aggregation starting date. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "isActive": {
        "description": "Gamification status of the organization.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "GeneralProgramJob": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "enum": [
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "GeneralProgramJobRequest": {
    "properties": {
      "dialect": {
        "description": "The dialect of the topics to link with the general program, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard",
        "enum": [
          "ar-001",
          "ar-AE",
          "ar-BH",
          "ar-EG",
          "ar-IL",
          "ar-SA",
          "ar-TN",
          "da-DK",
          "de-CH",
          "de-DE",
          "en-AU",
          "en-GB",
          "en-HK",
          "en-IE",
          "en-IN",
          "en-NZ",
          "en-SG",
          "en-US",
          "en-ZA",
          "es-ES",
          "es-US",
          "fi-FI",
          "fr-CA",
          "fr-FR",
          "he-IL",
          "it-IT",
          "ja-JP",
          "ko-KR",
          "nb-NO",
          "nl-NL",
          "pl-PL",
          "pt-BR",
          "pt-PT",
          "sv-SE"
        ],
        "type": "string"
      },
      "mode": {
        "description": "The mode to use for the general program job, default value is Skip",
        "enum": [
          "Skip",
          "Merge",
          "ReplaceMerge"
        ],
        "type": "string"
      }
    },
    "required": [
      "dialect"
    ],
    "type": "object"
  },
  "GeneralTopic": {
    "properties": {
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "GeneralTopicsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/GeneralTopic"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "GenerateBuForecastRequest": {
    "properties": {
      "canUseForScheduling": {
        "description": "Whether this forecast can be used for scheduling",
        "type": "boolean"
      },
      "description": {
        "description": "The description for the forecast",
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks this forecast covers",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "description"
    ],
    "type": "object"
  },
  "GenericSAML": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "endpointCompression": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "logoImageData": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "nameIdentifierFormat": {
        "enum": [
          "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:entity",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
        ],
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "GenericTemplate": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/RecordingContentActions",
        "description": "Actions to be taken."
      },
      "components": {
        "description": "List of button components offered with this message content.",
        "items": {
          "$ref": "#/definitions/RecordingButtonComponent"
        },
        "type": "array"
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      },
      "url": {
        "description": "URL of an image.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "GenesysBotConnector": {
    "properties": {
      "queryParameters": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "User defined name/value parameters passed to the BotConnector bot.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "Geolocation": {
    "properties": {
      "city": {
        "type": "string"
      },
      "country": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "latitude": {
        "format": "double",
        "type": "number"
      },
      "locations": {
        "items": {
          "$ref": "#/definitions/LocationDefinition"
        },
        "type": "array"
      },
      "longitude": {
        "format": "double",
        "type": "number"
      },
      "name": {
        "type": "string"
      },
      "primary": {
        "description": "A boolean used to tell whether or not to set this geolocation client as the primary on a PATCH",
        "type": "boolean"
      },
      "region": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "A string used to describe the type of client the geolocation is being updated from e.g. ios, android, web, etc.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "GeolocationSettings": {
    "properties": {
      "enabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mapboxKey": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "GetAlertQuery": {
    "properties": {
      "alertStatus": {
        "description": "The status of the alerts the query will return.",
        "enum": [
          "Active",
          "Inactive",
          "All"
        ],
        "type": "string"
      },
      "pageNumber": {
        "description": "The page number of the queried response",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of entities to return of the queried response.  The max is 25",
        "format": "int32",
        "type": "integer"
      },
      "queryType": {
        "description": "The type of query being performed.",
        "enum": [
          "Info",
          "Count"
        ],
        "type": "string"
      },
      "ruleType": {
        "description": "The rule type of the alerts the query will return",
        "enum": [
          "Conversation",
          "Presence",
          "All"
        ],
        "type": "string"
      },
      "sortBy": {
        "description": "The field to sort responses by.  The accepted choices are Name and DateStart",
        "enum": [
          "Name",
          "DateStart"
        ],
        "type": "string"
      },
      "sortOrder": {
        "description": "The order in which response will be sorted.  The accepted choices are Asc and Desc",
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      },
      "viewedStatus": {
        "description": "The view status of the alerts the query will return.",
        "enum": [
          "Unread",
          "Read",
          "All"
        ],
        "type": "string"
      }
    },
    "required": [
      "queryType",
      "ruleType"
    ],
    "type": "object"
  },
  "GetCelebrationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Celebration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GetFlowExecutionDataJobResult": {
    "description": "This is a list of executionData links that can be used to download the complete executionData",
    "properties": {
      "entities": {
        "description": "On jobState = Success this field will be populated with the list of results of files for download.",
        "items": {
          "$ref": "#/definitions/ExecutionDataEntity"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "jobState": {
        "description": "The state of the backend process to prep the files for download.",
        "enum": [
          "Registered",
          "Running",
          "Success",
          "Failed"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "GetMetricDefinitionsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MetricDefinition"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GetMetricResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Metric"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GetMetricsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Metrics"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GetProfilesResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/PerformanceProfile"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GetRulesQuery": {
    "properties": {
      "enabledType": {
        "description": "The state of the rule the query will return.  The accepted choices are Enabled, Disabled, or All",
        "enum": [
          "Enabled",
          "Disabled",
          "All"
        ],
        "type": "string"
      },
      "nameSearchType": {
        "description": "Specifies how strict the name search needs to be. Expected values are Exact and Contains if querying by name.",
        "enum": [
          "Exact",
          "Contains",
          "Unknown"
        ],
        "type": "string"
      },
      "pageNumber": {
        "description": "The page number of the queried response",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of entities to return of the queried response.  The max is 25",
        "format": "int32",
        "type": "integer"
      },
      "queryType": {
        "description": "The type of query being performed.",
        "enum": [
          "Info",
          "Count"
        ],
        "type": "string"
      },
      "ruleName": {
        "description": "The name of the rule being queries.",
        "type": "string"
      },
      "ruleType": {
        "description": "The rule type of the alerts the query will return",
        "enum": [
          "Conversation",
          "Presence",
          "All"
        ],
        "type": "string"
      },
      "sortBy": {
        "description": "The field to sort responses by.  The accepted choices are Name and DateStart",
        "enum": [
          "Name",
          "DateCreated"
        ],
        "type": "string"
      },
      "sortOrder": {
        "description": "The order in which response will be sorted.  The accepted choices are Asc and Desc",
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      }
    },
    "required": [
      "queryType",
      "ruleType"
    ],
    "type": "object"
  },
  "GetTemplatesResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ObjectiveTemplate"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GoogleDialogflowConfig": {
    "properties": {
      "conversationProfiles": {
        "description": "The conversation profiles for which the assistant will fetch transcription and knowledge suggestions.",
        "items": {
          "$ref": "#/definitions/ConversationProfile"
        },
        "type": "array"
      },
      "integrationId": {
        "description": "The integration identifier with which the assistant will fetch transcriptions and knowledge suggestions.",
        "type": "string"
      }
    },
    "required": [
      "conversationProfiles"
    ],
    "type": "object"
  },
  "GoogleDialogflowCustomSettings": {
    "properties": {
      "environment": {
        "description": "If set this environment will be used to initiate the dialogflow bot, otherwise the default configuration will be used.  See https://cloud.google.com/dialogflow/docs/agents-versions",
        "type": "string"
      },
      "eventInputParameters": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Parameters passed to the event input of the bot.",
        "type": "object"
      },
      "eventName": {
        "description": "If set this eventName will be used to initiate the dialogflow bot rather than language processing on the input text.  See https://cloud.google.com/dialogflow/es/docs/events-overview",
        "type": "string"
      },
      "webhookQueryParameters": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Parameters passed to the fulfillment webhook of the bot (if any).",
        "type": "object"
      }
    },
    "type": "object"
  },
  "Grammar": {
    "properties": {
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "languages": {
        "description": "List of languages configured for this grammar",
        "items": {
          "$ref": "#/definitions/GrammarLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "GrammarFileUploadRequest": {
    "properties": {
      "fileType": {
        "enum": [
          "gram",
          "grxml"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "GrammarLanguage": {
    "properties": {
      "dtmfFileMetadata": {
        "$ref": "#/definitions/GrammarLanguageFileMetadata",
        "description": "Additional information about the associated dtmf file"
      },
      "dtmfFileUrl": {
        "description": "The URL to the DTMF mode file associated with this grammar language",
        "readOnly": true,
        "type": "string"
      },
      "grammarId": {
        "description": "The ID of the grammar associated with this grammar language",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "voiceFileMetadata": {
        "$ref": "#/definitions/GrammarLanguageFileMetadata",
        "description": "Additional information about the associated voice file"
      },
      "voiceFileUrl": {
        "description": "The URL to the voice mode file associated with this grammar language",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "GrammarLanguageFileMetadata": {
    "properties": {
      "dateUploaded": {
        "description": "The date the file was uploaded. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "fileName": {
        "description": "The name of the file as defined by the user",
        "type": "string"
      },
      "fileSizeBytes": {
        "description": "The size of the file in bytes",
        "format": "int32",
        "type": "integer"
      },
      "fileType": {
        "description": "The extension of the file",
        "enum": [
          "Gram",
          "Grxml"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "GrammarLanguageUpdate": {
    "properties": {
      "dtmfFileMetadata": {
        "$ref": "#/definitions/GrammarLanguageFileMetadata",
        "description": "Additional information about the associated dtmf file"
      },
      "voiceFileMetadata": {
        "$ref": "#/definitions/GrammarLanguageFileMetadata",
        "description": "Additional information about the associated voice file"
      }
    },
    "type": "object"
  },
  "GrammarListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Grammar"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Greeting": {
    "properties": {
      "audioFile": {
        "$ref": "#/definitions/GreetingAudioFile"
      },
      "audioTTS": {
        "type": "string"
      },
      "createdBy": {
        "format": "uri",
        "type": "string"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "format": "uri",
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "owner": {
        "$ref": "#/definitions/DomainEntity",
        "description": "Greeting owner"
      },
      "ownerType": {
        "description": "Greeting owner type",
        "enum": [
          "USER",
          "ORGANIZATION",
          "GROUP"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Greeting type",
        "enum": [
          "STATION",
          "VOICEMAIL",
          "NAME"
        ],
        "type": "string"
      }
    },
    "required": [
      "owner",
      "ownerType",
      "type"
    ],
    "type": "object"
  },
  "GreetingAudioFile": {
    "properties": {
      "durationMilliseconds": {
        "format": "int64",
        "type": "integer"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "sizeBytes": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GreetingListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Greeting"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GreetingMediaInfo": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaFileUri": {
        "format": "uri",
        "type": "string"
      },
      "mediaImageUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "GreetingOwner": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Group": {
    "properties": {
      "addresses": {
        "items": {
          "$ref": "#/definitions/GroupContact"
        },
        "type": "array"
      },
      "dateModified": {
        "description": "Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "memberCount": {
        "description": "Number of members.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "owners": {
        "description": "Owners of the group",
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "rolesEnabled": {
        "description": "Allow roles to be assigned to this group",
        "type": "boolean"
      },
      "rulesVisible": {
        "description": "Are membership rules visible to the person requesting to view the group",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Active, inactive, or deleted state.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Type of group.",
        "enum": [
          "official",
          "social"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version for this resource.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "visibility": {
        "description": "Who can view this group",
        "enum": [
          "public",
          "owners",
          "members"
        ],
        "type": "string"
      }
    },
    "required": [
      "name",
      "rulesVisible",
      "type",
      "visibility"
    ],
    "type": "object"
  },
  "GroupByAttribute": {
    "properties": {
      "attribute": {
        "description": "Group by attribute",
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "Value of this group by attribute",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "GroupContact": {
    "properties": {
      "address": {
        "description": "Phone number for this contact type",
        "type": "string"
      },
      "display": {
        "description": "Formatted version of the address property",
        "readOnly": true,
        "type": "string"
      },
      "extension": {
        "description": "Extension is set if the number is e164 valid",
        "type": "string"
      },
      "mediaType": {
        "description": "Media type of the address",
        "enum": [
          "PHONE"
        ],
        "type": "string"
      },
      "type": {
        "description": "Contact type of the address",
        "enum": [
          "GROUPRING",
          "GROUPPHONE"
        ],
        "type": "string"
      }
    },
    "required": [
      "address",
      "mediaType",
      "type"
    ],
    "type": "object"
  },
  "GroupCreate": {
    "properties": {
      "addresses": {
        "items": {
          "$ref": "#/definitions/GroupContact"
        },
        "type": "array"
      },
      "dateModified": {
        "description": "Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "memberCount": {
        "description": "Number of members.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "ownerIds": {
        "description": "Owners of the group",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "rolesEnabled": {
        "description": "Allow roles to be assigned to this group",
        "type": "boolean"
      },
      "rulesVisible": {
        "description": "Are membership rules visible to the person requesting to view the group",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Active, inactive, or deleted state.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Type of group.",
        "enum": [
          "official",
          "social"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version for this resource.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "visibility": {
        "description": "Who can view this group",
        "enum": [
          "public",
          "owners",
          "members"
        ],
        "type": "string"
      }
    },
    "required": [
      "name",
      "rulesVisible",
      "type",
      "visibility"
    ],
    "type": "object"
  },
  "GroupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Group"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GroupMembersUpdate": {
    "properties": {
      "memberIds": {
        "description": "A list of the ids of the members to add.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "version": {
        "description": "The current group version.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "memberIds",
      "version"
    ],
    "type": "object"
  },
  "GroupProfile": {
    "properties": {
      "dateModified": {
        "description": "Datetime of the last modification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the user resource",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "The version of the group resource",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "GroupProfileEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/GroupProfile"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GroupSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "description",
            "id",
            "name",
            "state"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/GroupSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "STARTS_WITH",
          "CONTAINS",
          "REGEX",
          "TERM",
          "TERMS",
          "REQUIRED_FIELDS",
          "MATCH_ALL"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "GroupSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/GroupSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "GroupSettings": {
    "properties": {
      "maximumConcurrentSessions": {
        "description": "The maximum number of sessions that can be scheduled concurrently",
        "format": "int32",
        "type": "integer"
      },
      "maximumGroupSize": {
        "description": "The maximum size of a group for a session",
        "format": "int32",
        "type": "integer"
      },
      "maximumTotalSessions": {
        "description": "The maximum total number of sessions",
        "format": "int32",
        "type": "integer"
      },
      "minimumGroupSize": {
        "description": "The minimum size of a group for a session",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "GroupUpdate": {
    "properties": {
      "addresses": {
        "items": {
          "$ref": "#/definitions/GroupContact"
        },
        "type": "array"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "ownerIds": {
        "description": "Owners of the group",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "rolesEnabled": {
        "description": "Allow roles to be assigned to this group",
        "type": "boolean"
      },
      "rulesVisible": {
        "description": "Are membership rules visible to the person requesting to view the group",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "State of the group.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version for this resource.",
        "format": "int32",
        "type": "integer"
      },
      "visibility": {
        "description": "Who can view this group",
        "enum": [
          "public",
          "ownerIds",
          "members"
        ],
        "type": "string"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "GroupsSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/Group"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "GuestCategoryReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "GuestCategoryResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/GuestResponseCategory"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      },
      "sessionId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "GuestMemberInfo": {
    "properties": {
      "avatarImageUrl": {
        "description": "The URL to the avatar image to use for the guest member in the conversation, if any.",
        "format": "uri",
        "type": "string"
      },
      "customFields": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Any custom fields of information, in key-value format, to attach to the guest member in the conversation.",
        "type": "object"
      },
      "displayName": {
        "description": "The display name to use for the guest member in the conversation.",
        "type": "string"
      },
      "email": {
        "description": "The email address to use for the guest member in the conversation.",
        "type": "string"
      },
      "firstName": {
        "description": "The first name to use for the guest member in the conversation.",
        "type": "string"
      },
      "lastName": {
        "description": "The last name to use for the guest member in the conversation.",
        "type": "string"
      },
      "phoneNumber": {
        "description": "The phone number to use for the guest member in the conversation.",
        "type": "string"
      }
    },
    "required": [
      "displayName"
    ],
    "type": "object"
  },
  "GuestResponseCategory": {
    "properties": {
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "externalId": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "parentCategory": {
        "$ref": "#/definitions/GuestCategoryReference",
        "description": "The reference to category to which this category belongs.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "HeadcountForecast": {
    "properties": {
      "required": {
        "description": "Headcount information with shrinkage",
        "items": {
          "$ref": "#/definitions/HeadcountInterval"
        },
        "type": "array"
      },
      "requiredWithoutShrinkage": {
        "description": "Headcount information without shrinkage",
        "items": {
          "$ref": "#/definitions/HeadcountInterval"
        },
        "type": "array"
      }
    },
    "required": [
      "required",
      "requiredWithoutShrinkage"
    ],
    "type": "object"
  },
  "HeadcountInterval": {
    "properties": {
      "interval": {
        "description": "The start date-time for this headcount interval in ISO-8601 format, must be within the 8 day schedule",
        "format": "date-time",
        "type": "string"
      },
      "value": {
        "description": "Headcount value for this interval",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "interval",
      "value"
    ],
    "type": "object"
  },
  "HealthInfo": {
    "properties": {
      "errorInfo": {
        "$ref": "#/definitions/FlowHealthErrorInfo",
        "description": "Error details for the intent, if any."
      },
      "issueCount": {
        "description": "Number of issues found in the intent.",
        "format": "int64",
        "type": "integer"
      },
      "overallScore": {
        "description": "Overall health score for the intent ranged between 0 and 100 as 100 is the perfect health score.",
        "format": "float",
        "type": "number"
      },
      "staticValidationResults": {
        "description": "Validation results for the intent.",
        "items": {
          "enum": [
            "TooFewUtterances",
            "TooManyUtterances",
            "UtteranceTooShort",
            "UtteranceTooLong"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "status": {
        "description": "Status of health computation for this intent.",
        "enum": [
          "InProgress",
          "Completed",
          "Error"
        ],
        "type": "string"
      },
      "utterances": {
        "description": "Utterances for this intent.",
        "items": {
          "$ref": "#/definitions/FlowHealthIntentUtterance"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "HelpLink": {
    "description": "Link to a help or support resource",
    "properties": {
      "description": {
        "description": "Description of the document or resource",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "Link text of the resource",
        "readOnly": true,
        "type": "string"
      },
      "uri": {
        "description": "URI of the help resource",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "HelpSettings": {
    "properties": {
      "keyword": {
        "description": "List of keywords for compliance",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "response": {
        "$ref": "#/definitions/ComplianceResponse",
        "description": "The response configuration for the keywords"
      }
    },
    "required": [
      "keyword",
      "response"
    ],
    "type": "object"
  },
  "HistoricalAdherenceActuals": {
    "properties": {
      "actualActivityCategory": {
        "description": "Activity in which the user is actually engaged",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "actualSecondaryPresenceLookupId": {
        "description": "The lookup ID used to retrieve the actual secondary status from map of lookup ID to corresponding secondary presence ID",
        "type": "string"
      },
      "endOffsetSeconds": {
        "description": "Actual end offset in seconds relative to query start time",
        "format": "int32",
        "type": "integer"
      },
      "startOffsetSeconds": {
        "description": "Actual start offset in seconds relative to query start time",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "HistoricalAdherenceDayMetrics": {
    "properties": {
      "actualLengthSecs": {
        "description": "Total duration in seconds for all actually worked activities",
        "format": "int32",
        "type": "integer"
      },
      "adherencePercentage": {
        "description": "Total adherence percentage for this user, in the scale of 0 - 100",
        "format": "double",
        "type": "number"
      },
      "adherenceScheduleSecs": {
        "description": "Duration of schedule in seconds included for adherence percentage calculation",
        "format": "int32",
        "type": "integer"
      },
      "conformanceActualSecs": {
        "description": "Total actually worked duration in seconds for OnQueue activities",
        "format": "int32",
        "type": "integer"
      },
      "conformancePercentage": {
        "description": "Total conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.",
        "format": "double",
        "type": "number"
      },
      "conformanceScheduleSecs": {
        "description": "Total scheduled duration in seconds for OnQueue activities",
        "format": "int32",
        "type": "integer"
      },
      "dayStartOffsetSecs": {
        "description": "Start of day offset in seconds relative to query start time",
        "format": "int32",
        "type": "integer"
      },
      "exceptionCount": {
        "description": "Total number of adherence exceptions for this user",
        "format": "int32",
        "type": "integer"
      },
      "exceptionDurationSecs": {
        "description": "Total duration in seconds of adherence exceptions for this user",
        "format": "int32",
        "type": "integer"
      },
      "impactSeconds": {
        "description": "The impact duration in seconds of current adherence state for this user",
        "format": "int32",
        "type": "integer"
      },
      "scheduleLengthSecs": {
        "description": "Total duration in seconds for all scheduled activities",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "HistoricalAdherenceExceptionInfo": {
    "properties": {
      "actualActivityCategory": {
        "description": "Activity for which the user is actually engaged",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "actualActivityCodeId": {
        "description": "The ID of the actual activity code for this user",
        "type": "string"
      },
      "endOffsetSeconds": {
        "description": "Exception end offset in seconds relative to query start time",
        "format": "int32",
        "type": "integer"
      },
      "impact": {
        "description": "The impact of the current adherence state for this user",
        "enum": [
          "Positive",
          "Negative",
          "Neutral",
          "Unknown"
        ],
        "type": "string"
      },
      "routingStatus": {
        "description": "Actual underlying routing status, used to determine whether a user is actually in adherence when OnQueue",
        "enum": [
          "OFF_QUEUE",
          "IDLE",
          "INTERACTING",
          "NOT_RESPONDING",
          "COMMUNICATING"
        ],
        "type": "string"
      },
      "scheduledActivityCategory": {
        "description": "Activity for which the user is scheduled",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "scheduledActivityCodeId": {
        "description": "The ID of the scheduled activity code for this user",
        "type": "string"
      },
      "scheduledSecondaryPresenceLookupIds": {
        "description": "The lookup IDs used to retrieve the scheduled secondary statuses from map of lookup ID to corresponding secondary presence ID",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "secondaryPresenceLookupId": {
        "description": "The lookup ID used to retrieve the actual secondary status from map of lookup ID to corresponding secondary presence ID",
        "type": "string"
      },
      "startOffsetSeconds": {
        "description": "Exception start offset in seconds relative to query start time",
        "format": "int32",
        "type": "integer"
      },
      "systemPresence": {
        "description": "Actual underlying system presence value",
        "enum": [
          "Available",
          "Away",
          "Busy",
          "Offline",
          "Idle",
          "OnQueue",
          "Meal",
          "Training",
          "Meeting",
          "Break"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "HistoricalAdherenceQueryResult": {
    "properties": {
      "actuals": {
        "description": "List of actual activity with offset for this user",
        "items": {
          "$ref": "#/definitions/HistoricalAdherenceActuals"
        },
        "type": "array"
      },
      "actualsEndDate": {
        "description": "The end date of the actual activities in ISO-8601 format.",
        "format": "date-time",
        "type": "string"
      },
      "adherencePercentage": {
        "description": "Adherence percentage for this user, in the scale of 0 - 100",
        "format": "double",
        "type": "number"
      },
      "conformancePercentage": {
        "description": "Conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.",
        "format": "double",
        "type": "number"
      },
      "dayMetrics": {
        "description": "Adherence and conformance metrics for days in query range",
        "items": {
          "$ref": "#/definitions/HistoricalAdherenceDayMetrics"
        },
        "type": "array"
      },
      "endDate": {
        "description": "End of the date range that was queried, in ISO-8601 format. If it was not set, end date will be set to the queried time",
        "format": "date-time",
        "type": "string"
      },
      "exceptionInfo": {
        "description": "List of adherence exceptions for this user",
        "items": {
          "$ref": "#/definitions/HistoricalAdherenceExceptionInfo"
        },
        "type": "array"
      },
      "impact": {
        "description": "The impact of the current adherence state for this user",
        "enum": [
          "Positive",
          "Negative",
          "Neutral",
          "Unknown"
        ],
        "type": "string"
      },
      "managementUnitId": {
        "description": "The ID of the management unit of the user for whom the adherence is queried",
        "type": "string"
      },
      "startDate": {
        "description": "Beginning of the date range that was queried, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "userId": {
        "description": "The ID of the user for whom the adherence is queried",
        "type": "string"
      }
    },
    "type": "object"
  },
  "HistoricalImportDeleteJobResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Property denoting the status of the delete.",
        "enum": [
          "InProgress",
          "Success",
          "Failed"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "HistoricalImportStatus": {
    "properties": {
      "active": {
        "description": "Whether this historical import is active or not",
        "readOnly": true,
        "type": "boolean"
      },
      "dateCreated": {
        "description": "Date in which the historical import is initiated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateImportEnded": {
        "description": "The last day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateImportStarted": {
        "description": "The first day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date in which the historical import is modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "error": {
        "description": "Error occured if the status of the import is failed",
        "readOnly": true,
        "type": "string"
      },
      "requestId": {
        "description": "Request id of the historical import in the organization",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Status of the historical import in the organization.",
        "enum": [
          "Initiated",
          "InProgress",
          "Pending",
          "Success",
          "Failed",
          "Cancelled",
          "Purged",
          "PurgePending"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Whether this historical import is of type csv or json",
        "enum": [
          "Csv",
          "Json"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "HistoricalImportStatusListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/HistoricalImportStatus"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "HistoricalShrinkageActivityCategoryResponse": {
    "properties": {
      "activityCategory": {
        "description": "Activity category for which shrinkage data is provided",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "shrinkageForActivityCategory": {
        "$ref": "#/definitions/HistoricalShrinkageAggregateResponse",
        "description": "Aggregated shrinkage data for the activity category"
      },
      "shrinkageForActivityCodes": {
        "description": "Shrinkage for the activity codes under this activity category",
        "items": {
          "$ref": "#/definitions/HistoricalShrinkageActivityCodeResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "HistoricalShrinkageActivityCodeResponse": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code for which shrinkage data is provided",
        "type": "string"
      },
      "shrinkageForActivityCode": {
        "$ref": "#/definitions/HistoricalShrinkageAggregateResponse",
        "description": "Aggregated shrinkage data for the activity code"
      }
    },
    "type": "object"
  },
  "HistoricalShrinkageAggregateResponse": {
    "properties": {
      "actualShrinkagePercent": {
        "description": "Aggregated actual value in percent from 0.0 to 100.0 for scheduled activities",
        "format": "double",
        "type": "number"
      },
      "actualShrinkageSeconds": {
        "description": "Aggregated actual value in seconds for scheduled activities",
        "format": "int32",
        "type": "integer"
      },
      "paidShrinkageSeconds": {
        "description": "Aggregated shrinkage value in seconds for paid activities",
        "format": "int32",
        "type": "integer"
      },
      "plannedShrinkageSeconds": {
        "description": "Aggregated shrinkage value in seconds for planned activities",
        "format": "int32",
        "type": "integer"
      },
      "scheduledShrinkagePercent": {
        "description": "Aggregated shrinkage value in percent from 0.0 to 100.0 for scheduled activities",
        "format": "double",
        "type": "number"
      },
      "scheduledShrinkageSeconds": {
        "description": "Aggregated shrinkage value in seconds for scheduled activities",
        "format": "int32",
        "type": "integer"
      },
      "unpaidShrinkageSeconds": {
        "description": "Aggregated shrinkage value in seconds for unpaid activities",
        "format": "int32",
        "type": "integer"
      },
      "unplannedShrinkageSeconds": {
        "description": "Aggregated shrinkage value in seconds for unplanned activities",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "HistoricalShrinkageResult": {
    "properties": {
      "aggregatedShrinkage": {
        "$ref": "#/definitions/HistoricalShrinkageAggregateResponse",
        "description": "Aggregated shrinkage data for all the activity categories"
      },
      "businessUnitIds": {
        "description": "List of all business units of all the agents in response",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "endDate": {
        "description": "End of the date range that was queried, in ISO-8601 format. If it was not set, end date will be set to the queried time",
        "format": "date-time",
        "type": "string"
      },
      "shrinkageForActivityCategories": {
        "description": "Shrinkage for activity categories",
        "items": {
          "$ref": "#/definitions/HistoricalShrinkageActivityCategoryResponse"
        },
        "type": "array"
      },
      "startDate": {
        "description": "Beginning of the date range that was queried, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "totalLoggedInDurationSeconds": {
        "description": "Total duration in seconds for which agents in the management unit are actually logged-in",
        "format": "int32",
        "type": "integer"
      },
      "totalScheduledDurationSeconds": {
        "description": "Total duration in seconds for which agents in the management unit are scheduled",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "HistoricalShrinkageResultListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/HistoricalShrinkageResult"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "HistoryEntry": {
    "properties": {
      "action": {
        "description": "The action performed",
        "enum": [
          "CHECKIN",
          "CHECKOUT",
          "CREATE",
          "DEACTIVATE",
          "DEBUG",
          "DELETE",
          "PUBLISH",
          "REVERT",
          "SAVE",
          "TRANSCODE",
          "UPDATE",
          "UPLOAD"
        ],
        "type": "string"
      },
      "client": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "OAuth client associated with this entry."
      },
      "resource": {
        "description": "For actions performed not on the item itself, but on a sub-item, this field identifies the sub-item by name.  For example, for actions performed on prompt resources, this will be the prompt resource name.",
        "type": "string"
      },
      "secure": {
        "type": "boolean"
      },
      "timestamp": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "User associated with this entry."
      },
      "version": {
        "type": "string"
      },
      "virtualAgentEnabled": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "HistoryHeadersTranslation": {
    "properties": {
      "cc": {
        "description": "A translation for the word \"cc\", for the expected language",
        "type": "string"
      },
      "forwardPrefix": {
        "description": "A translation for the subject prefix \"Forward\", for the expected language",
        "type": "string"
      },
      "from": {
        "description": "A translation for the word \"from\", for the expected language",
        "type": "string"
      },
      "language": {
        "description": "The code of the expected language",
        "type": "string"
      },
      "replyPrefix": {
        "description": "A translation for the subject prefix \"Reply\", for the expected language",
        "type": "string"
      },
      "sent": {
        "description": "A translation for the word \"sent\", for the expected language",
        "type": "string"
      },
      "subject": {
        "description": "A translation for the word \"subject\", for the expected language",
        "type": "string"
      },
      "timeZone": {
        "description": "Timezone used by the agent, used to format the sent email date and time. If not defined, will default to UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "to": {
        "description": "A translation for the word \"to\", for the expected language",
        "type": "string"
      }
    },
    "required": [
      "cc",
      "forwardPrefix",
      "from",
      "language",
      "replyPrefix",
      "sent",
      "subject",
      "to"
    ],
    "type": "object"
  },
  "HistoryListing": {
    "properties": {
      "actionName": {
        "description": "Action name",
        "enum": [
          "CREATE",
          "CHECKIN",
          "CHECKOUT",
          "DEBUG",
          "DELETE",
          "HISTORY",
          "PUBLISH",
          "REVERT",
          "SAVE",
          "STATE_CHANGE",
          "UPDATE",
          "VALIDATE"
        ],
        "type": "string"
      },
      "actionStatus": {
        "description": "Action status",
        "enum": [
          "LOCKED",
          "UNLOCKED",
          "STARTED",
          "PENDING_GENERATION",
          "PENDING_BACKEND_NOTIFICATION",
          "SUCCESS",
          "FAILURE"
        ],
        "type": "string"
      },
      "client": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "complete": {
        "type": "boolean"
      },
      "completed": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/HistoryEntry"
        },
        "type": "array"
      },
      "errorCode": {
        "type": "string"
      },
      "errorDetails": {
        "items": {
          "$ref": "#/definitions/Detail"
        },
        "type": "array"
      },
      "errorMessage": {
        "type": "string"
      },
      "errorMessageParams": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "started": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "system": {
        "type": "boolean"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "HoldUpdatedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "held": {
        "description": "Indicates whether this communication is held.",
        "type": "boolean"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "held"
    ],
    "type": "object"
  },
  "HomerRecord": {
    "properties": {
      "auth": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "authUser": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "callid": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "callidAleg": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "contactIp": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "contactPort": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "contactUser": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "contentType": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "conversationId": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "correlationId": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "cseq": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "date": {
        "description": "metadata associated to the SIP calls. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dbnode": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "destinationAlias": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "destinationIp": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "destinationPort": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "diversion": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "family": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "fromDomain": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "fromTag": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "fromUser": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "method": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "microTs": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "milliTs": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "msg": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "node": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "originatorIp": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "originatorPort": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "participantId": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "pidUser": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "proto": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "reason": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "replyReason": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "rtpStat": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "ruri": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "ruriDomain": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "ruriUser": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceAlias": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "sourceIp": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "sourcePort": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "toDomain": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "toTag": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "toUser": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "trans": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "type": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "userAgent": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "via1": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      },
      "via1Branch": {
        "description": "metadata associated to the SIP calls",
        "type": "string"
      }
    },
    "type": "object"
  },
  "HrisTimeOffType": {
    "properties": {
      "hrisIntegrationId": {
        "description": "The ID of the integration.",
        "type": "string"
      },
      "id": {
        "description": "The ID of the time off type configured in integration.",
        "type": "string"
      },
      "name": {
        "description": "The name of the time off type configured in integration.",
        "type": "string"
      },
      "secondaryId": {
        "description": "Secondary ID of the time off type, if configured in integration.",
        "type": "string"
      }
    },
    "required": [
      "hrisIntegrationId",
      "id",
      "name"
    ],
    "type": "object"
  },
  "HrisTimeOffTypeResponse": {
    "properties": {
      "id": {
        "description": "ID of the time off type configured in integration",
        "type": "string"
      },
      "name": {
        "description": "Name of the time off type configured in integration",
        "type": "string"
      },
      "secondaryId": {
        "description": "Secondary ID of the time off type, if configured in integration",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "HrisTimeOffTypesJobReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "HrisTimeOffTypesJobResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/HrisTimeOffTypeResponse"
        },
        "type": "array"
      },
      "status": {
        "description": "The status of the time off types job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "HrisTimeOffTypesResponse": {
    "properties": {
      "entities": {
        "description": "List of time off types. It is available only via notification",
        "items": {
          "$ref": "#/definitions/HrisTimeOffTypeResponse"
        },
        "type": "array"
      },
      "job": {
        "$ref": "#/definitions/HrisTimeOffTypesJobReference",
        "description": "The asynchronous job handling the query"
      }
    },
    "type": "object"
  },
  "Humanize": {
    "properties": {
      "bot": {
        "$ref": "#/definitions/BotMessengerProfile",
        "description": "Bot messenger profile setting"
      },
      "enabled": {
        "description": "Whether or not humanize conversations setting is enabled",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "IVR": {
    "description": "Defines the phone numbers, operating hours, and the Architect flows to execute for an IVR.",
    "properties": {
      "closedHoursFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Architect flow to execute during the hours an organization is closed."
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "dnis": {
        "description": "The phone number(s) to contact the IVR by.  Each phone number must be unique and not in use by another resource.  For example, a user and an iVR cannot have the same phone number.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "holidayHoursFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Architect flow to execute during an organization's holiday hours."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "openHoursFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Architect flow to execute during the hours an organization is open."
      },
      "scheduleGroup": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The schedule group defining the open and closed hours for an organization.  If this is provided, an open flow and a closed flow must be specified as well."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "IVRDivisionView": {
    "description": "An ivr.",
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The ivr identifier",
        "type": "string"
      },
      "name": {
        "description": "The ivr name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "IVRDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/IVRDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "IVREntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/IVR"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "IdentifierClaimRequest": {
    "properties": {
      "identifier": {
        "$ref": "#/definitions/ContactIdentifier",
        "description": "The identifier that should be claimed/released from a contact"
      },
      "operation": {
        "description": "The operation to perform claim/release",
        "enum": [
          "Claim",
          "Release"
        ],
        "type": "string"
      }
    },
    "required": [
      "identifier",
      "operation"
    ],
    "type": "object"
  },
  "IdentityNow": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "IdentityProvider": {
    "properties": {
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "IdentityProviderEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/IdentityProvider"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "IdentityResolutionConfig": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "resolveIdentities": {
        "description": "Whether the channel should resolve identities",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "resolveIdentities"
    ],
    "type": "object"
  },
  "IdleEventTrigger": {
    "description": "Details about an idle event trigger",
    "properties": {
      "eventName": {
        "description": "Name of event triggered after period of inactivity.",
        "type": "string"
      },
      "idleAfterSeconds": {
        "description": "Number of seconds of inactivity before an event is triggered.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "eventName"
    ],
    "type": "object"
  },
  "IdleTokenTimeout": {
    "properties": {
      "enableIdleTokenTimeout": {
        "description": "Indicates whether the Token Timeout should be enabled or disabled.",
        "type": "boolean"
      },
      "idleTokenTimeoutSeconds": {
        "description": "Token timeout length in seconds. Must be at least 5 minutes and 8 hours or less (if HIPAA is disabled) or 15 minutes or less (if HIPAA is enabled).",
        "format": "int32",
        "minimum": 300,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "IgnoredActivityCategories": {
    "properties": {
      "values": {
        "description": "Activity categories list",
        "items": {
          "enum": [
            "OnQueueWork",
            "Break",
            "Meal",
            "Meeting",
            "OffQueueWork",
            "TimeOff",
            "Training",
            "Unavailable",
            "Unscheduled"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ImapSettings": {
    "properties": {
      "errorInfo": {
        "$ref": "#/definitions/EmailErrorInfo",
        "description": "Additional Imap Server error information",
        "readOnly": true
      },
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The IMAP server integration to use for ingesting emails."
      },
      "status": {
        "description": "Imap Server Status",
        "enum": [
          "Active",
          "AwaitingFolders",
          "Error",
          "Inactive",
          "IntegrationDeleted",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ImportError": {
    "properties": {
      "line": {
        "format": "int32",
        "type": "integer"
      },
      "message": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ImportForecastResponse": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuShortTermForecast",
        "description": "The result of the operation. Always null, result will come via notification"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ImportForecastUploadResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers for the PUT request to the url",
        "type": "object"
      },
      "uploadBodySchema": {
        "$ref": "#/definitions/BuImportShortTermForecastSchema",
        "description": "Always null. Defines the schema of the json body to be PUT to the url. The json body should be gzip encoded before uploading"
      },
      "uploadKey": {
        "description": "The key to pass to the secondary request to start processing of the upload",
        "type": "string"
      },
      "url": {
        "description": "The url to which to PUT the upload body",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ImportReport": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ImportError"
        },
        "type": "array"
      },
      "imported": {
        "$ref": "#/definitions/ResultCounters"
      },
      "totalDocuments": {
        "format": "int32",
        "type": "integer"
      },
      "validated": {
        "$ref": "#/definitions/ResultCounters"
      }
    },
    "type": "object"
  },
  "ImportScheduleUploadResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers for the PUT request to the url",
        "type": "object"
      },
      "uploadBodySchema": {
        "$ref": "#/definitions/ImportScheduleUploadSchema",
        "description": "Always null. Defines the schema of the json body to be PUT to the url. The json body should be gzip encoded before uploading"
      },
      "uploadKey": {
        "description": "The key to pass to the secondary request to start processing of the upload",
        "type": "string"
      },
      "url": {
        "description": "The url to which to PUT the upload body",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ImportScheduleUploadSchema": {
    "properties": {
      "agentSchedules": {
        "description": "Individual agent schedules",
        "items": {
          "$ref": "#/definitions/BuImportAgentScheduleUploadSchema"
        },
        "type": "array"
      },
      "description": {
        "description": "The description for the imported schedule",
        "type": "string"
      },
      "headcountForecast": {
        "$ref": "#/definitions/BuHeadcountForecast",
        "description": "The headcount forecast to associate with the imported schedule"
      },
      "published": {
        "description": "Whether the imported schedule should be immediately published",
        "type": "boolean"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The short term forecast to associate with the imported schedule"
      },
      "weekCount": {
        "description": "The number of weeks the imported schedule will cover",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "description",
      "weekCount"
    ],
    "type": "object"
  },
  "ImportScriptStatusResponse": {
    "properties": {
      "message": {
        "type": "string"
      },
      "succeeded": {
        "type": "boolean"
      },
      "url": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ImportStatus": {
    "properties": {
      "completedRecords": {
        "description": "number of records finished importing",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "failureReason": {
        "description": "if the import has failed, the reason for the failure",
        "readOnly": true,
        "type": "string"
      },
      "listNamePrefix": {
        "description": "The prefix for the contact list name",
        "readOnly": true,
        "type": "string"
      },
      "percentComplete": {
        "description": "percentage of records finished importing",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "state": {
        "description": "current status of the import",
        "enum": [
          "IN_PROGRESS",
          "FAILED"
        ],
        "readOnly": true,
        "type": "string"
      },
      "targetContactListIds": {
        "description": "The contact list Ids for target contact lists.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "totalRecords": {
        "description": "total number of records to be imported",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "completedRecords",
      "percentComplete",
      "state",
      "totalRecords"
    ],
    "type": "object"
  },
  "ImportStatusRequest": {
    "properties": {
      "status": {
        "description": "New status for existing import operation",
        "type": "string"
      }
    },
    "required": [
      "status"
    ],
    "type": "object"
  },
  "ImportTemplate": {
    "properties": {
      "contactListFilter": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "ContactListFilter for this ImportTemplate."
      },
      "contactListTemplate": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "ContactListTemplate for this ImportTemplate."
      },
      "customListNameFormatValue": {
        "description": "Custom value for the list name format, at least %N is required. Any character other than the specified tokens will be used as is. Available tokens: %N: ListNamePrefix; %P: Part number; %F: Filter name; %C: Column value; YYYY: year; MM: month; DD: day; hh: hour; mm: minute; ss: second.",
        "type": "string"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "importStatus": {
        "$ref": "#/definitions/ImportStatus",
        "description": "The status of the import process.",
        "readOnly": true
      },
      "listNameFormat": {
        "description": "The list name format for target ContactLists. When Custom is provided, customListNameFormatValue is required.",
        "enum": [
          "ListNamePrefix",
          "ListNamePrefixMonthDayYear",
          "ListNamePrefixMonthDayYearHourMinuteSecond",
          "ListNamePrefixPart",
          "ListNamePrefixMonthDayYearPart",
          "ListNamePrefixMonthDayYearHourMinuteSecondPart",
          "Custom"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the import template.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "splittingInformation": {
        "$ref": "#/definitions/SplittingInformation",
        "description": "How to split contact records, required if useSplittingCriteria is true."
      },
      "useSplittingCriteria": {
        "description": "Whether or not to use splitting criteria. Default is false.",
        "type": "boolean"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "contactListTemplate"
    ],
    "type": "object"
  },
  "ImportTemplateEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ImportTemplate"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InboundDomain": {
    "properties": {
      "customSMTPServer": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The custom SMTP server integration to use when sending outbound emails from this domain."
      },
      "id": {
        "description": "Unique Id of the domain such as: example.com",
        "type": "string"
      },
      "mailFromSettings": {
        "$ref": "#/definitions/MailFromResult",
        "description": "The DNS settings if the inbound domain is using a custom Mail From. These settings can only be used on InboundDomains where subDomain is false."
      },
      "mxRecordStatus": {
        "description": "Mx Record Status",
        "enum": [
          "VALID",
          "INVALID",
          "NOT_AVAILABLE"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "subDomain": {
        "description": "Indicates if this a PureCloud sub-domain.  If true, then the appropriate DNS records are created for sending/receiving email.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "InboundDomainEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/InboundDomain"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InboundDomainPatchRequest": {
    "properties": {
      "customSMTPServer": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The custom SMTP server integration to use when sending outbound emails from this domain."
      },
      "imapSettings": {
        "$ref": "#/definitions/ImapSettings",
        "description": "The IMAP server integration and settings to use for processing inbound emails."
      },
      "mailFromSettings": {
        "$ref": "#/definitions/MailFromResult",
        "description": "The DNS settings if the inbound domain is using a custom Mail From. These settings can only be used on InboundDomains where subDomain is false."
      }
    },
    "type": "object"
  },
  "InboundMessageRequest": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The list of attributes to associate with the customer participant.",
        "type": "object"
      },
      "flowId": {
        "description": "The ID of the flow to use for routing email conversation. This field is mutually exclusive with queueId",
        "type": "string"
      },
      "fromAddress": {
        "description": "The email address of the sender of the email.",
        "type": "string"
      },
      "fromName": {
        "description": "The name of the sender of the email.",
        "type": "string"
      },
      "languageId": {
        "description": "The ID of the language to use for routing.",
        "type": "string"
      },
      "priority": {
        "description": "The priority to assign to the conversation for routing.",
        "format": "int32",
        "type": "integer"
      },
      "provider": {
        "description": "The name of the provider that is sourcing the email such as Oracle, Salesforce, etc.",
        "type": "string"
      },
      "queueId": {
        "description": "The ID of the queue to use for routing the email conversation. This field is mutually exclusive with flowId",
        "type": "string"
      },
      "skillIds": {
        "description": "The list of skill ID's to use for routing.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "subject": {
        "description": "The subject of the email",
        "type": "string"
      },
      "toAddress": {
        "description": "The email address of the recipient of the email.",
        "type": "string"
      },
      "toName": {
        "description": "The name of the recipient of the email.",
        "type": "string"
      }
    },
    "required": [
      "provider"
    ],
    "type": "object"
  },
  "InboundOnlySetting": {
    "properties": {
      "inbound": {
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "InboundRoute": {
    "properties": {
      "allowMultipleActions": {
        "description": "Control if multiple actions are allowed on this route. When true the disconnect has to be done manually. When false a conversation will be disconnected by the system after every action",
        "type": "boolean"
      },
      "autoBcc": {
        "description": "The recipients that should be automatically blind copied on outbound emails associated with this InboundRoute.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The flow to use for processing the email."
      },
      "fromEmail": {
        "description": "The sender email to use for outgoing replies.",
        "type": "string"
      },
      "fromName": {
        "description": "The sender name to use for outgoing replies.",
        "type": "string"
      },
      "historyInclusion": {
        "description": "The configuration to indicate how the history of a conversation has to be included in a draft",
        "enum": [
          "Include",
          "Exclude",
          "Optional"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The language to use for routing."
      },
      "name": {
        "type": "string"
      },
      "pattern": {
        "description": "The search pattern that the mailbox name should match.",
        "type": "string"
      },
      "priority": {
        "description": "The priority to use for routing.",
        "format": "int32",
        "type": "integer"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The queue to route the emails to."
      },
      "replyEmailAddress": {
        "$ref": "#/definitions/QueueEmailAddress",
        "description": "The route to use for email replies."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "signature": {
        "$ref": "#/definitions/Signature",
        "description": "The configuration for the canned response signature that will be appended to outbound emails sent via this route"
      },
      "skills": {
        "description": "The skills to use for routing.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "spamFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The flow to use for processing inbound emails that have been marked as spam."
      }
    },
    "required": [
      "fromName",
      "pattern"
    ],
    "type": "object"
  },
  "InboundRouteEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/InboundRoute"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InfixOperator": {
    "properties": {
      "operatorPosition": {
        "$ref": "#/definitions/OperatorPosition",
        "description": "Dictates when the following operand should occur relative to current operand"
      },
      "operatorType": {
        "description": "The logical operation that is applied on the operand against the following operand",
        "enum": [
          "Or",
          "And",
          "Near"
        ],
        "type": "string"
      }
    },
    "required": [
      "operatorType"
    ],
    "type": "object"
  },
  "InfrastructureascodeJob": {
    "description": "Information about a CX infrastructure as code job",
    "properties": {
      "acceleratorId": {
        "description": "Accelerator associated with the job",
        "readOnly": true,
        "type": "string"
      },
      "dateSubmitted": {
        "description": "Date and time on which job was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dryRun": {
        "description": "Whether or not the job was a dry run",
        "type": "boolean"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "Information about errors, if any",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "results": {
        "description": "The output results of the terraform job",
        "readOnly": true,
        "type": "string"
      },
      "rollbackResults": {
        "description": "The results of rolling back the job if there were errors.  Not returned if job was successful.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Job status",
        "enum": [
          "Created",
          "Queued",
          "Running",
          "Complete",
          "Failed",
          "Incomplete"
        ],
        "readOnly": true,
        "type": "string"
      },
      "submittedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "User who submitted the job",
        "readOnly": true
      }
    },
    "required": [
      "dryRun"
    ],
    "type": "object"
  },
  "InitialConfiguration": {
    "properties": {
      "additionalInfo": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this session which should be recorded by the platform but which will not be indexed or searchable. Primarily for diagnostic value. Any information that needs to be accessible through other components like Analytics should be moved to dedicated fields.",
        "type": "object"
      },
      "alerting": {
        "description": "Indicates that this communication's initial state is alerting. If false, the communication started in a connected state.",
        "type": "boolean"
      },
      "audioState": {
        "$ref": "#/definitions/AudioState",
        "description": "Indicates the initial audio state for the communication."
      },
      "inbound": {
        "description": "Indicates the direction of this communication with respect to the contact center. `true` means the communication is INBOUND. `false` means the communication is OUTBOUND.",
        "type": "boolean"
      },
      "invitedBy": {
        "description": "The id of the communication (the \"peer\") that \"invited\" this communication, if this occurred.",
        "type": "string"
      },
      "recordingActive": {
        "description": "Indicates whether recording is active for this communication at creation.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "InitiateScreenRecording": {
    "properties": {
      "archiveRetention": {
        "$ref": "#/definitions/ArchiveRetention"
      },
      "deleteRetention": {
        "$ref": "#/definitions/DeleteRetention"
      },
      "recordACW": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "InitiatingAction": {
    "properties": {
      "actionContext": {
        "description": "Action of the audit initiating the transaction",
        "type": "string"
      },
      "transactionId": {
        "description": "Id of the audit initiating the transaction",
        "type": "string"
      }
    },
    "type": "object"
  },
  "InitiatingAlternativeShift": {
    "properties": {
      "id": {
        "description": "The ID of the shift from a user's schedule",
        "type": "string"
      },
      "startDate": {
        "description": "The start date for the shift in the user's schedule in ISO-8601 format. For example: YYYY-MM-DDThh:mm:ss.SSSZ",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "id",
      "startDate"
    ],
    "type": "object"
  },
  "InsightsAgentItem": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "manager": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "This user's manager."
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "InsightsAgents": {
    "properties": {
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division"
      },
      "entities": {
        "description": "The list of insights agents",
        "items": {
          "$ref": "#/definitions/InsightsAgentItem"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "type": "string"
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The performance profile"
      }
    },
    "type": "object"
  },
  "InsightsDetails": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The comparative period work day date range"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division"
      },
      "granularity": {
        "description": "Granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "type": "string"
      },
      "metricData": {
        "description": "The list of insights data for each metric of the user",
        "items": {
          "$ref": "#/definitions/InsightsDetailsMetricItem"
        },
        "type": "array"
      },
      "overallData": {
        "$ref": "#/definitions/InsightsDetailsOverallItem",
        "description": "Overall insights data of the user"
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The performance profile"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The primary period work day date range"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The query user"
      }
    },
    "type": "object"
  },
  "InsightsDetailsMetricItem": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/InsightsDetailsMetricPeriodPoints",
        "description": "Insights data in the comparative period"
      },
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The gamification metric for the data"
      },
      "percentOfGoalChange": {
        "description": "Percent of goal change",
        "format": "double",
        "type": "number"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/InsightsDetailsMetricPeriodPoints",
        "description": "Insights data in the primary period"
      },
      "valueChange": {
        "description": "Value change",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "InsightsDetailsMetricPeriodPoints": {
    "properties": {
      "dataPointCount": {
        "description": "Number of data points",
        "format": "int32",
        "type": "integer"
      },
      "maxPoints": {
        "description": "Max possible points",
        "format": "int32",
        "type": "integer"
      },
      "percentOfGoal": {
        "description": "Percentage of the goal",
        "format": "double",
        "type": "number"
      },
      "points": {
        "description": "Points scored",
        "format": "int32",
        "type": "integer"
      },
      "rankPercentagePoints": {
        "description": "The agent's rank in leader board for percentage on this metric",
        "format": "int32",
        "type": "integer"
      },
      "rankTotalPoints": {
        "description": "The agent's rank in leader board for points on this metric",
        "format": "int32",
        "type": "integer"
      },
      "value": {
        "description": "Average value",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "InsightsDetailsOverallItem": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/InsightsDetailsOverallPeriodPoints",
        "description": "Insights data in the comparative period"
      },
      "percentOfGoalChange": {
        "description": "Percent of goal change",
        "format": "double",
        "type": "number"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/InsightsDetailsOverallPeriodPoints",
        "description": "Insights data in the primary period"
      }
    },
    "type": "object"
  },
  "InsightsDetailsOverallPeriodPoints": {
    "properties": {
      "dataPointCount": {
        "description": "Number of data points",
        "format": "int32",
        "type": "integer"
      },
      "maxPoints": {
        "description": "Max possible points",
        "format": "int32",
        "type": "integer"
      },
      "percentOfGoal": {
        "description": "Percentage of the goal",
        "format": "double",
        "type": "number"
      },
      "points": {
        "description": "Points scored",
        "format": "int32",
        "type": "integer"
      },
      "rankPercentagePoints": {
        "description": "The agent's rank in leader board for percentage on this metric",
        "format": "int32",
        "type": "integer"
      },
      "rankTotalPoints": {
        "description": "The agent's rank in leader board for points on this metric",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InsightsSummary": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The comparative period work day date range"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/InsightsSummaryUserItem"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The performance profile"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The primary period work day date range"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InsightsSummaryMetricItem": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/InsightsSummaryMetricPeriodPoints",
        "description": "Insights data in the comparative period"
      },
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The gamification metric for the data"
      },
      "percentOfGoalChange": {
        "description": "Percent of goal change",
        "format": "double",
        "type": "number"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/InsightsSummaryMetricPeriodPoints",
        "description": "Insights data in the primary period"
      },
      "valueChange": {
        "description": "Value change",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "InsightsSummaryMetricPeriodPoints": {
    "properties": {
      "dataPointCount": {
        "description": "Number of data points",
        "format": "int32",
        "type": "integer"
      },
      "maxPoints": {
        "description": "Max possible points",
        "format": "int32",
        "type": "integer"
      },
      "percentOfGoal": {
        "description": "Percentage of the goal",
        "format": "double",
        "type": "number"
      },
      "points": {
        "description": "Points scored",
        "format": "int32",
        "type": "integer"
      },
      "value": {
        "description": "Average value",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "InsightsSummaryOverallItem": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/InsightsSummaryOverallPeriodPoints",
        "description": "Insights data in the comparative period"
      },
      "percentOfGoalChange": {
        "description": "Percent of goal change",
        "format": "double",
        "type": "number"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/InsightsSummaryOverallPeriodPoints",
        "description": "Insights data in the primary period"
      }
    },
    "type": "object"
  },
  "InsightsSummaryOverallPeriodPoints": {
    "properties": {
      "dataPointCount": {
        "description": "Number of data points",
        "format": "int32",
        "type": "integer"
      },
      "maxPoints": {
        "description": "Max possible points",
        "format": "int32",
        "type": "integer"
      },
      "percentOfGoal": {
        "description": "Percentage of the goal",
        "format": "double",
        "type": "number"
      },
      "points": {
        "description": "Points scored",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InsightsSummaryUserItem": {
    "properties": {
      "metricData": {
        "description": "The list of insights data for each metric of the user",
        "items": {
          "$ref": "#/definitions/InsightsSummaryMetricItem"
        },
        "type": "array"
      },
      "overallData": {
        "$ref": "#/definitions/InsightsSummaryOverallItem",
        "description": "Overall insights data of the user"
      },
      "ranking": {
        "description": "Ranking of the user",
        "format": "int32",
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "Queried user"
      }
    },
    "type": "object"
  },
  "InsightsTrend": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The comparative period work day date range"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division"
      },
      "entities": {
        "description": "The list of insights trend for each metric",
        "items": {
          "$ref": "#/definitions/InsightsTrendMetricItem"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "type": "string"
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The performance profile"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The primary period work day date range"
      },
      "total": {
        "$ref": "#/definitions/InsightsTrendTotalItem",
        "description": "The insights trend in total"
      }
    },
    "type": "object"
  },
  "InsightsTrendMetricItem": {
    "properties": {
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The gamification metric for the trend"
      },
      "trends": {
        "$ref": "#/definitions/InsightsTrends",
        "description": "Trends for the metric"
      }
    },
    "type": "object"
  },
  "InsightsTrendTotalItem": {
    "properties": {
      "trends": {
        "$ref": "#/definitions/InsightsTrends",
        "description": "Trends for the metric"
      }
    },
    "type": "object"
  },
  "InsightsTrends": {
    "properties": {
      "comparativePeriod": {
        "description": "List of trend data in the comparative period",
        "items": {
          "$ref": "#/definitions/TrendData"
        },
        "type": "array"
      },
      "primaryPeriod": {
        "description": "List of trend data in the primary period",
        "items": {
          "$ref": "#/definitions/TrendData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "InstagramId": {
    "description": "User information for an Instagram account",
    "properties": {
      "displayName": {
        "description": "The displayName of the person who owns this Instagram account",
        "type": "string"
      },
      "ids": {
        "description": "The set of scopedIds that this person has. Each scopedId is specific to an Instagram page or app that the user interacts with.",
        "items": {
          "$ref": "#/definitions/InstagramScopedId"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "InstagramIntegration": {
    "properties": {
      "appId": {
        "description": "The App ID from Facebook",
        "type": "string"
      },
      "createError": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error information returned, if createStatus is set to Error",
        "readOnly": true
      },
      "createStatus": {
        "description": "Status of asynchronous create operation",
        "enum": [
          "Initiated",
          "Completed",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Integration"
      },
      "dateCreated": {
        "description": "Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this Integration was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A unique Integration ID.",
        "readOnly": true,
        "type": "string"
      },
      "instagramId": {
        "description": "The ID from Instagram messenger",
        "type": "string"
      },
      "instagramName": {
        "description": "The name from Instagram messenger",
        "type": "string"
      },
      "instagramProfileImageUrl": {
        "description": "The url of the profile image from Instagram messenger",
        "type": "string"
      },
      "instagramUsername": {
        "description": "The Username from Instagram messenger",
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingReference"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that last modified this Integration"
      },
      "name": {
        "description": "The name of the Instagram Integration",
        "type": "string"
      },
      "pageId": {
        "description": "The Page ID from Instagram messenger",
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The recipient reference associated to the Instagram Integration. This recipient is used to associate a flow to an integration",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Instagram Integration",
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "appId",
      "id",
      "name",
      "version"
    ],
    "type": "object"
  },
  "InstagramIntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/InstagramIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InstagramIntegrationRequest": {
    "properties": {
      "appId": {
        "description": "The app ID of Facebook app. The appId is required when a customer wants to use their own approved Facebook app.",
        "type": "string"
      },
      "appSecret": {
        "description": "The app Secret of Facebook app. The appSecret is required when appId is provided.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the Instagram Integration",
        "type": "string"
      },
      "pageAccessToken": {
        "description": "The long-lived Page Access Token of Instagram page. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nWhen a pageAccessToken is provided, pageId and userAccessToken are not required.",
        "type": "string"
      },
      "pageId": {
        "description": "The page ID of Instagram page. The pageId is required when userAccessToken is provided.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "userAccessToken": {
        "description": "The short-lived User Access Token of Instagram user logged into Facebook app. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nWhen userAccessToken is provided, pageId is mandatory. \nWhen userAccessToken/pageId combination is provided, pageAccessToken is not required.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "InstagramIntegrationUpdateRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the Instagram Integration",
        "type": "string"
      },
      "pageAccessToken": {
        "description": "The long-lived Page Access Token of Instagram page. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nEither pageAccessToken or userAccessToken should be provided.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "userAccessToken": {
        "description": "The short-lived User Access Token of the Instagram user logged into the Facebook app. \nSee https://developers.facebook.com/docs/facebook-login/access-tokens. \nEither pageAccessToken or userAccessToken should be provided.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "InstagramScopedId": {
    "description": "Scoped ID for an Instagram user interacting with a page or app",
    "properties": {
      "scopedId": {
        "description": "The unique page/app-specific scopedId for the user",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Integration": {
    "description": "Details for an Integration",
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Read-only attributes for the integration.",
        "readOnly": true,
        "type": "object"
      },
      "config": {
        "$ref": "#/definitions/IntegrationConfigurationInfo",
        "description": "Configuration information for the integration.",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationType": {
        "$ref": "#/definitions/IntegrationType",
        "description": "Type of the integration",
        "readOnly": true
      },
      "intendedState": {
        "description": "Configured state of the integration.",
        "enum": [
          "ENABLED",
          "DISABLED",
          "DELETED",
          "RESTORED"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the integration, used to distinguish this integration from others of the same type.",
        "readOnly": true,
        "type": "string"
      },
      "notes": {
        "description": "Notes about the integration.",
        "readOnly": true,
        "type": "string"
      },
      "reportedState": {
        "$ref": "#/definitions/IntegrationStatusInfo",
        "description": "Last reported status of the integration.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "intendedState"
    ],
    "type": "object"
  },
  "IntegrationAction": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "IntegrationActionFields": {
    "properties": {
      "integrationAction": {
        "$ref": "#/definitions/IntegrationAction",
        "description": "Reference to the Integration Action to be used when integrationAction type is qualified"
      },
      "requestMappings": {
        "description": "Collection of Request Mappings to use",
        "items": {
          "$ref": "#/definitions/RequestMapping"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "IntegrationConfiguration": {
    "description": "Configuration for an Integration",
    "properties": {
      "advanced": {
        "description": "Advanced configuration described by the schema in the advancedSchemaUri field.",
        "type": "object"
      },
      "credentials": {
        "additionalProperties": {
          "$ref": "#/definitions/CredentialInfo"
        },
        "description": "Credentials required by the integration. The required keys are indicated in the credentials property of the Integration Type",
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the integration, used to distinguish this integration from others of the same type.",
        "type": "string"
      },
      "notes": {
        "description": "Notes about the integration.",
        "type": "string"
      },
      "properties": {
        "description": "Key-value configuration settings described by the schema in the propertiesSchemaUri field.",
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "advanced",
      "credentials",
      "name",
      "notes",
      "properties",
      "version"
    ],
    "type": "object"
  },
  "IntegrationConfigurationInfo": {
    "description": "Configuration information for the integration",
    "properties": {
      "current": {
        "$ref": "#/definitions/IntegrationConfiguration",
        "description": "The current, active configuration for the integration.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "IntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Integration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "IntegrationExport": {
    "properties": {
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The aws-s3-recording-bulk-actions-integration that the policy uses for exports."
      },
      "shouldExportScreenRecordings": {
        "description": "True if the policy should export screen recordings in addition to the other conversation media. Default = true",
        "type": "boolean"
      }
    },
    "required": [
      "integration"
    ],
    "type": "object"
  },
  "IntegrationStatusInfo": {
    "description": "Status information for an Integration.",
    "properties": {
      "code": {
        "description": "Machine-readable status as reported by the integration.",
        "enum": [
          "ACTIVE",
          "ACTIVATING",
          "INACTIVE",
          "DEACTIVATING",
          "ERROR"
        ],
        "readOnly": true,
        "type": "string"
      },
      "detail": {
        "$ref": "#/definitions/MessageInfo",
        "description": "Localizable status details for the integration.",
        "readOnly": true
      },
      "effective": {
        "description": "Localized, human-readable, effective status of the integration.",
        "readOnly": true,
        "type": "string"
      },
      "lastUpdated": {
        "description": "Date and time (in UTC) when the integration status (i.e. the code field) was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "IntegrationType": {
    "description": "Descriptor for a type of Integration.",
    "properties": {
      "category": {
        "description": "Category describing the integration type.",
        "readOnly": true,
        "type": "string"
      },
      "configAdvancedSchemaUri": {
        "description": "URI of the schema describing the advanced JSON document needed to configure an integration of this type.",
        "readOnly": true,
        "type": "string"
      },
      "configPropertiesSchemaUri": {
        "description": "URI of the schema describing the key-value properties needed to configure an integration of this type.",
        "readOnly": true,
        "type": "string"
      },
      "credentials": {
        "additionalProperties": {
          "$ref": "#/definitions/CredentialSpecification"
        },
        "description": "Map of credentials for integrations of this type. The key is the name of a credential that can be provided in the credentials property of the integration configuration.",
        "readOnly": true,
        "type": "object"
      },
      "description": {
        "description": "Description of the integration type.",
        "readOnly": true,
        "type": "string"
      },
      "faqUri": {
        "description": "URI of frequently asked questions about the integration type",
        "readOnly": true,
        "type": "string"
      },
      "helpLinks": {
        "description": "List of links to additional help resources",
        "items": {
          "$ref": "#/definitions/HelpLink"
        },
        "readOnly": true,
        "type": "array"
      },
      "helpUri": {
        "description": "URI of a page with more information about the integration type",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The ID of the integration type.",
        "type": "string"
      },
      "images": {
        "description": "Collection of logos.",
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "readOnly": true,
        "type": "array"
      },
      "marketplaceUri": {
        "description": "URI of the marketplace listing for this integration type",
        "readOnly": true,
        "type": "string"
      },
      "maxInstances": {
        "description": "The maximum number of integration instances allowable for this integration type",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "nonInstallable": {
        "description": "Indicates if the integration type is installable or not.",
        "readOnly": true,
        "type": "boolean"
      },
      "privacyPolicyUri": {
        "description": "URI of a privacy policy for users of the integration type",
        "readOnly": true,
        "type": "string"
      },
      "provider": {
        "description": "PureCloud provider of the integration type.",
        "readOnly": true,
        "type": "string"
      },
      "salesContactUri": {
        "description": "URI for vendor sales information",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportContactUri": {
        "description": "URI for vendor support",
        "readOnly": true,
        "type": "string"
      },
      "termsOfServiceUri": {
        "description": "URI of a page with terms and conditions for the integration type",
        "readOnly": true,
        "type": "string"
      },
      "userPermissions": {
        "description": "List of permissions required to permit user access to the integration type.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "vendorName": {
        "description": "Name of the vendor of this integration type",
        "readOnly": true,
        "type": "string"
      },
      "vendorOAuthClientIds": {
        "description": "List of OAuth Client IDs that must be authorized when the integration is created.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "vendorWebsiteUri": {
        "description": "URI of the vendor's website",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "IntegrationTypeEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/IntegrationType"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Intent": {
    "properties": {
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "IntentDefinition": {
    "properties": {
      "additionalLanguages": {
        "additionalProperties": {
          "$ref": "#/definitions/AdditionalLanguagesIntent"
        },
        "description": "Additional languages for intents",
        "type": "object"
      },
      "entityNameReferences": {
        "description": "The references for the named entity used in this intent.This field is mutually exclusive with entityTypeBindings",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "entityTypeBindings": {
        "description": "The bindings for the named entity types used in this intent.This field is mutually exclusive with entityNameReferences and entities",
        "items": {
          "$ref": "#/definitions/NamedEntityTypeBinding"
        },
        "type": "array"
      },
      "id": {
        "description": "ID of the intent.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the intent.",
        "type": "string"
      },
      "utterances": {
        "description": "The utterances that act as training phrases for the intent.",
        "items": {
          "$ref": "#/definitions/NluUtterance"
        },
        "type": "array"
      }
    },
    "required": [
      "name",
      "utterances"
    ],
    "type": "object"
  },
  "IntentFeedback": {
    "properties": {
      "assessment": {
        "description": "The assessment on the detection for feedback text.",
        "enum": [
          "Incorrect",
          "Correct",
          "Unknown",
          "Disabled"
        ],
        "type": "string"
      },
      "entities": {
        "description": "The collection of named entities detected.",
        "items": {
          "$ref": "#/definitions/DetectedNamedEntity"
        },
        "readOnly": true,
        "type": "array"
      },
      "name": {
        "description": "The name of the detected intent.",
        "readOnly": true,
        "type": "string"
      },
      "probability": {
        "description": "The probability of the detected intent.",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "InteractionStatsAlert": {
    "properties": {
      "alertTypes": {
        "description": "A collection of notification methods.",
        "items": {
          "enum": [
            "SMS",
            "DEVICE",
            "EMAIL"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "dimension": {
        "description": "The dimension of concern.",
        "enum": [
          "queueId",
          "userId"
        ],
        "readOnly": true,
        "type": "string"
      },
      "dimensionValue": {
        "description": "The value of the dimension.",
        "readOnly": true,
        "type": "string"
      },
      "endDate": {
        "description": "The date/time the owning rule exiting in alarm status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The media type.",
        "enum": [
          "voice",
          "chat",
          "email",
          "callback",
          "message"
        ],
        "readOnly": true,
        "type": "string"
      },
      "metric": {
        "description": "The metric to be assessed.",
        "enum": [
          "tAbandon",
          "tAnswered",
          "tTalk",
          "nOffered",
          "tHandle",
          "nTransferred",
          "oServiceLevel",
          "tWait",
          "tHeld",
          "tAcw"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Name of the rule that generated the alert",
        "readOnly": true,
        "type": "string"
      },
      "notificationUsers": {
        "description": "The ids of users who were notified of alarm state change.",
        "items": {
          "$ref": "#/definitions/User"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "numericRange": {
        "description": "The comparison descriptor used against the metric's value.",
        "enum": [
          "gt",
          "gte",
          "lt",
          "lte",
          "eq",
          "ne"
        ],
        "readOnly": true,
        "type": "string"
      },
      "ruleId": {
        "description": "The id of the rule.",
        "readOnly": true,
        "type": "string"
      },
      "ruleUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "The date/time the alert was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "statistic": {
        "description": "The statistic of concern for the metric.",
        "enum": [
          "count",
          "min",
          "ratio",
          "max"
        ],
        "readOnly": true,
        "type": "string"
      },
      "unread": {
        "description": "Indicates if the alert has been read.",
        "type": "boolean"
      },
      "value": {
        "description": "The threshold value.",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "required": [
      "alertTypes",
      "dimension",
      "dimensionValue",
      "mediaType",
      "metric",
      "name",
      "notificationUsers",
      "numericRange",
      "ruleId",
      "startDate",
      "statistic",
      "unread",
      "value"
    ],
    "type": "object"
  },
  "InteractionStatsAlertContainer": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/InteractionStatsAlert"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "InteractionStatsRule": {
    "properties": {
      "alertTypes": {
        "description": "A collection of notification methods.",
        "items": {
          "enum": [
            "SMS",
            "DEVICE",
            "EMAIL"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "dimension": {
        "description": "The dimension of concern.",
        "enum": [
          "queueId",
          "userId"
        ],
        "type": "string"
      },
      "dimensionValue": {
        "description": "The value of the dimension.",
        "type": "string"
      },
      "enabled": {
        "description": "Indicates if the rule is enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inAlarm": {
        "description": "Indicates if the rule is in alarm state.",
        "readOnly": true,
        "type": "boolean"
      },
      "mediaType": {
        "description": "The media type.",
        "enum": [
          "voice",
          "chat",
          "email",
          "callback",
          "message"
        ],
        "type": "string"
      },
      "metric": {
        "description": "The metric to be assessed.",
        "enum": [
          "tAbandon",
          "tAnswered",
          "tTalk",
          "nOffered",
          "tHandle",
          "nTransferred",
          "oServiceLevel",
          "tWait",
          "tHeld",
          "tAcw"
        ],
        "type": "string"
      },
      "name": {
        "description": "Name of the rule",
        "type": "string"
      },
      "notificationUsers": {
        "description": "The ids of users who will be notified of alarm state change.",
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array",
        "uniqueItems": true
      },
      "numericRange": {
        "description": "The comparison descriptor used against the metric's value.",
        "enum": [
          "gt",
          "gte",
          "lt",
          "lte",
          "eq",
          "ne"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "statistic": {
        "description": "The statistic of concern for the metric.",
        "enum": [
          "count",
          "min",
          "ratio",
          "max"
        ],
        "type": "string"
      },
      "value": {
        "description": "The threshold value.",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "alertTypes",
      "dimension",
      "dimensionValue",
      "enabled",
      "mediaType",
      "metric",
      "name",
      "notificationUsers",
      "numericRange",
      "statistic",
      "value"
    ],
    "type": "object"
  },
  "InteractionStatsRuleContainer": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/InteractionStatsRule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "IntradayPerformancePredictionData": {
    "properties": {
      "averageSpeedOfAnswerSeconds": {
        "description": "Predicted average time in seconds it takes to answer an interaction once the interaction becomes available to be routed",
        "format": "double",
        "type": "number"
      },
      "occupancyPercent": {
        "description": "Percentage of on-queue time for all agents in this group that are occupied handling interactions",
        "format": "double",
        "type": "number"
      },
      "serviceLevelPercent": {
        "description": "Percentage of interactions that meets service level target as defined in the matching service goal templates",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "IntradayPlanningGroupRequest": {
    "properties": {
      "businessUnitDate": {
        "description": "Requested date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "categories": {
        "description": "The metric categories",
        "items": {
          "enum": [
            "ForecastData",
            "ScheduleData",
            "PerformancePredictionData"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "intervalLengthMinutes": {
        "description": "The period/interval in minutes for which to aggregate the data. Required, defaults to 15",
        "format": "int32",
        "type": "integer"
      },
      "planningGroupIds": {
        "description": "The IDs of the planning groups for which to fetch data.  Omitting or passing an empty list will return all available planning groups",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "businessUnitDate",
      "categories"
    ],
    "type": "object"
  },
  "InvalidAssignment": {
    "properties": {
      "message": {
        "description": "The reason for the invalid input for validation",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "Invalid user for validation"
      }
    },
    "type": "object"
  },
  "IpAddressAuthentication": {
    "properties": {
      "networkWhitelist": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "IpAddressRange": {
    "properties": {
      "cidr": {
        "type": "string"
      },
      "region": {
        "type": "string"
      },
      "service": {
        "enum": [
          "data-actions",
          "smtp",
          "audiohook",
          "open-messaging",
          "api",
          "audio-connector"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "IpAddressRangeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/IpAddressRange"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ItemValidationLimits": {
    "properties": {
      "maxLength": {
        "$ref": "#/definitions/MaxLength",
        "description": "A structure denoting the system-imposed minimum and maximum string length (for text-based core types) or numeric values (for number-based) core types.  For example, the validationLimits for a text-based core type specify the min/max values for a minimum string length (minLength) constraint supplied by a schemaauthor on a text field.  Similarly, the maxLength's min/max specifies maximum string length constraint supplied by a schema author for the same field.",
        "example": "\"validationLimits\": {\n\"minLength\": {\"min\": 0, \"max\": 100},\n\"maxLength\": {\"min\": 1, \"max\": 100}\n}"
      },
      "minLength": {
        "$ref": "#/definitions/MinLength",
        "description": "A structure denoting the system-imposed minimum string length (for text-based core types) or numeric values (for number-based) core types.  For example, the validationLimits for a text-based core type specify the min/max values for a minimum string length (minLength) constraint supplied by a schemaauthor on a text field.  Similarly, the maxLength's min/max specifies maximum string length constraint supplied by a schema author for the same field.",
        "example": "\"minLength\": {\"min\": 0, \"max\": 100}"
      }
    },
    "required": [
      "maxLength",
      "minLength"
    ],
    "type": "object"
  },
  "Items": {
    "properties": {
      "pattern": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "IvrEstablishedEvent": {
    "properties": {
      "ani": {
        "description": "The automatic number identification if it is available for this conversation.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "dnis": {
        "description": "The dialed number identification if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/InitialConfiguration",
        "description": "Metadata about this communication."
      },
      "ivrName": {
        "description": "A displayable name for this IVR, if any is known.",
        "type": "string"
      },
      "ivrPhoneNumber": {
        "description": "The phone number for this IVR, if any is known",
        "type": "string"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "Journey": {
    "properties": {
      "patterns": {
        "description": "A list of zero or more patterns to match.",
        "items": {
          "$ref": "#/definitions/JourneyPattern"
        },
        "type": "array"
      }
    },
    "required": [
      "patterns"
    ],
    "type": "object"
  },
  "JourneyAction": {
    "properties": {
      "actionMap": {
        "$ref": "#/definitions/JourneyActionMap",
        "description": "Details about the action map from the Journey System which triggered this action"
      },
      "id": {
        "description": "The ID of an action from the Journey System (an action is spawned from an actionMap)",
        "type": "string"
      }
    },
    "required": [
      "actionMap",
      "id"
    ],
    "type": "object"
  },
  "JourneyActionMap": {
    "properties": {
      "id": {
        "description": "The ID of the actionMap in the Journey System which triggered this action",
        "type": "string"
      },
      "version": {
        "description": "The version number of the actionMap in the Journey System at the time this action was triggered",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "id",
      "version"
    ],
    "type": "object"
  },
  "JourneyAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "JourneyAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/JourneyAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "JourneyAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/JourneyAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/JourneyAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "JourneyAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "containsAllCondition",
          "containsAnyCondition",
          "endsWithCondition",
          "equalCondition",
          "journeyActionId",
          "journeyActionMapId",
          "journeyActionMapVersion",
          "journeyActionMediaType",
          "journeyActionTargetId",
          "journeyActionTemplateId",
          "journeyBlockingActionMapId",
          "journeyBlockingEmergencyScheduleGroupId",
          "journeyBlockingReason",
          "journeyBlockingScheduleGroupId",
          "journeyDeviceCategory",
          "journeyDeviceType",
          "journeyFrequencyCapReason",
          "journeyIpGeolocationCountry",
          "journeyOutcomeId",
          "journeySegmentId",
          "journeySegmentScope",
          "journeySessionId",
          "journeySessionSegmentId",
          "journeySessionType",
          "notContainsAllCondition",
          "notContainsAnyCondition",
          "notEqualCondition",
          "startsWithCondition",
          "touchpointActionMapId",
          "touchpointAgentId",
          "touchpointAttributionScope",
          "touchpointChannelMessageType",
          "touchpointChannelPlatform",
          "touchpointChannelType",
          "touchpointConversationId",
          "touchpointInteractionType",
          "touchpointQueueId",
          "touchpointRequestedRouting",
          "touchpointUsedRouting",
          "touchpointWrapupCode"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "JourneyAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/JourneyAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "JourneyAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/JourneyAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "containsAllCondition",
            "containsAnyCondition",
            "endsWithCondition",
            "equalCondition",
            "journeyActionId",
            "journeyActionMapId",
            "journeyActionMapVersion",
            "journeyActionMediaType",
            "journeyActionTargetId",
            "journeyActionTemplateId",
            "journeyBlockingActionMapId",
            "journeyBlockingEmergencyScheduleGroupId",
            "journeyBlockingReason",
            "journeyBlockingScheduleGroupId",
            "journeyDeviceCategory",
            "journeyDeviceType",
            "journeyFrequencyCapReason",
            "journeyIpGeolocationCountry",
            "journeyOutcomeId",
            "journeySegmentId",
            "journeySegmentScope",
            "journeySessionId",
            "journeySessionSegmentId",
            "journeySessionType",
            "notContainsAllCondition",
            "notContainsAnyCondition",
            "notEqualCondition",
            "startsWithCondition",
            "touchpointActionMapId",
            "touchpointAgentId",
            "touchpointAttributionScope",
            "touchpointChannelMessageType",
            "touchpointChannelPlatform",
            "touchpointChannelType",
            "touchpointConversationId",
            "touchpointInteractionType",
            "touchpointQueueId",
            "touchpointRequestedRouting",
            "touchpointUsedRouting",
            "touchpointWrapupCode"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nDistinctJourneyActions",
            "nDistinctJourneySessions",
            "nJourneyActionsBlocked",
            "nJourneyOutcomesAchieved",
            "nJourneyOutcomesAttributed",
            "nJourneySegmentsAssigned",
            "nJourneySessions",
            "nWebActionsAbandoned",
            "nWebActionsAccepted",
            "nWebActionsEngaged",
            "nWebActionsErrored",
            "nWebActionsFrequencyCapReached",
            "nWebActionsIgnored",
            "nWebActionsOffered",
            "nWebActionsOfferedOutsideSchedule",
            "nWebActionsQualified",
            "nWebActionsQualifiedOutsideSchedule",
            "nWebActionsRejected",
            "nWebActionsStarted",
            "nWebActionsTimedout",
            "oJourneyOutcomeTouchpointValue",
            "oJourneyOutcomeValue"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/JourneyAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "JourneyAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nDistinctJourneyActions",
          "nDistinctJourneySessions",
          "nJourneyActionsBlocked",
          "nJourneyOutcomesAchieved",
          "nJourneyOutcomesAttributed",
          "nJourneySegmentsAssigned",
          "nJourneySessions",
          "nWebActionsAbandoned",
          "nWebActionsAccepted",
          "nWebActionsEngaged",
          "nWebActionsErrored",
          "nWebActionsFrequencyCapReached",
          "nWebActionsIgnored",
          "nWebActionsOffered",
          "nWebActionsOfferedOutsideSchedule",
          "nWebActionsQualified",
          "nWebActionsQualifiedOutsideSchedule",
          "nWebActionsRejected",
          "nWebActionsStarted",
          "nWebActionsTimedout",
          "oJourneyOutcomeTouchpointValue",
          "oJourneyOutcomeValue"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "JourneyApp": {
    "properties": {
      "buildNumber": {
        "description": "Build number of the application (e.g. 701).",
        "type": "string"
      },
      "name": {
        "description": "Name of the application (e.g. mybankingapp).",
        "type": "string"
      },
      "namespace": {
        "description": "Namespace of the application (e.g. com.genesys.bancodinero).",
        "type": "string"
      },
      "version": {
        "description": "Version of the application (e.g. 5.9.27).",
        "type": "string"
      }
    },
    "required": [
      "buildNumber",
      "name",
      "namespace",
      "version"
    ],
    "type": "object"
  },
  "JourneyCampaign": {
    "properties": {
      "clickId": {
        "description": "The click ID (unique number that is generated when a potential customer clicks on an affiliate link).",
        "type": "string"
      },
      "content": {
        "description": "Differentiate ads or links that point to the same URL (e.g. textlink).",
        "type": "string"
      },
      "medium": {
        "description": "Identify a medium such as email or cost-per-click (e.g. CPC).",
        "type": "string"
      },
      "name": {
        "description": "Identify a specific product promotion or strategic campaign (e.g. 320banner).",
        "type": "string"
      },
      "network": {
        "description": "The ad network to which the click ID belongs.",
        "type": "string"
      },
      "source": {
        "description": "Identify a search engine, newsletter name, or other source (e.g. Google).",
        "type": "string"
      },
      "term": {
        "description": "Note the keywords for this ad (e.g. running+shoes).",
        "type": "string"
      }
    },
    "type": "object"
  },
  "JourneyContext": {
    "properties": {
      "customer": {
        "$ref": "#/definitions/JourneyCustomer",
        "description": "A subset of the Journey System's customer data at a point-in-time (for external linkage and internal usage/context)"
      },
      "customerSession": {
        "$ref": "#/definitions/JourneyCustomerSession",
        "description": "A subset of the Journey System's tracked customer session data at a point-in-time (for external linkage and internal usage/context)"
      },
      "triggeringAction": {
        "$ref": "#/definitions/JourneyAction",
        "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)"
      }
    },
    "required": [
      "customer"
    ],
    "type": "object"
  },
  "JourneyCustomer": {
    "properties": {
      "id": {
        "description": "An ID of a customer within the Journey System at a point-in-time.  Note that a customer entity can have multiple customerIds based on the stitching process.  Depending on the context within the PureCloud conversation, this may or may not be mutable.",
        "type": "string"
      },
      "idType": {
        "description": "The type of the customerId within the Journey System (e.g. cookie).",
        "type": "string"
      }
    },
    "required": [
      "id",
      "idType"
    ],
    "type": "object"
  },
  "JourneyCustomerSession": {
    "properties": {
      "id": {
        "description": "An ID of a Customer/User's session within the Journey System at a point-in-time",
        "type": "string"
      },
      "type": {
        "description": "The type of the Customer/User's session within the Journey System (e.g. web, app)",
        "type": "string"
      }
    },
    "required": [
      "id",
      "type"
    ],
    "type": "object"
  },
  "JourneyEventsSettings": {
    "description": "Settings concerning journey events",
    "properties": {
      "clickEvents": {
        "description": "Tracks when and where a visitor clicks on a webpage.",
        "items": {
          "$ref": "#/definitions/SelectorEventTrigger"
        },
        "type": "array"
      },
      "enabled": {
        "description": "Whether or not journey event collection is enabled.",
        "type": "boolean"
      },
      "excludedQueryParameters": {
        "description": "List of parameters to be excluded from the query string.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "formsTrackEvents": {
        "description": "Controls how the form submitted and form abandoned events are tracked after a visitor interacts with a form element.",
        "items": {
          "$ref": "#/definitions/FormsTrackTrigger"
        },
        "type": "array"
      },
      "idleEvents": {
        "description": "Tracks when and where a visitor becomes inactive on a webpage.",
        "items": {
          "$ref": "#/definitions/IdleEventTrigger"
        },
        "type": "array"
      },
      "inViewportEvents": {
        "description": "Tracks when elements become visible or hidden on screen.",
        "items": {
          "$ref": "#/definitions/SelectorEventTrigger"
        },
        "type": "array"
      },
      "pageviewConfig": {
        "description": "Controls how the pageview events are tracked.",
        "enum": [
          "Auto",
          "Once",
          "Off"
        ],
        "type": "string"
      },
      "scrollDepthEvents": {
        "description": "Tracks when a visitor scrolls to a specific percentage of a webpage.",
        "items": {
          "$ref": "#/definitions/ScrollPercentageEventTrigger"
        },
        "type": "array"
      },
      "searchQueryParameters": {
        "description": "List of query parameters used for search (e.g. 'q').",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "shouldKeepUrlFragment": {
        "description": "Whether or not to keep the URL fragment.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "JourneyGeolocation": {
    "properties": {
      "country": {
        "description": "Geolocation's ISO 3166-1 alpha-2 country code.",
        "type": "string"
      },
      "countryName": {
        "description": "Geolocation's country name.",
        "type": "string"
      },
      "latitude": {
        "description": "Geolocation's latitude.",
        "format": "double",
        "type": "number"
      },
      "locality": {
        "description": "Geolocation's locality or city.",
        "type": "string"
      },
      "longitude": {
        "description": "Geolocation's longitude.",
        "format": "double",
        "type": "number"
      },
      "postalCode": {
        "description": "Geolocation's postal code or ZIP code.",
        "type": "string"
      },
      "region": {
        "description": "Geolocation's ISO-3166-2 region code.",
        "type": "string"
      },
      "regionName": {
        "description": "Geolocation's region name.",
        "type": "string"
      },
      "source": {
        "description": "The source that was used to determine the geolocation information.",
        "type": "string"
      },
      "timezone": {
        "description": "Geolocation's timezone.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "JourneyPage": {
    "properties": {
      "breadcrumb": {
        "description": "Hierarchy of the current page in relation to the website's structure.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "domain": {
        "description": "Domain of the page's URL.",
        "type": "string"
      },
      "fragment": {
        "description": "Fragment or hash of the page's URL.",
        "type": "string"
      },
      "hostname": {
        "description": "Hostname of the page's URL.",
        "type": "string"
      },
      "keywords": {
        "description": "Keywords from the HTML {@code \u003cmeta\u003e} tag of the page.",
        "type": "string"
      },
      "lang": {
        "description": "ISO 639-1 language code for the page as defined in the {@code \u003chtml\u003e} tag.",
        "type": "string"
      },
      "pathname": {
        "description": "Path name of the page for the event.",
        "type": "string"
      },
      "queryString": {
        "description": "Query string that is passed to the page in the current event.",
        "type": "string"
      },
      "title": {
        "description": "Title of the page.",
        "type": "string"
      },
      "url": {
        "description": "The page URL.",
        "type": "string"
      }
    },
    "required": [
      "breadcrumb",
      "domain",
      "hostname",
      "pathname",
      "url"
    ],
    "type": "object"
  },
  "JourneyPattern": {
    "properties": {
      "count": {
        "description": "The number of times the pattern must match.",
        "format": "int32",
        "type": "integer"
      },
      "criteria": {
        "description": "A list of one or more criteria to satisfy.",
        "items": {
          "$ref": "#/definitions/Criteria"
        },
        "type": "array"
      },
      "eventName": {
        "description": "The name of the event for which this pattern can be matched on.",
        "type": "string"
      },
      "sessionType": {
        "description": "The session type for which this pattern can be matched on.",
        "type": "string"
      },
      "streamType": {
        "description": "The stream type for which this pattern can be matched on.",
        "enum": [
          "Web",
          "Custom",
          "Conversation",
          "App"
        ],
        "type": "string"
      }
    },
    "required": [
      "count",
      "criteria",
      "sessionType",
      "streamType"
    ],
    "type": "object"
  },
  "JourneySegment": {
    "properties": {
      "assignmentExpirationDays": {
        "description": "Time, in days, from when the segment is assigned until it is automatically unassigned.",
        "format": "int32",
        "type": "integer"
      },
      "color": {
        "description": "The hexadecimal color value of the segment.",
        "type": "string"
      },
      "context": {
        "$ref": "#/definitions/Context",
        "description": "The context of the segment."
      },
      "createdDate": {
        "description": "Timestamp indicating when the segment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "A description of the segment.",
        "type": "string"
      },
      "displayName": {
        "description": "The display name of the segment.",
        "type": "string"
      },
      "externalSegment": {
        "$ref": "#/definitions/ExternalSegment",
        "description": "Details of an entity corresponding to this segment in an external system."
      },
      "id": {
        "description": "The ID of the segment.",
        "type": "string"
      },
      "isActive": {
        "description": "Whether or not the segment is active.",
        "type": "boolean"
      },
      "journey": {
        "$ref": "#/definitions/Journey",
        "description": "The pattern of rules defining the segment."
      },
      "modifiedDate": {
        "description": "Timestamp indicating when the segment was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "scope": {
        "description": "The target entity that a segment applies to.",
        "enum": [
          "Session",
          "Customer"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shouldDisplayToAgent": {
        "description": "Whether or not the segment should be displayed to agent/supervisor users.",
        "type": "boolean"
      },
      "version": {
        "description": "The version of the segment.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "color",
      "context",
      "createdDate",
      "displayName",
      "id",
      "isActive",
      "journey",
      "modifiedDate",
      "scope",
      "shouldDisplayToAgent",
      "version"
    ],
    "type": "object"
  },
  "JourneySegmentRequest": {
    "properties": {
      "assignmentExpirationDays": {
        "description": "Time, in days, from when the segment is assigned until it is automatically unassigned.",
        "format": "int32",
        "type": "integer"
      },
      "color": {
        "description": "The hexadecimal color value of the segment.",
        "type": "string"
      },
      "context": {
        "$ref": "#/definitions/RequestContext",
        "description": "The context of the segment."
      },
      "description": {
        "description": "A description of the segment.",
        "type": "string"
      },
      "displayName": {
        "description": "The display name of the segment.",
        "type": "string"
      },
      "externalSegment": {
        "$ref": "#/definitions/RequestExternalSegment",
        "description": "Details of an entity corresponding to this segment in an external system."
      },
      "isActive": {
        "description": "Whether or not the segment is active.",
        "type": "boolean"
      },
      "journey": {
        "$ref": "#/definitions/RequestJourney",
        "description": "The pattern of rules defining the segment."
      },
      "scope": {
        "description": "The target entity that a segment applies to.",
        "enum": [
          "Session",
          "Customer"
        ],
        "type": "string"
      },
      "shouldDisplayToAgent": {
        "description": "Whether or not the segment should be displayed to agent/supervisor users.",
        "type": "boolean"
      },
      "version": {
        "description": "The version of the segment.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "color",
      "context",
      "displayName",
      "journey"
    ],
    "type": "object"
  },
  "JourneySurveyQuestion": {
    "properties": {
      "choices": {
        "description": "Choices available to user.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "customerProperty": {
        "description": "The customer property that the answer maps to.",
        "enum": [
          "givenName",
          "familyName",
          "email",
          "phone",
          "gender",
          "companyName"
        ],
        "type": "string"
      },
      "isMandatory": {
        "description": "Whether answering this question is mandatory.",
        "type": "boolean"
      },
      "label": {
        "description": "Label of question.",
        "type": "string"
      },
      "type": {
        "description": "Type of survey question.",
        "enum": [
          "text",
          "hidden",
          "select",
          "checkbox",
          "textarea"
        ],
        "type": "string"
      }
    },
    "required": [
      "label"
    ],
    "type": "object"
  },
  "JourneyView": {
    "description": "A journey view",
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/JourneyViewUser",
        "description": "User that has created the view.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date when the journey view was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date when this version of the journey view was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "A description of the journey view",
        "type": "string"
      },
      "duration": {
        "description": "A relative timeframe for the journey view, expressed as an ISO 8601 duration. Only one of interval or duration must be specified. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "elements": {
        "description": "The elements within the journey view",
        "items": {
          "$ref": "#/definitions/JourneyViewElement"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interval": {
        "description": "An absolute timeframe for the journey view, expressed as an ISO 8601 interval. Only one of interval or duration must be specified. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/JourneyViewUser",
        "description": "User that has modified the view.",
        "readOnly": true
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The version of the journey view",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "elements"
    ],
    "type": "object"
  },
  "JourneyViewChart": {
    "description": "A chart within the context of the elements of the the journey view",
    "properties": {
      "displayAttributes": {
        "$ref": "#/definitions/JourneyViewChartDisplayAttributes",
        "description": "Optional display attributes for rendering the chart"
      },
      "groupByAttributes": {
        "description": "A list of attributes to group the metrics by. There is a limit on the number of groupBy properties which can be specified.",
        "items": {
          "$ref": "#/definitions/JourneyViewChartGroupByAttribute"
        },
        "type": "array"
      },
      "groupByMax": {
        "description": "A maximum on the number of values being grouped by",
        "format": "int32",
        "type": "integer"
      },
      "groupByTime": {
        "description": "A time unit to group the metrics by. There is a limit on the number of groupBy properties which can be specified.",
        "enum": [
          "Day",
          "Week",
          "Month",
          "Year"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metrics": {
        "description": "A list of metrics to calculate within the chart by (aka the y axis)",
        "items": {
          "$ref": "#/definitions/JourneyViewChartMetric"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The version of the journey view chart",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "metrics"
    ],
    "type": "object"
  },
  "JourneyViewChartDisplayAttributes": {
    "description": "Display attributes for the chart, such as type, labels and legends",
    "properties": {
      "groupByTitle": {
        "description": "A title for the grouped by attributes (aka the x axis)",
        "type": "string"
      },
      "metricsTitle": {
        "description": "A title for the metrics (aka the y axis)",
        "type": "string"
      },
      "showLegend": {
        "description": "Whether to show a legend",
        "type": "boolean"
      },
      "type": {
        "description": "The type of chart to display",
        "enum": [
          "Column",
          "Bar",
          "Line"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "JourneyViewChartGroupByAttribute": {
    "description": "A journey element attribute to group by within the chart",
    "properties": {
      "attribute": {
        "description": "The attribute of the element being grouped by",
        "type": "string"
      },
      "elementId": {
        "description": "The element in the list of elements which is being grouped by",
        "type": "string"
      }
    },
    "required": [
      "attribute",
      "elementId"
    ],
    "type": "object"
  },
  "JourneyViewChartMetric": {
    "description": "A metric to measure within the chart",
    "properties": {
      "aggregate": {
        "description": "How to aggregate the given element, defaults to EventCount",
        "enum": [
          "EventCount",
          "CustomerCount"
        ],
        "type": "string"
      },
      "displayLabel": {
        "description": "A display label for the metric",
        "type": "string"
      },
      "elementId": {
        "description": "The element in the list of elements which the metric is measuring",
        "type": "string"
      },
      "id": {
        "description": "The unique identifier of the metric within the chart",
        "type": "string"
      }
    },
    "required": [
      "elementId",
      "id"
    ],
    "type": "object"
  },
  "JourneyViewChartMetricResult": {
    "properties": {
      "id": {
        "description": "Id of the metric",
        "readOnly": true,
        "type": "string"
      },
      "values": {
        "description": "Metric result values",
        "items": {
          "$ref": "#/definitions/JourneyViewChartMetricResultValue"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "JourneyViewChartMetricResultValue": {
    "properties": {
      "groupByAttributes": {
        "description": "Group by attributes for this metric",
        "items": {
          "$ref": "#/definitions/GroupByAttribute"
        },
        "readOnly": true,
        "type": "array"
      },
      "value": {
        "description": "Value for this metric",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "JourneyViewChartResult": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metrics": {
        "description": "Metric results for this chart",
        "items": {
          "$ref": "#/definitions/JourneyViewChartMetricResult"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Version of the chart",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "JourneyViewElement": {
    "description": "An element within a journey view",
    "properties": {
      "attributes": {
        "$ref": "#/definitions/JourneyViewElementAttributes",
        "description": "Required attributes of the element"
      },
      "filter": {
        "$ref": "#/definitions/JourneyViewElementFilter",
        "description": "Any filters applied to this element"
      },
      "followedBy": {
        "description": "A list of JourneyViewLink objects, listing the elements downstream of this element",
        "items": {
          "$ref": "#/definitions/JourneyViewLink"
        },
        "type": "array"
      },
      "id": {
        "description": "The unique identifier of the element within the elements list",
        "type": "string"
      },
      "name": {
        "description": "The unique name of the element within the view",
        "type": "string"
      }
    },
    "required": [
      "attributes",
      "id",
      "name"
    ],
    "type": "object"
  },
  "JourneyViewElementAttributes": {
    "description": "Attributes on an element in a journey view",
    "properties": {
      "id": {
        "description": "The identifier for the element based on its type",
        "type": "string"
      },
      "source": {
        "description": "The source for the element (e.g. IVR, Voice, Chat). Used for informational purposes only",
        "type": "string"
      },
      "type": {
        "description": "The type of the element (e.g. Event)",
        "enum": [
          "Event"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "JourneyViewElementFilter": {
    "description": "A set of filters on an element within a journey view",
    "properties": {
      "predicates": {
        "description": "predicates",
        "items": {
          "$ref": "#/definitions/JourneyViewElementFilterPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses. Valid values: And",
        "enum": [
          "And"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "JourneyViewElementFilterNumberPredicate": {
    "description": "A numeric filter on an element within a journey view",
    "properties": {
      "dimension": {
        "description": "the element's attribute being filtered on",
        "type": "string"
      },
      "noValue": {
        "description": "set this to true if no specific value to be considered",
        "type": "boolean"
      },
      "operator": {
        "description": "Optional operator, default is Matches. Valid values: Matches",
        "enum": [
          "Matches",
          "NotMatches"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/JourneyViewElementFilterRange",
        "description": "the range of comparators to filter on"
      }
    },
    "required": [
      "dimension",
      "range"
    ],
    "type": "object"
  },
  "JourneyViewElementFilterPredicate": {
    "description": "A filter on an element within a journey view",
    "properties": {
      "dimension": {
        "description": "the element's attribute being filtered on",
        "type": "string"
      },
      "noValue": {
        "description": "set this to true if no specific value to be considered",
        "type": "boolean"
      },
      "operator": {
        "description": "Optional operator, default is Matches. Valid values: Matches",
        "enum": [
          "Matches",
          "NotMatches"
        ],
        "type": "string"
      },
      "values": {
        "description": "the values of the attribute to filter on",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "dimension",
      "values"
    ],
    "type": "object"
  },
  "JourneyViewElementFilterRange": {
    "description": "the range of attribute values to filter on. At least one comparator must be defined",
    "properties": {
      "eq": {
        "$ref": "#/definitions/JourneyViewElementFilterRangeData",
        "description": "comparator: is equal to"
      },
      "gt": {
        "$ref": "#/definitions/JourneyViewElementFilterRangeData",
        "description": "comparator: greater than"
      },
      "gte": {
        "$ref": "#/definitions/JourneyViewElementFilterRangeData",
        "description": "comparator: greater than or equal"
      },
      "lt": {
        "$ref": "#/definitions/JourneyViewElementFilterRangeData",
        "description": "comparator: less than"
      },
      "lte": {
        "$ref": "#/definitions/JourneyViewElementFilterRangeData",
        "description": "comparator: less than or equal"
      },
      "neq": {
        "$ref": "#/definitions/JourneyViewElementFilterRangeData",
        "description": "comparator: is not equal to"
      }
    },
    "type": "object"
  },
  "JourneyViewElementFilterRangeData": {
    "properties": {
      "duration": {
        "description": "An ISO 8601 time duration. Only one of number or duration must be specified.",
        "type": "string"
      },
      "number": {
        "description": "A numeric value. Only one of number or duration must be specified.",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "JourneyViewJob": {
    "properties": {
      "dateCompleted": {
        "description": "Timestamp of completion. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "Timestamp of execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "journeyView": {
        "$ref": "#/definitions/JourneyView",
        "description": "The journey view for which the job is executed"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the job",
        "enum": [
          "Accepted",
          "Executing",
          "Complete",
          "Failed"
        ],
        "type": "string"
      }
    },
    "required": [
      "dateCompleted",
      "dateCreated",
      "journeyView",
      "status"
    ],
    "type": "object"
  },
  "JourneyViewJobListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/JourneyViewJob"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "JourneyViewLink": {
    "description": "A link between elements in a journey view",
    "properties": {
      "constraintAfter": {
        "$ref": "#/definitions/JourneyViewLinkTimeConstraint",
        "description": "A time constraint on this link, which requires a customer must complete the downstream element after this amount of time to be counted."
      },
      "constraintWithin": {
        "$ref": "#/definitions/JourneyViewLinkTimeConstraint",
        "description": "A time constraint on this link, which requires a customer to complete the downstream element within this amount of time to be counted."
      },
      "eventCountType": {
        "description": "The type of events that will be counted. Note: Concurrent will override any JourneyViewLinkTimeConstraint. Default is Sequential.",
        "enum": [
          "All",
          "Concurrent",
          "Sequential"
        ],
        "type": "string"
      },
      "id": {
        "description": "The identifier of the element downstream",
        "type": "string"
      },
      "joinAttributes": {
        "description": "Other (secondary) attributes on which this link should join the customers being counted",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "JourneyViewLinkTimeConstraint": {
    "properties": {
      "unit": {
        "description": "The unit for the link's time constraint",
        "enum": [
          "Seconds",
          "Minutes",
          "Hours",
          "Days",
          "Weeks",
          "Months"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value for the link's time constraint",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "JourneyViewListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/JourneyView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "JourneyViewResult": {
    "description": "A journey view result",
    "properties": {
      "elements": {
        "description": "The elements within the journey view result",
        "items": {
          "$ref": "#/definitions/JourneyViewResultElement"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "JourneyViewResultElement": {
    "description": "An element within a journey view result",
    "properties": {
      "followedBy": {
        "description": "the list of links following the current element in the journey",
        "items": {
          "$ref": "#/definitions/JourneyViewResultLink"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metrics": {
        "$ref": "#/definitions/JourneyViewResultMetrics",
        "description": "the metrics of the current element",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "JourneyViewResultLink": {
    "description": "Represents a link between 2 elements in a journey view result",
    "properties": {
      "connectionCount": {
        "description": "the number of connections for the journey view link",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "JourneyViewResultMetrics": {
    "description": "The metrics of an element or a link in journey ",
    "properties": {
      "activeCount": {
        "description": "number of external contacts who could still complete the journey",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "completedCount": {
        "description": "number of external contacts who completed the journey forward",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "dropoutCount": {
        "description": "number of external contacts who did not make it to the next element",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "flowCount": {
        "description": "number of external contacts who moved from one element to next element but did not complete the journey",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "participantCount": {
        "description": "number of external contacts who participated at the element",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "JourneyViewUser": {
    "properties": {
      "emailAddress": {
        "description": "Email address of the user",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "JsonCursorSearchResponse": {
    "properties": {
      "aggregations": {
        "$ref": "#/definitions/ArrayNode"
      },
      "cursor": {
        "description": "The page cursor",
        "type": "string"
      },
      "results": {
        "$ref": "#/definitions/ArrayNode",
        "description": "Search results"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "results",
      "types"
    ],
    "type": "object"
  },
  "JsonNode": {
    "type": "object"
  },
  "JsonNodeSearchResponse": {
    "properties": {
      "aggregations": {
        "$ref": "#/definitions/ArrayNode"
      },
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "$ref": "#/definitions/ArrayNode",
        "description": "Search results"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "JsonSchemaDocument": {
    "description": "A JSON Schema document.",
    "properties": {
      "$schema": {
        "type": "string"
      },
      "additionalProperties": {
        "type": "object"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "required": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "title": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "JsonSearchResponse": {
    "properties": {
      "aggregations": {
        "$ref": "#/definitions/ArrayNode"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "results": {
        "$ref": "#/definitions/ArrayNode",
        "description": "Search results"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "KeyPerformanceIndicator": {
    "properties": {
      "dateCreated": {
        "description": "DateTime indicating when the Key Performance Indicator was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "DateTime indicating when the Key Performance Indicator was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of the Key Performance Indicator.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "kpiGroup": {
        "description": "The group the Key Performance Indicator belongs to.",
        "enum": [
          "Standard",
          "Custom"
        ],
        "readOnly": true,
        "type": "string"
      },
      "kpiType": {
        "description": "The type of Key Performance Indicator.",
        "enum": [
          "SalesConversion",
          "Churn",
          "Retention",
          "SalesValue",
          "HandleTime"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the Key Performance Indicator.",
        "readOnly": true,
        "type": "string"
      },
      "optimizationType": {
        "description": "The optimization type of the Key Performance Indicator.",
        "enum": [
          "Maximization",
          "Minimization"
        ],
        "readOnly": true,
        "type": "string"
      },
      "outcomeConfig": {
        "$ref": "#/definitions/OutcomeConfig",
        "description": "Defines what outcome ids are mapped to Key Performance Indicator.",
        "readOnly": true
      },
      "problemType": {
        "description": "The problem type of the Key Performance Indicator.",
        "enum": [
          "Classification",
          "Regression"
        ],
        "readOnly": true,
        "type": "string"
      },
      "queues": {
        "description": "Queue IDs on which KPI specification is used.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "Source of values for Key Performance Indicator.",
        "enum": [
          "WrapUpCode",
          "Outcome",
          "None"
        ],
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Key Performance Indicator.",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "readOnly": true,
        "type": "string"
      },
      "wrapUpCodeConfig": {
        "$ref": "#/definitions/WrapUpCodeConfig",
        "description": "Defines what wrap up codes are mapped to Key Performance Indicator.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "KeyPerformanceIndicatorAssessment": {
    "properties": {
      "assessmentResult": {
        "description": "The overall result of the assessment for a key performance indicator.",
        "enum": [
          "Unknown",
          "NotSupported",
          "High",
          "Low",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "checks": {
        "description": "Set of checks executed as part of an assessment.",
        "items": {
          "$ref": "#/definitions/Check"
        },
        "readOnly": true,
        "type": "array"
      },
      "kpi": {
        "description": "Name of the key performance indicator assessed.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "KeyRotationSchedule": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "period": {
        "description": "Value to set schedule to",
        "enum": [
          "DISABLED",
          "DAILY",
          "WEEKLY",
          "MONTHLY",
          "YEARLY"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "period"
    ],
    "type": "object"
  },
  "KeyValue": {
    "properties": {
      "key": {
        "description": "Key for free-form data.",
        "type": "string"
      },
      "value": {
        "description": "Value for free-form data.",
        "type": "string"
      }
    },
    "required": [
      "key",
      "value"
    ],
    "type": "object"
  },
  "Knowledge": {
    "properties": {
      "enabled": {
        "description": "whether or not knowledge base is enabled",
        "type": "boolean"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The knowledge base for messenger"
      }
    },
    "type": "object"
  },
  "KnowledgeAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "KnowledgeAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/KnowledgeAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "KnowledgeAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/KnowledgeAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/KnowledgeAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "KnowledgeAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "agentAssistantId",
          "appDeploymentId",
          "appType",
          "conversationChannelType",
          "conversationId",
          "documentEngagementType",
          "externalContactId",
          "feedbackCategory",
          "feedbackId",
          "feedbackRating",
          "feedbackRatingType",
          "feedbackRatingValue",
          "feedbackReason",
          "feedbackType",
          "hasComment",
          "hasSearch",
          "knowledgeBaseDocumentId",
          "knowledgeBaseDocumentVariationId",
          "knowledgeBaseDocumentVersionId",
          "knowledgeBaseId",
          "languageCode",
          "mediaType",
          "presentedDocumentsCount",
          "queryType",
          "queueId",
          "searchId",
          "searchQuery",
          "selfServed",
          "sessionId",
          "surfacingMethod",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "KnowledgeAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/KnowledgeAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "KnowledgeAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/KnowledgeAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "agentAssistantId",
            "appDeploymentId",
            "appType",
            "conversationChannelType",
            "conversationId",
            "documentEngagementType",
            "externalContactId",
            "feedbackCategory",
            "feedbackId",
            "feedbackRating",
            "feedbackRatingType",
            "feedbackRatingValue",
            "feedbackReason",
            "feedbackType",
            "hasComment",
            "hasSearch",
            "knowledgeBaseDocumentId",
            "knowledgeBaseDocumentVariationId",
            "knowledgeBaseDocumentVersionId",
            "knowledgeBaseId",
            "languageCode",
            "mediaType",
            "presentedDocumentsCount",
            "queryType",
            "queueId",
            "searchId",
            "searchQuery",
            "selfServed",
            "sessionId",
            "surfacingMethod",
            "userId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "limit": {
        "description": "How many results you want in the topN list. Only applicable for topN query type.",
        "format": "int32",
        "type": "integer"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nDistinctKnowledgeSessions",
            "nKnowledgeDocumentCopied",
            "nKnowledgeDocumentFeedback",
            "nKnowledgeDocumentPresented",
            "nKnowledgeDocumentSurfaced",
            "nKnowledgeDocumentViewed",
            "nKnowledgeSearch",
            "nKnowledgeSearchAnswered",
            "nKnowledgeSearchFeedback",
            "nKnowledgeSearchUnanswered",
            "nKnowledgeSessions",
            "oKnowledgeDocumentQuery",
            "oKnowledgeDocumentQuerySelfServed",
            "oKnowledgeSearch"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "queryType": {
        "description": "Query type to use. Use groupBy for all matching results, and topN for just top N results for the requested metric (group by exactly 1 dimension)",
        "enum": [
          "groupBy",
          "topN"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/KnowledgeAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "KnowledgeAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nDistinctKnowledgeSessions",
          "nKnowledgeDocumentCopied",
          "nKnowledgeDocumentFeedback",
          "nKnowledgeDocumentPresented",
          "nKnowledgeDocumentSurfaced",
          "nKnowledgeDocumentViewed",
          "nKnowledgeSearch",
          "nKnowledgeSearchAnswered",
          "nKnowledgeSearchFeedback",
          "nKnowledgeSearchUnanswered",
          "nKnowledgeSessions",
          "oKnowledgeDocumentQuery",
          "oKnowledgeDocumentQuerySelfServed",
          "oKnowledgeSearch"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "KnowledgeAnswerConfig": {
    "properties": {
      "enabled": {
        "description": "Knowledge answer is enabled.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "KnowledgeAnswerDocumentResponse": {
    "properties": {
      "answer": {
        "description": "The answer found inside a variationContent.",
        "type": "string"
      },
      "id": {
        "description": "The document id.",
        "type": "string"
      },
      "title": {
        "description": "The document title.",
        "type": "string"
      },
      "variation": {
        "$ref": "#/definitions/DocumentVariationAnswer",
        "description": "The variation with the answer's highlight data."
      }
    },
    "type": "object"
  },
  "KnowledgeAnswerDocumentsResponse": {
    "properties": {
      "answerGeneration": {
        "$ref": "#/definitions/KnowledgeAnswerGenerationResponse",
        "description": "The results with AI-generated answer if the answerMode request property contains \"AnswerGeneration\"."
      },
      "results": {
        "description": "The results with answers if the answerMode request property is not set or contains \"AnswerHighlight\". Empty array otherwise.",
        "items": {
          "$ref": "#/definitions/KnowledgeAnswerDocumentResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "KnowledgeAnswerGenerationResponse": {
    "properties": {
      "answer": {
        "description": "The AI-generated answer.",
        "type": "string"
      },
      "documents": {
        "description": "The documents used for answer generation.",
        "items": {
          "$ref": "#/definitions/AnswerGenerationDocument"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "KnowledgeBase": {
    "properties": {
      "articleCount": {
        "description": "The count representing the number of documents of type Article in the KnowledgeBase",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "coreLanguage": {
        "description": "Core language for knowledge base in which initial content must be created, language codes [en-US, en-UK, en-AU, de-DE] are supported currently. However, the new DX knowledge will support all these language codes, along with 'early preview' language codes [ca-ES, tr-TR, sv-SE, fi-FI, nb-NO, da-DK, ja-JP, ar-AE, zh-CN, zh-TW, zh-HK, ko-KR, pl-PL, hi-IN, th-TH, hu-HU, vi-VN, uk-UA] which might have a lower accuracy.",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "example": "en-US",
        "type": "string"
      },
      "dateCreated": {
        "description": "Knowledge base creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateDocumentLastModified": {
        "description": "The date representing when the last document is modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Knowledge base last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Knowledge base description",
        "type": "string"
      },
      "faqCount": {
        "description": "The count representing the number of documents of type FAQ in the KnowledgeBase",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "published": {
        "description": "Flag that indicates the knowledge base is published",
        "readOnly": true,
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "coreLanguage"
    ],
    "type": "object"
  },
  "KnowledgeBaseCreateRequest": {
    "properties": {
      "coreLanguage": {
        "description": "Core language for knowledge base in which initial content must be created, language codes [en-US, en-UK, en-AU, de-DE] are supported currently. However, the new DX knowledge will support all these language codes, along with 'early preview' language codes [ca-ES, tr-TR, sv-SE, fi-FI, nb-NO, da-DK, ja-JP, ar-AE, zh-CN, zh-TW, zh-HK, ko-KR, pl-PL, hi-IN, th-TH, hu-HU, vi-VN, uk-UA] which might have a lower accuracy.",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "example": "en-US",
        "type": "string"
      },
      "description": {
        "description": "Knowledge base description",
        "type": "string"
      },
      "name": {
        "description": "Knowledge base name",
        "type": "string"
      }
    },
    "required": [
      "coreLanguage",
      "name"
    ],
    "type": "object"
  },
  "KnowledgeBaseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeBase"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeBaseReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the knowledge base.",
        "type": "string"
      },
      "languageCode": {
        "description": "Language of the knowledge base",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "KnowledgeBaseUpdateRequest": {
    "properties": {
      "description": {
        "description": "Knowledge base description",
        "type": "string"
      },
      "name": {
        "description": "Knowledge base name",
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeBaseWithDialectReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the knowledge base.",
        "type": "string"
      },
      "languageCode": {
        "description": "The dialect for the knowledge base.",
        "enum": [
          "en-ZA",
          "en-AU",
          "en-GB",
          "en-IE",
          "en-IN",
          "en-US",
          "es-US",
          "es-ES",
          "nl-NL",
          "fr-CA",
          "fr-FR",
          "de-DE",
          "it-IT",
          "pt-PT",
          "pt-BR",
          "ar-AE",
          "ja-JP",
          "sv-SE",
          "de-AT",
          "de-CH",
          "da-DK",
          "fr-BE",
          "fr-CH",
          "es-MX",
          "es-CO",
          "es-AR"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "languageCode"
    ],
    "type": "object"
  },
  "KnowledgeCategory": {
    "properties": {
      "dateCreated": {
        "description": "Category creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Category last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Category description",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which category does belong to",
        "readOnly": true
      },
      "languageCode": {
        "description": "Actual language of the category",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Category name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "KnowledgeCategoryRequest": {
    "properties": {
      "description": {
        "description": "Category description",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Category name",
        "type": "string"
      },
      "parent": {
        "$ref": "#/definitions/DocumentCategoryInput",
        "description": "Category parent"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "KnowledgeContextReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the knowledge context.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "KnowledgeContextValueReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the knowledge context value.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "KnowledgeConversationContext": {
    "properties": {
      "conversationId": {
        "description": "The unique identifier of the conversation.",
        "type": "string"
      },
      "externalContactId": {
        "description": "The external contact identifier of the end-user participant.",
        "type": "string"
      },
      "mediaType": {
        "description": "The media type of the conversation.",
        "enum": [
          "Unknown",
          "Callback",
          "Chat",
          "Cobrowse",
          "Email",
          "Message",
          "Screenshare",
          "Video",
          "Voice"
        ],
        "type": "string"
      },
      "queueId": {
        "description": "The unique identifier of the queue used to assign the interaction to the user.",
        "type": "string"
      }
    },
    "required": [
      "conversationId"
    ],
    "type": "object"
  },
  "KnowledgeConversationContextResponse": {
    "properties": {
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The conversation."
      },
      "externalContact": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The end-user participant of the conversation."
      },
      "mediaType": {
        "description": "The media type of the conversation.",
        "enum": [
          "Unknown",
          "Callback",
          "Chat",
          "Cobrowse",
          "Email",
          "Message",
          "Screenshare",
          "Video",
          "Voice"
        ],
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The queue used to assign the interaction to the user."
      }
    },
    "required": [
      "conversation"
    ],
    "type": "object"
  },
  "KnowledgeDocument": {
    "properties": {
      "article": {
        "$ref": "#/definitions/DocumentArticle",
        "description": "Article"
      },
      "categories": {
        "description": "Document categories",
        "items": {
          "$ref": "#/definitions/KnowledgeCategory"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "externalUrl": {
        "description": "External URL to the document",
        "type": "string"
      },
      "faq": {
        "$ref": "#/definitions/DocumentFaq",
        "description": "FAQ document details"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which document does belong to",
        "readOnly": true
      },
      "languageCode": {
        "description": "Language of the document",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Document type",
        "enum": [
          "Faq",
          "Article"
        ],
        "type": "string"
      }
    },
    "required": [
      "languageCode",
      "type"
    ],
    "type": "object"
  },
  "KnowledgeDocumentAlternative": {
    "properties": {
      "autocomplete": {
        "description": "Autocomplete enabled for the alternate phrase.",
        "type": "boolean"
      },
      "phrase": {
        "description": "Alternate phrasing to the document title, having a limit of 500 words.",
        "type": "string"
      }
    },
    "required": [
      "autocomplete",
      "phrase"
    ],
    "type": "object"
  },
  "KnowledgeDocumentBulkRequest": {
    "properties": {
      "article": {
        "$ref": "#/definitions/DocumentArticle",
        "description": "Article details"
      },
      "categories": {
        "description": "Document categories",
        "items": {
          "$ref": "#/definitions/DocumentCategoryInput"
        },
        "type": "array"
      },
      "externalUrl": {
        "description": "External Url to the document",
        "type": "string"
      },
      "faq": {
        "$ref": "#/definitions/DocumentFaq",
        "description": "Faq document details"
      },
      "id": {
        "description": "Identifier of document for update. Omit for create new Document.",
        "type": "string"
      },
      "type": {
        "description": "Document type according to assigned template",
        "enum": [
          "Faq",
          "Article"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "KnowledgeDocumentCopy": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application in which the document content was copied."
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContext",
        "description": "Conversation context information, if the document content is copied in the context of a conversation."
      },
      "documentVariationId": {
        "description": "The variation of the document whose content was copied.",
        "type": "string"
      },
      "documentVersionId": {
        "description": "The version of the document whose content was copied.",
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search that surfaced the document whose content was copied.",
        "type": "string"
      },
      "sessionId": {
        "description": "Knowledge session ID.",
        "readOnly": true,
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "application",
      "documentVariationId",
      "documentVersionId"
    ],
    "type": "object"
  },
  "KnowledgeDocumentFeedback": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application from which feedback was given."
      },
      "comment": {
        "description": "Free-text comment of the feedback. Maximum length: 2000 characters.",
        "maxLength": 2000,
        "minLength": 0,
        "type": "string"
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContext",
        "description": "Conversation context information if the feedback is given in the context of a conversation."
      },
      "dateCreated": {
        "description": "The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeDocumentVersionReference",
        "description": "The document on which feedback was given."
      },
      "documentVariation": {
        "$ref": "#/definitions/EntityReference",
        "description": "The variation of the document on which feedback was given."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document on which the feedback was given.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "rating": {
        "description": "Feedback rating.",
        "enum": [
          "Negative",
          "Positive"
        ],
        "type": "string"
      },
      "reason": {
        "description": "Feedback reason.",
        "enum": [
          "DocumentContent",
          "SearchResults"
        ],
        "type": "string"
      },
      "search": {
        "$ref": "#/definitions/EntityReference",
        "description": "The search that surfaced the document on which feedback was given."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "Knowledge guest session ID.",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the feedback.",
        "enum": [
          "Draft",
          "Final"
        ],
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      },
      "userId": {
        "description": "The ID of the user who created the feedback.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "application",
      "document",
      "documentVariation",
      "rating"
    ],
    "type": "object"
  },
  "KnowledgeDocumentFeedbackResponse": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application from which feedback was given."
      },
      "comment": {
        "description": "Free-text comment of the feedback. Maximum length: 2000 characters.",
        "maxLength": 2000,
        "minLength": 0,
        "type": "string"
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContextResponse",
        "description": "Conversation context information if the feedback is given in the context of a conversation."
      },
      "dateCreated": {
        "description": "The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeDocumentVersionReference",
        "description": "The document on which feedback was given."
      },
      "documentVariation": {
        "$ref": "#/definitions/EntityReference",
        "description": "The variation of the document on which feedback was given."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document on which the feedback was given.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "rating": {
        "description": "Feedback rating.",
        "enum": [
          "Negative",
          "Positive"
        ],
        "type": "string"
      },
      "reason": {
        "description": "Feedback reason.",
        "enum": [
          "DocumentContent",
          "SearchResults"
        ],
        "type": "string"
      },
      "search": {
        "$ref": "#/definitions/EntityReference",
        "description": "The search that surfaced the document on which feedback was given."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "Knowledge guest session ID.",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the feedback.",
        "enum": [
          "Draft",
          "Final"
        ],
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The user who created the feedback.",
        "readOnly": true
      }
    },
    "required": [
      "documentVariation",
      "rating"
    ],
    "type": "object"
  },
  "KnowledgeDocumentFeedbackResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentFeedbackResponse"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentFeedbackUpdateRequest": {
    "properties": {
      "comment": {
        "description": "Feedback comment",
        "type": "string"
      },
      "rating": {
        "description": "Feedback rating.",
        "enum": [
          "Negative",
          "Positive"
        ],
        "type": "string"
      },
      "reason": {
        "description": "Feedback reason",
        "enum": [
          "DocumentContent",
          "SearchResults"
        ],
        "type": "string"
      },
      "state": {
        "description": "Feedback state",
        "enum": [
          "Draft",
          "Final"
        ],
        "type": "string"
      }
    },
    "required": [
      "rating"
    ],
    "type": "object"
  },
  "KnowledgeDocumentGuestSearch": {
    "properties": {
      "pageCount": {
        "description": "Number of pages returned in the result calculated according to the pageSize and the total",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageNumber": {
        "description": "Page number of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.",
        "maxLength": 2147483647,
        "minLength": 3,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that initiates the search.",
        "enum": [
          "AutoSearch",
          "ManualSearch",
          "Suggestion"
        ],
        "type": "string"
      },
      "results": {
        "description": "Documents that matched the search query.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentGuestSearchResult"
        },
        "readOnly": true,
        "type": "array"
      },
      "searchId": {
        "description": "The globally unique identifier for the search.",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "Session ID of the search.",
        "readOnly": true,
        "type": "string"
      },
      "total": {
        "description": "The total number of documents matching the query.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeDocumentGuestSearchRequest": {
    "properties": {
      "answerHighlightTopResults": {
        "description": "The number of articles to be sent for answer-highlighting. Can range from 1-5.",
        "format": "int32",
        "maximum": 5,
        "minimum": 1,
        "type": "integer"
      },
      "includeDraftDocuments": {
        "description": "Indicates whether the search results would also include draft documents.",
        "type": "boolean"
      },
      "pageCount": {
        "description": "Number of pages returned in the result calculated according to the pageSize and the total",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageNumber": {
        "description": "Page number of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.",
        "maxLength": 2147483647,
        "minLength": 3,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that initiates the search.",
        "enum": [
          "AutoSearch",
          "ManualSearch",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The globally unique identifier for the search.",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "Session ID of the search.",
        "readOnly": true,
        "type": "string"
      },
      "total": {
        "description": "The total number of documents matching the query.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeDocumentGuestSearchResult": {
    "properties": {
      "confidence": {
        "description": "The confidence associated with a document with respect to a search query.",
        "format": "double",
        "type": "number"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeGuestSearchDocumentResponse",
        "description": "Document that matched the query."
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentPresentation": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application in which the documents were presented."
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContext",
        "description": "Conversation context information if the documents were presented in the context of a conversation."
      },
      "documents": {
        "description": "The presented documents",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentVersionVariationReference"
        },
        "type": "array"
      },
      "queryType": {
        "description": "The type of the query that surfaced the documents.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search that surfaced the documents that were presented.",
        "type": "string"
      },
      "sessionId": {
        "description": "Knowledge session ID.",
        "readOnly": true,
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "application",
      "documents"
    ],
    "type": "object"
  },
  "KnowledgeDocumentQuery": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/DocumentQuery",
        "description": "Filter for the document query."
      },
      "includeDraftDocuments": {
        "description": "Indicates whether the results would also include draft documents.",
        "type": "boolean"
      },
      "includeVariations": {
        "description": "Indicates which document variations to include in returned documents. All: all variations regardless of the filter expression; AllMatching: all variations that match the filter expression; SingleMostRelevant: single variation that matches the filter expression and has the highest priority. The default is All.",
        "enum": [
          "All",
          "AllMatching",
          "SingleMostRelevant"
        ],
        "type": "string"
      },
      "interval": {
        "$ref": "#/definitions/DocumentQueryInterval",
        "description": "Retrieves the documents created/modified/published in specified date and time range."
      },
      "pageNumber": {
        "description": "Page number of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "sortBy": {
        "description": "The field in the documents that you want to sort the results by.",
        "enum": [
          "DateCreated",
          "DateModified",
          "CategoryName",
          "LabelName",
          "ViewCount"
        ],
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results.",
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      }
    },
    "required": [
      "filter"
    ],
    "type": "object"
  },
  "KnowledgeDocumentQueryResponse": {
    "properties": {
      "pageCount": {
        "description": "The total number of pages of results, calculated according to the pageSize and the total matching documents.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageNumber": {
        "description": "Page number of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "results": {
        "description": "Documents matching the query.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentResponse"
        },
        "readOnly": true,
        "type": "array"
      },
      "total": {
        "description": "The total number of documents matching the query.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the document.",
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "The knowledge base that the document belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "knowledgeBase"
    ],
    "type": "object"
  },
  "KnowledgeDocumentReq": {
    "properties": {
      "alternatives": {
        "description": "List of alternate phrases related to the title which improves search results.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentAlternative"
        },
        "type": "array"
      },
      "categoryId": {
        "description": "The category associated with the document.",
        "type": "string"
      },
      "externalId": {
        "description": "The external id associated with the document.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "labelIds": {
        "description": "The ids of labels associated with the document.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "Document title.",
        "type": "string"
      },
      "visible": {
        "description": "Indicates if the knowledge document should be included in search results.",
        "type": "boolean"
      }
    },
    "required": [
      "title"
    ],
    "type": "object"
  },
  "KnowledgeDocumentRequest": {
    "properties": {
      "article": {
        "$ref": "#/definitions/DocumentArticle",
        "description": "Article details"
      },
      "categories": {
        "description": "Document categories",
        "items": {
          "$ref": "#/definitions/DocumentCategoryInput"
        },
        "type": "array"
      },
      "externalUrl": {
        "description": "External Url to the document",
        "type": "string"
      },
      "faq": {
        "$ref": "#/definitions/DocumentFaq",
        "description": "Faq document details"
      },
      "type": {
        "description": "Document type according to assigned template",
        "enum": [
          "Faq",
          "Article"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "KnowledgeDocumentResponse": {
    "properties": {
      "alternatives": {
        "description": "List of alternate phrases related to the title which improves search results.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentAlternative"
        },
        "type": "array"
      },
      "category": {
        "$ref": "#/definitions/CategoryResponse",
        "description": "The reference to category associated with the document."
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the document.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateImported": {
        "description": "Document import date-time, or null if was not imported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "datePublished": {
        "description": "The date on which the document was last published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "externalId": {
        "description": "The reference to external id associated with the document.",
        "type": "string"
      },
      "externalUrl": {
        "description": "The URL to external document.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "Knowledge base to which the document belongs to."
      },
      "labels": {
        "description": "The references to labels associated with the document.",
        "items": {
          "$ref": "#/definitions/LabelResponse"
        },
        "type": "array"
      },
      "lastPublishedVersionNumber": {
        "description": "The last published version number of the document.",
        "format": "int32",
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified the document.",
        "readOnly": true
      },
      "readonly": {
        "description": "Whether the document is read-only.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The reference to source associated with the document."
      },
      "state": {
        "description": "State of the document.",
        "enum": [
          "Draft",
          "Published",
          "Archived"
        ],
        "type": "string"
      },
      "title": {
        "description": "Document title, having a limit of 500 words.",
        "type": "string"
      },
      "variations": {
        "description": "Variations of the document.",
        "items": {
          "$ref": "#/definitions/DocumentVariation"
        },
        "type": "array"
      },
      "visible": {
        "description": "Indicates if the knowledge document should be included in search results.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentResponse"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentSearch": {
    "properties": {
      "answerGeneration": {
        "$ref": "#/definitions/KnowledgeAnswerGenerationResponse",
        "description": "The results with AI-generated answer if the answerMode request property contains \"AnswerGeneration\"."
      },
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application details from which search happened."
      },
      "confidenceThreshold": {
        "description": "The confidence threshold for the search results. If applied, the returned results will have an equal or higher confidence than the threshold.",
        "format": "float",
        "type": "number"
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContextResponse",
        "description": "Conversation context information if the search is initiated in the context of a conversation."
      },
      "pageCount": {
        "description": "Number of pages returned in the result calculated according to the pageSize and the total",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageNumber": {
        "description": "Page number of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.",
        "maxLength": 2147483647,
        "minLength": 3,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that initiates the search.",
        "enum": [
          "AutoSearch",
          "ManualSearch",
          "Suggestion"
        ],
        "type": "string"
      },
      "results": {
        "description": "Documents matching the search query.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentSearchResult"
        },
        "readOnly": true,
        "type": "array"
      },
      "searchId": {
        "description": "The globally unique identifier for the search.",
        "readOnly": true,
        "type": "string"
      },
      "total": {
        "description": "The total number of documents matching the query.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeDocumentSearchRequest": {
    "properties": {
      "answerHighlightTopResults": {
        "description": "The number of articles to be sent for answer-highlighting. Can range from 1-5.",
        "format": "int32",
        "maximum": 5,
        "minimum": 1,
        "type": "integer"
      },
      "answerMode": {
        "description": "Allows extracted answers from an article (AnswerHighlight) and/or AI-generated answers (AnswerGeneration). Default mode: AnswerHighlight. Use this property with answerHighlightTopResults.",
        "items": {
          "enum": [
            "AnswerHighlight",
            "AnswerGeneration"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application details from which search request was sent."
      },
      "confidenceThreshold": {
        "description": "The confidence threshold for the search results. If applied, the returned results will have an equal or higher confidence than the threshold. The value should be between 0 to 1.",
        "format": "float",
        "type": "number"
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContext",
        "description": "Conversation context information if the search is initiated in the context of a conversation."
      },
      "filter": {
        "$ref": "#/definitions/DocumentQuery",
        "description": "Filter for the document search."
      },
      "includeDraftDocuments": {
        "description": "Indicates whether the search results would also include draft documents.",
        "type": "boolean"
      },
      "interval": {
        "$ref": "#/definitions/DocumentQueryInterval",
        "description": "Retrieves the documents created/modified/published in specified date and time range."
      },
      "pageCount": {
        "description": "Number of pages returned in the result calculated according to the pageSize and the total",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageNumber": {
        "description": "Page number of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to search content in the knowledge base. Maximum of 30 records per query can be fetched.",
        "maxLength": 2147483647,
        "minLength": 3,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that initiates the search.",
        "enum": [
          "AutoSearch",
          "ManualSearch",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The globally unique identifier for the search.",
        "readOnly": true,
        "type": "string"
      },
      "sortBy": {
        "description": "The field in the documents that you want to sort the search results by.",
        "enum": [
          "ConfidenceScore",
          "DateCreated",
          "DateModified",
          "CategoryName",
          "LabelName"
        ],
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for search results.",
        "enum": [
          "Asc",
          "Desc"
        ],
        "type": "string"
      },
      "total": {
        "description": "The total number of documents matching the query.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeDocumentSearchResult": {
    "properties": {
      "confidence": {
        "description": "The confidence associated with a document with respect to a search query.",
        "format": "double",
        "type": "number"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeSearchDocumentResponse",
        "description": "Document that matched the query."
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentSuggestion": {
    "properties": {
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to get autocomplete suggestions for the matching knowledge documents.",
        "type": "string"
      },
      "results": {
        "description": "Documents matching to the autocomplete suggestions query.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentSuggestionResult"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeDocumentSuggestionRequest": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/DocumentQuery",
        "description": "Filter for the document suggestions."
      },
      "includeDraftDocuments": {
        "description": "Indicates whether the suggestion results would also include draft documents.",
        "type": "boolean"
      },
      "interval": {
        "$ref": "#/definitions/DocumentQueryInterval",
        "description": "Retrieves the documents created/modified/published in specified date and time range."
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to get autocomplete suggestions for the matching knowledge documents.",
        "type": "string"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeDocumentSuggestionResult": {
    "properties": {
      "document": {
        "$ref": "#/definitions/KnowledgeDocumentSuggestionResultDocument"
      },
      "matchedPhrase": {
        "description": "Matched phrase to the autocomplete suggestions query.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentSuggestionResultDocument": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the document.",
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "The knowledge base that the document belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "The title of the document.",
        "type": "string"
      }
    },
    "required": [
      "id",
      "knowledgeBase",
      "title"
    ],
    "type": "object"
  },
  "KnowledgeDocumentVersion": {
    "properties": {
      "dateExpires": {
        "description": "Expiry date of document version, applicable only to the 'Archived' version of the document. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "datePublished": {
        "description": "Published date of document version. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeDocumentResponse",
        "description": "The document which is versioned.",
        "readOnly": true
      },
      "id": {
        "description": "Globally unique identifier for the document version.",
        "readOnly": true,
        "type": "string"
      },
      "restoreFromVersionId": {
        "description": "The globally unique identifier for the document version. If the value is provided, the document is restored to the given version. If not, it publishes the draft changes as a new version of the document.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "versionNumber": {
        "description": "Version Number of the document.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "restoreFromVersionId"
    ],
    "type": "object"
  },
  "KnowledgeDocumentVersionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentVersion"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentVersionReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the document.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "The knowledge base that the document belongs to.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "versionId": {
        "description": "The globally unique identifier for the version of the document.",
        "type": "string"
      }
    },
    "required": [
      "knowledgeBase",
      "versionId"
    ],
    "type": "object"
  },
  "KnowledgeDocumentVersionVariation": {
    "properties": {
      "body": {
        "$ref": "#/definitions/DocumentBody",
        "description": "The content for the variation."
      },
      "contexts": {
        "description": "The context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/DocumentVariationContext"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Reference to the document version to which the variation is associated with.",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the variation.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the variation.",
        "type": "string"
      },
      "priority": {
        "description": "The priority of the variation.",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contexts"
    ],
    "type": "object"
  },
  "KnowledgeDocumentVersionVariationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentVersionVariation"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeDocumentVersionVariationReference": {
    "properties": {
      "documentId": {
        "description": "The ID of the document.",
        "type": "string"
      },
      "documentVariationId": {
        "description": "The variation of the document.",
        "type": "string"
      },
      "documentVersionId": {
        "description": "The version of the document.",
        "type": "string"
      }
    },
    "required": [
      "documentId",
      "documentVariationId",
      "documentVersionId"
    ],
    "type": "object"
  },
  "KnowledgeDocumentView": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeSearchClientApplication",
        "description": "The client application from which the document was viewed."
      },
      "conversationContext": {
        "$ref": "#/definitions/KnowledgeConversationContext",
        "description": "Conversation context information if the document was viewed in the context of a conversation."
      },
      "documentVariationId": {
        "description": "The variation of the viewed document.",
        "type": "string"
      },
      "documentVersionId": {
        "description": "The version of the viewed document.",
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search that surfaced the viewed document.",
        "type": "string"
      },
      "sessionId": {
        "description": "The unique identifier of the knowledge session in which the document was viewed.",
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "application",
      "documentVariationId",
      "documentVersionId"
    ],
    "type": "object"
  },
  "KnowledgeDocumentsAnswerFilter": {
    "properties": {
      "answerMode": {
        "description": "Allows extracted answers from an article (AnswerHighlight) and/or AI-generated answers (AnswerGeneration). Default mode: AnswerHighlight",
        "items": {
          "enum": [
            "AnswerHighlight",
            "AnswerGeneration"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "appType": {
        "description": "The appType",
        "enum": [
          "Assistant",
          "BotFlow",
          "MessengerKnowledgeApp",
          "SmartAdvisor",
          "SupportCenter"
        ],
        "type": "string"
      },
      "insertHighlightIntoVariationContent": {
        "description": "If specified - insert highlight data into the variation content.",
        "type": "boolean"
      },
      "language": {
        "description": "The language of the documents.",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "type": "string"
      },
      "query": {
        "description": "The search query.",
        "type": "string"
      },
      "queryType": {
        "description": "The query type",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search id.",
        "type": "string"
      },
      "variationIds": {
        "description": "The variation Ids to answer.",
        "items": {
          "type": "string"
        },
        "maxItems": 10,
        "minItems": 1,
        "type": "array"
      }
    },
    "required": [
      "variationIds"
    ],
    "type": "object"
  },
  "KnowledgeExportJobDocumentsFilter": {
    "properties": {
      "entities": {
        "description": "Retrieves the documents with the given ids. Cannot be used together with internal filter.",
        "items": {
          "$ref": "#/definitions/Entity"
        },
        "maxItems": 100,
        "minItems": 1,
        "type": "array"
      },
      "interval": {
        "description": "Retrieves the documents modified in specified date and time range. Cannot be used together with entities filter. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "sourceId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeExportJobFilter": {
    "properties": {
      "documentsFilter": {
        "$ref": "#/definitions/KnowledgeExportJobDocumentsFilter",
        "description": "Filters for narrowing down which documents to export."
      },
      "versionFilter": {
        "description": "Specifies what version should be exported.",
        "enum": [
          "All",
          "Latest"
        ],
        "type": "string"
      }
    },
    "required": [
      "versionFilter"
    ],
    "type": "object"
  },
  "KnowledgeExportJobRequest": {
    "properties": {
      "exportFilter": {
        "$ref": "#/definitions/KnowledgeExportJobFilter",
        "description": "What to export."
      },
      "fileType": {
        "description": "File type of the document",
        "enum": [
          "Json",
          "Csv",
          "Xlsx"
        ],
        "type": "string"
      },
      "jsonFileVersion": {
        "description": "Requested version of the exported json file. Available versions are 2 and 3, default is 2",
        "format": "int32",
        "type": "integer"
      },
      "sourceId": {
        "description": "Knowledge integration source id.",
        "type": "string"
      }
    },
    "required": [
      "exportFilter",
      "fileType"
    ],
    "type": "object"
  },
  "KnowledgeExportJobResponse": {
    "properties": {
      "countDocumentProcessed": {
        "description": "The current count of the number of records processed.",
        "format": "int32",
        "type": "integer"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the operation"
      },
      "dateCreated": {
        "description": "The timestamp of when the export began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The timestamp of when the export stopped. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "downloadURL": {
        "description": "The URL of the location at which the caller can download the export file, when available.",
        "type": "string"
      },
      "errorInformation": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Any error information, or null of the processing is not in failed state."
      },
      "exportFilter": {
        "$ref": "#/definitions/KnowledgeExportJobFilter",
        "description": "Filters to narrow down what to export."
      },
      "fileType": {
        "description": "File type of the document",
        "enum": [
          "Json",
          "Csv",
          "Xlsx"
        ],
        "type": "string"
      },
      "id": {
        "description": "Id of the export job.",
        "type": "string"
      },
      "jsonFileVersion": {
        "description": "Requested version of the exported json file.",
        "format": "int32",
        "type": "integer"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which document export belongs to."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "$ref": "#/definitions/KnowledgeOperationSource",
        "description": "Source of the export job."
      },
      "status": {
        "description": "The status of the export job.",
        "enum": [
          "Created",
          "ValidationInProgress",
          "ValidationCompleted",
          "ValidationFailed",
          "Started",
          "InProgress",
          "Completed",
          "PartialCompleted",
          "Failed",
          "AbortRequested",
          "Aborted"
        ],
        "type": "string"
      }
    },
    "required": [
      "fileType"
    ],
    "type": "object"
  },
  "KnowledgeExtendedCategory": {
    "properties": {
      "children": {
        "description": "Category children",
        "items": {
          "$ref": "#/definitions/KnowledgeCategory"
        },
        "readOnly": true,
        "type": "array"
      },
      "dateCreated": {
        "description": "Category creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Category last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Category description",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which category does belong to",
        "readOnly": true
      },
      "languageCode": {
        "description": "Actual language of the category",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Category name",
        "type": "string"
      },
      "parent": {
        "$ref": "#/definitions/KnowledgeCategory",
        "description": "Category parent",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "KnowledgeGroupStatistics": {
    "properties": {
      "totalPhraseHitCount": {
        "description": "Total number of phrase hit counts of an unanswered group",
        "format": "int32",
        "type": "integer"
      },
      "unlinkedPhraseCount": {
        "description": "Knowledge Group unique phrase count",
        "format": "int32",
        "type": "integer"
      },
      "unlinkedPhraseHitCount": {
        "description": "Knowledge Group unlinked phrases hit count",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "KnowledgeGuestAnswerDocumentResponse": {
    "properties": {
      "answer": {
        "description": "The answer found inside a variationContent.",
        "type": "string"
      },
      "id": {
        "description": "The document id.",
        "type": "string"
      },
      "title": {
        "description": "The document title.",
        "type": "string"
      },
      "variation": {
        "$ref": "#/definitions/KnowledgeGuestDocumentVariationAnswer",
        "description": "The variation with the answer's highlight data."
      }
    },
    "type": "object"
  },
  "KnowledgeGuestAnswerDocumentsResponse": {
    "properties": {
      "results": {
        "description": "The results with answers.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestAnswerDocumentResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "KnowledgeGuestDocumentCopy": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeGuestSearchClientApplication",
        "description": "The client application in which the document content was copied.",
        "readOnly": true
      },
      "documentVariationId": {
        "description": "The variation of the document whose content was copied.",
        "type": "string"
      },
      "documentVersionId": {
        "description": "The version of the document whose content was copied.",
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search that surfaced the document whose content was copied.",
        "type": "string"
      },
      "sessionId": {
        "description": "Knowledge session ID.",
        "readOnly": true,
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "documentVariationId",
      "documentVersionId"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentFeedback": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeGuestSearchClientApplication",
        "description": "The client application from which feedback was given.",
        "readOnly": true
      },
      "comment": {
        "description": "Free-text comment of the feedback. Maximum length: 2000 characters.",
        "maxLength": 2000,
        "minLength": 0,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date and time of the feedback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/KnowledgeGuestDocumentVersionReference",
        "description": "The document on which feedback was given."
      },
      "documentVariation": {
        "$ref": "#/definitions/EntityReference",
        "description": "The variation of the document on which feedback was given."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document on which the feedback was given.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "rating": {
        "description": "Feedback rating.",
        "enum": [
          "Negative",
          "Positive"
        ],
        "type": "string"
      },
      "reason": {
        "description": "Feedback reason.",
        "enum": [
          "DocumentContent",
          "SearchResults"
        ],
        "type": "string"
      },
      "search": {
        "$ref": "#/definitions/EntityReference",
        "description": "The search that surfaced the document on which feedback was given."
      },
      "sessionId": {
        "description": "Knowledge guest session ID.",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the feedback.",
        "enum": [
          "Draft",
          "Final"
        ],
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "document",
      "documentVariation",
      "rating"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentPresentation": {
    "properties": {
      "application": {
        "$ref": "#/definitions/KnowledgeGuestSearchClientApplication",
        "description": "The client application in which the documents were presented.",
        "readOnly": true
      },
      "documents": {
        "description": "The presented documents",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentVersionVariationReference"
        },
        "type": "array"
      },
      "queryType": {
        "description": "The type of the query that surfaced the documents.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search that surfaced the documents that were presented.",
        "type": "string"
      },
      "sessionId": {
        "description": "Knowledge session ID.",
        "readOnly": true,
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "documents"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentResponse": {
    "properties": {
      "alternatives": {
        "description": "List of alternate phrases related to the title which improves search results.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentAlternative"
        },
        "type": "array"
      },
      "category": {
        "$ref": "#/definitions/GuestCategoryReference",
        "description": "The reference to category associated with the document.",
        "readOnly": true
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the document.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateImported": {
        "description": "Document import date-time, or null if was not imported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "datePublished": {
        "description": "The date on which the document was last published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lastPublishedVersionNumber": {
        "description": "The last published version number of the document.",
        "format": "int32",
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified the document.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "ID of the guest session.",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "State of the document.",
        "enum": [
          "Draft",
          "Published",
          "Archived"
        ],
        "type": "string"
      },
      "title": {
        "description": "Document title, having a limit of 500 words.",
        "type": "string"
      },
      "variations": {
        "description": "Variations of the document.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestDocumentVariation"
        },
        "type": "array"
      },
      "visible": {
        "description": "Indicates if the knowledge document should be included in search results.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "KnowledgeGuestDocumentResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeGuestDocumentResponse"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeGuestDocumentSuggestion": {
    "properties": {
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to get autocomplete suggestions for the matching knowledge documents.",
        "type": "string"
      },
      "results": {
        "description": "Suggestions matching the query.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestDocumentSuggestionResult"
        },
        "readOnly": true,
        "type": "array"
      },
      "sessionId": {
        "description": "Session ID of the guest suggestions.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentSuggestionRequest": {
    "properties": {
      "includeDraftDocuments": {
        "description": "Indicates whether the suggestion results would also include draft documents.",
        "type": "boolean"
      },
      "pageSize": {
        "description": "Page size of the returned results.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Query to get autocomplete suggestions for the matching knowledge documents.",
        "type": "string"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentSuggestionResult": {
    "properties": {
      "matchedPhrase": {
        "description": "Matched phrase to the autocomplete suggestions query.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeGuestDocumentVariation": {
    "properties": {
      "body": {
        "$ref": "#/definitions/DocumentBody",
        "description": "The content for the variation."
      },
      "contexts": {
        "description": "The context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestDocumentVariationContext"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The reference to document to which the variation is associated.",
        "readOnly": true
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "id": {
        "description": "The globally unique identifier for the variation.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contexts"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentVariationAnswer": {
    "properties": {
      "body": {
        "$ref": "#/definitions/DocumentBodyWithHighlight",
        "description": "The content for the variation."
      },
      "contexts": {
        "description": "The context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestDocumentVariationContext"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The creation date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The last modification date-time for the document variation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "document": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The reference to document to which the variation is associated.",
        "readOnly": true
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "id": {
        "description": "The globally unique identifier for the variation.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contexts"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentVariationContext": {
    "properties": {
      "context": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The knowledge context associated with the variation."
      },
      "values": {
        "description": "The list of knowledge context values associated with the variation.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      }
    },
    "required": [
      "context",
      "values"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentVersionReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the document.",
        "readOnly": true,
        "type": "string"
      },
      "versionId": {
        "description": "The globally unique identifier for the version of the document.",
        "type": "string"
      }
    },
    "required": [
      "versionId"
    ],
    "type": "object"
  },
  "KnowledgeGuestDocumentView": {
    "properties": {
      "documentVariationId": {
        "description": "The variation of the viewed document.",
        "type": "string"
      },
      "documentVersionId": {
        "description": "The version of the viewed document.",
        "type": "string"
      },
      "queryType": {
        "description": "The type of the query that surfaced the document.",
        "enum": [
          "Unknown",
          "Article",
          "AutoSearch",
          "Category",
          "ManualSearch",
          "Recommendation",
          "Suggestion"
        ],
        "type": "string"
      },
      "searchId": {
        "description": "The search that surfaced the viewed document.",
        "type": "string"
      },
      "surfacingMethod": {
        "description": "The method how knowledge was surfaced. Article: Full article was shown. Snippet: A snippet from the article was shown. Highlight: A highlighted answer in a snippet was shown.",
        "enum": [
          "Unknown",
          "Article",
          "Snippet",
          "Highlight"
        ],
        "type": "string"
      }
    },
    "required": [
      "documentVariationId",
      "documentVersionId"
    ],
    "type": "object"
  },
  "KnowledgeGuestSearchClientApplication": {
    "properties": {
      "assistant": {
        "$ref": "#/definitions/EntityReference",
        "description": "Application details when type is Assistant."
      },
      "botFlow": {
        "$ref": "#/definitions/EntityReference",
        "description": "Application details when type is BotFlow."
      },
      "deployment": {
        "$ref": "#/definitions/EntityReference",
        "description": "Application details when type is MessengerKnowledgeApp or SupportCenter."
      },
      "type": {
        "description": "Application type.",
        "enum": [
          "Assistant",
          "BotFlow",
          "MessengerKnowledgeApp",
          "SmartAdvisor",
          "SupportCenter"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "KnowledgeGuestSearchDocumentResponse": {
    "properties": {
      "alternatives": {
        "description": "List of alternate phrases related to the title which improves search results.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentAlternative"
        },
        "type": "array"
      },
      "answer": {
        "description": "The answer to the query.",
        "type": "string"
      },
      "category": {
        "$ref": "#/definitions/GuestCategoryReference",
        "description": "The reference to category associated with the document.",
        "readOnly": true
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the document.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateImported": {
        "description": "Document import date-time, or null if was not imported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "datePublished": {
        "description": "The date on which the document was last published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lastPublishedVersionNumber": {
        "description": "The last published version number of the document.",
        "format": "int32",
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified the document.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "ID of the guest session.",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "State of the document.",
        "enum": [
          "Draft",
          "Published",
          "Archived"
        ],
        "type": "string"
      },
      "title": {
        "description": "Document title, having a limit of 500 words.",
        "type": "string"
      },
      "variations": {
        "description": "Variations of the document.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestDocumentVariationAnswer"
        },
        "type": "array"
      },
      "visible": {
        "description": "Indicates if the knowledge document should be included in search results.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "KnowledgeGuestSession": {
    "properties": {
      "app": {
        "$ref": "#/definitions/KnowledgeGuestSessionApp",
        "description": "The app where the session is started."
      },
      "contexts": {
        "description": "The session contexts.",
        "items": {
          "$ref": "#/definitions/KnowledgeGuestSessionContext"
        },
        "type": "array"
      },
      "customerId": {
        "description": "An arbitrary ID for the customer starting the session. Used to track multiple sessions started by the same customer.",
        "type": "string"
      },
      "id": {
        "description": "Session ID.",
        "readOnly": true,
        "type": "string"
      },
      "pageUrl": {
        "description": "URL of the page where the session is started.",
        "type": "string"
      }
    },
    "required": [
      "app",
      "customerId"
    ],
    "type": "object"
  },
  "KnowledgeGuestSessionApp": {
    "properties": {
      "deploymentId": {
        "description": "App deployment ID.",
        "type": "string"
      },
      "type": {
        "description": "App type.",
        "enum": [
          "MessengerKnowledgeApp",
          "SupportCenter"
        ],
        "type": "string"
      }
    },
    "required": [
      "deploymentId",
      "type"
    ],
    "type": "object"
  },
  "KnowledgeGuestSessionContext": {
    "properties": {
      "id": {
        "description": "The context id associated with the session.",
        "type": "string"
      },
      "values": {
        "description": "The list of knowledge context values associated with the session.",
        "items": {
          "$ref": "#/definitions/Entity"
        },
        "type": "array"
      }
    },
    "required": [
      "id",
      "values"
    ],
    "type": "object"
  },
  "KnowledgeImport": {
    "properties": {
      "dateCreated": {
        "description": "Created date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "fileType": {
        "description": "file type of the document",
        "enum": [
          "Csv",
          "JsonLines"
        ],
        "type": "string"
      },
      "id": {
        "description": "Id of the import operation",
        "readOnly": true,
        "type": "string"
      },
      "ignoreHeaders": {
        "description": "Ignore headers for the specified file",
        "type": "boolean"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which document import does belong to",
        "readOnly": true
      },
      "languageCode": {
        "description": "Language code",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Name of the import operation",
        "type": "string"
      },
      "report": {
        "$ref": "#/definitions/ImportReport",
        "description": "Report of the import operation",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Status of the operation",
        "enum": [
          "Created",
          "ValidationInProgress",
          "ValidationCompleted",
          "ValidationFailed",
          "Started",
          "InProgress",
          "Completed",
          "PartialCompleted",
          "Failed",
          "AbortRequested",
          "Aborted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "uploadKey": {
        "description": "Upload key",
        "type": "string"
      }
    },
    "required": [
      "fileType",
      "uploadKey"
    ],
    "type": "object"
  },
  "KnowledgeImportJobError": {
    "properties": {
      "code": {
        "type": "string"
      },
      "contextId": {
        "type": "string"
      },
      "details": {
        "items": {
          "$ref": "#/definitions/Detail"
        },
        "type": "array"
      },
      "documentIndex": {
        "description": "Index of the faulty document.",
        "format": "int32",
        "type": "integer"
      },
      "entityId": {
        "type": "string"
      },
      "entityName": {
        "type": "string"
      },
      "errors": {
        "items": {
          "$ref": "#/definitions/ErrorBody"
        },
        "type": "array"
      },
      "limit": {
        "$ref": "#/definitions/Limit"
      },
      "message": {
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "messageWithParams": {
        "type": "string"
      },
      "status": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "KnowledgeImportJobReport": {
    "properties": {
      "errors": {
        "description": "List of errors occurred during processing import.",
        "items": {
          "$ref": "#/definitions/KnowledgeImportJobError"
        },
        "type": "array"
      },
      "statistics": {
        "$ref": "#/definitions/KnowledgeImportJobStatistics",
        "description": "Statistics related to the import job."
      }
    },
    "type": "object"
  },
  "KnowledgeImportJobRequest": {
    "properties": {
      "fileType": {
        "description": "File type of the document",
        "enum": [
          "Json",
          "Csv",
          "Xlsx"
        ],
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/KnowledgeImportJobSettings",
        "description": "Additional optional settings"
      },
      "skipConfirmationStep": {
        "description": "If enabled pre-validation step will be skipped.",
        "type": "boolean"
      },
      "uploadKey": {
        "description": "Upload key",
        "type": "string"
      }
    },
    "required": [
      "fileType",
      "uploadKey"
    ],
    "type": "object"
  },
  "KnowledgeImportJobResponse": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the operation",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Created date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "downloadURL": {
        "description": "The URL of the location at which the caller can download the imported file.",
        "type": "string"
      },
      "failedEntitiesURL": {
        "description": "The URL of the location at which the caller can download the entities in json format that failed during the import.",
        "type": "string"
      },
      "fileType": {
        "description": "File type of the document",
        "enum": [
          "Json",
          "Csv",
          "Xlsx"
        ],
        "type": "string"
      },
      "id": {
        "description": "Id of the import job",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which document import does belong to",
        "readOnly": true
      },
      "report": {
        "$ref": "#/definitions/KnowledgeImportJobReport",
        "description": "Report of the import job",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/KnowledgeImportJobSettings",
        "description": "Additional optional settings"
      },
      "skipConfirmationStep": {
        "description": "If enabled pre-validation step will be skipped.",
        "type": "boolean"
      },
      "status": {
        "description": "Status of the import job",
        "enum": [
          "Created",
          "ValidationInProgress",
          "ValidationCompleted",
          "ValidationFailed",
          "Started",
          "InProgress",
          "Completed",
          "PartialCompleted",
          "Failed",
          "AbortRequested",
          "Aborted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "uploadKey": {
        "description": "Upload key",
        "type": "string"
      }
    },
    "required": [
      "fileType",
      "uploadKey"
    ],
    "type": "object"
  },
  "KnowledgeImportJobSettings": {
    "properties": {
      "categoryId": {
        "description": "If specified, import will override the category of the imported documents.",
        "type": "string"
      },
      "importAsNew": {
        "description": "If enabled import creates a new document even if update is available.",
        "type": "boolean"
      },
      "labelIds": {
        "description": "If specified, import will add this labels to the imported documents.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "visible": {
        "description": "If specified, import will override the visibility of the imported documents.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "KnowledgeImportJobStatistics": {
    "properties": {
      "countCategoryImportFailure": {
        "description": "Number of categories failed to import.",
        "format": "int32",
        "type": "integer"
      },
      "countCategoryImportSuccess": {
        "description": "Number of imported categories.",
        "format": "int32",
        "type": "integer"
      },
      "countCategoryValidationFailure": {
        "description": "Number of categories that failed validation for import.",
        "format": "int32",
        "type": "integer"
      },
      "countCategoryValidationSuccess": {
        "description": "Number of categories that validated successfully for import.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentImportActivityCreate": {
        "description": "Number of documents will be created by the import.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentImportActivityUpdate": {
        "description": "Number of documents will be updated by the import.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentImportFailure": {
        "description": "Number of documents failed to import.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentImportSuccess": {
        "description": "Number of imported documents.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentStateDraft": {
        "description": "Number of documents will be imported as draft.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentStatePublished": {
        "description": "Number of documents will be imported as published.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentValidationFailure": {
        "description": "Number of documents that failed validation for import.",
        "format": "int32",
        "type": "integer"
      },
      "countDocumentValidationSuccess": {
        "description": "Number of documents that validated successfully for import.",
        "format": "int32",
        "type": "integer"
      },
      "countLabelImportFailure": {
        "description": "Number of labels failed to import.",
        "format": "int32",
        "type": "integer"
      },
      "countLabelImportSuccess": {
        "description": "Number of imported labels.",
        "format": "int32",
        "type": "integer"
      },
      "countLabelValidationFailure": {
        "description": "Number of labels that failed validation for import.",
        "format": "int32",
        "type": "integer"
      },
      "countLabelValidationSuccess": {
        "description": "Number of labels that validated successfully for import.",
        "format": "int32",
        "type": "integer"
      },
      "migrationDetected": {
        "description": "Shows whether the import treated as migration or not.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "KnowledgeOperationSource": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The source type.",
        "enum": [
          "Salesforce",
          "ServiceNow"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "KnowledgeSearchClientApplication": {
    "properties": {
      "assistant": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Application details when type is Assistant."
      },
      "botFlow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Application details when type is BotFlow."
      },
      "deployment": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Application details when type is MessengerKnowledgeApp or SupportCenter."
      },
      "type": {
        "description": "Application type.",
        "enum": [
          "Assistant",
          "BotFlow",
          "MessengerKnowledgeApp",
          "SmartAdvisor",
          "SupportCenter"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "KnowledgeSearchDocumentResponse": {
    "properties": {
      "alternatives": {
        "description": "List of alternate phrases related to the title which improves search results.",
        "items": {
          "$ref": "#/definitions/KnowledgeDocumentAlternative"
        },
        "type": "array"
      },
      "answer": {
        "description": "The answer to the query.",
        "type": "string"
      },
      "category": {
        "$ref": "#/definitions/CategoryResponse",
        "description": "The reference to category associated with the document."
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the document.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateImported": {
        "description": "Document import date-time, or null if was not imported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "datePublished": {
        "description": "The date on which the document was last published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "documentVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the document."
      },
      "externalId": {
        "description": "The reference to external id associated with the document.",
        "type": "string"
      },
      "externalUrl": {
        "description": "The URL to external document.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "Knowledge base to which the document belongs to."
      },
      "labels": {
        "description": "The references to labels associated with the document.",
        "items": {
          "$ref": "#/definitions/LabelResponse"
        },
        "type": "array"
      },
      "lastPublishedVersionNumber": {
        "description": "The last published version number of the document.",
        "format": "int32",
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified the document.",
        "readOnly": true
      },
      "readonly": {
        "description": "Whether the document is read-only.",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The reference to source associated with the document."
      },
      "state": {
        "description": "State of the document.",
        "enum": [
          "Draft",
          "Published",
          "Archived"
        ],
        "type": "string"
      },
      "title": {
        "description": "Document title, having a limit of 500 words.",
        "type": "string"
      },
      "variations": {
        "description": "Variations of the document.",
        "items": {
          "$ref": "#/definitions/DocumentVariationAnswer"
        },
        "type": "array"
      },
      "visible": {
        "description": "Indicates if the knowledge document should be included in search results.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "KnowledgeSearchDocumentV1": {
    "properties": {
      "article": {
        "$ref": "#/definitions/DocumentArticle",
        "description": "Article"
      },
      "categories": {
        "description": "Document categories",
        "items": {
          "$ref": "#/definitions/KnowledgeCategory"
        },
        "type": "array"
      },
      "confidence": {
        "description": "The confidence associated with a document with respect to a search query",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "dateCreated": {
        "description": "Document creation date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Document last modification date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "externalUrl": {
        "description": "External URL to the document",
        "type": "string"
      },
      "faq": {
        "$ref": "#/definitions/DocumentFaq",
        "description": "FAQ document details"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge base which document does belong to",
        "readOnly": true
      },
      "languageCode": {
        "description": "Language of the document",
        "enum": [
          "en-US",
          "en-UK",
          "en-AU",
          "en-CA",
          "en-HK",
          "en-IN",
          "en-IE",
          "en-NZ",
          "en-PH",
          "en-SG",
          "en-ZA",
          "de-DE",
          "de-AT",
          "de-CH",
          "es-AR",
          "es-CO",
          "es-MX",
          "es-US",
          "es-ES",
          "fr-FR",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "pt-BR",
          "pt-PT",
          "nl-NL",
          "nl-BE",
          "it-IT",
          "ca-ES",
          "tr-TR",
          "sv-SE",
          "fi-FI",
          "nb-NO",
          "da-DK",
          "ja-JP",
          "ar-AE",
          "zh-CN",
          "zh-TW",
          "zh-HK",
          "ko-KR",
          "pl-PL",
          "hi-IN",
          "th-TH",
          "hu-HU",
          "vi-VN",
          "uk-UA"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Document type",
        "enum": [
          "Faq",
          "Article"
        ],
        "type": "string"
      }
    },
    "required": [
      "languageCode",
      "type"
    ],
    "type": "object"
  },
  "KnowledgeSearchRequest": {
    "properties": {
      "documentType": {
        "description": "Document type to be used while searching",
        "enum": [
          "Faq",
          "Article"
        ],
        "type": "string"
      },
      "languageCode": {
        "description": "query search for specific languageCode",
        "type": "string"
      },
      "pageNumber": {
        "description": "Page number of the returned results",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Page size of the returned results",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Input query to search content in the knowledge base",
        "type": "string"
      },
      "searchOnDraftDocuments": {
        "description": "If true the search query will be executed on draft documents, else it will be on active documents",
        "type": "boolean"
      }
    },
    "required": [
      "languageCode",
      "query"
    ],
    "type": "object"
  },
  "KnowledgeSearchResponse": {
    "properties": {
      "pageCount": {
        "description": "Number of pages returned in the result calculated according to the pageSize and the total",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageNumber": {
        "description": "Current page number for the returned records",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "pageSize": {
        "description": "Number of records according to the page size",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "results": {
        "description": "Results associated to the search response",
        "items": {
          "$ref": "#/definitions/KnowledgeSearchDocumentV1"
        },
        "readOnly": true,
        "type": "array"
      },
      "searchId": {
        "description": "Search Id",
        "readOnly": true,
        "type": "string"
      },
      "total": {
        "description": "Total number of records returned",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "KnowledgeSuggestionConfig": {
    "properties": {
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBaseReference",
        "description": "The ID of knowledge base to query when Genesys is the knowledge suggestions provider."
      },
      "knowledgeBases": {
        "description": "The knowledge bases to query based on dialect, when Genesys is the knowledge suggestions provider.",
        "items": {
          "$ref": "#/definitions/KnowledgeBaseWithDialectReference"
        },
        "type": "array"
      },
      "vendorName": {
        "description": "The name of vendor used for knowledge suggestions.",
        "enum": [
          "GoogleDialogflow",
          "GenesysKnowledge",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "required": [
      "vendorName"
    ],
    "type": "object"
  },
  "KnowledgeTraining": {
    "properties": {
      "dateCompleted": {
        "description": "Training completed date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "datePromoted": {
        "description": "Trained Documents Promoted date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateTriggered": {
        "description": "Trigger date-time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "errorMessage": {
        "description": "Any error message during the Training or Promote action.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/KnowledgeBase",
        "description": "Knowledge Base that the training belongs to.",
        "readOnly": true
      },
      "knowledgeDocumentsState": {
        "description": "State of the Trained Documents, which can be one of these Draft, Active, Discarded, Archived.",
        "enum": [
          "Draft",
          "Active",
          "Discarded",
          "Archived"
        ],
        "readOnly": true,
        "type": "string"
      },
      "languageCode": {
        "description": "Language of the documents that are trained.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Training status.",
        "enum": [
          "Queued",
          "InProgress",
          "Succeeded",
          "Failed"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "KpiResult": {
    "properties": {
      "interactionCountOff": {
        "description": "Total interactions not routed by predictive routing (GPR was off)",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "interactionCountOn": {
        "description": "Total interactions handled by predictive routing (GPR was on)",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "kpiTotalOff": {
        "description": "Absolute metric (in which the KPI is based) total for the interactions not routed by predictive routing (GPR was off)",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "kpiTotalOn": {
        "description": "Absolute metric (in which the KPI is based) total for the interactions handled by predictive routing (GPR was on)",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "mediaType": {
        "description": "Media type used for the KPI",
        "enum": [
          "voice",
          "email",
          "message"
        ],
        "readOnly": true,
        "type": "string"
      },
      "percentageBenefit": {
        "description": "The percentage benefit for this media type for the duration of the comparison period",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "LabelCreateRequest": {
    "properties": {
      "color": {
        "description": "The color for the label.",
        "type": "string"
      },
      "externalId": {
        "description": "The external id associated with the label.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the label.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "color",
      "name"
    ],
    "type": "object"
  },
  "LabelListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LabelResponse"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LabelResponse": {
    "properties": {
      "color": {
        "description": "The color of the label.",
        "type": "string"
      },
      "dateCreated": {
        "description": "The creation date and time of the label. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The last modification date and time of the label. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "documentCount": {
        "description": "Number of documents assigned to this label.",
        "format": "int32",
        "type": "integer"
      },
      "externalId": {
        "description": "The external id associated with the label.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the label.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LabelUpdateRequest": {
    "properties": {
      "color": {
        "description": "The color for the label.",
        "type": "string"
      },
      "externalId": {
        "description": "The external id associated with the label.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the label.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LabelUtilizationRequest": {
    "properties": {
      "interruptingLabelIds": {
        "description": "Defines other labels that can interrupt an interaction with this label.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "maximumCapacity": {
        "description": "Defines the maximum number of interactions with this label that an agent can handle at one time.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LabelUtilizationResponse": {
    "properties": {
      "interruptingLabelIds": {
        "description": "Defines other labels that can interrupt an interaction with this label.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "labelName": {
        "description": "Name of the label this utilization relates to.",
        "type": "string"
      },
      "maximumCapacity": {
        "description": "Defines the maximum number of interactions with this label that an agent can handle at one time.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Language": {
    "properties": {
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The language name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "LanguageEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Language"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LanguageOverride": {
    "properties": {
      "engine": {
        "description": "The ID of the TTS engine to use for this language override",
        "type": "string"
      },
      "language": {
        "description": "The language code of the language being overridden",
        "type": "string"
      },
      "voice": {
        "description": "The ID of the voice to use for this language override. The voice must be supported by the chosen engine.",
        "type": "string"
      }
    },
    "required": [
      "engine",
      "language",
      "voice"
    ],
    "type": "object"
  },
  "LanguageReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LastAttemptByColumnConditionSettings": {
    "properties": {
      "emailColumnName": {
        "description": "The name of the contact column to evaluate for Email.",
        "type": "string"
      },
      "operator": {
        "description": "The operator to use when comparing values.",
        "enum": [
          "Before",
          "After"
        ],
        "type": "string"
      },
      "smsColumnName": {
        "description": "The name of the contact column to evaluate for SMS.",
        "type": "string"
      },
      "value": {
        "description": "The period value to compare against the contact's data.",
        "example": "P1DT1H1M",
        "type": "string"
      }
    },
    "required": [
      "operator",
      "value"
    ],
    "type": "object"
  },
  "LastAttemptOverallConditionSettings": {
    "properties": {
      "mediaTypes": {
        "description": "A list of media types to evaluate.",
        "items": {
          "enum": [
            "Voice",
            "Email",
            "Sms"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "operator": {
        "description": "The operator to use when comparing values.",
        "enum": [
          "Before",
          "After"
        ],
        "type": "string"
      },
      "value": {
        "description": "The period value to compare against the contact's data.",
        "example": "P1DT1H1M",
        "type": "string"
      }
    },
    "required": [
      "mediaTypes",
      "operator",
      "value"
    ],
    "type": "object"
  },
  "LastResultByColumnConditionSettings": {
    "properties": {
      "emailColumnName": {
        "description": "The name of the contact column to evaluate for Email.",
        "type": "string"
      },
      "emailWrapupCodes": {
        "description": "A list of wrapup code identifiers to match for Email.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "smsColumnName": {
        "description": "The name of the contact column to evaluate for SMS.",
        "type": "string"
      },
      "smsWrapupCodes": {
        "description": "A list of wrapup code identifiers to match for SMS.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LastResultOverallConditionSettings": {
    "properties": {
      "emailWrapupCodes": {
        "description": "A list of wrapup code identifiers to match for Email.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "smsWrapupCodes": {
        "description": "A list of wrapup code identifiers to match for SMS.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LauncherButtonSettings": {
    "description": "The settings for the launcher button",
    "properties": {
      "visibility": {
        "description": "The visibility settings for the button",
        "enum": [
          "On",
          "Off",
          "OnDemand"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Leaderboard": {
    "properties": {
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The targeted division for this leaderboard",
        "readOnly": true
      },
      "leaders": {
        "description": "The list of leaders generated.",
        "items": {
          "$ref": "#/definitions/LeaderboardItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The metric id if the leaderboard is about a specific metric",
        "readOnly": true
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      },
      "userRank": {
        "$ref": "#/definitions/LeaderboardItem",
        "description": "The requesting user's rank",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "LeaderboardItem": {
    "properties": {
      "points": {
        "description": "The points collected by the user",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "rank": {
        "description": "The rank of the user",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user object for this leaderboard rank",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "LearningAssessment": {
    "properties": {
      "answers": {
        "$ref": "#/definitions/AssessmentScoringSet",
        "description": "Answers for the assessment"
      },
      "assessmentFormId": {
        "description": "The Id of the related assessment form",
        "readOnly": true,
        "type": "string"
      },
      "assessmentId": {
        "description": "The Id of the assessment",
        "readOnly": true,
        "type": "string"
      },
      "contextId": {
        "description": "The context Id of the related assessment form",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "Date the assessment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date the assessment was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateSubmitted": {
        "description": "Date the assessment was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Status of the assessment",
        "enum": [
          "Pending",
          "InProgress",
          "Finished"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssessmentScoringRequest": {
    "properties": {
      "answers": {
        "$ref": "#/definitions/AssessmentScoringSet",
        "description": "The answers to score",
        "position": 2
      },
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form to score against",
        "position": 1
      }
    },
    "required": [
      "answers",
      "assessmentForm"
    ],
    "type": "object"
  },
  "LearningAssignment": {
    "description": "Learning module assignment with user information",
    "properties": {
      "assessment": {
        "$ref": "#/definitions/LearningAssessment",
        "description": "The assessment associated with this assignment"
      },
      "assessmentCompletionPercentage": {
        "description": "The assessment completion percentage of assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form associated with this assignment",
        "position": 7
      },
      "assessmentPercentageScore": {
        "description": "The user's percentage score for this assignment's assessment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "completionPercentage": {
        "description": "The overall completion percentage of assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the assignment",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date when the assignment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date when the assignment was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateRecommendedForCompletion": {
        "description": "The recommended completion date of the assignment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "position": 3,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isLatest": {
        "description": "True if the assignment is based on latest module",
        "readOnly": true,
        "type": "boolean"
      },
      "isManual": {
        "description": "True if this assignment was created manually",
        "readOnly": true,
        "type": "boolean"
      },
      "isOverdue": {
        "description": "True if the assignment is overdue",
        "readOnly": true,
        "type": "boolean"
      },
      "isPassed": {
        "description": "True if the assessment was passed",
        "readOnly": true,
        "type": "boolean"
      },
      "isRule": {
        "description": "True if this assignment was created by a Rule",
        "readOnly": true,
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The length in minutes of the assignment",
        "format": "int32",
        "position": 8,
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified the assignment",
        "readOnly": true
      },
      "module": {
        "$ref": "#/definitions/LearningModule",
        "description": "The Learning module object associated with this assignment",
        "position": 5
      },
      "nextStep": {
        "$ref": "#/definitions/LearningAssignmentStep",
        "description": "The next assignment step",
        "readOnly": true
      },
      "percentageScore": {
        "description": "The user's percentage score for this assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The Learning Assignment state",
        "enum": [
          "Assigned",
          "InProgress",
          "Completed",
          "Deleted",
          "NotCompleted",
          "InvalidSchedule"
        ],
        "position": 2,
        "type": "string"
      },
      "steps": {
        "description": "List of assignment steps",
        "items": {
          "$ref": "#/definitions/LearningAssignmentStep"
        },
        "readOnly": true,
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user to whom the assignment is assigned",
        "position": 6
      },
      "version": {
        "description": "The version of Learning module assigned",
        "format": "int32",
        "position": 4,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningAssignmentAggregateParam": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/LearningAssignmentAggregateQueryRequestFilter",
        "description": "The filter applied to the data.  This is ANDed with the interval parameter. "
      },
      "groupBy": {
        "description": "Specifies if the aggregated data is combined into a single set of metrics (groupBy is empty or not specified), or contains an element per attendeeId (groupBy is \"attendeeId\")",
        "items": {
          "enum": [
            "attendeeId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Specifies the range of due dates to be used for filtering. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "The list of metrics to be returned. If omitted, all metrics are returned.",
        "items": {
          "enum": [
            "nActivities",
            "nPlannedActivities",
            "nInProgressActivities",
            "nCompleteActivities",
            "nOverdueActivities",
            "nInvalidScheduleActivities",
            "nPassedActivities",
            "nFailedActivities",
            "oActivityScore",
            "nNotCompletedActivities"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "filter",
      "interval"
    ],
    "type": "object"
  },
  "LearningAssignmentAggregateQueryRequestClause": {
    "properties": {
      "predicates": {
        "description": "The list of predicates used to filter the data",
        "items": {
          "$ref": "#/definitions/LearningAssignmentAggregateQueryRequestPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "The logic used to combine the predicates",
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "LearningAssignmentAggregateQueryRequestFilter": {
    "properties": {
      "clauses": {
        "description": "The list of clauses used to filter the data. Note that clauses must filter by attendeeId and a maximum of 100 user IDs are allowed",
        "items": {
          "$ref": "#/definitions/LearningAssignmentAggregateQueryRequestClause"
        },
        "type": "array"
      },
      "type": {
        "description": "The logic used to combine the clauses",
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      }
    },
    "required": [
      "clauses",
      "type"
    ],
    "type": "object"
  },
  "LearningAssignmentAggregateQueryRequestPredicate": {
    "properties": {
      "dimension": {
        "description": "Each predicates specifies a dimension.",
        "enum": [
          "attendeeId",
          "type",
          "moduleId",
          "isPassed"
        ],
        "type": "string"
      },
      "value": {
        "description": "Corresponding value for dimensions in predicates. If the dimension is type, Valid Values: Informational (deprecated), AssessedContent (deprecated), Assessment (deprecated), External, Native",
        "type": "string"
      }
    },
    "required": [
      "dimension",
      "value"
    ],
    "type": "object"
  },
  "LearningAssignmentAggregateQueryResponseData": {
    "properties": {
      "interval": {
        "description": "Specifies the range of due dates to be used for filtering. A maximum of 1 year can be specified in the range. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "The list of aggregated metrics",
        "items": {
          "$ref": "#/definitions/LearningAssignmentAggregateQueryResponseMetric"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningAssignmentAggregateQueryResponseGroupedData": {
    "properties": {
      "data": {
        "description": "The metrics in this group",
        "items": {
          "$ref": "#/definitions/LearningAssignmentAggregateQueryResponseData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The group values for this data",
        "type": "object"
      }
    },
    "type": "object"
  },
  "LearningAssignmentAggregateQueryResponseMetric": {
    "properties": {
      "metric": {
        "description": "The metric this applies to",
        "enum": [
          "nActivities",
          "nPlannedActivities",
          "nInProgressActivities",
          "nCompleteActivities",
          "nOverdueActivities",
          "nInvalidScheduleActivities",
          "nPassedActivities",
          "nFailedActivities",
          "oActivityScore",
          "nNotCompletedActivities"
        ],
        "type": "string"
      },
      "stats": {
        "$ref": "#/definitions/LearningAssignmentAggregateQueryResponseStats",
        "description": "The aggregated values for this metric"
      }
    },
    "type": "object"
  },
  "LearningAssignmentAggregateQueryResponseStats": {
    "properties": {
      "count": {
        "description": "The count for this metric",
        "format": "int32",
        "type": "integer"
      },
      "max": {
        "description": "The maximum value in this metric",
        "type": "number"
      },
      "min": {
        "description": "The minimum value in this metric",
        "type": "number"
      },
      "sum": {
        "description": "The total of the values for this metric",
        "type": "number"
      }
    },
    "type": "object"
  },
  "LearningAssignmentAggregateResponse": {
    "properties": {
      "results": {
        "description": "The results of the query",
        "items": {
          "$ref": "#/definitions/LearningAssignmentAggregateQueryResponseGroupedData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningAssignmentBulkAddResponse": {
    "properties": {
      "disallowedEntities": {
        "description": "The items that were not allowed to be assigned",
        "items": {
          "$ref": "#/definitions/DisallowedEntityLearningAssignmentItem"
        },
        "type": "array"
      },
      "entities": {
        "description": "The learning assignments that were assigned correctly",
        "items": {
          "$ref": "#/definitions/LearningAssignment"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningAssignmentBulkRemoveResponse": {
    "properties": {
      "disallowedEntities": {
        "description": "The learning assignments that were not removed due to missing permissions",
        "items": {
          "$ref": "#/definitions/DisallowedEntityLearningAssignmentReference"
        },
        "type": "array"
      },
      "entities": {
        "description": "The learning assignments that were removed successfully",
        "items": {
          "$ref": "#/definitions/LearningAssignmentEntity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningAssignmentCreate": {
    "properties": {
      "lengthInMinutes": {
        "description": "The length in minutes of assignment",
        "format": "int32",
        "position": 4,
        "type": "integer"
      },
      "moduleId": {
        "description": "The Learning module Id associated with this assignment",
        "position": 1,
        "type": "string"
      },
      "recommendedCompletionDate": {
        "description": "The recommended completion date of assignment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "position": 3,
        "type": "string"
      },
      "userId": {
        "description": "The User for whom the assignment is assigned",
        "position": 2,
        "type": "string"
      }
    },
    "required": [
      "moduleId",
      "userId"
    ],
    "type": "object"
  },
  "LearningAssignmentEntity": {
    "properties": {
      "assignmentId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentExternalUpdate": {
    "properties": {
      "isPassed": {
        "description": "Was the assignment marked as passed",
        "type": "boolean"
      },
      "percentageScore": {
        "description": "The score",
        "format": "float",
        "type": "number"
      },
      "state": {
        "description": "The Learning Assignment state",
        "enum": [
          "Assigned",
          "InProgress",
          "Completed",
          "Deleted",
          "NotCompleted",
          "InvalidSchedule"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentItem": {
    "properties": {
      "moduleId": {
        "description": "The Learning Module ID associated with this assignment",
        "position": 1,
        "type": "string"
      },
      "userId": {
        "description": "The User ID associated with this assignment",
        "position": 2,
        "type": "string"
      }
    },
    "required": [
      "moduleId",
      "userId"
    ],
    "type": "object"
  },
  "LearningAssignmentReassign": {
    "properties": {
      "lengthInMinutes": {
        "description": "The length in minutes of assignment",
        "format": "int32",
        "type": "integer"
      },
      "recommendedCompletionDate": {
        "description": "The recommended completion date of assignment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentReschedule": {
    "properties": {
      "dateRecommendedForCompletion": {
        "description": "The recommended completion date of the assignment. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "The length in minutes of the assignment",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "dateRecommendedForCompletion"
    ],
    "type": "object"
  },
  "LearningAssignmentStep": {
    "description": "Learning assignment step",
    "properties": {
      "completionPercentage": {
        "description": "The completion percentage for this step",
        "format": "float",
        "type": "number"
      },
      "completionStatus": {
        "description": "The completion status of the assignment step",
        "enum": [
          "Completed",
          "Incomplete",
          "NotAttempted",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The ID of the learning assignment step",
        "readOnly": true,
        "type": "string"
      },
      "moduleStep": {
        "$ref": "#/definitions/LearningModuleInformStep",
        "description": "The module step data for this step",
        "readOnly": true
      },
      "percentageScore": {
        "description": "The percentage score for this step",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shareableContentObject": {
        "$ref": "#/definitions/LearningShareableContentObject",
        "description": "The SCO (Shareable Content Object) data"
      },
      "signedCookie": {
        "$ref": "#/definitions/LearningAssignmentStepSignedCookie",
        "description": "The signed cookie information needed to access the content of this step (if required)",
        "readOnly": true
      },
      "structure": {
        "description": "The structure for any SCO associated with this step",
        "items": {
          "$ref": "#/definitions/LearningAssignmentStepScoStructure"
        },
        "readOnly": true,
        "type": "array"
      },
      "successStatus": {
        "description": "The success status of this step",
        "enum": [
          "Passed",
          "Failed",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentStepScoStructure": {
    "properties": {
      "children": {
        "description": "Child items belonging to this SCO in the course manifest",
        "items": {
          "$ref": "#/definitions/LearningAssignmentStepScoStructure"
        },
        "readOnly": true,
        "type": "array"
      },
      "completionStatus": {
        "description": "The completion status of this SCO",
        "enum": [
          "Completed",
          "Incomplete",
          "NotAttempted",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The id of this SCO in the course manifest",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of this SCO in the course manifest",
        "readOnly": true,
        "type": "string"
      },
      "successStatus": {
        "description": "The success status of this SCO",
        "enum": [
          "Passed",
          "Failed",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentStepSignedCookie": {
    "properties": {
      "cookieValues": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The cookie values required to access content from the base URL",
        "readOnly": true,
        "type": "object"
      },
      "url": {
        "description": "The base URL for the signed cookie",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentUpdate": {
    "properties": {
      "assessment": {
        "$ref": "#/definitions/LearningAssessment",
        "description": "An updated Assessment"
      },
      "state": {
        "description": "The Learning Assignment state",
        "enum": [
          "Assigned",
          "InProgress",
          "Completed",
          "Deleted",
          "NotCompleted",
          "InvalidSchedule"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentUser": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningAssignmentUserListing": {
    "description": "List of users matching the learning module rule",
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LearningAssignmentUser"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "description": "The number of users matching search term",
        "format": "int64",
        "type": "integer"
      },
      "unfilteredTotal": {
        "description": "The total number of users",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningAssignmentUserQuery": {
    "description": "Learning module users query request model",
    "properties": {
      "rule": {
        "$ref": "#/definitions/LearningModuleRule",
        "description": "Learning module rule object"
      },
      "searchTerm": {
        "description": "The user name to be searched for",
        "type": "string"
      }
    },
    "required": [
      "rule"
    ],
    "type": "object"
  },
  "LearningAssignmentsDomainEntity": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LearningAssignment"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningCoverArtThumbnail": {
    "properties": {
      "resolution": {
        "description": "Resolution of thumbnail",
        "position": 1,
        "type": "string"
      },
      "url": {
        "description": "The URL for the thumbnail",
        "position": 2,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningCoverArtUploadUrlRequest": {
    "properties": {
      "contentMd5": {
        "description": "Content MD5 of the file to upload",
        "type": "string"
      },
      "contentType": {
        "description": "The content type of the file to upload.",
        "enum": [
          "image/bmp",
          "image/gif",
          "image/jpeg",
          "image/jpg",
          "image/png"
        ],
        "type": "string"
      },
      "fileName": {
        "description": "Name of the file to upload. It must not start with a dot and not end with a forward slash. Whitespace and the following characters are not allowed: \\{^}%`]\"\u003e[~\u003c#|",
        "type": "string"
      },
      "serverSideEncryption": {
        "enum": [
          "AES256"
        ],
        "type": "string"
      },
      "signedUrlTimeoutSeconds": {
        "description": "The number of seconds the presigned URL is valid for (from 1 to 604800 seconds). If none provided, defaults to 600 seconds",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "contentType"
    ],
    "type": "object"
  },
  "LearningModule": {
    "description": "Learning module response",
    "properties": {
      "archivalMode": {
        "description": "The mode of archival for learning module",
        "enum": [
          "Graceful",
          "Immediate"
        ],
        "position": 11,
        "type": "string"
      },
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form for learning module",
        "position": 6
      },
      "completionTimeInDays": {
        "description": "The completion time of learning module in days",
        "format": "int32",
        "position": 2,
        "type": "integer"
      },
      "coverArt": {
        "$ref": "#/definitions/LearningModuleCoverArtResponse",
        "description": "The cover art for the learning module",
        "position": 9
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created learning module",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date/time learning module was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date/time learning module was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of learning module",
        "position": 1,
        "type": "string"
      },
      "enforceContentOrder": {
        "description": "If true, learning module content should be viewed one by one in order",
        "type": "boolean"
      },
      "excludedFromCatalog": {
        "description": "If true, learning module is excluded when retrieving modules for manual assignment",
        "type": "boolean"
      },
      "externalId": {
        "description": "The external ID of the learning module",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "informSteps": {
        "description": "The list of inform steps in a learning module",
        "items": {
          "$ref": "#/definitions/LearningModuleInformStep"
        },
        "position": 5,
        "type": "array"
      },
      "isArchived": {
        "description": "If true, learning module is archived",
        "readOnly": true,
        "type": "boolean"
      },
      "isPublished": {
        "description": "If true, learning module is published",
        "readOnly": true,
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The recommended time in minutes to complete the module",
        "format": "int32",
        "position": 10,
        "type": "integer"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified learning module",
        "readOnly": true
      },
      "name": {
        "description": "The name of learning module",
        "type": "string"
      },
      "reassignSummaryData": {
        "$ref": "#/definitions/LearningModuleReassignSummary",
        "description": "The learning module reassign summary data",
        "position": 8
      },
      "reviewAssessmentResults": {
        "$ref": "#/definitions/ReviewAssessmentResults",
        "description": "Allows to view Assessment results in detail"
      },
      "rule": {
        "$ref": "#/definitions/LearningModuleRule",
        "description": "The rule for learning module; read-only, and only populated when requested via expand param.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "The source of the learning module",
        "enum": [
          "UserCreated",
          "GenesysBeyond"
        ],
        "readOnly": true,
        "type": "string"
      },
      "summaryData": {
        "$ref": "#/definitions/LearningModuleSummary",
        "description": "The learning module summary data",
        "position": 7
      },
      "type": {
        "description": "The type for the learning module",
        "enum": [
          "Informational",
          "AssessedContent",
          "Assessment",
          "External",
          "Native"
        ],
        "position": 3,
        "type": "string"
      },
      "version": {
        "description": "The version of published learning module",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "completionTimeInDays",
      "name"
    ],
    "type": "object"
  },
  "LearningModuleCoverArtRequest": {
    "properties": {
      "id": {
        "description": "The key identifier for the cover art",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "LearningModuleCoverArtResponse": {
    "description": "Learning module cover art response",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "thumbnails": {
        "description": "Thumbnails for the cover art",
        "items": {
          "$ref": "#/definitions/LearningCoverArtThumbnail"
        },
        "position": 2,
        "type": "array"
      },
      "url": {
        "description": "The URL for the cover art",
        "position": 1,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModuleInformStep": {
    "properties": {
      "contentType": {
        "description": "The document type for Content type Inform step",
        "position": 5,
        "type": "string"
      },
      "description": {
        "description": "The description for the inform step",
        "position": 8,
        "type": "string"
      },
      "displayName": {
        "description": "The display name for the inform step",
        "position": 7,
        "type": "string"
      },
      "name": {
        "description": "The name of the inform step or content",
        "position": 2,
        "type": "string"
      },
      "order": {
        "description": "The order of inform step in a learning module",
        "format": "int32",
        "position": 6,
        "type": "integer"
      },
      "sharingUri": {
        "description": "The sharing uri for Content type inform step",
        "position": 4,
        "type": "string"
      },
      "type": {
        "description": "The learning module inform step type",
        "enum": [
          "Url",
          "Content",
          "GenesysBuiltInCourse",
          "RichText",
          "Scorm"
        ],
        "position": 1,
        "type": "string"
      },
      "value": {
        "description": "The value for inform step",
        "position": 3,
        "type": "string"
      }
    },
    "required": [
      "order",
      "type",
      "value"
    ],
    "type": "object"
  },
  "LearningModuleInformStepRequest": {
    "description": "Learning module inform steps request",
    "properties": {
      "contentType": {
        "description": "The document type for Content type Inform step",
        "position": 5,
        "type": "string"
      },
      "description": {
        "description": "The description for the inform step",
        "position": 8,
        "type": "string"
      },
      "displayName": {
        "description": "The display name for the inform step",
        "position": 7,
        "type": "string"
      },
      "name": {
        "description": "The name of the inform step or content",
        "position": 2,
        "type": "string"
      },
      "order": {
        "description": "The order of inform step in a learning module",
        "format": "int32",
        "position": 6,
        "type": "integer"
      },
      "sharingUri": {
        "description": "The sharing uri for Content type inform step",
        "position": 4,
        "type": "string"
      },
      "type": {
        "description": "The learning module inform step type",
        "enum": [
          "Url",
          "Content",
          "GenesysBuiltInCourse",
          "RichText",
          "Scorm"
        ],
        "position": 1,
        "type": "string"
      },
      "value": {
        "description": "The value for inform step",
        "position": 3,
        "type": "string"
      }
    },
    "required": [
      "order",
      "type",
      "value"
    ],
    "type": "object"
  },
  "LearningModuleJobRequest": {
    "description": "Learning module job request",
    "properties": {
      "action": {
        "description": "The type for the learning module job",
        "enum": [
          "Reassign",
          "GracefulArchive",
          "ImmediateArchive",
          "Unarchive"
        ],
        "type": "string"
      }
    },
    "required": [
      "action"
    ],
    "type": "object"
  },
  "LearningModuleJobResponse": {
    "description": "Learning module job response",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of learning module job",
        "enum": [
          "Accepted",
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewGetResponse": {
    "description": "Learning module preview get response",
    "properties": {
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form for learning module"
      },
      "assignment": {
        "$ref": "#/definitions/LearningModulePreviewGetResponseAssignment",
        "description": "the assignment preview"
      },
      "coverArt": {
        "$ref": "#/definitions/LearningModuleCoverArtResponse",
        "description": "The cover art for the learning module"
      },
      "description": {
        "description": "The description of learning module",
        "type": "string"
      },
      "enforceContentOrder": {
        "description": "If true, learning module content should be viewed one by one in order",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of learning module",
        "type": "string"
      },
      "reviewAssessmentResults": {
        "$ref": "#/definitions/ReviewAssessmentResults",
        "description": "Allows to view Assessment results in detail"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "LearningModulePreviewGetResponseAssignment": {
    "description": "Learning module preview get response assignment",
    "properties": {
      "assessmentCompletionPercentage": {
        "description": "The assessment completion percentage of assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "assessmentPercentageScore": {
        "description": "The user's percentage score for this assignment's assessment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "completionPercentage": {
        "description": "The overall completion percentage of assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "isPassed": {
        "description": "True if the assessment was passed",
        "readOnly": true,
        "type": "boolean"
      },
      "percentageScore": {
        "description": "The user's percentage score for this assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "state": {
        "description": "The Learning Assignment state",
        "enum": [
          "Assigned",
          "InProgress",
          "Completed",
          "Deleted",
          "NotCompleted",
          "InvalidSchedule"
        ],
        "type": "string"
      },
      "steps": {
        "description": "List of assignment steps",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewGetResponseStep"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewGetResponseStep": {
    "description": "Learning module preview get response assignment step",
    "properties": {
      "completionPercentage": {
        "description": "The completion percentage for this step",
        "format": "float",
        "type": "number"
      },
      "completionStatus": {
        "description": "The completion status of the assignment step",
        "enum": [
          "Completed",
          "Incomplete",
          "NotAttempted",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The id of the step",
        "readOnly": true,
        "type": "string"
      },
      "moduleStep": {
        "$ref": "#/definitions/LearningModuleInformStep",
        "description": "The module step data for this step",
        "readOnly": true
      },
      "percentageScore": {
        "description": "The percentage score for this step",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "signedCookie": {
        "$ref": "#/definitions/LearningAssignmentStepSignedCookie",
        "description": "The signed cookie information needed to access the content of this step (if required)",
        "readOnly": true
      },
      "structure": {
        "description": "The structure for any SCO associated with this step",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewGetScoStructure"
        },
        "readOnly": true,
        "type": "array"
      },
      "successStatus": {
        "description": "The success status of this step",
        "enum": [
          "Passed",
          "Failed",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewGetScoStructure": {
    "description": "Learning module preview get SCO structure",
    "properties": {
      "children": {
        "description": "Child items belonging to this SCO in the course manifest",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewGetScoStructure"
        },
        "readOnly": true,
        "type": "array"
      },
      "completionStatus": {
        "description": "The completion status of this SCO",
        "enum": [
          "Completed",
          "Incomplete",
          "NotAttempted",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The id of this SCO in the course manifest",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of this SCO in the course manifest",
        "readOnly": true,
        "type": "string"
      },
      "percentageScore": {
        "description": "Percentage Score",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "shareableContentObject": {
        "$ref": "#/definitions/LearningShareableContentObject",
        "description": "The SCO (Shareable Content Object) data"
      },
      "successStatus": {
        "description": "The success status of this SCO",
        "enum": [
          "Passed",
          "Failed",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateRequest": {
    "description": "Learning module preview update request",
    "properties": {
      "assessment": {
        "$ref": "#/definitions/LearningAssessment",
        "description": "The assessment for learning module"
      },
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form for learning module"
      },
      "currentStep": {
        "$ref": "#/definitions/LearningModulePreviewUpdateRequestCurrentStep",
        "description": "The assignment current step"
      },
      "state": {
        "description": "The assignment State",
        "enum": [
          "Assigned",
          "InProgress",
          "Completed",
          "Deleted",
          "NotCompleted",
          "InvalidSchedule"
        ],
        "type": "string"
      },
      "steps": {
        "description": "The assignment Steps",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewUpdateStep"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateRequestCurrentStep": {
    "description": "Learning module preview update request current step",
    "properties": {
      "completionPercentage": {
        "description": "The completion percentage for this step",
        "format": "float",
        "type": "number"
      },
      "id": {
        "description": "The id of this step",
        "type": "string"
      },
      "shareableContentObject": {
        "$ref": "#/definitions/LearningShareableContentObject",
        "description": "The SCO (Shareable Content Object) data"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateResponse": {
    "description": "Learning module preview update response",
    "properties": {
      "assignment": {
        "$ref": "#/definitions/LearningModulePreviewUpdateResponseAssignment",
        "description": "The Assignment Preview"
      },
      "id": {
        "description": "The Learning Module id",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateResponseAssignment": {
    "description": "Learning module preview update response assignment",
    "properties": {
      "assessmentCompletionPercentage": {
        "description": "The assessment completion percentage of assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "assessmentPercentageScore": {
        "description": "The user's percentage score for this assignment's assessment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "completionPercentage": {
        "description": "The overall completion percentage of assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "currentStep": {
        "$ref": "#/definitions/LearningModulePreviewUpdateResponseCurrentStep",
        "description": "The next assignment step",
        "readOnly": true
      },
      "isPassed": {
        "description": "True if the assessment was passed",
        "readOnly": true,
        "type": "boolean"
      },
      "percentageScore": {
        "description": "The user's percentage score for this assignment",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "state": {
        "description": "The Learning Assignment state",
        "enum": [
          "Assigned",
          "InProgress",
          "Completed",
          "Deleted",
          "NotCompleted",
          "InvalidSchedule"
        ],
        "type": "string"
      },
      "steps": {
        "description": "List of assignment steps",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewUpdateStep"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateResponseCurrentStep": {
    "description": "Learning module preview update response current step",
    "properties": {
      "shareableContentObject": {
        "$ref": "#/definitions/LearningShareableContentObject",
        "description": "The SCO (Shareable Content Object) data"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateScoStructure": {
    "description": "Learning module preview update SCO structure",
    "properties": {
      "children": {
        "description": "Child items belonging to this SCO in the course manifest",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewUpdateScoStructure"
        },
        "type": "array"
      },
      "completionStatus": {
        "description": "The completion status of this SCO",
        "enum": [
          "Completed",
          "Incomplete",
          "NotAttempted",
          "Unknown"
        ],
        "type": "string"
      },
      "id": {
        "description": "The id of this SCO in the course manifest",
        "type": "string"
      },
      "name": {
        "description": "The name of this SCO in the course manifest",
        "type": "string"
      },
      "percentageScore": {
        "description": "Percentage Score",
        "format": "float",
        "type": "number"
      },
      "successStatus": {
        "description": "The success status of this SCO",
        "enum": [
          "Passed",
          "Failed",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModulePreviewUpdateStep": {
    "description": "Learning module preview update assignment step",
    "properties": {
      "completionPercentage": {
        "description": "The completion percentage of the step",
        "format": "float",
        "type": "number"
      },
      "completionStatus": {
        "description": "The completion status of the step",
        "enum": [
          "Completed",
          "Incomplete",
          "NotAttempted",
          "Unknown"
        ],
        "type": "string"
      },
      "id": {
        "description": "The id of the step",
        "type": "string"
      },
      "percentageScore": {
        "description": "Percentage Score",
        "format": "float",
        "type": "number"
      },
      "structure": {
        "description": "The structure for any SCO associated with this step",
        "items": {
          "$ref": "#/definitions/LearningModulePreviewUpdateScoStructure"
        },
        "type": "array"
      },
      "successStatus": {
        "description": "The success status of the step",
        "enum": [
          "Passed",
          "Failed",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningModulePublishRequest": {
    "description": "Learning module publish request",
    "properties": {
      "termsAndConditionsAccepted": {
        "description": "Whether the terms and conditions were accepted",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "LearningModulePublishResponse": {
    "description": "Learning module publish response",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The version of published learning module",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningModuleReassignSummary": {
    "description": "Learning module reassign summary data",
    "properties": {
      "assignedCount": {
        "description": "The total number of users who have the assignment in Assigned state",
        "format": "int32",
        "type": "integer"
      },
      "completedCount": {
        "description": "The total number of users who have the assignment in Completed state",
        "format": "int32",
        "type": "integer"
      },
      "inProgressCount": {
        "description": "The total number of users who have the assignment in InProgress state",
        "format": "int32",
        "type": "integer"
      },
      "notCompletedCount": {
        "description": "The total number of users who have their assignment overdue",
        "format": "int32",
        "type": "integer"
      },
      "totalReassigned": {
        "description": "The total number of users for whom assignment is reassigned",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningModuleRequest": {
    "description": "Learning module request",
    "properties": {
      "assessmentForm": {
        "$ref": "#/definitions/AssessmentForm",
        "description": "The assessment form for learning module"
      },
      "completionTimeInDays": {
        "description": "The completion time of learning module in days",
        "format": "int32",
        "type": "integer"
      },
      "coverArt": {
        "$ref": "#/definitions/LearningModuleCoverArtRequest",
        "description": "The cover art for the learning module"
      },
      "description": {
        "description": "The description of learning module",
        "type": "string"
      },
      "enforceContentOrder": {
        "description": "If true, learning module content should be viewed one by one in order",
        "type": "boolean"
      },
      "excludedFromCatalog": {
        "description": "If true, learning module is excluded when retrieving modules for manual assignment",
        "type": "boolean"
      },
      "externalId": {
        "description": "The external ID of the learning module. Maximum length: 50 characters.",
        "maxLength": 50,
        "minLength": 0,
        "type": "string"
      },
      "informSteps": {
        "description": "The list of inform steps in a learning module",
        "items": {
          "$ref": "#/definitions/LearningModuleInformStepRequest"
        },
        "type": "array"
      },
      "lengthInMinutes": {
        "description": "The recommended time in minutes to complete the module",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The name of learning module",
        "type": "string"
      },
      "reviewAssessmentResults": {
        "$ref": "#/definitions/ReviewAssessmentResults",
        "description": "Allows to view Assessment results in detail"
      },
      "type": {
        "description": "The type for the learning module. Informational, AssessedContent and Assessment are deprecated",
        "enum": [
          "Informational",
          "AssessedContent",
          "Assessment",
          "External",
          "Native"
        ],
        "type": "string"
      }
    },
    "required": [
      "completionTimeInDays",
      "name"
    ],
    "type": "object"
  },
  "LearningModuleRule": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isActive": {
        "description": "If true, rule is active",
        "type": "boolean"
      },
      "parts": {
        "description": "The parts of a learning module rule",
        "items": {
          "$ref": "#/definitions/LearningModuleRuleParts"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "isActive",
      "parts"
    ],
    "type": "object"
  },
  "LearningModuleRuleParts": {
    "properties": {
      "operation": {
        "description": "The learning module rule operation",
        "enum": [
          "Include",
          "Exclude"
        ],
        "type": "string"
      },
      "order": {
        "description": "The order of rules in learning module rule",
        "format": "int32",
        "type": "integer"
      },
      "selector": {
        "description": "The learning module rule selector",
        "enum": [
          "AcdSkills",
          "AgentName",
          "Division",
          "Group",
          "Location",
          "Queue",
          "Role",
          "Team"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value of rules",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "operation",
      "order",
      "selector",
      "value"
    ],
    "type": "object"
  },
  "LearningModuleSummary": {
    "description": "Learning module summary data",
    "properties": {
      "assignedCount": {
        "description": "The total number of assignments assigned for a learning module",
        "format": "int32",
        "type": "integer"
      },
      "completedCount": {
        "description": "The number of assignments completed for a learning module",
        "format": "int32",
        "type": "integer"
      },
      "completedSum": {
        "description": "The sum of assignment scores for a learning module",
        "format": "float",
        "type": "number"
      },
      "passedCount": {
        "description": "The number of assignments passed for a learning module",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningModulesDomainEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LearningModule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LearningScheduleSlotsQueryRequest": {
    "properties": {
      "interruptibleAssignmentId": {
        "description": "Assignment ID to exclude from consideration when determining blocked slots",
        "type": "string"
      },
      "interval": {
        "description": "Range of time to get slots for scheduling learning activities. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "The duration of coaching appointment to schedule in 15 minutes granularity",
        "format": "int32",
        "type": "integer"
      },
      "userIds": {
        "description": "The user IDs for which to fetch schedules. Must be only 1.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "lengthInMinutes",
      "userIds"
    ],
    "type": "object"
  },
  "LearningScheduleSlotsQueryResponse": {
    "properties": {
      "suggestedSlots": {
        "description": "List of slots where Learning activity can be scheduled",
        "items": {
          "$ref": "#/definitions/LearningSlot"
        },
        "type": "array"
      },
      "wfmScheduleActivities": {
        "description": "Detailed data for WFM scheduled activities",
        "items": {
          "$ref": "#/definitions/LearningSlotWfmScheduleActivity"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LearningScormResponse": {
    "description": "Learning SCORM package",
    "properties": {
      "errorCode": {
        "description": "The error code of the SCORM package (on failure)",
        "type": "string"
      },
      "errorMessage": {
        "description": "The error message associated with the error code",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "percentageUnpacked": {
        "description": "The percentage of the SCORM package that has been unpacked",
        "format": "float",
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the SCORM package",
        "enum": [
          "UploadPending",
          "Unpacking",
          "Error",
          "Ready"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningScormUploadRequest": {
    "description": "Learning SCORM upload request",
    "properties": {
      "contentMd5": {
        "description": "The MD5 content of the SCORM package",
        "type": "string"
      }
    },
    "required": [
      "contentMd5"
    ],
    "type": "object"
  },
  "LearningScormUploadResponse": {
    "description": "Learning SCORM upload response",
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The additional headers that need to be included in the upload request",
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the SCORM package",
        "enum": [
          "UploadPending",
          "Unpacking",
          "Error",
          "Ready"
        ],
        "type": "string"
      },
      "uploadUrl": {
        "description": "The pre-signed URL. Use it with headers below to upload file to S3",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningShareableContentObject": {
    "description": "Learning assignment SCO (Shareable Content Object)",
    "properties": {
      "credit": {
        "description": "Whether completing this course counts towards the overall assignment. Maps to the SCORM 1.2 cmi.core.credit property.",
        "enum": [
          "Credit",
          "NoCredit"
        ],
        "readOnly": true,
        "type": "string"
      },
      "entry": {
        "description": "Whether the learner has previously accessed this SCO. Maps to the SCORM 1.2 cmi.core.entry property.",
        "enum": [
          "AbInitio",
          "Resume",
          "Empty"
        ],
        "readOnly": true,
        "type": "string"
      },
      "exit": {
        "description": "Indicates how or why the learner left the SCO. Maps to the SCORM 1.2 cmi.core.exit property.",
        "enum": [
          "Timeout",
          "Suspend",
          "Logout",
          "Empty"
        ],
        "type": "string"
      },
      "href": {
        "description": "The href from the course manifest for this SCO.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The ID of the SCO from the course manifest.",
        "type": "string"
      },
      "launchData": {
        "description": "The launch data from the course manifest for this SCO.",
        "readOnly": true,
        "type": "string"
      },
      "lessonStatus": {
        "description": "The status of the SCO. Maps to the SCORM 1.2 cmi.core.lesson_status property.",
        "enum": [
          "Passed",
          "Completed",
          "Failed",
          "Incomplete",
          "Browsed",
          "NotAttempted"
        ],
        "type": "string"
      },
      "location": {
        "description": "The learner’s current location in the SCO. Maps to the SCORM 1.2 cmi.core.lesson_location property.",
        "type": "string"
      },
      "mode": {
        "description": "Identifies the mode in which the SCO should be presented to the learner. Maps to the SCORM 1.2 cmi.core.lesson_mode property.",
        "enum": [
          "Browse",
          "Normal",
          "Review"
        ],
        "readOnly": true,
        "type": "string"
      },
      "parameters": {
        "description": "The parameters from the course manifest for this SCO.",
        "readOnly": true,
        "type": "string"
      },
      "scoreMax": {
        "description": "The maximum score that could be achieved on the SCO. Maps to the SCORM 1.2 cmi.core.score.max property.",
        "format": "float",
        "type": "number"
      },
      "scoreMin": {
        "description": "The minimum score that could be achieved on the SCO. Maps to the SCORM 1.2 cmi.core.score.min property.",
        "format": "float",
        "type": "number"
      },
      "scoreRaw": {
        "description": "The score of the most recent attempt on the SCO. Maps to the SCORM 1.2 cmi.core.score.raw property.",
        "format": "float",
        "type": "number"
      },
      "sessionTime": {
        "description": "The amount of time spent in the SCO in this session expressed as an ISO-8601 Duration, for example PT2H10M3.5S. Maps to the SCORM 1.2 cmi.core.session_time property.",
        "type": "string"
      },
      "suspendData": {
        "description": "The unique information generated by the SCO from previous uses. Maps to the SCORM 1.2 cmi.suspend_data property.",
        "type": "string"
      },
      "totalTime": {
        "description": "The total amount of time the learner has spent in the SCO expressed as an ISO 8601 Duration, for example PT2H10M3.5S. Maps to the SCORM 1.2 cmi.core.total_time property.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "LearningSlot": {
    "properties": {
      "dateStart": {
        "description": "Start date and time of scheduled Learning activity slot. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "differenceRating": {
        "description": "Rating based on the staffing difference for scheduled slot",
        "enum": [
          "Poor",
          "Neutral",
          "Good"
        ],
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "Length of Learning activity slot in minutes",
        "format": "int32",
        "type": "integer"
      },
      "staffingDifference": {
        "description": "Difference between scheduled and forecast headcount for this slot after scheduling the Learning activity",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "LearningSlotFullDayTimeOffMarker": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with the time off marker",
        "type": "string"
      },
      "businessUnitDate": {
        "description": "The date of the time off marker, interpreted in the business unit's time zone. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "description": {
        "description": "The description of the time off marker",
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the time off marker in minutes",
        "format": "int32",
        "type": "integer"
      },
      "paid": {
        "description": "Whether the time off marker is paid",
        "type": "boolean"
      },
      "timeOffRequestId": {
        "description": "The ID of the time off request",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningSlotScheduleActivity": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this activity",
        "type": "string"
      },
      "dateStart": {
        "description": "The start date/time of this activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of this activity",
        "type": "string"
      },
      "externalActivityId": {
        "description": "The ID of the external activity associated with this activity, if applicable",
        "type": "string"
      },
      "externalActivityType": {
        "description": "The type of the external activity associated with this activity, if applicable",
        "enum": [
          "ActivityPlan",
          "Coaching",
          "Learning"
        ],
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of this activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "paid": {
        "description": "Whether this activity is paid",
        "type": "boolean"
      },
      "timeOffRequestId": {
        "description": "The ID of the time off request associated with this activity, if applicable",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LearningSlotWfmScheduleActivity": {
    "properties": {
      "activities": {
        "description": "List of user's scheduled activities",
        "items": {
          "$ref": "#/definitions/LearningSlotScheduleActivity"
        },
        "type": "array"
      },
      "fullDayTimeOffMarkers": {
        "description": "List of user's days off",
        "items": {
          "$ref": "#/definitions/LearningSlotFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "User that the schedule is for"
      }
    },
    "type": "object"
  },
  "LexBot": {
    "properties": {
      "description": {
        "description": "A description of the Lex bot",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LexBotAlias": {
    "properties": {
      "bot": {
        "$ref": "#/definitions/LexBot",
        "description": "The Lex bot this is an alias for"
      },
      "botVersion": {
        "description": "The version of the Lex bot this alias points at",
        "type": "string"
      },
      "failureReason": {
        "description": "If the status is FAILED, Amazon Lex explains why it failed to build the bot",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intents": {
        "description": "An array of Intents associated with this bot alias",
        "items": {
          "$ref": "#/definitions/LexIntent"
        },
        "type": "array"
      },
      "language": {
        "description": "The target language of the Lex bot",
        "enum": [
          "en-US"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Lex bot alias",
        "enum": [
          "BUILDING",
          "READY",
          "FAILED",
          "NOT_BUILT"
        ],
        "type": "string"
      }
    },
    "required": [
      "status"
    ],
    "type": "object"
  },
  "LexBotAliasEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LexBotAlias"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LexBotEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LexBot"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LexIntent": {
    "properties": {
      "description": {
        "description": "A description of the intent",
        "type": "string"
      },
      "name": {
        "description": "The intent name",
        "type": "string"
      },
      "slots": {
        "additionalProperties": {
          "$ref": "#/definitions/LexSlot"
        },
        "description": "An object mapping slot names to Slot objects",
        "type": "object"
      },
      "version": {
        "description": "The intent version",
        "type": "string"
      }
    },
    "required": [
      "name",
      "slots",
      "version"
    ],
    "type": "object"
  },
  "LexSlot": {
    "properties": {
      "description": {
        "description": "The slot description",
        "type": "string"
      },
      "name": {
        "description": "The slot name",
        "type": "string"
      },
      "priority": {
        "description": "The priority of the slot",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "The slot type",
        "type": "string"
      }
    },
    "required": [
      "name",
      "type"
    ],
    "type": "object"
  },
  "LexV2Bot": {
    "properties": {
      "botId": {
        "description": "Lex V2 bot Id",
        "type": "string"
      },
      "description": {
        "description": "A description of the Lex V2 bot",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "region": {
        "description": "A region of the Lex V2 bot",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "botId",
      "region"
    ],
    "type": "object"
  },
  "LexV2BotAlias": {
    "properties": {
      "aliasId": {
        "description": "The Lex V2 bot alias Id",
        "type": "string"
      },
      "bot": {
        "$ref": "#/definitions/LexV2Bot",
        "description": "The Lex V2 bot this is an alias for"
      },
      "botVersion": {
        "description": "The version of the Lex V2 bot this alias points at",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intents": {
        "description": "An array of Intents associated with this bot alias",
        "items": {
          "$ref": "#/definitions/LexV2Intent"
        },
        "type": "array"
      },
      "language": {
        "description": "The target language of the Lex V2 bot",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "region": {
        "description": "The Lex V2 bot region",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Lex V2 bot alias",
        "enum": [
          "Creating",
          "Available",
          "Deleting",
          "Failed"
        ],
        "type": "string"
      }
    },
    "required": [
      "aliasId",
      "region"
    ],
    "type": "object"
  },
  "LexV2BotAliasEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LexV2BotAlias"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LexV2BotEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LexV2Bot"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LexV2Intent": {
    "properties": {
      "description": {
        "description": "A description of the intent",
        "type": "string"
      },
      "intentId": {
        "description": "The intent id",
        "type": "string"
      },
      "intentName": {
        "description": "The intent name",
        "type": "string"
      },
      "slots": {
        "additionalProperties": {
          "$ref": "#/definitions/LexV2Slot"
        },
        "description": "An object mapping slot names to Slot objects",
        "type": "object"
      }
    },
    "required": [
      "intentId",
      "intentName",
      "slots"
    ],
    "type": "object"
  },
  "LexV2Slot": {
    "properties": {
      "description": {
        "description": "The slot description",
        "type": "string"
      },
      "slotId": {
        "description": "The slot id",
        "type": "string"
      },
      "slotName": {
        "description": "The slot name",
        "type": "string"
      },
      "slotTypeId": {
        "description": "The slot type id",
        "type": "string"
      },
      "type": {
        "description": "The slot type",
        "type": "string"
      }
    },
    "required": [
      "slotId",
      "slotName",
      "slotTypeId",
      "type"
    ],
    "type": "object"
  },
  "Library": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/User",
        "description": "User that created the library.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date and time the response was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The library name.",
        "type": "string"
      },
      "responseType": {
        "description": "This value is deprecated. Responses representing message templates may be added to any library.",
        "enum": [
          "MessagingTemplate",
          "CampaignSmsTemplate",
          "CampaignEmailTemplate",
          "Footer"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Current version for this resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "LibraryBatchRequest": {
    "properties": {
      "libraryIds": {
        "description": "List of Library IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "libraryIds"
    ],
    "type": "object"
  },
  "LibraryEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Library"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LicenseAssignmentRequest": {
    "properties": {
      "licenseId": {
        "description": "The id of the license to assign/unassign.",
        "type": "string"
      },
      "userIdsAdd": {
        "description": "The ids of users to assign this license to.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "userIdsRemove": {
        "description": "The ids of users to unassign this license from.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "licenseId",
      "userIdsAdd",
      "userIdsRemove"
    ],
    "type": "object"
  },
  "LicenseBatchAssignmentRequest": {
    "properties": {
      "assignments": {
        "description": "The list of license assignment updates to make.",
        "items": {
          "$ref": "#/definitions/LicenseAssignmentRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "assignments"
    ],
    "type": "object"
  },
  "LicenseDefinition": {
    "properties": {
      "comprises": {
        "items": {
          "$ref": "#/definitions/LicenseDefinition"
        },
        "type": "array",
        "uniqueItems": true
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "permissions": {
        "$ref": "#/definitions/Permissions"
      },
      "prerequisites": {
        "items": {
          "$ref": "#/definitions/AddressableLicenseDefinition"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "LicenseOrgToggle": {
    "properties": {
      "enabled": {
        "type": "boolean"
      },
      "featureName": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LicenseUpdateStatus": {
    "properties": {
      "licenseId": {
        "type": "string"
      },
      "result": {
        "type": "string"
      },
      "userId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LicenseUser": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "licenses": {
        "items": {
          "$ref": "#/definitions/LicenseDefinition"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Limit": {
    "properties": {
      "key": {
        "type": "string"
      },
      "namespace": {
        "enum": [
          "agent.assistant",
          "analytics.alerting",
          "analytics",
          "analytics.realtime",
          "analytics.reporting.settings",
          "architect",
          "audiohook",
          "audit",
          "auth.api",
          "authorization",
          "automation.testing",
          "bots",
          "bots.voice",
          "callback",
          "cobrowse",
          "content.management",
          "conversation",
          "dataactions",
          "datatables",
          "directory",
          "email",
          "employee.engagement",
          "event.orchestration",
          "external.contacts",
          "gcv",
          "gdpr",
          "groups",
          "historical.adherence",
          "infrastructureascode",
          "integrations",
          "intent.miner",
          "internal.messaging",
          "journey",
          "knowledge",
          "language.understanding",
          "learning",
          "limit.registry",
          "marketplace",
          "media.communications",
          "messaging",
          "notifications",
          "onboarding",
          "outbound",
          "platform.api",
          "predictive.routing",
          "presence",
          "quality",
          "recording",
          "response.management",
          "routing",
          "scim",
          "search",
          "secondary.automation.testing",
          "skills",
          "social.media",
          "speech.and.text.analytics",
          "speech.integration",
          "supportability",
          "task.management",
          "telephony.configuration",
          "usage",
          "users",
          "web.deployments",
          "web.messaging",
          "webchat",
          "webhooks",
          "workforce.management.forecast",
          "workforce.management",
          "system"
        ],
        "type": "string"
      },
      "value": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LimitChangeRequestDetails": {
    "properties": {
      "approvalNamespaces": {
        "description": "The approval breakdown for this override request.",
        "items": {
          "$ref": "#/definitions/ApprovalNamespace"
        },
        "readOnly": true,
        "type": "array"
      },
      "currentValue": {
        "description": "Current limit value for a given key",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "dateCompleted": {
        "description": "The date of the limit change request completion (ChangeImplemented, Rejected, or RollbackImplemented. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date of the limit change request creation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Description of the need for the limit change request",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "key": {
        "description": "Limit key to be overridden (see https://developer.mypurecloud.com/api/rest/v2/organization/limits.html#available_limits)",
        "type": "string"
      },
      "namespace": {
        "description": "Namespace the key belongs to (see https://developer.mypurecloud.com/api/rest/v2/organization/limits.html#available_limits)",
        "enum": [
          "agent.assistant",
          "analytics.alerting",
          "analytics",
          "analytics.realtime",
          "analytics.reporting.settings",
          "architect",
          "audiohook",
          "audit",
          "auth.api",
          "authorization",
          "automation.testing",
          "bots",
          "bots.voice",
          "callback",
          "cobrowse",
          "content.management",
          "conversation",
          "dataactions",
          "datatables",
          "directory",
          "email",
          "employee.engagement",
          "event.orchestration",
          "external.contacts",
          "gcv",
          "gdpr",
          "groups",
          "historical.adherence",
          "infrastructureascode",
          "integrations",
          "intent.miner",
          "internal.messaging",
          "journey",
          "knowledge",
          "language.understanding",
          "learning",
          "limit.registry",
          "marketplace",
          "media.communications",
          "messaging",
          "notifications",
          "onboarding",
          "outbound",
          "platform.api",
          "predictive.routing",
          "presence",
          "quality",
          "recording",
          "response.management",
          "routing",
          "scim",
          "search",
          "secondary.automation.testing",
          "skills",
          "social.media",
          "speech.and.text.analytics",
          "speech.integration",
          "supportability",
          "task.management",
          "telephony.configuration",
          "usage",
          "users",
          "web.deployments",
          "web.messaging",
          "webchat",
          "webhooks",
          "workforce.management.forecast",
          "workforce.management",
          "system"
        ],
        "type": "string"
      },
      "rejectReason": {
        "description": "The reason for rejecting the limit override request",
        "enum": [
          "AlternativeExists",
          "IncreaseNotRequired",
          "PlatformMisuse",
          "PlatformStability",
          "OtherReason"
        ],
        "readOnly": true,
        "type": "string"
      },
      "requestedValue": {
        "description": "Requested limit value for a given key",
        "format": "double",
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Current status of the limit change request",
        "enum": [
          "Approved",
          "Rejected",
          "Rollback",
          "Pending",
          "Open",
          "SecondaryApprovalNamespacesAdded",
          "ReviewerApproved",
          "ReviewerRejected",
          "ReviewerRollback",
          "ImplementingChange",
          "ChangeImplemented",
          "ImplementingRollback",
          "RollbackImplemented"
        ],
        "readOnly": true,
        "type": "string"
      },
      "statusHistory": {
        "description": "List of statuses that a limit change request has gone through",
        "items": {
          "$ref": "#/definitions/StatusChange"
        },
        "readOnly": true,
        "type": "array"
      },
      "supportCaseUrl": {
        "description": "The support case url created by Care",
        "type": "string"
      }
    },
    "required": [
      "description",
      "key",
      "namespace",
      "requestedValue",
      "supportCaseUrl"
    ],
    "type": "object"
  },
  "LimitChangeRequestsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LimitChangeRequestDetails"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LimitCount": {
    "properties": {
      "entityId": {
        "description": "The entity which makes this count unique. The context of what the entity is would be dependant on the limit. May not be applicable for all limits.",
        "type": "string"
      },
      "estimatedCount": {
        "description": "The total used count of the limit.",
        "format": "int64",
        "type": "integer"
      },
      "max": {
        "description": "The maximum value of the limit.",
        "format": "int64",
        "type": "integer"
      },
      "name": {
        "description": "The name of the limit.",
        "type": "string"
      },
      "userId": {
        "description": "The user which makes this count unique. May not be applicable for all limits.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LimitCountListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LimitCount"
        },
        "type": "array"
      },
      "nextUri": {
        "description": "A URI to the next page in the listing.",
        "type": "string"
      },
      "selfUri": {
        "description": "A URI to the current page in the listing.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LimitDocs": {
    "properties": {
      "configurable": {
        "type": "boolean"
      },
      "defaultValue": {
        "format": "int64",
        "type": "integer"
      },
      "description": {
        "type": "string"
      },
      "key": {
        "type": "string"
      },
      "resource": {
        "type": "string"
      },
      "trackable": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "LimitDocumentation": {
    "properties": {
      "namespaces": {
        "items": {
          "$ref": "#/definitions/NamespaceDocs"
        },
        "type": "array"
      },
      "url": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LimitsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Limit"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Line": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "defaultForUser": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edgeGroup": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The edge group associated with the line. (Deprecated)"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lineBaseSettings": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "loggedInUser": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "primaryEdge": {
        "$ref": "#/definitions/Edge",
        "description": "The primary edge associated to the line. (Deprecated)"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "secondaryEdge": {
        "$ref": "#/definitions/Edge",
        "description": "The secondary edge associated to the line. (Deprecated)"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "template": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "LineBase": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lineMetaBase": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "LineBaseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LineBase"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LineEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Line"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LineId": {
    "description": "User information for a Line account",
    "properties": {
      "displayName": {
        "description": "The displayName of this person's account in Line",
        "type": "string"
      },
      "ids": {
        "description": "The set of Line userIds that this person has. Each userId is specific to the Line channel that the user interacts with.",
        "items": {
          "$ref": "#/definitions/LineUserId"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "LineStatus": {
    "properties": {
      "addressOfRecord": {
        "description": "The line's address of record.",
        "type": "string"
      },
      "contactAddresses": {
        "description": "The addresses used to contact the line.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The id of this line",
        "type": "string"
      },
      "reachable": {
        "description": "Indicates whether the edge can reach the line.",
        "type": "boolean"
      },
      "reachableStateTime": {
        "description": "The time the line entered its current reachable state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LineUserId": {
    "description": "Channel-specific User ID for Line accounts",
    "properties": {
      "userId": {
        "description": "The unique channel-specific userId for the user",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LinkConfiguration": {
    "properties": {
      "uriTemplate": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ListAlternativeShiftTradesResponse": {
    "properties": {
      "job": {
        "$ref": "#/definitions/AlternativeShiftJobResponse",
        "description": "The asynchronous job handling the request. Null if result returns synchronously"
      },
      "result": {
        "$ref": "#/definitions/AlternativeShiftTradeListing",
        "description": "The result of the request. May come via notification. Null if job is populated"
      }
    },
    "type": "object"
  },
  "ListItemComponent": {
    "description": "An entry in a List template.",
    "properties": {
      "actions": {
        "$ref": "#/definitions/ContentActions",
        "description": "The list item actions (Deprecated)."
      },
      "description": {
        "description": "Text to show in the list item description.",
        "type": "string"
      },
      "id": {
        "description": "An ID assigned to this list item.",
        "type": "string"
      },
      "image": {
        "description": "URL of an image.",
        "type": "string"
      },
      "rmid": {
        "description": "An ID of the rich message instance.",
        "type": "string"
      },
      "title": {
        "description": "The main headline of the list item.",
        "type": "string"
      },
      "type": {
        "description": "The type of list item to render.",
        "enum": [
          "ListItem",
          "ListItemBig"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ListWrapperAgentWorkPlanField": {
    "properties": {
      "values": {
        "items": {
          "enum": [
            "Name",
            "PaidHours"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperAlternativeShiftBuSettingsActivityCategory": {
    "properties": {
      "values": {
        "items": {
          "enum": [
            "Break",
            "Meal",
            "Meeting",
            "OffQueueWork",
            "TimeOff",
            "Training",
            "Unavailable"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperAlternativeShiftBuSettingsGranularity": {
    "properties": {
      "values": {
        "items": {
          "enum": [
            "Daily"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperBidGroupWorkPlanRequest": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/BidGroupWorkPlanRequest"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperFixedAvailability": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/FixedAvailability"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperInterval": {
    "properties": {
      "values": {
        "description": "Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "items": {
          "description": "Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperSecondaryPresence": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/SecondaryPresence"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperShiftStartVariance": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/ShiftStartVariance"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListWrapperString": {
    "properties": {
      "values": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ListedDictionaryFeedback": {
    "properties": {
      "boostValue": {
        "description": "A weighted value assigned to a phrase. The higher the value, the higher the likelihood that the system will choose the word or phrase from the possible alternatives. Boost range is from 1.0 to 10.0. Default is 2.0",
        "format": "float",
        "type": "number"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The Id of the user who created the dictionary feedback",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The Timestamp when dictionary feedback created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The Timestamp when dictionary feedback modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dialect": {
        "description": "The dialect for the given term, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard",
        "example": "en-US",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The Id of the user who modified the dictionary feedback",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "The source of the given dictionary feedback",
        "enum": [
          "Manual"
        ],
        "readOnly": true,
        "type": "string"
      },
      "term": {
        "description": "The dictionary term which needs to be added to dictionary feedback system",
        "type": "string"
      }
    },
    "required": [
      "dialect",
      "term"
    ],
    "type": "object"
  },
  "ListedProgram": {
    "properties": {
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "name": {
        "type": "string"
      },
      "published": {
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "topicsCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ListedTopic": {
    "properties": {
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "dialect": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "name": {
        "type": "string"
      },
      "participants": {
        "enum": [
          "External",
          "Internal",
          "All"
        ],
        "type": "string"
      },
      "phrasesCount": {
        "format": "int32",
        "type": "integer"
      },
      "programsCount": {
        "format": "int32",
        "type": "integer"
      },
      "published": {
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "strictness": {
        "enum": [
          "1",
          "55",
          "65",
          "72",
          "85",
          "90"
        ],
        "type": "string"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LocalDateRange": {
    "properties": {
      "endDate": {
        "description": "The inclusive end of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "startDate": {
        "description": "The inclusive start of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocalEncryptionConfiguration": {
    "properties": {
      "apiId": {
        "description": "The api id for Hawk Authentication.",
        "type": "string"
      },
      "apiKey": {
        "description": "The api shared symmetric key used for hawk authentication",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "The url for decryption. This must specify the path to where Purecloud can requests decryption",
        "type": "string"
      }
    },
    "required": [
      "apiId",
      "apiKey",
      "url"
    ],
    "type": "object"
  },
  "LocalEncryptionKeyRequest": {
    "properties": {
      "configId": {
        "description": "The local configuration id that contains metadata on private local service",
        "type": "string"
      },
      "keypairId": {
        "description": "The key pair id from the local service.",
        "type": "string"
      },
      "publicKey": {
        "description": "Base 64 encoded public key, generated by the local service.",
        "type": "string"
      }
    },
    "required": [
      "configId",
      "keypairId",
      "publicKey"
    ],
    "type": "object"
  },
  "LocaleFlowVersionInfo": {
    "properties": {
      "nluVersion": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "NLU Version Info for this flow version."
      }
    },
    "type": "object"
  },
  "LocaleHealth": {
    "properties": {
      "issueCount": {
        "description": "Number of issues found in the intent.",
        "format": "int64",
        "type": "integer"
      },
      "overallScore": {
        "description": "Overall health score for the intent.",
        "format": "float",
        "type": "number"
      },
      "staticValidationResults": {
        "description": "Validation results for the intent.",
        "items": {
          "enum": [
            "TooFewUtterances",
            "TooManyUtterances",
            "UtteranceTooShort",
            "UtteranceTooLong"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "LocaleInfo": {
    "properties": {
      "errorInfo": {
        "$ref": "#/definitions/FlowHealthErrorInfo",
        "description": "Error details for the flow version, if any."
      },
      "flowVersionInfo": {
        "$ref": "#/definitions/LocaleFlowVersionInfo",
        "description": "Info about given flow version."
      },
      "status": {
        "description": "Status of health computation for this flow version.",
        "enum": [
          "InProgress",
          "Completed",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocalizedLabels": {
    "description": "Contains localized labels used in messenger apps",
    "properties": {
      "key": {
        "description": "Contains localized label key used in messenger homescreen",
        "enum": [
          "MessengerHomeHeaderTitle",
          "MessengerHomeHeaderSubTitle"
        ],
        "type": "string"
      },
      "value": {
        "description": "Contains localized label value used in messenger homescreen",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Location": {
    "properties": {
      "coordinates": {
        "additionalProperties": {
          "format": "double",
          "type": "number"
        },
        "description": "Users coordinates on the floorplan. Only used when floorplanImage is set",
        "type": "object"
      },
      "floorplanId": {
        "description": "Unique identifier for the location floorplan image",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "Unique identifier for the location",
        "type": "string"
      },
      "locationDefinition": {
        "$ref": "#/definitions/LocationDefinition"
      },
      "notes": {
        "description": "Optional description on the users location",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocationAddress": {
    "properties": {
      "city": {
        "type": "string"
      },
      "country": {
        "type": "string"
      },
      "countryName": {
        "type": "string"
      },
      "state": {
        "type": "string"
      },
      "street1": {
        "type": "string"
      },
      "street2": {
        "type": "string"
      },
      "zipcode": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocationAddressVerificationDetails": {
    "properties": {
      "dateFinished": {
        "description": "Finished time of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStarted": {
        "description": "Time started of address verification process. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "service": {
        "description": "Third party service used for address verification",
        "example": "smartystreets-us",
        "type": "string"
      },
      "status": {
        "description": "Status of address verification process",
        "enum": [
          "Pending",
          "InProgress",
          "Retry",
          "Complete",
          "Failed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocationCreateDefinition": {
    "properties": {
      "address": {
        "$ref": "#/definitions/LocationAddress",
        "description": "Address of the location"
      },
      "contactUser": {
        "description": "The user id of the location contact",
        "type": "string"
      },
      "emergencyNumber": {
        "$ref": "#/definitions/LocationEmergencyNumber",
        "description": "Emergency number for the location"
      },
      "name": {
        "description": "The name of the Location. Required for creates, not required for updates",
        "type": "string"
      },
      "notes": {
        "description": "Notes for the location",
        "type": "string"
      },
      "path": {
        "description": "A list of ancestor ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "state": {
        "description": "Current activity status of the location.",
        "enum": [
          "active",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version of the location",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "LocationDefinition": {
    "properties": {
      "address": {
        "$ref": "#/definitions/LocationAddress"
      },
      "addressStored": {
        "description": "Boolean field which states if the address has been stored for E911",
        "readOnly": true,
        "type": "boolean"
      },
      "addressVerificationDetails": {
        "$ref": "#/definitions/LocationAddressVerificationDetails",
        "description": "Address verification information, retrieve dwith the ?expand=addressVerificationDetails query parameter",
        "readOnly": true
      },
      "addressVerified": {
        "description": "Boolean field which states if the address has been verified as an actual address",
        "readOnly": true,
        "type": "boolean"
      },
      "contactUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Site contact for the location entity"
      },
      "emergencyNumber": {
        "$ref": "#/definitions/LocationEmergencyNumber",
        "description": "Emergency number for the location entity"
      },
      "floorplanImage": {
        "description": "Floorplan images of the location entity, retrieved with ?expand=images query parameter",
        "items": {
          "$ref": "#/definitions/LocationImage"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "notes": {
        "description": "Notes for the location entity",
        "type": "string"
      },
      "path": {
        "description": "A list of ancestor IDs in order",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "profileImage": {
        "description": "Profile image of the location entity, retrieved with ?expand=images query parameter",
        "items": {
          "$ref": "#/definitions/LocationImage"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Current state of the location entity",
        "enum": [
          "active",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version of the location entity, value to be supplied should be retrieved by a GET or on create/update response",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LocationEmergencyNumber": {
    "properties": {
      "e164": {
        "type": "string"
      },
      "number": {
        "type": "string"
      },
      "type": {
        "description": "The type of emergency number.",
        "enum": [
          "default",
          "elin"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LocationDefinition"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LocationImage": {
    "properties": {
      "imageUri": {
        "type": "string"
      },
      "resolution": {
        "description": "Height and/or width of image. ex: 640x480 or x128",
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocationSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "id",
            "name",
            "notes",
            "addressFields.city",
            "addressFields.country",
            "addressFields.state",
            "addressFields.street1",
            "addressFields.street2",
            "addressFields.zipcode",
            "addressVerified",
            "emergencyNumber"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/LocationSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "STARTS_WITH",
          "CONTAINS",
          "REGEX",
          "TERM",
          "TERMS",
          "REQUIRED_FIELDS",
          "MATCH_ALL"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "LocationSearchRequest": {
    "properties": {
      "expand": {
        "description": "Provides more details about a specified resource",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/LocationSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "LocationUpdateDefinition": {
    "properties": {
      "address": {
        "$ref": "#/definitions/LocationAddress",
        "description": "Address of the location"
      },
      "contactUser": {
        "description": "The user id of the location contact",
        "type": "string"
      },
      "emergencyNumber": {
        "$ref": "#/definitions/LocationEmergencyNumber",
        "description": "Emergency number for the location"
      },
      "name": {
        "description": "The name of the Location. Required for creates, not required for updates",
        "type": "string"
      },
      "notes": {
        "description": "Notes for the location",
        "type": "string"
      },
      "path": {
        "description": "A list of ancestor ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "state": {
        "description": "Current activity status of the location.",
        "enum": [
          "active",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version of the location",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "version"
    ],
    "type": "object"
  },
  "LocationsSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/LocationDefinition"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "LockInfo": {
    "properties": {
      "action": {
        "enum": [
          "UPDATE",
          "DELETE",
          "COPY",
          "MOVE",
          "REPLACE",
          "THUMBNAIL",
          "TEXT_EXTRACTION"
        ],
        "type": "string"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateExpires": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "lockedBy": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "LogCaptureDownloadExecutionResponse": {
    "properties": {
      "dateStart": {
        "description": "Start date of file download execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "fileUrl": {
        "description": "Url of a file with query result.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "Id of file download job.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Execution state of the download.",
        "enum": [
          "Running",
          "Failed",
          "Succeeded"
        ],
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Details of the user that created the job",
        "readOnly": true
      }
    },
    "required": [
      "dateStart",
      "fileUrl",
      "id",
      "state",
      "user"
    ],
    "type": "object"
  },
  "LogCaptureQueryRequest": {
    "properties": {
      "interval": {
        "description": "Date and time range to query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "sortOrder": {
        "description": "Order of results. Default order is ASC.",
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string"
      },
      "userId": {
        "description": "Id of the user to query.",
        "type": "string"
      }
    },
    "required": [
      "interval",
      "userId"
    ],
    "type": "object"
  },
  "LogCaptureQueryResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/LogEntry"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "LogCaptureUserConfiguration": {
    "properties": {
      "dateExpired": {
        "description": "Indicates when log capture will be turned off for the user. (Must be within 24 hours). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "dateExpired"
    ],
    "type": "object"
  },
  "LogEntry": {
    "properties": {
      "level": {
        "description": "Level of log entry",
        "type": "string"
      },
      "message": {
        "description": "Log message",
        "type": "string"
      },
      "timestamp": {
        "description": "Timestamp of log entry",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LogicalInterfaceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainLogicalInterface"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LongTermForecastPlanningGroupData": {
    "properties": {
      "averageHandleTimeSecondsPerDay": {
        "description": "Forecast average handle time per day in seconds",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "offeredPerDay": {
        "description": "Forecast offered counts per day for this planning group",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "planningGroupId": {
        "description": "The ID of the planning group to which this data applies. Note this is a snapshot of the planning group at the time of forecast creation and may not correspond to the current configuration",
        "type": "string"
      }
    },
    "required": [
      "averageHandleTimeSecondsPerDay",
      "offeredPerDay",
      "planningGroupId"
    ],
    "type": "object"
  },
  "LongTermForecastResult": {
    "properties": {
      "planningGroups": {
        "description": "The forecast data broken up by planning group",
        "items": {
          "$ref": "#/definitions/LongTermForecastPlanningGroupData"
        },
        "type": "array"
      },
      "referenceStartDate": {
        "description": "The reference start date relative to the business unit time zone in this forecast. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "weekCount": {
        "description": "The number of weeks in this forecast",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "LongTermForecastResultResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The download url to fetch the result.  Only populated if the result is too large to pass through the api directly",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/LongTermForecastResult",
        "description": "The result of the operation.  Populated whenever the result is small enough to pass through the api directly"
      }
    },
    "type": "object"
  },
  "MailFromResult": {
    "properties": {
      "mailFromDomain": {
        "description": "The custom MAIL FROM domain.",
        "type": "string"
      },
      "records": {
        "description": "The list of DNS records that pertain that need to exist for verification.",
        "items": {
          "$ref": "#/definitions/Record"
        },
        "type": "array"
      },
      "status": {
        "description": "The verification status.",
        "enum": [
          "FAILED",
          "PENDING",
          "VERIFIED",
          "UNKNOWN"
        ],
        "type": "string"
      }
    },
    "required": [
      "mailFromDomain"
    ],
    "type": "object"
  },
  "ManagementUnit": {
    "properties": {
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The business unit to which this management unit belongs"
      },
      "dateModified": {
        "description": "The date and time at which this entity was last modified.  Deprecated, use field from settings.metadata instead. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version info metadata for this management unit. Deprecated, use settings.metadata"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who last modified this entity.  Deprecated, use field from settings.metadata instead",
        "readOnly": true
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/ManagementUnitSettingsResponse",
        "description": "The configuration settings for this management unit"
      },
      "startDayOfWeek": {
        "description": "Start day of week for scheduling and forecasting purposes. Moving to Business Unit",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for the management unit in standard Olson format.  Moving to Business Unit",
        "type": "string"
      },
      "version": {
        "description": "The version of the underlying entity.  Deprecated, use field from settings.metadata instead",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ManagementUnitListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ManagementUnit"
        },
        "type": "array"
      },
      "firstUri": {
        "description": "Deprecated, paging is not supported",
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "description": "Deprecated, paging is not supported",
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "description": "Deprecated, paging is not supported",
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "description": "Deprecated, paging is not supported",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "Deprecated, paging is not supported",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "Deprecated, paging is not supported",
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "description": "Deprecated, paging is not supported",
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "description": "Deprecated, paging is not supported",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ManagementUnitReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ManagementUnitSettingsRequest": {
    "properties": {
      "adherence": {
        "$ref": "#/definitions/AdherenceSettings",
        "description": "Adherence settings for this management unit"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version info metadata for the associated management unit"
      },
      "scheduling": {
        "$ref": "#/definitions/SchedulingSettingsRequest",
        "description": "Scheduling settings for this management unit"
      },
      "shiftTrading": {
        "$ref": "#/definitions/ShiftTradeSettings",
        "description": "Shift trade settings for this management unit"
      },
      "shortTermForecasting": {
        "$ref": "#/definitions/ShortTermForecastingSettings",
        "description": "Short term forecasting settings for this management unit.  Moving to Business Unit"
      },
      "timeOff": {
        "$ref": "#/definitions/TimeOffRequestSettings",
        "description": "Time off request settings for this management unit"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "ManagementUnitSettingsResponse": {
    "properties": {
      "adherence": {
        "$ref": "#/definitions/AdherenceSettings",
        "description": "Adherence settings for this management unit"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version info metadata for the associated management unit"
      },
      "scheduling": {
        "$ref": "#/definitions/SchedulingSettingsResponse",
        "description": "Scheduling settings for this management unit. These settings are only available if you have the permission wfm:managementUnit:view"
      },
      "shiftTrading": {
        "$ref": "#/definitions/ShiftTradeSettings",
        "description": "Shift trade settings for this management unit"
      },
      "shortTermForecasting": {
        "$ref": "#/definitions/ShortTermForecastingSettings",
        "description": "Short term forecasting settings for this management unit"
      },
      "timeOff": {
        "$ref": "#/definitions/TimeOffRequestSettings",
        "description": "Time off request settings for this management unit"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "Manager": {
    "description": "Defines a SCIM manager.",
    "properties": {
      "$ref": {
        "description": "The reference URI of the manager's user record.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "The ID of the manager.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MarkContactAddressUncontactableActionSettings": {
    "type": "object"
  },
  "MarkContactUncontactableActionSettings": {
    "properties": {
      "mediaTypes": {
        "description": "A list of media types to evaluate.",
        "items": {
          "enum": [
            "Voice",
            "Email",
            "Sms"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "mediaTypes"
    ],
    "type": "object"
  },
  "Markdown": {
    "properties": {
      "enabled": {
        "description": "whether or not markdown is enabled",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "MatchCriteria": {
    "description": "Defines a simple matching condition",
    "properties": {
      "jsonPath": {
        "description": "The Goessner json path of the field to match",
        "type": "string"
      },
      "operator": {
        "description": "The type of operation to perform for matching check",
        "enum": [
          "GreaterThanOrEqual",
          "LessThanOrEqual",
          "Equal",
          "NotEqual",
          "LessThan",
          "GreaterThan",
          "NotIn",
          "In",
          "Contains",
          "All",
          "Exists",
          "Size"
        ],
        "type": "string"
      },
      "value": {
        "$ref": "#/definitions/JsonNode",
        "description": "The value to match on. Only one of value and values can be included"
      },
      "values": {
        "description": "The list of values to match on. Only one of value and values can be included",
        "items": {
          "$ref": "#/definitions/JsonNode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MatchCriteriaTestResult": {
    "description": "Results of a matching expression",
    "properties": {
      "generatedJsonPathCondition": {
        "description": "The generated json path condition",
        "type": "string"
      },
      "jsonPath": {
        "description": "The Goessner json path of the field to match",
        "type": "string"
      },
      "jsonPathExtraction": {
        "description": "The json paths and their values that were compared",
        "items": {
          "$ref": "#/definitions/MatchTestResult"
        },
        "type": "array"
      },
      "match": {
        "description": "Did the generated json path condition match",
        "type": "boolean"
      },
      "operator": {
        "description": "The type of operation to perform for matching check",
        "enum": [
          "GreaterThanOrEqual",
          "LessThanOrEqual",
          "Equal",
          "NotEqual",
          "LessThan",
          "GreaterThan",
          "NotIn",
          "In",
          "Contains",
          "All",
          "Exists",
          "Size"
        ],
        "type": "string"
      },
      "value": {
        "$ref": "#/definitions/JsonNode",
        "description": "The value to match on. Only one of value and values can be included"
      },
      "values": {
        "description": "The list of values to match on. Only one of value and values can be included",
        "items": {
          "$ref": "#/definitions/JsonNode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MatchShiftTradeRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the shift trade"
      },
      "receivingScheduleId": {
        "description": "The ID of the schedule with which the shift trade is associated",
        "type": "string"
      },
      "receivingShiftId": {
        "description": "The ID of the shift the receiving user is giving up in trade, if applicable",
        "type": "string"
      }
    },
    "required": [
      "metadata",
      "receivingScheduleId"
    ],
    "type": "object"
  },
  "MatchShiftTradeResponse": {
    "properties": {
      "adminReviewViolations": {
        "description": "Constraint violations for this shift trade which require shift trade administrator review",
        "items": {
          "$ref": "#/definitions/ShiftTradeMatchViolation"
        },
        "type": "array"
      },
      "trade": {
        "$ref": "#/definitions/ShiftTradeResponse",
        "description": "The associated shift trade"
      },
      "violations": {
        "description": "Constraint violations which disallow this shift trade",
        "items": {
          "$ref": "#/definitions/ShiftTradeMatchViolation"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MatchTestResult": {
    "description": "Information about the results being matched by the expressions",
    "properties": {
      "path": {
        "description": "The json path to the json node being matched on. ex: $['things'][1]",
        "type": "string"
      },
      "value": {
        "$ref": "#/definitions/JsonNode",
        "description": "The value of the field being matched"
      }
    },
    "type": "object"
  },
  "MaxLength": {
    "properties": {
      "max": {
        "description": "A non-negative integer for a text-based schema field denoting the maximum largest string the field can contain for a schema instance.",
        "format": "int64",
        "type": "integer"
      },
      "min": {
        "description": "A non-negative integer for a text-based schema field denoting the minimum largest length string the field can contain for a schema instance.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "max",
      "min"
    ],
    "type": "object"
  },
  "MaxParticipants": {
    "properties": {
      "maxParticipants": {
        "description": "The maximum number of participants that are allowed on a conversation.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MediaParticipantRequest": {
    "properties": {
      "confined": {
        "description": "True to confine this conversation participant.  Should only be used for ad-hoc conferences",
        "type": "boolean"
      },
      "held": {
        "description": "True to hold this conversation participant.",
        "type": "boolean"
      },
      "muted": {
        "description": "True to mute this conversation participant.",
        "type": "boolean"
      },
      "recording": {
        "description": "True to enable recording of this participant, otherwise false to disable recording.",
        "type": "boolean"
      },
      "state": {
        "description": "The state to update to set for this participant's communications.  Possible values are: 'connected' and 'disconnected'.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/WrapupInput",
        "description": "Wrap-up to assign to this participant."
      },
      "wrapupSkipped": {
        "description": "True to skip wrap-up for this participant.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "MediaPolicies": {
    "properties": {
      "callPolicy": {
        "$ref": "#/definitions/CallMediaPolicy",
        "description": "Conditions and actions for calls"
      },
      "chatPolicy": {
        "$ref": "#/definitions/ChatMediaPolicy",
        "description": "Conditions and actions for chats"
      },
      "emailPolicy": {
        "$ref": "#/definitions/EmailMediaPolicy",
        "description": "Conditions and actions for emails"
      },
      "messagePolicy": {
        "$ref": "#/definitions/MessageMediaPolicy",
        "description": "Conditions and actions for messages"
      }
    },
    "type": "object"
  },
  "MediaRegions": {
    "properties": {
      "awsCoreRegions": {
        "description": "The list of AWS regions to which Genesys Cloud is deployed with full functionality including media streaming.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "awsHomeRegion": {
        "description": "The AWS region your organization is in.",
        "readOnly": true,
        "type": "string"
      },
      "awsSatelliteRegions": {
        "description": "The list of AWS regions that Genesys Cloud uses only for media streaming.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "MediaResult": {
    "properties": {
      "mediaUri": {
        "type": "string"
      },
      "waveformData": {
        "items": {
          "format": "float",
          "type": "number"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MediaSettings": {
    "properties": {
      "alertingTimeoutSeconds": {
        "description": "The alerting timeout for the media type, in seconds",
        "format": "int32",
        "type": "integer"
      },
      "autoAnswerAlertToneSeconds": {
        "description": "How long to play the alerting tone for an auto-answer interaction",
        "format": "double",
        "type": "number"
      },
      "enableAutoAnswer": {
        "description": "Indicates if auto-answer is enabled for the given media type or subtype (default is false).  Subtype settings take precedence over media type settings.",
        "type": "boolean"
      },
      "manualAnswerAlertToneSeconds": {
        "description": "How long to play the alerting tone for a manual-answer interaction",
        "format": "double",
        "type": "number"
      },
      "serviceLevel": {
        "$ref": "#/definitions/ServiceLevel",
        "description": "The targeted service level for the media type"
      },
      "subTypeSettings": {
        "additionalProperties": {
          "$ref": "#/definitions/BaseMediaSettings"
        },
        "description": "Map of media subtype to media subtype specific settings.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "MediaSummary": {
    "properties": {
      "contactCenter": {
        "$ref": "#/definitions/MediaSummaryDetail"
      },
      "enterprise": {
        "$ref": "#/definitions/MediaSummaryDetail"
      }
    },
    "type": "object"
  },
  "MediaSummaryDetail": {
    "properties": {
      "active": {
        "format": "int32",
        "type": "integer"
      },
      "acw": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MediaTranscription": {
    "properties": {
      "displayName": {
        "type": "string"
      },
      "integrationId": {
        "type": "string"
      },
      "transcriptionProvider": {
        "enum": [
          "VOCI",
          "CALLJOURNEY"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "MediaType": {
    "description": "Media type definition",
    "properties": {
      "type": {
        "description": "The media type string as defined by RFC 2046. You can define specific types such as 'image/jpeg', 'video/mpeg', or specify wild cards for a range of types, 'image/*', or all types '*/*'. See https://www.iana.org/assignments/media-types/media-types.xhtml for a list of registered media types.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MediaTypeAccess": {
    "description": "Media type access definitions",
    "properties": {
      "inbound": {
        "description": "List of media types allowed for inbound messages from customers. If inbound messages from a customer contain media that is not in this list, the media will be dropped from the outbound message.",
        "items": {
          "$ref": "#/definitions/MediaType"
        },
        "type": "array"
      },
      "outbound": {
        "description": "List of media types allowed for outbound messages to customers. If an outbound message is sent that contains media that is not in this list, the message will not be sent.",
        "items": {
          "$ref": "#/definitions/MediaType"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MediaTypes": {
    "description": "Media types",
    "properties": {
      "allow": {
        "$ref": "#/definitions/MediaTypeAccess",
        "description": "Specify allowed media types for inbound and outbound messages. If this field is empty, all inbound and outbound media will be blocked."
      }
    },
    "type": "object"
  },
  "MediaUtilization": {
    "properties": {
      "includeNonAcd": {
        "description": "If true, then track non-ACD conversations against utilization",
        "type": "boolean"
      },
      "interruptableMediaTypes": {
        "description": "Defines the list of other media types that can interrupt a conversation of this media type.  Values include call, chat, email, callback, and message.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "maximumCapacity": {
        "description": "Defines the maximum number of conversations of this type that an agent can handle at one time.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Member": {
    "description": "The associated user reference as a member of a performance profile",
    "properties": {
      "id": {
        "description": "The user's id",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "MemberEntity": {
    "properties": {
      "id": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "MemberGroup": {
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "memberCount": {
        "description": "The number of members in this group",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The group type",
        "enum": [
          "TEAM",
          "GROUP",
          "SKILLGROUP"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "MemberListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Member"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MergeOperation": {
    "properties": {
      "resultingContact": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The contact created as a result of the merge operation",
        "readOnly": true
      },
      "sourceContact": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The source contact for the merge operation",
        "readOnly": true
      },
      "targetContact": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The target contact for the merge operation",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "MergeRequest": {
    "properties": {
      "sourceContactId": {
        "description": "The ID of the source contact for the merge operation",
        "type": "string"
      },
      "targetContactId": {
        "description": "The ID of the target contact for the merge operation",
        "type": "string"
      }
    },
    "required": [
      "sourceContactId",
      "targetContactId"
    ],
    "type": "object"
  },
  "Message": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "agentAssistantId": {
        "description": "UUID of virtual agent assistant that provide suggestions to the agent participant during the conversation.",
        "type": "string"
      },
      "authenticated": {
        "description": "If true, the participant member is authenticated.",
        "type": "boolean"
      },
      "byoSmsIntegrationId": {
        "description": "The internal id representing the customer supplied sms integration message.",
        "type": "string"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the message.",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorBody"
      },
      "fromAddress": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "connected",
          "disconnected"
        ],
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "A subset of the Journey System's data relevant to a part of a conversation (for external linkage and internal usage/context)."
      },
      "messages": {
        "description": "The messages sent on this communication channel.",
        "items": {
          "$ref": "#/definitions/MessageDetails"
        },
        "type": "array"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the message.",
        "type": "string"
      },
      "queueMediaSettings": {
        "$ref": "#/definitions/ConversationQueueMediaSettings",
        "description": "Represents the queue settings for this media type."
      },
      "recipientCountry": {
        "description": "Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format.",
        "type": "string"
      },
      "recipientType": {
        "description": "The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type.",
        "type": "string"
      },
      "recordingId": {
        "description": "A globally unique identifier for the recording associated with this message.",
        "type": "string"
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's message, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the message was placed on hold in the cloud clock if the message is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "connected",
          "disconnected"
        ],
        "type": "string"
      },
      "toAddress": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "type": {
        "description": "Indicates the type of message platform from which the message originated.",
        "enum": [
          "unknown",
          "sms",
          "twitter",
          "facebook",
          "line",
          "whatsapp",
          "telegram",
          "kakao",
          "webmessaging",
          "open",
          "instagram"
        ],
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "MessageContent": {
    "description": "Message content element. If contentType = \"Attachment\" only one item is allowed.",
    "properties": {
      "attachment": {
        "$ref": "#/definitions/ContentAttachment",
        "description": "Attachment content."
      },
      "buttonResponse": {
        "$ref": "#/definitions/ContentButtonResponse",
        "description": "Button response content."
      },
      "card": {
        "$ref": "#/definitions/ContentCard",
        "description": "Card content"
      },
      "carousel": {
        "$ref": "#/definitions/ContentCarousel",
        "description": "Carousel content"
      },
      "contentType": {
        "description": "Type of this content element.",
        "enum": [
          "Attachment",
          "Location",
          "QuickReply",
          "Notification",
          "GenericTemplate",
          "ListTemplate",
          "Postback",
          "Reactions",
          "Mention",
          "ButtonResponse",
          "Story",
          "Card",
          "Carousel",
          "Text",
          "QuickReplyV2"
        ],
        "type": "string"
      },
      "generic": {
        "$ref": "#/definitions/ContentGeneric",
        "description": "Generic content (Deprecated)."
      },
      "list": {
        "$ref": "#/definitions/ContentList",
        "description": "List content (Deprecated)."
      },
      "location": {
        "$ref": "#/definitions/ContentLocation",
        "description": "Location content."
      },
      "mention": {
        "$ref": "#/definitions/MessagingRecipient",
        "description": "Mention content."
      },
      "postback": {
        "$ref": "#/definitions/ContentPostback",
        "description": "Structured message postback (Deprecated)."
      },
      "quickReply": {
        "$ref": "#/definitions/ContentQuickReply",
        "description": "Quick reply content."
      },
      "quickReplyV2": {
        "$ref": "#/definitions/ContentQuickReplyV2",
        "description": "Quick reply V2 content."
      },
      "reactions": {
        "description": "A set of reactions to a message.",
        "items": {
          "$ref": "#/definitions/ContentReaction"
        },
        "type": "array"
      },
      "story": {
        "$ref": "#/definitions/ContentStory",
        "description": "Ephemeral story content."
      },
      "template": {
        "$ref": "#/definitions/ContentNotificationTemplate",
        "description": "Template notification content."
      },
      "text": {
        "$ref": "#/definitions/ContentText",
        "description": "Text content."
      }
    },
    "required": [
      "contentType"
    ],
    "type": "object"
  },
  "MessageConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "otherMediaUris": {
        "description": "The list of other media channels involved in the conversation.",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "participants": {
        "description": "The list of participants involved in the conversation.",
        "items": {
          "$ref": "#/definitions/MessageMediaParticipant"
        },
        "type": "array"
      },
      "recentTransfers": {
        "description": "The list of the most recent 20 transfer commands applied to this conversation.",
        "items": {
          "$ref": "#/definitions/TransferResponse"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageConversationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessageConversation"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessageData": {
    "properties": {
      "conversationId": {
        "description": "The id of the conversation of this message.",
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/User",
        "description": "User who sent this message."
      },
      "direction": {
        "description": "The direction of the message.",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "fromAddress": {
        "description": "The sender of the text message.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "media": {
        "description": "The media details associated to a message. (Deprecated - Instead use normalizedMessage.content[index].attachment)",
        "items": {
          "$ref": "#/definitions/MessageMedia"
        },
        "type": "array"
      },
      "messengerType": {
        "description": "Type of text messenger.",
        "enum": [
          "sms",
          "facebook",
          "twitter",
          "whatsapp",
          "webmessaging",
          "instagram",
          "open"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "normalizedMessage": {
        "$ref": "#/definitions/ConversationNormalizedMessage",
        "description": "The message into normalized format",
        "readOnly": true
      },
      "normalizedReceipts": {
        "description": "The delivery event associated with this message in normalized format, if the message direction was outbound",
        "items": {
          "$ref": "#/definitions/ConversationNormalizedMessage"
        },
        "readOnly": true,
        "type": "array"
      },
      "providerMessageId": {
        "description": "The unique identifier of the message from provider",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the message.",
        "enum": [
          "queued",
          "sent",
          "failed",
          "received",
          "delivery-success",
          "delivery-failed",
          "read",
          "removed",
          "published"
        ],
        "type": "string"
      },
      "stickers": {
        "description": "The sticker details associated to a message. (Deprecated - Instead use normalizedMessage.content[index].attachment",
        "items": {
          "$ref": "#/definitions/MessageSticker"
        },
        "type": "array"
      },
      "textBody": {
        "description": "The body of the text message. (Deprecated - Instead use normalizedMessage.text)",
        "type": "string"
      },
      "timestamp": {
        "description": "The time when the message was received or sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "toAddress": {
        "description": "The recipient of the text message.",
        "type": "string"
      }
    },
    "required": [
      "status",
      "textBody",
      "timestamp"
    ],
    "type": "object"
  },
  "MessageDetails": {
    "properties": {
      "errorInfo": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Provider specific error information for a communication."
      },
      "media": {
        "description": "The media (images, files, etc) associated with this message, if any",
        "items": {
          "$ref": "#/definitions/MessageMedia"
        },
        "type": "array"
      },
      "messageId": {
        "description": "UUID identifying the message media.",
        "type": "string"
      },
      "messageMetadata": {
        "$ref": "#/definitions/ConversationMessageMetadata",
        "description": "Information that describes the content of the message, if any"
      },
      "messageSegmentCount": {
        "description": "The message segment count, greater than 1 if the message content was split into multiple parts for this message type, e.g. SMS character limits.",
        "format": "int32",
        "type": "integer"
      },
      "messageStatus": {
        "description": "Indicates the delivery status of the message.",
        "enum": [
          "queued",
          "sent",
          "failed",
          "received",
          "delivery-success",
          "delivery-failed",
          "read",
          "removed",
          "published"
        ],
        "type": "string"
      },
      "messageTime": {
        "description": "The time when the message was sent or received. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "messageURI": {
        "description": "A URI for this message entity.",
        "format": "uri",
        "type": "string"
      },
      "stickers": {
        "description": "One or more stickers associated with this message, if any",
        "items": {
          "$ref": "#/definitions/MessageSticker"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MessageEvaluation": {
    "properties": {
      "contactAddress": {
        "description": "The address (phone or email) that was wrapped up",
        "type": "string"
      },
      "contactColumn": {
        "description": "The name of the contact column that was wrapped up",
        "type": "string"
      },
      "messageType": {
        "description": "The type of message sent",
        "enum": [
          "Sms",
          "Email"
        ],
        "type": "string"
      },
      "timestamp": {
        "description": "The time that the wrap-up was applied. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "wrapupCodeId": {
        "description": "The id of the wrap-up code",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageInfo": {
    "properties": {
      "localizableMessageCode": {
        "description": "Key that can be used to localize the message.",
        "type": "string"
      },
      "message": {
        "description": "Description of the message.",
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Map with fields for variable replacement.",
        "type": "object"
      },
      "messageWithParams": {
        "description": "Message with template fields for variable replacement.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageMedia": {
    "properties": {
      "contentLengthBytes": {
        "description": "The optional content length of the the media object, in bytes.",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The optional id of the the media object.",
        "type": "string"
      },
      "mediaType": {
        "description": "The optional internet media type of the the media object.  If null then the media type should be dictated by the url",
        "type": "string"
      },
      "name": {
        "description": "The optional name of the the media object.",
        "type": "string"
      },
      "url": {
        "description": "The location of the media, useful for retrieving it",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageMediaAttachment": {
    "properties": {
      "contentLength": {
        "description": "The optional content length of the the media object, in bytes.",
        "format": "int64",
        "type": "integer"
      },
      "id": {
        "description": "A globally unique identifier for the media object.",
        "type": "string"
      },
      "mediaType": {
        "description": "The optional internet media type of the the media object.If null then the media type should be dictated by the url.",
        "enum": [
          "image/png",
          "image/jpeg",
          "image/gif"
        ],
        "type": "string"
      },
      "name": {
        "description": "The name of the media object.",
        "type": "string"
      },
      "url": {
        "description": "The location of the media, useful for retrieving it",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageMediaData": {
    "properties": {
      "contentLengthBytes": {
        "description": "The optional content length of the the media object, in bytes.",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The detected internet media type of the the media object.  If null then the media type should be dictated by the url.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the media, indicates if the media is in the process of uploading. If the upload fails, the media becomes invalid",
        "enum": [
          "uploading",
          "valid",
          "invalid"
        ],
        "readOnly": true,
        "type": "string"
      },
      "uploadUrl": {
        "description": "The URL returned to upload an attachment",
        "type": "string"
      },
      "url": {
        "description": "The location of the media, useful for retrieving it",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageMediaParticipant": {
    "properties": {
      "address": {
        "description": "The participant address.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A list of ad-hoc attributes for the participant.",
        "type": "object"
      },
      "authenticated": {
        "description": "If true, the participant member is authenticated.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The time when this participant went connected for this media (eg: video connected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "direction": {
        "description": "The participant's direction.  Values can be: 'inbound' or 'outbound'",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "disconnectType": {
        "description": "The reason the participant was disconnected from the conversation.",
        "enum": [
          "endpoint",
          "endpoint.donotdisturb",
          "client",
          "system",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.donotdisturb",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam"
        ],
        "type": "string"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/ErrorInfo",
        "description": "If the conversation ends in error, contains additional error details."
      },
      "externalContact": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external contact, then this will be the reference for the external contact."
      },
      "externalOrganization": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "If this participant represents an external org, then this will be the reference for the external org."
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "fromAddress": {
        "$ref": "#/definitions/Address",
        "description": "Address for the participant on the sending side of the message conversation. If the address is a phone number, E.164 format is recommended."
      },
      "held": {
        "description": "Value is true when the participant is on hold.",
        "type": "boolean"
      },
      "id": {
        "description": "The unique participant ID.",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/JourneyContext",
        "description": "Journey System data/context that is applicable to this communication.  When used for historical purposes, the context should be immutable.  When null, there is no applicable Journey System context."
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "messages": {
        "description": "Message instance details on the communication.",
        "items": {
          "$ref": "#/definitions/MessageDetails"
        },
        "type": "array"
      },
      "monitoredParticipant": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The participant being monitored when performing a message monitor."
      },
      "monitoredParticipantId": {
        "description": "The ID of the participant being monitored when performing a message monitor.",
        "type": "string"
      },
      "name": {
        "description": "The display friendly name of the participant.",
        "type": "string"
      },
      "parkTime": {
        "description": "The time when this participant's communication was last parked.  Does not reset on resume. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "peer": {
        "description": "The peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the communication.",
        "type": "string"
      },
      "purpose": {
        "description": "The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud queue for this participant."
      },
      "recipientCountry": {
        "description": "Indicates the country where the recipient is associated in ISO 3166-1 alpha-2 format.",
        "type": "string"
      },
      "recipientType": {
        "description": "The type of the recipient. Eg: Provisioned phoneNumber is the recipient for sms message type.",
        "type": "string"
      },
      "script": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Engage script that should be used by this participant."
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "converting",
          "uploading",
          "transmitting",
          "parked",
          "none"
        ],
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud team for this participant."
      },
      "toAddress": {
        "$ref": "#/definitions/Address",
        "description": "Address for the participant on receiving side of the message conversation. If the address is a phone number, E.164 format is recommended."
      },
      "type": {
        "description": "Indicates the type of message platform from which the message originated.",
        "enum": [
          "unknown",
          "sms",
          "twitter",
          "facebook",
          "line",
          "whatsapp",
          "telegram",
          "kakao",
          "webmessaging",
          "open",
          "instagram"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The PureCloud user for this participant."
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Wrapup for this participant, if it has been applied."
      },
      "wrapupPrompt": {
        "description": "The wrap-up prompt indicating the type of wrap-up to be performed.",
        "type": "string"
      },
      "wrapupRequired": {
        "description": "Value is true when the participant requires wrap-up.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "Value is true when the participant has skipped wrap-up.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "The amount of time the participant has to complete wrap-up.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessageMediaPolicy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/PolicyActions",
        "description": "Actions applied when specified conditions are met"
      },
      "conditions": {
        "$ref": "#/definitions/MessageMediaPolicyConditions",
        "description": "Conditions for when actions should be applied"
      }
    },
    "type": "object"
  },
  "MessageMediaPolicyConditions": {
    "properties": {
      "customerParticipation": {
        "enum": [
          "YES",
          "NO"
        ],
        "type": "string"
      },
      "dateRanges": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "forQueues": {
        "items": {
          "$ref": "#/definitions/Queue"
        },
        "type": "array"
      },
      "forUsers": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "languages": {
        "items": {
          "$ref": "#/definitions/Language"
        },
        "type": "array"
      },
      "teams": {
        "description": "Teams to match conversations against",
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "timeAllowed": {
        "$ref": "#/definitions/TimeAllowed"
      },
      "wrapupCodes": {
        "items": {
          "$ref": "#/definitions/WrapupCode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MessageSticker": {
    "properties": {
      "id": {
        "description": "The unique id of the the sticker object.",
        "type": "string"
      },
      "url": {
        "description": "The location of the sticker, useful for retrieving it",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageStickerAttachment": {
    "properties": {
      "id": {
        "description": "A globally unique identifier for the media object.",
        "type": "string"
      },
      "url": {
        "description": "The location of the media, useful for retrieving it",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessageTypingEventRequest": {
    "properties": {
      "dateSent": {
        "description": "The time when the message typing event was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "typing": {
        "$ref": "#/definitions/ConversationEventTyping",
        "description": "Typing event"
      }
    },
    "required": [
      "typing"
    ],
    "type": "object"
  },
  "MessagingCampaign": {
    "properties": {
      "alwaysRunning": {
        "description": "Whether this messaging campaign is always running",
        "type": "boolean"
      },
      "callableTimeSet": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The callable time set for this messaging campaign."
      },
      "campaignStatus": {
        "description": "The current status of the messaging campaign. A messaging campaign may be turned 'on' or 'off'.",
        "enum": [
          "on",
          "stopping",
          "off",
          "complete",
          "invalid",
          "forced_off"
        ],
        "type": "string"
      },
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The contact list that this messaging campaign will send messages for."
      },
      "contactListFilters": {
        "description": "The contact list filter to check before sending a message for this messaging campaign.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "contactSorts": {
        "description": "The order in which to sort contacts for dialing, based on up to four columns.",
        "items": {
          "$ref": "#/definitions/ContactSort"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The division this entity belongs to."
      },
      "dncLists": {
        "description": "The dnc lists to check before sending a message for this messaging campaign.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "dynamicContactQueueingSettings": {
        "$ref": "#/definitions/DynamicContactQueueingSettings",
        "description": "Indicates (when true) that the campaign supports dynamic queueing of the contact list at the time of a request for contacts."
      },
      "emailConfig": {
        "$ref": "#/definitions/EmailConfig",
        "description": "Configuration for this messaging campaign to send Email messages."
      },
      "errors": {
        "description": "A list of current error conditions associated with this messaging campaign.",
        "items": {
          "$ref": "#/definitions/RestErrorDetail"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagesPerMinute": {
        "description": "How many messages this messaging campaign will send per minute.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "ruleSets": {
        "description": "Rule Sets to be applied while this campaign is sending messages",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "smsConfig": {
        "$ref": "#/definitions/SmsConfig",
        "description": "Configuration for this messaging campaign to send SMS messages."
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "contactList",
      "messagesPerMinute"
    ],
    "type": "object"
  },
  "MessagingCampaignDiagnostics": {
    "properties": {
      "filteredOutContactsCount": {
        "description": "Number of contacts that don't match filter. This is currently supported only for Campaigns with dynamic filter on.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "timeZoneRescheduledContactsCount": {
        "description": "Current number of time zone rescheduled messages on the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessagingCampaignDivisionView": {
    "properties": {
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessagingCampaignDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessagingCampaignDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessagingCampaignEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessagingCampaign"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessagingCampaignSchedule": {
    "properties": {
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intervals": {
        "description": "A list of intervals during which to run the associated Campaign.",
        "items": {
          "$ref": "#/definitions/ScheduleInterval"
        },
        "type": "array"
      },
      "messagingCampaign": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Campaign that this messaging campaign schedule is for."
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for this messaging campaign schedule.",
        "example": "Africa/Abidjan",
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "intervals",
      "messagingCampaign"
    ],
    "type": "object"
  },
  "MessagingCampaignScheduleEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessagingCampaignSchedule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessagingCommunicationAnsweredEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "MessagingCommunicationDispositionAppliedEvent": {
    "properties": {
      "code": {
        "description": "The wrapup-code (V4 UUID) used to disposition this interaction. If this value is not provided the disposition is considered skipped.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.",
        "type": "string"
      },
      "tags": {
        "description": "The list of tags selected by the agent to describe the interaction or disposition. Ignored if the disposition is considered skipped.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "MessagingCommunicationEndedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "disconnectType": {
        "description": "Indicates how this communication was ended.",
        "enum": [
          "Unknown",
          "Self",
          "Peer",
          "System",
          "Error",
          "Transfer",
          "TransferACD",
          "TransferUser"
        ],
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "disconnectType",
      "eventDateTime",
      "eventId"
    ],
    "type": "object"
  },
  "MessagingConfigListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessagingSetting"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessagingEndTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used to identify the transfer already started by the external platform.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "finalState": {
        "description": "Indicates whether the transfer completed successfully, was cancelled, or failed for some reason.",
        "enum": [
          "Completed",
          "Canceled",
          "Failed"
        ],
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that was being transferred.",
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "finalState",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "MessagingExternalEstablishedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "displayName": {
        "description": "A name for the participant if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/MessagingInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "MessagingFlowEstablishedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/MessagingInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "MessagingHoldUpdatedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "held": {
        "description": "Indicates whether this communication is held.",
        "type": "boolean"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "held"
    ],
    "type": "object"
  },
  "MessagingInitialConfiguration": {
    "properties": {
      "additionalInfo": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this session which should be recorded by the platform but which will not be indexed or searchable. Primarily for diagnostic value. Any information that needs to be accessible through other components like Analytics should be moved to dedicated fields.",
        "type": "object"
      },
      "alerting": {
        "description": "Indicates that this communication's initial state is alerting. If false, the communication started in a connected state.",
        "type": "boolean"
      },
      "fromAddress": {
        "description": "Address for the participant on the sending side of the message conversation. If the address is a phone number, E.164 format is recommended.",
        "type": "string"
      },
      "held": {
        "description": "Indicates that this communication's initial state is held.",
        "type": "boolean"
      },
      "inbound": {
        "description": "Indicates the direction of this communication with respect to the contact center. `true` means the communication is INBOUND. `false` means the communication is OUTBOUND.",
        "type": "boolean"
      },
      "invitedBy": {
        "description": "The id of the communication (the \"peer\") that \"invited\" this communication, if this occurred.",
        "type": "string"
      },
      "messageType": {
        "description": "The type of message platform from which the message originated.",
        "enum": [
          "Sms",
          "Twitter",
          "Facebook",
          "Line",
          "WhatsApp",
          "WebMessage",
          "Open",
          "Instagram",
          "Unknown"
        ],
        "type": "string"
      },
      "toAddress": {
        "description": "Address for the participant on receiving side of the message conversation. If the address is a phone number, E.164 format is recommended.",
        "type": "string"
      }
    },
    "required": [
      "fromAddress",
      "toAddress"
    ],
    "type": "object"
  },
  "MessagingIntegration": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Integration",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date this Integration was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "A unique Integration Id",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingReference"
      },
      "messengerType": {
        "description": "The type of Messaging Integration",
        "enum": [
          "sms",
          "facebook",
          "twitter",
          "whatsapp",
          "webmessaging",
          "instagram",
          "open"
        ],
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that last modified this Integration",
        "readOnly": true
      },
      "name": {
        "description": "The name of the Integration",
        "readOnly": true,
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The recipient associated to the Integration. This recipient is used to associate a flow to an integration",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Integration",
        "enum": [
          "Active",
          "Inactive",
          "Error",
          "Starting",
          "Incomplete",
          "Deleting",
          "DeletionFailed"
        ],
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "id",
      "messengerType",
      "name",
      "version"
    ],
    "type": "object"
  },
  "MessagingIntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessagingIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MessagingProgressTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used to identify the transfer already started by the external platform.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationCommunicationId",
      "eventDateTime",
      "eventId",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "MessagingRecipient": {
    "description": "Information about the recipient the message is sent to or received from.",
    "properties": {
      "additionalIds": {
        "description": "List of recipient additional identifiers",
        "items": {
          "$ref": "#/definitions/RecipientAdditionalIdentifier"
        },
        "type": "array"
      },
      "email": {
        "description": "E-mail address of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "firstName": {
        "description": "First name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The recipient ID specific to the provider.",
        "type": "string"
      },
      "idType": {
        "description": "The recipient ID type. This is used to indicate the format used for the ID.",
        "enum": [
          "Email",
          "Phone",
          "Opaque",
          "Topic"
        ],
        "type": "string"
      },
      "image": {
        "description": "URL of an image that represents the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "lastName": {
        "description": "Last name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "nickname": {
        "description": "Nickname or display name of the recipient.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "MessagingRoutingEstablishedEvent": {
    "properties": {
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/MessagingInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "label": {
        "description": "An optional label that categorizes the conversation. Max-utilization settings can be configured at a per-label level.",
        "type": "string"
      },
      "languageId": {
        "description": "The unique identifier for the language that should be used to determine the destination for the conversation.",
        "type": "string"
      },
      "queueId": {
        "description": "The id of the queue that is routing this conversation.",
        "type": "string"
      },
      "skillIds": {
        "description": "The unique identifiers for the skills that should be used to determine the destination for the conversation.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "queueId",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "MessagingRoutingTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent *Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationQueueId": {
        "description": "The id (V4 UUID) of the desired destination queue that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "Indicates the desired type of transfer.",
        "type": "string"
      },
      "languageId": {
        "description": "The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "skillIds": {
        "description": "The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationQueueId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "MessagingSetting": {
    "description": "Messaging setting for messaging platform integrations",
    "properties": {
      "content": {
        "$ref": "#/definitions/ContentSetting",
        "description": "Configuration relating to message contents"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Setting",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date this messaging setting was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date this messaging setting was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "event": {
        "$ref": "#/definitions/EventSetting",
        "description": "Configuration relating to events which may occur"
      },
      "id": {
        "description": "The messaging Setting unique identifier associated with this integration",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The messaging Setting profile name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "updatedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that modified this Setting",
        "readOnly": true
      },
      "version": {
        "description": "Version number",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "MessagingSettingDefaultRequest": {
    "properties": {
      "settingId": {
        "description": "Messaging Setting ID to be used as the default for this Organization.",
        "type": "string"
      }
    },
    "required": [
      "settingId"
    ],
    "type": "object"
  },
  "MessagingSettingPatchRequest": {
    "description": "Messaging setting for messaging platform integrations",
    "properties": {
      "content": {
        "$ref": "#/definitions/ContentSetting",
        "description": "Settings relating to message contents"
      },
      "event": {
        "$ref": "#/definitions/EventSetting",
        "description": "Settings relating to events which may occur"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The messaging Setting profile name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessagingSettingReference": {
    "description": "Messaging Setting for messaging platform integrations",
    "properties": {
      "content": {
        "$ref": "#/definitions/ContentSetting",
        "description": "Settings relating to message contents"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Setting",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date this messaging Setting was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date this messaging Setting was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "event": {
        "$ref": "#/definitions/EventSetting",
        "description": "Settings relating to events which may occur"
      },
      "id": {
        "description": "The messaging Setting unique identifier associated with this integration",
        "type": "string"
      },
      "name": {
        "description": "The messaging Setting profile name",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The messaging Setting profile URI",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "updatedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that modified this Setting",
        "readOnly": true
      },
      "version": {
        "description": "Version number",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "MessagingSettingRequest": {
    "description": "Messaging setting for messaging platform integrations",
    "properties": {
      "content": {
        "$ref": "#/definitions/ContentSetting",
        "description": "Settings relating to message contents"
      },
      "event": {
        "$ref": "#/definitions/EventSetting",
        "description": "Settings relating to events which may occur"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The messaging Setting profile name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "MessagingSettingRequestReference": {
    "description": "Messaging Setting for messaging platform integrations",
    "properties": {
      "id": {
        "description": "The messaging Setting unique identifier associated with this integration",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "MessagingTemplate": {
    "description": "The messaging template identifies a structured message templates supported by a messaging channel.",
    "properties": {
      "whatsApp": {
        "$ref": "#/definitions/WhatsAppDefinition",
        "description": "Defines a messaging template for a WhatsApp messaging channel"
      }
    },
    "type": "object"
  },
  "MessagingTemplateRequest": {
    "properties": {
      "parameters": {
        "description": "A list of Response Management response substitutions for the response's messaging template",
        "items": {
          "$ref": "#/definitions/TemplateParameter"
        },
        "type": "array"
      },
      "responseId": {
        "description": "A Response Management response identifier for a messaging template defined response",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessagingUserEstablishedEvent": {
    "properties": {
      "afterCallWorkRequired": {
        "description": "Indicates whether or not this user will be required to complete after call work.",
        "type": "boolean"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/MessagingInitialConfiguration",
        "description": "Metadata about this communication."
      },
      "queueId": {
        "description": "A unique Id (V4 UUID) identifying the queue that the user is messaging on behalf of. Applies to outbound messages only.",
        "type": "string"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      },
      "userId": {
        "description": "A unique Id (V4 UUID) identifying the user this communication belongs to.",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration",
      "userId"
    ],
    "type": "object"
  },
  "MessagingUserTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationUserId": {
        "description": "The id (V4 UUID) of the desired destination user that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "The id (V4 UUID) of the communication representing the participant that is initiating the transfer.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationUserId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "MessengerApps": {
    "description": "The apps embedded in the messenger",
    "properties": {
      "conversations": {
        "$ref": "#/definitions/ConversationAppSettings",
        "description": "The conversation settings that handles chats within the messenger"
      },
      "knowledge": {
        "$ref": "#/definitions/Knowledge",
        "description": "The knowledge base config for messenger"
      }
    },
    "type": "object"
  },
  "MessengerHomeScreen": {
    "properties": {
      "enabled": {
        "description": "whether or not homescreen is enabled",
        "type": "boolean"
      },
      "logoUrl": {
        "description": "to capture uploaded company logoUrl",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MessengerSettings": {
    "description": "Settings concerning messenger",
    "properties": {
      "apps": {
        "$ref": "#/definitions/MessengerApps",
        "description": "The apps embedded in the messenger"
      },
      "enabled": {
        "description": "Whether or not messenger is enabled",
        "type": "boolean"
      },
      "fileUpload": {
        "$ref": "#/definitions/FileUploadSettings",
        "description": "The file upload settings for messenger"
      },
      "homeScreen": {
        "$ref": "#/definitions/MessengerHomeScreen",
        "description": "The homescreen settings for messenger"
      },
      "launcherButton": {
        "$ref": "#/definitions/LauncherButtonSettings",
        "description": "The launcher button settings for messenger"
      },
      "sessionPersistenceType": {
        "description": "The session persistence type for messenger",
        "enum": [
          "AcrossSubdomains",
          "DomainOrSubdomainOnly"
        ],
        "type": "string"
      },
      "styles": {
        "$ref": "#/definitions/MessengerStyles",
        "description": "The style settings for messenger"
      }
    },
    "type": "object"
  },
  "MessengerStyles": {
    "properties": {
      "primaryColor": {
        "description": "The primary color of messenger in hexadecimal",
        "example": "#a7017c",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetaData": {
    "properties": {
      "pairing-token": {
        "type": "string"
      },
      "pairing-trust": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pairing-url": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Metabase": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "enum": [
          "EXTERNAL",
          "EXTERNAL_PCV",
          "EXTERNAL_PCV_AWS",
          "EXTERNAL_BYOC_CARRIER",
          "EXTERNAL_BYOC_PBX",
          "STATION_CDM",
          "STATION_CDM_WEBRTC",
          "STATION",
          "TIE",
          "TIE_DIRECT",
          "TIE_INDIRECT",
          "TIE_CLOUD_PROXY"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "MetadataAttribute": {
    "properties": {
      "value": {
        "description": "The value of the metadata attribute.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetadataDocumentation": {
    "description": "Additional documentation about an artifact",
    "properties": {
      "description": {
        "description": "description of the documentation",
        "readOnly": true,
        "type": "string"
      },
      "location": {
        "description": "location where the documentation can be accessed",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetadataItem": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The custom attributes for the metadata",
        "type": "object"
      },
      "text": {
        "description": "The text contents of the metadata",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetadataPresentation": {
    "description": "A representation of data fields to be gathered for installing the accelerator",
    "properties": {
      "schema": {
        "$ref": "#/definitions/MetadataSchema",
        "description": "description of the contents of the data gathering interface",
        "readOnly": true
      },
      "title": {
        "description": "title for a set of data to be gathered",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetadataProperty": {
    "description": "Data property required as input for installing an accelerator",
    "properties": {
      "default": {
        "description": "optional default value of the input property",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "brief description of the input property",
        "readOnly": true,
        "type": "string"
      },
      "displayname": {
        "description": "user-friendly name of the input property",
        "readOnly": true,
        "type": "string"
      },
      "enum": {
        "description": "set of possible values if the input property is an enumeration",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "help": {
        "description": "optional URL with addition information about the input property",
        "readOnly": true,
        "type": "string"
      },
      "sensitive": {
        "description": "whether the property's value should be hidden from display",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "the data type of the input property",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetadataResultEntity": {
    "description": "A Genesys Cloud resource created or modified as a result of running an accelerator",
    "properties": {
      "description": {
        "description": "description of the modified resource",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "object type of the modified resource",
        "readOnly": true,
        "type": "string"
      },
      "visibility": {
        "description": "whether the modified resource is visible or hidden",
        "enum": [
          "Visible",
          "Hidden"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetadataResults": {
    "description": "List of resources created or modified as a result of running an accelerator",
    "properties": {
      "entities": {
        "description": "list of resources",
        "items": {
          "$ref": "#/definitions/MetadataResultEntity"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "MetadataSchema": {
    "description": "A description of the contents of a data gathering interface for an accelerator",
    "properties": {
      "description": {
        "description": "description of the data being gathered on this page",
        "readOnly": true,
        "type": "string"
      },
      "properties": {
        "description": "list of properties for which input is to be gathered, bother required and optional",
        "items": {
          "additionalProperties": {
            "$ref": "#/definitions/MetadataProperty"
          },
          "type": "object"
        },
        "readOnly": true,
        "type": "array"
      },
      "required": {
        "description": "list of required properties",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "title": {
        "description": "title for the data gathering page",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "type of data being gathered",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "MeteredAssignmentByAgent": {
    "properties": {
      "evaluationContextId": {
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      },
      "evaluators": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "maxNumberEvaluations": {
        "format": "int32",
        "type": "integer"
      },
      "timeInterval": {
        "$ref": "#/definitions/TimeInterval"
      },
      "timeZone": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "MeteredEvaluationAssignment": {
    "properties": {
      "assignToActiveUser": {
        "type": "boolean"
      },
      "evaluationContextId": {
        "type": "string"
      },
      "evaluationForm": {
        "$ref": "#/definitions/EvaluationForm"
      },
      "evaluators": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "maxNumberEvaluations": {
        "format": "int32",
        "type": "integer"
      },
      "timeInterval": {
        "$ref": "#/definitions/TimeInterval"
      }
    },
    "type": "object"
  },
  "Metric": {
    "properties": {
      "dateCreated": {
        "description": "The created date of this metric. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateUnlinked": {
        "description": "The unlinked workday for this metric if this metric was ever unlinked. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "externalMetricDefinitionId": {
        "description": "The id of associated external metric definition",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "linkedMetric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The linked metric entity reference",
        "readOnly": true
      },
      "metricDefinitionId": {
        "description": "The id of associated metric definition",
        "type": "string"
      },
      "name": {
        "description": "The name of this metric",
        "type": "string"
      },
      "objective": {
        "$ref": "#/definitions/Objective",
        "description": "Associated objective for this metric"
      },
      "performanceProfileId": {
        "description": "Performance profile id of this metric",
        "type": "string"
      },
      "precision": {
        "description": "The precision of the metric, must be between 0 and 5",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourcePerformanceProfile": {
        "$ref": "#/definitions/PerformanceProfile",
        "description": "The source performance profile when this metric is linked",
        "readOnly": true
      },
      "timeDisplayUnit": {
        "description": "The time unit in which the metric should be displayed -- this parameter is ignored when displaying non-time values",
        "enum": [
          "None",
          "Seconds",
          "Minutes",
          "Hours"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "MetricDefinition": {
    "properties": {
      "defaultObjective": {
        "$ref": "#/definitions/DefaultObjective",
        "description": "A predefined default objective for this metric"
      },
      "dividendMetrics": {
        "description": "Metric names used as dividend",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "divisorMetrics": {
        "description": "Metric names used as divisor",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "initialDirectionFilteringAllowed": {
        "description": "Flag to indicate if this metricDefinition allows filter based on initial direction",
        "type": "boolean"
      },
      "lockTemplateId": {
        "description": "An optional field to specify if this metric definition is locked to certain template. e.g. punctuality",
        "type": "string"
      },
      "mediaTypeFilteringAllowed": {
        "description": "Flag to indicate if this metricDefinition allows filter based on media types",
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "queueFilteringAllowed": {
        "description": "Flag to indicate if this metricDefinition allows filter based on queues",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortName": {
        "description": "An alternate name for this metric definition, often abbreviation",
        "type": "string"
      },
      "unitType": {
        "description": "The type of associated metric unit",
        "enum": [
          "None",
          "Percent",
          "Currency",
          "Seconds",
          "Number",
          "AttendanceStatus",
          "Unit"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "MetricValueTrendAverage": {
    "properties": {
      "dateEndWorkday": {
        "description": "The targeted end workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateReferenceWorkday": {
        "description": "The targeted reference workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "The targeted start workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The targeted division for the metrics",
        "readOnly": true
      },
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      },
      "result": {
        "$ref": "#/definitions/WorkdayValuesMetricItem",
        "description": "The metric value trend and average",
        "readOnly": true
      },
      "timezone": {
        "description": "The time zone used for aggregating metric values",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The targeted user for the metrics",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "Metrics": {
    "properties": {
      "dateCreated": {
        "description": "The created date of this metric. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateUnlinked": {
        "description": "The unlinked workday for this metric if this metric was ever unlinked. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "enabled": {
        "description": "A flag for whether this metric is enabled for a performance profile",
        "type": "boolean"
      },
      "externalMetricDefinitionId": {
        "description": "The id of associated external metric definition",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "linkedMetric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The linked metric entity reference",
        "readOnly": true
      },
      "maxPoints": {
        "description": "Achievable maximum points for this metric",
        "format": "int32",
        "type": "integer"
      },
      "metricDefinitionId": {
        "description": "The id of associated metric definition",
        "type": "string"
      },
      "metricDefinitionName": {
        "description": "The name of associated metric definition",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "order": {
        "description": "The order of metric within a performance profile",
        "format": "int32",
        "type": "integer"
      },
      "performanceProfileId": {
        "description": "Performance profile id of this metric",
        "type": "string"
      },
      "precision": {
        "description": "Precision of linked external metric",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourcePerformanceProfile": {
        "$ref": "#/definitions/PerformanceProfile",
        "description": "The source performance profile when this metric is linked",
        "readOnly": true
      },
      "templateName": {
        "description": "The name of associated objective template",
        "type": "string"
      },
      "timeDisplayUnit": {
        "description": "The time unit in which the metric should be displayed -- this parameter is ignored when displaying non-time values",
        "enum": [
          "None",
          "Seconds",
          "Minutes",
          "Hours"
        ],
        "type": "string"
      },
      "unitDefinition": {
        "description": "Unit definition of linked external metric",
        "readOnly": true,
        "type": "string"
      },
      "unitType": {
        "description": "Corresponding unit type for this metric",
        "enum": [
          "None",
          "Percent",
          "Currency",
          "Seconds",
          "Number",
          "AttendanceStatus",
          "Unit"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "MinLength": {
    "properties": {
      "max": {
        "description": "A non-negative integer for a text-based schema field denoting the maximum smallest length string the field can contain for a schema instance.",
        "format": "int64",
        "type": "integer"
      },
      "min": {
        "description": "A non-negative integer for a text-based schema field denoting the minimum smallest length a string field can contain for a schema instance.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "max",
      "min"
    ],
    "type": "object"
  },
  "MinedIntentsListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MinerIntent"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Miner": {
    "properties": {
      "conversationDataUploaded": {
        "description": "Flag to indicate whether data file to be mined was uploaded.",
        "readOnly": true,
        "type": "boolean"
      },
      "conversationsDateRangeEnd": {
        "description": "Date till which the conversations need to be taken for mining. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "example": "2019-12-20",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "conversationsDateRangeStart": {
        "description": "Date from which the conversations need to be taken for mining. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "example": "2019-06-20",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "conversationsFetchedCount": {
        "description": "Number of conversations/transcripts fetched.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "conversationsValidCount": {
        "description": "Number of conversations/recordings/transcripts that were found valid for mining purposes.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "dateCompleted": {
        "description": "Date when the mining process was completed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-05-20T23:56:07.268",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "Date when the miner was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-04-29T17:12:06.613",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date when the miner was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-04-30T23:56:07.268",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateTriggered": {
        "description": "Date when the miner started execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-04-30T23:56:07.268",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/MinerErrorInfo",
        "description": "Error Information",
        "readOnly": true
      },
      "getminedItemCount": {
        "description": "Number of intents or topics based on the miner type.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "Language Localization code.",
        "enum": [
          "en-us",
          "en-gb",
          "en-au",
          "en-in",
          "en-za",
          "es-us",
          "es-es",
          "fr-fr",
          "fr-ca",
          "de-de",
          "pt-pt",
          "pt-br",
          "it-it"
        ],
        "type": "string"
      },
      "latestDraftVersion": {
        "$ref": "#/definitions/Draft",
        "description": "Latest draft details of the miner.",
        "readOnly": true
      },
      "mediaType": {
        "description": "Media type for filtering conversations.",
        "enum": [
          "Chat",
          "Call",
          "Message",
          "Email"
        ],
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "description": "Mining message if present.",
        "readOnly": true,
        "type": "string"
      },
      "minerType": {
        "description": "Type of the miner, intent or topic.",
        "enum": [
          "Intent",
          "Topic"
        ],
        "type": "string"
      },
      "name": {
        "description": "Chat Corpus Name.",
        "type": "string"
      },
      "participantType": {
        "description": "Type of the participant, either agent, customer or both.",
        "enum": [
          "Customer",
          "Agent",
          "Both"
        ],
        "readOnly": true,
        "type": "string"
      },
      "queueIds": {
        "description": "List of queue IDs for filtering conversations.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Status of the miner.",
        "enum": [
          "NotStarted",
          "FetchingConversationIds",
          "ConversationIdsFetched",
          "ConversationIdsFetchError",
          "FetchingConversations",
          "ConversationsFetched",
          "ConversationsFetchError",
          "Queued",
          "QueuingError",
          "MiningStarted",
          "MaskingUtterances",
          "MaskingError",
          "ComputingAnalytics",
          "ComputingAnalyticsError",
          "MiningCompleted",
          "MiningError",
          "ModelValidationError",
          "Deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "warningInfo": {
        "$ref": "#/definitions/MinerErrorInfo",
        "description": "Warning Information",
        "readOnly": true
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "MinerErrorInfo": {
    "properties": {
      "code": {
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "messageParams": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Map of variables and params for the error message.",
        "type": "object"
      },
      "messageWithParams": {
        "description": "Error message with params included.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MinerExecuteRequest": {
    "properties": {
      "dateEnd": {
        "description": "End date for the date range to mine. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "example": "2020-04-01",
        "format": "date",
        "type": "string"
      },
      "dateStart": {
        "description": "Start date for the date range to mine. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "example": "2020-04-01",
        "format": "date",
        "type": "string"
      },
      "mediaType": {
        "description": "Media type for filtering conversations.",
        "enum": [
          "Chat",
          "Call",
          "Message",
          "Email"
        ],
        "type": "string"
      },
      "participantType": {
        "description": "Type of the participant, either agent, customer or both.",
        "enum": [
          "Customer",
          "Agent",
          "Both"
        ],
        "type": "string"
      },
      "queueIds": {
        "description": "List of queue IDs for filtering conversations.",
        "example": "[ \"7fe8a4ce-7435-4c78-a83f-47c3943e53eb\", \"18c744bf-34d5-452a-b6d6-9af95628aa50\"]",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "uploadKey": {
        "description": "Location of input conversations.",
        "example": "intent-miner/raw-utterances/imports/org_id/request_id.mine_id.json",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MinerIntent": {
    "properties": {
      "analyticVolumePercent": {
        "description": "Percentage of conversations belonging to the intent.",
        "example": 21.5,
        "format": "double",
        "type": "number"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "miner": {
        "$ref": "#/definitions/Miner",
        "description": "The miner to which the intent belongs."
      },
      "name": {
        "description": "Intent name.",
        "example": "pay bill.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utterances": {
        "description": "The utterances that are extracted for an Intent.",
        "items": {
          "$ref": "#/definitions/Utterance"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MinerListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Miner"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "MinerTopic": {
    "properties": {
      "conversationCount": {
        "description": "Number of conversations where a topic has occurred.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "conversationPercent": {
        "description": "Percentage of conversations where a topic has occurred.",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "miner": {
        "$ref": "#/definitions/Miner",
        "description": "The miner to which the topic belongs.",
        "readOnly": true
      },
      "name": {
        "description": "Topic name.",
        "type": "string"
      },
      "phraseCount": {
        "description": "Number of unique phrases (sub-utterances) where a topic has occurred.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "phrases": {
        "description": "Phrases associated with a topic.",
        "items": {
          "$ref": "#/definitions/TopicPhrase"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "utteranceCount": {
        "description": "Number of unique utterances where a topic has occurred.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "MinerTopicPhrase": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Phrase name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "topic": {
        "$ref": "#/definitions/MinerTopic",
        "description": "Topic associated with a phrase."
      },
      "utteranceCount": {
        "description": "Number of utterances belonging to a phrase",
        "format": "int32",
        "type": "integer"
      },
      "utterances": {
        "description": "List of utterances related to a phrase.",
        "items": {
          "$ref": "#/definitions/Utterance"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MinerTopicsListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MinerTopic"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ModifiableRuleProperties": {
    "properties": {
      "conditions": {
        "$ref": "#/definitions/CommonRuleConditions",
        "description": "The set of metric conditions that would trigger an alert."
      },
      "description": {
        "description": "The description of the rule.",
        "type": "string"
      },
      "enabled": {
        "description": "Indicates if the rule is enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Name of the rule",
        "type": "string"
      },
      "notifications": {
        "description": "The alert notification types to trigger when alarm state changes as well as the users they will be sent to.",
        "items": {
          "$ref": "#/definitions/AlertNotification"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sendExitingAlarmNotifications": {
        "description": "Indicates if the alert will send a notification when it is closed.",
        "type": "boolean"
      },
      "waitBetweenNotificationMs": {
        "description": "The amount of time in milliseconds to wait between notification.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "MoveAgentResponse": {
    "properties": {
      "result": {
        "description": "The result of the move",
        "enum": [
          "AlreadyMoved",
          "DestinationBusinessUnitAgentLimitExceeded",
          "DestinationManagementUnitAgentLimitExceeded",
          "DestinationManagementUnitDoesNotExist",
          "MoveSuccessful",
          "MovingToDifferentManagementUnit",
          "NothingToDo",
          "SourceManagementUnitNotAuthorized"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with the move"
      }
    },
    "type": "object"
  },
  "MoveAgentsRequest": {
    "properties": {
      "destinationManagementUnitId": {
        "description": "The id of the management unit for which the move will be performed. To remove users from their management unit this should be set to null.",
        "type": "string"
      },
      "userIds": {
        "description": "The list of user ids to move",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "userIds"
    ],
    "type": "object"
  },
  "MoveAgentsResponse": {
    "properties": {
      "destinationManagementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit specified on the request"
      },
      "requestingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user that made the request"
      },
      "results": {
        "description": "The list containing the agent and result of the move operation",
        "items": {
          "$ref": "#/definitions/MoveAgentResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MoveManagementUnitRequest": {
    "properties": {
      "businessUnitId": {
        "description": "The ID of the business unit to which to move the management unit",
        "type": "string"
      }
    },
    "required": [
      "businessUnitId"
    ],
    "type": "object"
  },
  "MoveManagementUnitResponse": {
    "properties": {
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The new business unit"
      },
      "status": {
        "description": "The status of the move.  Will always be 'Processing' unless the Management Unit is already in the requested Business Unit in which case it will be 'Complete'",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "MuAgentQueueTimeRequest": {
    "properties": {
      "agentOnQueueTimes": {
        "description": "List of Agent queue times within the management unit",
        "items": {
          "$ref": "#/definitions/AgentQueueTimeRequest"
        },
        "type": "array"
      },
      "managementUnitId": {
        "description": "ID of the management unit",
        "type": "string"
      }
    },
    "required": [
      "agentOnQueueTimes",
      "managementUnitId"
    ],
    "type": "object"
  },
  "MuRescheduleResultWrapper": {
    "properties": {
      "agentSchedules": {
        "description": "The list of agent schedules",
        "items": {
          "$ref": "#/definitions/BuAgentScheduleRescheduleResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "MutableUserPresence": {
    "properties": {
      "id": {
        "description": "The user's id",
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "presenceDefinition": {
        "$ref": "#/definitions/PresenceDefinition"
      },
      "primary": {
        "description": "A boolean used to tell whether or not to set this presence source as the primary on a PATCH",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "Deprecated - The sourceID field should be used as a replacement.",
        "type": "string"
      },
      "sourceId": {
        "description": "Represents the ID of a registered source",
        "type": "string"
      }
    },
    "type": "object"
  },
  "MuteSnoozeFields": {
    "properties": {
      "dateEnd": {
        "description": "The end date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStart": {
        "description": "The start date of the mute/snooze period. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "dateEnd",
      "dateStart"
    ],
    "type": "object"
  },
  "NTPSettings": {
    "properties": {
      "servers": {
        "description": "List of NTP servers, in priority order",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "NamedEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the object.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "NamedEntityAnnotation": {
    "properties": {
      "name": {
        "description": "The name of the annotated named entity.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "NamedEntityDefinition": {
    "properties": {
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "type": {
        "description": "The name of the entity type.",
        "type": "string"
      }
    },
    "required": [
      "name",
      "type"
    ],
    "type": "object"
  },
  "NamedEntityTypeBinding": {
    "properties": {
      "entityName": {
        "description": "The name that this named entity type is bound to.",
        "type": "string"
      },
      "entityType": {
        "description": "The named entity type of the binding. It can be a built-in one such as builtin:number or a custom entity type such as BeverageType.",
        "type": "string"
      }
    },
    "required": [
      "entityName",
      "entityType"
    ],
    "type": "object"
  },
  "NamedEntityTypeDefinition": {
    "properties": {
      "description": {
        "description": "Description of the of the named entity type.",
        "type": "string"
      },
      "mechanism": {
        "$ref": "#/definitions/NamedEntityTypeMechanism",
        "description": "The mechanism enabling detection of the named entity type."
      },
      "name": {
        "description": "The name of the entity type.",
        "type": "string"
      }
    },
    "required": [
      "mechanism",
      "name"
    ],
    "type": "object"
  },
  "NamedEntityTypeItem": {
    "properties": {
      "additionalLanguages": {
        "additionalProperties": {
          "$ref": "#/definitions/AdditionalLanguagesSynonyms"
        },
        "description": "Additional Language Synonyms for the given named entity value.",
        "type": "object"
      },
      "synonyms": {
        "description": "Synonyms for the given named entity value.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "value": {
        "description": "A value for an named entity type definition.",
        "type": "string"
      }
    },
    "required": [
      "value"
    ],
    "type": "object"
  },
  "NamedEntityTypeMechanism": {
    "properties": {
      "items": {
        "description": "The items that define the named entity type.",
        "items": {
          "$ref": "#/definitions/NamedEntityTypeItem"
        },
        "type": "array"
      },
      "restricted": {
        "description": "Whether the named entity type is restricted to the items provided. Default: false",
        "type": "boolean"
      },
      "type": {
        "description": "The type of the mechanism.",
        "enum": [
          "DynamicList",
          "List",
          "Regex",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "required": [
      "items",
      "type"
    ],
    "type": "object"
  },
  "NamespaceDocs": {
    "properties": {
      "friendlyName": {
        "type": "string"
      },
      "limits": {
        "items": {
          "$ref": "#/definitions/LimitDocs"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "NetworkConnectivity": {
    "properties": {
      "bluetoothEnabled": {
        "description": "Whether Bluetooth is enabled.",
        "type": "boolean"
      },
      "carrier": {
        "description": "The name of the network carrier.",
        "type": "string"
      },
      "cellularEnabled": {
        "description": "Whether Cellular is enabled.",
        "type": "boolean"
      },
      "wifiEnabled": {
        "description": "Whether Wi-Fi is enabled.",
        "type": "boolean"
      }
    },
    "required": [
      "bluetoothEnabled",
      "cellularEnabled",
      "wifiEnabled"
    ],
    "type": "object"
  },
  "NextOccurrenceDetails": {
    "properties": {
      "endOccurrenceDetails": {
        "$ref": "#/definitions/OccurrenceDetails",
        "description": "The details for the next end occurrence for the recurrence."
      },
      "startOccurrenceDetails": {
        "$ref": "#/definitions/OccurrenceDetails",
        "description": "The details for the next start occurrence for the recurrence."
      }
    },
    "type": "object"
  },
  "NluConfig": {
    "properties": {
      "domain": {
        "$ref": "#/definitions/CopilotNluDomain",
        "description": "NLU domain."
      },
      "intentConfidenceThreshold": {
        "description": "Minimum confidence value of accepting NLU intents, must be greater than 0 and less than 1.",
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "domain",
      "intentConfidenceThreshold"
    ],
    "type": "object"
  },
  "NluConfusionMatrixColumn": {
    "properties": {
      "name": {
        "description": "The name of the intent for the column.",
        "type": "string"
      },
      "value": {
        "description": "The confusion value between the intents",
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "name",
      "value"
    ],
    "type": "object"
  },
  "NluConfusionMatrixRow": {
    "properties": {
      "columns": {
        "description": "The columns of confusion matrix for the intent",
        "items": {
          "$ref": "#/definitions/NluConfusionMatrixColumn"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the intent for the row.",
        "type": "string"
      }
    },
    "required": [
      "columns",
      "name"
    ],
    "type": "object"
  },
  "NluDetectionContext": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/ContextEntity",
        "description": "Use this entity to restrict detection."
      },
      "intent": {
        "$ref": "#/definitions/ContextIntent",
        "description": "Restrict detection to this intent."
      }
    },
    "type": "object"
  },
  "NluDetectionInput": {
    "properties": {
      "language": {
        "description": "Language of the version for multilingual detection, e.g. `en-us`, `de-de`",
        "type": "string"
      },
      "text": {
        "description": "The text to perform NLU detection on.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "NluDetectionOutput": {
    "properties": {
      "dialogActs": {
        "description": "The detected dialog acts.",
        "items": {
          "$ref": "#/definitions/DetectedDialogAct"
        },
        "readOnly": true,
        "type": "array"
      },
      "intents": {
        "description": "The detected intents.",
        "items": {
          "$ref": "#/definitions/DetectedIntent"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "NluDetectionRequest": {
    "properties": {
      "context": {
        "$ref": "#/definitions/NluDetectionContext",
        "description": "The context for the input to NLU detection."
      },
      "input": {
        "$ref": "#/definitions/NluDetectionInput",
        "description": "The input subject to NLU detection."
      }
    },
    "required": [
      "input"
    ],
    "type": "object"
  },
  "NluDetectionResponse": {
    "properties": {
      "input": {
        "$ref": "#/definitions/NluDetectionInput"
      },
      "output": {
        "$ref": "#/definitions/NluDetectionOutput"
      },
      "version": {
        "$ref": "#/definitions/NluDomainVersion",
        "description": "The NLU domain version which performed the detection.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "NluDomain": {
    "properties": {
      "dateCreated": {
        "description": "The date when the NLU domain was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date when the NLU domain was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "draftVersion": {
        "$ref": "#/definitions/NluDomainVersion",
        "description": "The draft version of that NLU domain.",
        "readOnly": true
      },
      "engineVersion": {
        "description": "The version of the NLU engine to use.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "The language culture of the NLU domain, e.g. `en-us`, `de-de`.",
        "type": "string"
      },
      "lastPublishedVersion": {
        "$ref": "#/definitions/NluDomainVersion",
        "description": "The last published version of that NLU domain.",
        "readOnly": true
      },
      "name": {
        "description": "The name of the NLU domain.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "NluDomainListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/NluDomain"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "NluDomainVersion": {
    "properties": {
      "dateCreated": {
        "description": "The date when the NLU domain version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date when the NLU domain version was updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "datePublished": {
        "description": "The date when the NLU domain version was published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateTrained": {
        "description": "The date when the NLU domain version was trained. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of the NLU domain version.",
        "type": "string"
      },
      "domain": {
        "$ref": "#/definitions/NluDomain",
        "description": "The NLU domain of the version.",
        "readOnly": true
      },
      "entities": {
        "description": "The entities defined for this NLU domain version.This field is mutually exclusive with entityTypeBindings",
        "items": {
          "$ref": "#/definitions/NamedEntityDefinition"
        },
        "type": "array"
      },
      "entityTypes": {
        "description": "The entity types defined for this NLU domain version.",
        "items": {
          "$ref": "#/definitions/NamedEntityTypeDefinition"
        },
        "type": "array"
      },
      "evaluationStatus": {
        "description": "The evaluation status of the NLU domain version.",
        "enum": [
          "Unevaluated",
          "Evaluating",
          "Evaluated",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intents": {
        "description": "The intents defined for this NLU domain version.",
        "items": {
          "$ref": "#/definitions/IntentDefinition"
        },
        "type": "array"
      },
      "language": {
        "description": "The language that the NLU domain version supports.",
        "type": "string"
      },
      "published": {
        "description": "Whether this NLU domain version has been published.",
        "readOnly": true,
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "trainingStatus": {
        "description": "The training status of the NLU domain version.",
        "enum": [
          "Untrained",
          "Training",
          "Trained",
          "Error",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "language"
    ],
    "type": "object"
  },
  "NluDomainVersionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/NluDomainVersion"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "NluDomainVersionQualityReport": {
    "properties": {
      "confusionMatrix": {
        "description": "The confusion matrix for the Domain Version",
        "items": {
          "$ref": "#/definitions/NluConfusionMatrixRow"
        },
        "type": "array"
      },
      "summary": {
        "$ref": "#/definitions/NluQualityReportSummary",
        "description": "The quality report summary for the Domain Version"
      },
      "version": {
        "$ref": "#/definitions/NluDomainVersion",
        "description": "The domain and version details of the quality report"
      }
    },
    "required": [
      "confusionMatrix",
      "summary",
      "version"
    ],
    "type": "object"
  },
  "NluDomainVersionTrainingResponse": {
    "properties": {
      "message": {
        "description": "A message indicating result of the action.",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "$ref": "#/definitions/NluDomainVersion"
      }
    },
    "type": "object"
  },
  "NluFeedbackListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/NluFeedbackResponse"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "NluFeedbackRequest": {
    "properties": {
      "intents": {
        "description": "Detected intent of the utterance",
        "items": {
          "$ref": "#/definitions/IntentFeedback"
        },
        "type": "array"
      },
      "language": {
        "description": "The language of the version to which feedback is linked, e.g. en-us, de-de",
        "type": "string"
      },
      "text": {
        "description": "The feedback text.",
        "type": "string"
      },
      "versionId": {
        "description": "The domain version ID of the feedback.",
        "type": "string"
      }
    },
    "required": [
      "intents",
      "text",
      "versionId"
    ],
    "type": "object"
  },
  "NluFeedbackResponse": {
    "properties": {
      "dateCreated": {
        "description": "The date when the feedback was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intents": {
        "description": "Detected intent of the utterance",
        "items": {
          "$ref": "#/definitions/IntentFeedback"
        },
        "type": "array"
      },
      "language": {
        "description": "The language of the version to which feedback is linked, e.g. en-us, de-de",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "text": {
        "description": "The feedback text.",
        "type": "string"
      },
      "version": {
        "$ref": "#/definitions/NluDomainVersion",
        "description": "The domain version of the feedback.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "NluInfo": {
    "properties": {
      "domain": {
        "$ref": "#/definitions/AddressableEntityRef",
        "readOnly": true
      },
      "engineVersion": {
        "type": "string"
      },
      "intents": {
        "items": {
          "$ref": "#/definitions/Intent"
        },
        "type": "array"
      },
      "nluData": {
        "$ref": "#/definitions/NluDomainVersion"
      },
      "version": {
        "$ref": "#/definitions/NluDomainVersion",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "NluQualityReportSummary": {
    "properties": {
      "metrics": {
        "description": "The list of metrics in the summary",
        "items": {
          "$ref": "#/definitions/NluQualityReportSummaryMetric"
        },
        "type": "array"
      }
    },
    "required": [
      "metrics"
    ],
    "type": "object"
  },
  "NluQualityReportSummaryMetric": {
    "properties": {
      "name": {
        "description": "The name of the metric. e.g. recall, f1_score",
        "type": "string"
      },
      "value": {
        "description": "The value of the metric",
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "name",
      "value"
    ],
    "type": "object"
  },
  "NluUtterance": {
    "properties": {
      "id": {
        "description": "ID of the utterance.",
        "readOnly": true,
        "type": "string"
      },
      "segments": {
        "description": "The list of segments that that constitute this utterance for the given intent.",
        "items": {
          "$ref": "#/definitions/NluUtteranceSegment"
        },
        "type": "array"
      }
    },
    "required": [
      "segments"
    ],
    "type": "object"
  },
  "NluUtteranceSegment": {
    "properties": {
      "entity": {
        "$ref": "#/definitions/NamedEntityAnnotation",
        "description": "The entity annotation of the segment."
      },
      "text": {
        "description": "The text of the segment.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "Note": {
    "properties": {
      "createDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/User",
        "description": "When creating or updating a note, only User.id is required. User object is fully populated when expanding a note."
      },
      "entityId": {
        "description": "The id of the contact or organization to which this note refers. This only needs to be set for input when using the Bulk APIs.",
        "type": "string"
      },
      "entityType": {
        "description": "This is only need to be set when using Bulk API. Using any other value than contact or organization will result in null being used.",
        "enum": [
          "contact",
          "organization"
        ],
        "type": "string"
      },
      "externalDataSources": {
        "description": "Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.",
        "items": {
          "$ref": "#/definitions/ExternalDataSource"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifyDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "noteText": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "createdBy"
    ],
    "type": "object"
  },
  "NoteListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Note"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "partialResults": {
        "type": "boolean"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "NotificationTemplateBody": {
    "description": "Template body object.",
    "properties": {
      "parameters": {
        "description": "Template parameters for placeholders in template.",
        "items": {
          "$ref": "#/definitions/NotificationTemplateParameter"
        },
        "type": "array"
      },
      "text": {
        "description": "Body text. For WhatsApp, ignored.",
        "type": "string"
      }
    },
    "required": [
      "parameters"
    ],
    "type": "object"
  },
  "NotificationTemplateFooter": {
    "description": "Template footer object.",
    "properties": {
      "text": {
        "description": "Footer text. For WhatsApp, ignored.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "NotificationTemplateHeader": {
    "description": "Template header object.",
    "properties": {
      "media": {
        "$ref": "#/definitions/ContentAttachment",
        "description": "Media template header image."
      },
      "parameters": {
        "description": "Template parameters for placeholders in template.",
        "items": {
          "$ref": "#/definitions/NotificationTemplateParameter"
        },
        "type": "array"
      },
      "text": {
        "description": "Header text. For WhatsApp, ignored.",
        "type": "string"
      },
      "type": {
        "description": "Template header type.",
        "enum": [
          "Text",
          "Media"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "NotificationTemplateParameter": {
    "description": "Template parameters for placeholders in template.",
    "properties": {
      "name": {
        "description": "Parameter name.",
        "type": "string"
      },
      "text": {
        "description": "Parameter text value.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "NotificationsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WfmUserNotification"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "NotificationsSettings": {
    "description": "Notification settings that handles messenger notifications",
    "properties": {
      "enabled": {
        "description": "The toggle to enable or disable notifications",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "NuanceApplication": {
    "description": "Model for a Nuance bot application",
    "properties": {
      "id": {
        "description": "The application ID",
        "type": "string"
      },
      "name": {
        "description": "The application name",
        "type": "string"
      },
      "tag": {
        "description": "The application Tag",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name",
      "tag"
    ],
    "type": "object"
  },
  "NuanceBot": {
    "description": "Model for a Nuance bot",
    "properties": {
      "application": {
        "$ref": "#/definitions/NuanceApplication",
        "description": "The Application for this bot"
      },
      "channels": {
        "description": "List of channels associated with this Nuance bot.",
        "items": {
          "$ref": "#/definitions/NuanceChannel"
        },
        "type": "array"
      },
      "credentials": {
        "description": "client ID/Secret objects for the credentials that execute this Nuance bot",
        "items": {
          "$ref": "#/definitions/NuanceBotCredentials"
        },
        "type": "array"
      },
      "geography": {
        "$ref": "#/definitions/NuanceGeography",
        "description": "The Geography of the Nuance bot"
      },
      "id": {
        "description": "Nuance bot Id",
        "type": "string"
      },
      "integrationId": {
        "description": "The Integration Id for this bot",
        "type": "string"
      },
      "locales": {
        "description": "List of locales associated with this Nuance bot.  Generally in the ISO format such as 'en-US'",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "Nuance bot name",
        "type": "string"
      },
      "nuanceEnvironment": {
        "$ref": "#/definitions/NuanceEnvironment",
        "description": "The environment of the Nuance bot"
      },
      "nuanceOrganization": {
        "$ref": "#/definitions/NuanceOrganization",
        "description": "The Nuance Organization for this bot"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "transferNodes": {
        "description": "List of transferNodes in this Nuance bot.  When querying, use the 'expand=transferNodes' query param to populate this value",
        "items": {
          "$ref": "#/definitions/NuanceBotTransferNode"
        },
        "type": "array"
      },
      "variables": {
        "description": "List of available variables in this Nuance bot.  When querying, use the 'expand=variables' query param to populate this value",
        "items": {
          "$ref": "#/definitions/NuanceBotVariable"
        },
        "type": "array"
      }
    },
    "required": [
      "application",
      "geography",
      "id",
      "integrationId",
      "name",
      "nuanceEnvironment",
      "nuanceOrganization"
    ],
    "type": "object"
  },
  "NuanceBotCredentials": {
    "description": "Model for a Nuance bot credentials",
    "properties": {
      "appId": {
        "description": "The application ID",
        "type": "string"
      },
      "clientId": {
        "description": "The credentials client ID",
        "type": "string"
      },
      "clientSecret": {
        "description": "The credentials client secret",
        "type": "string"
      },
      "clientSecretProvided": {
        "description": "True if the credentials secret is set (but not returned due to security reasons)",
        "type": "boolean"
      }
    },
    "required": [
      "appId",
      "clientId"
    ],
    "type": "object"
  },
  "NuanceBotEntityListing": {
    "description": "Model for a paged listing of Nuance bots",
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/NuanceBot"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "NuanceBotLaunchSettings": {
    "description": "Model for setting the launch configuration for Nuance bots available to Genesys Cloud",
    "properties": {
      "botExecutionConfigurations": {
        "description": "The list of Nuance bots that are configured as available to the Genesys Cloud system",
        "items": {
          "$ref": "#/definitions/BotExecutionConfiguration"
        },
        "type": "array"
      }
    },
    "required": [
      "botExecutionConfigurations"
    ],
    "type": "object"
  },
  "NuanceBotTransferNode": {
    "description": "Model for a Nuance bot transfer node",
    "properties": {
      "description": {
        "description": "The transfer node description",
        "type": "string"
      },
      "id": {
        "description": "The transfer node ID",
        "type": "string"
      },
      "name": {
        "description": "The transfer node name",
        "type": "string"
      },
      "requestVariables": {
        "description": "List of variables associated with this transfer node",
        "items": {
          "$ref": "#/definitions/NuanceBotVariable"
        },
        "type": "array"
      },
      "type": {
        "description": "The transfer node type",
        "enum": [
          "End",
          "Escalate"
        ],
        "type": "string"
      }
    },
    "required": [
      "id",
      "name",
      "type"
    ],
    "type": "object"
  },
  "NuanceBotVariable": {
    "description": "Model for a Nuance bot variable",
    "properties": {
      "complexGenericVariableInfo": {
        "$ref": "#/definitions/ComplexVariableInfo",
        "description": "The type information for this variable"
      },
      "description": {
        "description": "The variable description",
        "type": "string"
      },
      "id": {
        "description": "The variable ID",
        "type": "string"
      },
      "name": {
        "description": "The variable display name",
        "type": "string"
      },
      "reserved": {
        "description": "True if the variable is a reserved variable",
        "type": "boolean"
      },
      "simpleVariableInfo": {
        "description": "The type information for this variable",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "NuanceChannel": {
    "description": "Model for a Nuance channel",
    "properties": {
      "color": {
        "description": "The Channel Color",
        "type": "string"
      },
      "id": {
        "description": "The channel ID",
        "type": "string"
      },
      "modes": {
        "description": "Supported Channel Modes",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The channel name",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "NuanceEnvironment": {
    "description": "Model for a Nuance bot environment",
    "properties": {
      "environmentDesignation": {
        "description": "The environment type, usually a value like SANDBOX or PRODUCTION",
        "type": "string"
      },
      "executionHost": {
        "description": "The host used to execute this bot, similar to 'api.nuance.com:443'",
        "type": "string"
      },
      "id": {
        "description": "The environment ID",
        "type": "string"
      },
      "name": {
        "description": "The environment name",
        "type": "string"
      }
    },
    "required": [
      "environmentDesignation",
      "id",
      "name"
    ],
    "type": "object"
  },
  "NuanceGeography": {
    "description": "Model for a Nuance bot geography",
    "properties": {
      "id": {
        "description": "The geography ID",
        "type": "string"
      },
      "name": {
        "description": "The geography name",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "NuanceMixDlgSettings": {
    "properties": {
      "channelId": {
        "description": "The Nuance channel ID to use when launching the Nuance bot, which must one of the code names of the bot's registered input channels.",
        "type": "string"
      },
      "inputParameters": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Name/value pairs of input variables to be sent to the Nuance bot. The values must be in the appropriate format for the variable's type (see https://docs.mix.nuance.com/dialog-grpc/v1/#simple-variable-types for help)",
        "type": "object"
      }
    },
    "type": "object"
  },
  "NuanceOrganization": {
    "description": "Model for a Nuance bot organization",
    "properties": {
      "id": {
        "description": "The organization ID",
        "type": "string"
      },
      "name": {
        "description": "The organization name",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "Number": {
    "properties": {
      "end": {
        "type": "string"
      },
      "start": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "NumberPlan": {
    "properties": {
      "classification": {
        "type": "string"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "digitLength": {
        "$ref": "#/definitions/DigitLength"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "match": {
        "type": "string"
      },
      "matchType": {
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "normalizedFormat": {
        "type": "string"
      },
      "numbers": {
        "items": {
          "$ref": "#/definitions/Number"
        },
        "type": "array"
      },
      "priority": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "NumericRange": {
    "properties": {
      "gt": {
        "description": "Greater than",
        "type": "number"
      },
      "gte": {
        "description": "Greater than or equal to",
        "type": "number"
      },
      "lt": {
        "description": "Less than",
        "type": "number"
      },
      "lte": {
        "description": "Less than or equal to",
        "type": "number"
      }
    },
    "type": "object"
  },
  "OAuthAuthorization": {
    "properties": {
      "client": {
        "$ref": "#/definitions/OAuthClient"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "pending": {
        "type": "boolean"
      },
      "resourceOwner": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "roles": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "scope": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "enum": [
          "Unauthorized",
          "Requested",
          "Authorized",
          "Revoked"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "OAuthAuthorizationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OAuthAuthorization"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OAuthClient": {
    "properties": {
      "accessTokenValiditySeconds": {
        "description": "The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. If this field is omitted, a default of 24 hours will be applied.",
        "format": "int64",
        "type": "integer"
      },
      "authorizedGrantType": {
        "description": "The OAuth Grant/Client type supported by this client.\nCode Authorization Grant/Client type - Preferred client type where the Client ID and Secret are required to create tokens. Used where the secret can be secured.\nPKCE-Enabled Code Authorization grant type - Code grant type which requires PKCE challenge and verifier to create tokens. Used in public clients for increased security.\nImplicit grant type - Client ID only is required to create tokens. Used in browser and mobile apps where the secret can not be secured.\nSAML2-Bearer extension grant type - SAML2 assertion provider for user authentication at the token endpoint.\nClient Credential grant type - Used to created access tokens that are tied only to the client.\n",
        "enum": [
          "CODE",
          "TOKEN",
          "SAML2-BEARER",
          "PASSWORD",
          "CLIENT-CREDENTIALS"
        ],
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User that created this client"
      },
      "dateCreated": {
        "description": "Date this client was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this client was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateToDelete": {
        "description": "The time at which this client will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User that last modified this client"
      },
      "name": {
        "description": "The name of the OAuth client.",
        "type": "string"
      },
      "registeredRedirectUri": {
        "description": "List of allowed callbacks for this client. For example: https://myap.example.com/auth/callback",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "roleDivisions": {
        "description": "Set of roles and their corresponding divisions associated with this client. Roles and divisions only apply to clients using the client_credential grant",
        "items": {
          "$ref": "#/definitions/RoleDivision"
        },
        "type": "array",
        "uniqueItems": true
      },
      "roleIds": {
        "description": "Deprecated. Use roleDivisions instead.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "scope": {
        "description": "The scope requested by this client. Scopes only apply to clients not using the client_credential grant",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "secret": {
        "description": "System created secret assigned to this client. Secrets are required for code authorization and client credential grants.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the OAuth client.\nActive: The OAuth client can be used to create access tokens. This is the default state.\nDisabled: Access tokens created by the client are invalid and new ones cannot be created.\nInactive: Access tokens cannot be created with this OAuth client and it will be deleted.",
        "enum": [
          "active",
          "disabled",
          "inactive"
        ],
        "type": "string"
      }
    },
    "required": [
      "authorizedGrantType",
      "name"
    ],
    "type": "object"
  },
  "OAuthClientEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OAuthClientListing"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OAuthClientListing": {
    "properties": {
      "accessTokenValiditySeconds": {
        "description": "The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. If this field is omitted, a default of 24 hours will be applied.",
        "format": "int64",
        "type": "integer"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User that created this client"
      },
      "dateCreated": {
        "description": "Date this client was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this client was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateToDelete": {
        "description": "The time at which this client will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User that last modified this client"
      },
      "name": {
        "description": "The name of the OAuth client.",
        "type": "string"
      },
      "registeredRedirectUri": {
        "description": "List of allowed callbacks for this client. For example: https://myap.example.com/auth/callback",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "roleDivisions": {
        "description": "Set of roles and their corresponding divisions associated with this client. Roles and divisions only apply to clients using the client_credential grant",
        "items": {
          "$ref": "#/definitions/RoleDivision"
        },
        "type": "array",
        "uniqueItems": true
      },
      "roleIds": {
        "description": "Deprecated. Use roleDivisions instead.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "scope": {
        "description": "The scope requested by this client. Scopes only apply to clients not using the client_credential grant",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "secret": {
        "description": "System created secret assigned to this client. Secrets are required for code authorization and client credential grants.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the OAuth client.\nActive: The OAuth client can be used to create access tokens. This is the default state.\nDisabled: Access tokens created by the client are invalid and new ones cannot be created.\nInactive: Access tokens cannot be created with this OAuth client and it will be deleted.",
        "enum": [
          "active",
          "disabled",
          "inactive"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "OAuthClientRequest": {
    "properties": {
      "accessTokenValiditySeconds": {
        "description": "The number of seconds, between 5mins and 48hrs, until tokens created with this client expire. If this field is omitted, a default of 24 hours will be applied.",
        "format": "int64",
        "type": "integer"
      },
      "authorizedGrantType": {
        "description": "The OAuth Grant/Client type supported by this client.\nCode Authorization Grant/Client type - Preferred client type where the Client ID and Secret are required to create tokens. Used where the secret can be secured.\nPKCE-Enabled Code Authorization grant type - Code grant type which requires PKCE challenge and verifier to create tokens. Used in public clients for increased security.\nImplicit grant type - Client ID only is required to create tokens. Used in browser and mobile apps where the secret can not be secured.\nSAML2-Bearer extension grant type - SAML2 assertion provider for user authentication at the token endpoint.\nClient Credential grant type - Used to created access tokens that are tied only to the client.\n",
        "enum": [
          "CODE",
          "TOKEN",
          "SAML2-BEARER",
          "PASSWORD",
          "CLIENT-CREDENTIALS"
        ],
        "type": "string"
      },
      "dateToDelete": {
        "description": "The time at which this client will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "name": {
        "description": "The name of the OAuth client.",
        "type": "string"
      },
      "registeredRedirectUri": {
        "description": "List of allowed callbacks for this client. For example: https://myap.example.com/auth/callback",
        "items": {
          "format": "uri",
          "type": "string"
        },
        "type": "array"
      },
      "roleDivisions": {
        "description": "Set of roles and their corresponding divisions associated with this client. Roles and divisions only apply to clients using the client_credential grant",
        "items": {
          "$ref": "#/definitions/RoleDivision"
        },
        "type": "array",
        "uniqueItems": true
      },
      "roleIds": {
        "description": "Deprecated. Use roleDivisions instead.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "scope": {
        "description": "The scope requested by this client. Scopes only apply to clients not using the client_credential grant",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "state": {
        "description": "The state of the OAuth client.\nActive: The OAuth client can be used to create access tokens. This is the default state.\nDisabled: Access tokens created by the client are invalid and new ones cannot be created.\nInactive: Access tokens cannot be created with this OAuth client and it will be deleted.",
        "enum": [
          "active",
          "disabled",
          "inactive"
        ],
        "type": "string"
      }
    },
    "required": [
      "authorizedGrantType",
      "name"
    ],
    "type": "object"
  },
  "OAuthLastTokenIssued": {
    "properties": {
      "dateIssued": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "OAuthScope": {
    "properties": {
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "OAuthScopeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OAuthScope"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Objective": {
    "properties": {
      "dateStart": {
        "description": "start date of the objective. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "enabled": {
        "description": "A flag for whether this objective is enabled for the related metric",
        "type": "boolean"
      },
      "evaluationFormContextIds": {
        "description": "The ids of associated evaluation form context, for Quality Evaluation Score metrics",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "initialDirection": {
        "description": "The initial direction to filter on",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "mediaTypes": {
        "description": "A list of media types for the metric",
        "items": {
          "enum": [
            "callback",
            "chat",
            "cobrowse",
            "email",
            "message",
            "screenshare",
            "unknown",
            "video",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "queues": {
        "description": "A list of queues for the metric",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "templateId": {
        "description": "The id of this objective's base template",
        "type": "string"
      },
      "topicIdsFilterType": {
        "description": "A filter type for topic Ids. It's only used for objectives with topicIds. Default filter behavior is \"or\".",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      },
      "topics": {
        "description": "A list of topic ids for detected topic metrics",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "zones": {
        "description": "Objective zone specifies min,max points and values for the associated metric",
        "items": {
          "$ref": "#/definitions/ObjectiveZone"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ObjectiveTemplate": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "zones": {
        "items": {
          "$ref": "#/definitions/ObjectiveZone"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ObjectiveZone": {
    "properties": {
      "directionType": {
        "description": "direction type",
        "enum": [
          "Up",
          "Down",
          "Flat"
        ],
        "type": "string"
      },
      "label": {
        "description": "label",
        "type": "string"
      },
      "lowerLimitPoints": {
        "description": "lower limit points",
        "format": "int32",
        "type": "integer"
      },
      "lowerLimitValue": {
        "description": "lower limit value",
        "format": "int32",
        "type": "integer"
      },
      "upperLimitPoints": {
        "description": "upper limit points",
        "format": "int32",
        "type": "integer"
      },
      "upperLimitValue": {
        "description": "upper limit value",
        "format": "int32",
        "type": "integer"
      },
      "zoneType": {
        "description": "zone type",
        "enum": [
          "Good",
          "Target",
          "Great",
          "Out"
        ],
        "type": "string"
      }
    },
    "required": [
      "directionType",
      "label",
      "lowerLimitPoints",
      "upperLimitPoints",
      "zoneType"
    ],
    "type": "object"
  },
  "ObservationMetricData": {
    "properties": {
      "metric": {
        "type": "string"
      },
      "observations": {
        "description": "List of observations sorted by timestamp in ascending order. This list may be truncated.",
        "items": {
          "$ref": "#/definitions/ObservationValue"
        },
        "type": "array"
      },
      "qualifier": {
        "type": "string"
      },
      "stats": {
        "$ref": "#/definitions/StatisticalSummary"
      },
      "truncated": {
        "description": "Flag for a truncated list of observations. If truncated, the first half of the list of observations will contain the oldest observations and the second half the newest observations.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ObservationValue": {
    "properties": {
      "addressFrom": {
        "description": "The address that initiated an action",
        "type": "string"
      },
      "addressTo": {
        "description": "The address receiving an action",
        "type": "string"
      },
      "ani": {
        "description": "Automatic Number Identification (caller's number)",
        "type": "string"
      },
      "conversationId": {
        "description": "Unique identifier for the conversation",
        "type": "string"
      },
      "convertedFrom": {
        "description": "Session media type that was converted from in case of a media type conversion",
        "type": "string"
      },
      "convertedTo": {
        "description": "Session media type that was converted to in case of a media type conversion",
        "type": "string"
      },
      "direction": {
        "description": "The direction of the communication",
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "dnis": {
        "description": "Dialed number identification service (number dialed by the calling party)",
        "type": "string"
      },
      "observationDate": {
        "description": "The time at which the observation occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "participantName": {
        "description": "A human readable name identifying the participant",
        "type": "string"
      },
      "requestedLanguageId": {
        "description": "Unique identifier for the language requested for an interaction",
        "type": "string"
      },
      "requestedRoutingSkillIds": {
        "description": "Unique identifier for a skill requested for an interaction",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "requestedRoutings": {
        "description": "All routing types for requested/attempted routing methods",
        "items": {
          "enum": [
            "Bullseye",
            "Conditional",
            "Direct",
            "Last",
            "Manual",
            "Predictive",
            "Preferred",
            "Standard",
            "Vip"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "routingPriority": {
        "description": "Routing priority for the current interaction",
        "format": "int64",
        "type": "integer"
      },
      "scoredAgents": {
        "items": {
          "$ref": "#/definitions/AnalyticsScoredAgent"
        },
        "type": "array"
      },
      "sessionId": {
        "description": "The unique identifier of this session",
        "type": "string"
      },
      "teamId": {
        "description": "The team id the user is a member of",
        "type": "string"
      },
      "usedRouting": {
        "description": "Complete routing method",
        "enum": [
          "Bullseye",
          "Conditional",
          "Direct",
          "Last",
          "Manual",
          "Predictive",
          "Preferred",
          "Standard",
          "Vip"
        ],
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "required": [
      "observationDate"
    ],
    "type": "object"
  },
  "OccurrenceDetails": {
    "properties": {
      "dateOfNextOccurrence": {
        "description": "The date of the next start or end occurrence for the recurrence as an ISO-8601 string",
        "example": "2023-12-21T16:30:25.00Z",
        "format": "date-time",
        "type": "string"
      },
      "numberOfOccurrences": {
        "description": "The number of start or end occurrences that have been processed for the recurrence.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Okta": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "OneLogin": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "OpenActionFields": {
    "properties": {
      "configurationFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by the open action type selected.",
        "type": "object"
      },
      "openAction": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The specific type of the open action."
      }
    },
    "required": [
      "openAction"
    ],
    "type": "object"
  },
  "OpenActionProperties": {
    "properties": {
      "configurationFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by the open action type selected.",
        "type": "object"
      },
      "openActionName": {
        "description": "The specific type of the open action.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "OpenContentAttachment": {
    "description": "Attachment object.",
    "properties": {
      "filename": {
        "description": "Suggested file name for attachment.",
        "type": "string"
      },
      "id": {
        "description": "Provider specific ID for attachment. For example, middleware media UUID.",
        "type": "string"
      },
      "mediaType": {
        "description": "The type of attachment this instance represents.",
        "enum": [
          "Image",
          "Video",
          "Audio",
          "File",
          "Link"
        ],
        "type": "string"
      },
      "mime": {
        "description": "Attachment mime type (https://www.iana.org/assignments/media-types/media-types.xhtml).",
        "type": "string"
      },
      "sha256": {
        "description": "Secure hash of the attachment content.",
        "type": "string"
      },
      "text": {
        "description": "Text associated with attachment such as an image caption.",
        "type": "string"
      },
      "url": {
        "description": "URL of the attachment.",
        "type": "string"
      }
    },
    "required": [
      "mediaType",
      "mime",
      "url"
    ],
    "type": "object"
  },
  "OpenEvent": {
    "description": "Message event element.",
    "properties": {
      "eventType": {
        "description": "Type of this event element",
        "enum": [
          "Typing"
        ],
        "type": "string"
      }
    },
    "required": [
      "eventType"
    ],
    "type": "object"
  },
  "OpenEventNormalizedMessage": {
    "description": "Open Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "events": {
        "description": "List of event elements.",
        "items": {
          "$ref": "#/definitions/OpenMessageEvent"
        },
        "type": "array"
      },
      "id": {
        "description": "Unique ID of the message generated by Messaging Platform.",
        "type": "string"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Event"
        ],
        "type": "string"
      }
    },
    "required": [
      "channel",
      "type"
    ],
    "type": "object"
  },
  "OpenInboundMessageContent": {
    "description": "Message content element.",
    "properties": {
      "attachment": {
        "$ref": "#/definitions/OpenContentAttachment",
        "description": "Attachment content."
      }
    },
    "type": "object"
  },
  "OpenInboundMessageMessagingChannel": {
    "description": "Open Channel-specific information that describes the message and the message channel/provider, with additional message information",
    "properties": {
      "from": {
        "$ref": "#/definitions/OpenMessagingFromRecipient",
        "description": "Information about the recipient the message is received from."
      },
      "messageId": {
        "description": "Unique provider ID of the message.",
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/ConversationChannelMetadata",
        "description": "Additional Custom Information about the channel."
      },
      "time": {
        "description": "Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "from",
      "time"
    ],
    "type": "object"
  },
  "OpenInboundMessagingChannel": {
    "description": "Open Channel-specific information that describes the message and the message channel/provider.",
    "properties": {
      "from": {
        "$ref": "#/definitions/OpenMessagingFromRecipient",
        "description": "Information about the recipient the message is received from."
      },
      "time": {
        "description": "Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "from",
      "time"
    ],
    "type": "object"
  },
  "OpenInboundMessagingReceiptChannel": {
    "description": "Open Channel-specific information that describes the message and the message channel/provider.",
    "properties": {
      "time": {
        "description": "Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "$ref": "#/definitions/OpenMessagingToRecipient",
        "description": "Information about the recipient the message is intended for."
      }
    },
    "required": [
      "time",
      "to"
    ],
    "type": "object"
  },
  "OpenInboundNormalizedEvent": {
    "description": "Open Event Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenInboundMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "events": {
        "description": "List of event elements.",
        "items": {
          "$ref": "#/definitions/OpenEvent"
        },
        "type": "array"
      }
    },
    "required": [
      "channel",
      "events"
    ],
    "type": "object"
  },
  "OpenInboundNormalizedMessage": {
    "description": "Open Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenInboundMessageMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "content": {
        "description": "List of content elements.",
        "items": {
          "$ref": "#/definitions/OpenInboundMessageContent"
        },
        "type": "array"
      },
      "metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this message to capture non-channel specific data.",
        "type": "object"
      },
      "text": {
        "description": "Message text.",
        "type": "string"
      }
    },
    "required": [
      "channel"
    ],
    "type": "object"
  },
  "OpenInboundNormalizedReceipt": {
    "description": "Open Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenInboundMessagingReceiptChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "id": {
        "description": "The original unique message Id generated by the messaging platform, that this receipt message is referencing.",
        "type": "string"
      },
      "isFinalReceipt": {
        "description": "Indicates if this is the last message receipt for this message, or if another message receipt can be expected.",
        "type": "boolean"
      },
      "reasons": {
        "description": "List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.",
        "items": {
          "$ref": "#/definitions/ConversationReason"
        },
        "type": "array"
      },
      "status": {
        "description": "Message receipt status.",
        "enum": [
          "Sent",
          "Delivered",
          "Failed",
          "Published",
          "Removed"
        ],
        "type": "string"
      }
    },
    "required": [
      "channel",
      "id",
      "status"
    ],
    "type": "object"
  },
  "OpenIntegration": {
    "properties": {
      "createError": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error information returned, if createStatus is set to Error",
        "readOnly": true
      },
      "createStatus": {
        "description": "Status of asynchronous create operation",
        "enum": [
          "Initiated",
          "Completed",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Integration"
      },
      "dateCreated": {
        "description": "Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this Integration was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A unique Integration Id.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingReference"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that last modified this Integration"
      },
      "name": {
        "description": "The name of the Open messaging integration.",
        "type": "string"
      },
      "outboundNotificationWebhookSignatureSecretToken": {
        "description": "The outbound notification webhook signature secret token.",
        "type": "string"
      },
      "outboundNotificationWebhookUrl": {
        "description": "The outbound notification webhook URL for the Open messaging integration.",
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The recipient associated to the Open messaging Integration. This recipient is used to associate a flow to an integration",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the Open Integration",
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "webhookHeaders": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The user specified headers for the Open messaging integration.",
        "type": "object"
      }
    },
    "required": [
      "id",
      "name",
      "outboundNotificationWebhookSignatureSecretToken",
      "outboundNotificationWebhookUrl"
    ],
    "type": "object"
  },
  "OpenIntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OpenIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OpenIntegrationRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the Open messaging integration.",
        "type": "string"
      },
      "outboundNotificationWebhookSignatureSecretToken": {
        "description": "The outbound notification webhook signature secret token. This token must be longer than 15 characters.",
        "type": "string"
      },
      "outboundNotificationWebhookUrl": {
        "description": "The outbound notification webhook URL for the Open messaging integration.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "webhookHeaders": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The user specified headers for the Open messaging integration.",
        "type": "object"
      }
    },
    "required": [
      "name",
      "outboundNotificationWebhookSignatureSecretToken",
      "outboundNotificationWebhookUrl"
    ],
    "type": "object"
  },
  "OpenIntegrationUpdateRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the Open messaging integration.",
        "type": "string"
      },
      "outboundNotificationWebhookSignatureSecretToken": {
        "description": "The outbound notification webhook signature secret token.",
        "type": "string"
      },
      "outboundNotificationWebhookUrl": {
        "description": "The outbound notification webhook URL for the Open messaging integration.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "webhookHeaders": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The user specified headers for the Open messaging integration.",
        "type": "object"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "OpenMessageContent": {
    "description": "Message content element.",
    "properties": {
      "attachment": {
        "$ref": "#/definitions/ConversationContentAttachment",
        "description": "Attachment content."
      },
      "contentType": {
        "description": "Type of this content element. If contentType = \"Attachment\" only one item is allowed.",
        "enum": [
          "Attachment"
        ],
        "type": "string"
      }
    },
    "required": [
      "contentType"
    ],
    "type": "object"
  },
  "OpenMessageEvent": {
    "description": "Message event element.",
    "properties": {
      "eventType": {
        "description": "Type of this event element",
        "enum": [
          "Typing"
        ],
        "type": "string"
      },
      "typing": {
        "$ref": "#/definitions/ConversationEventTyping",
        "description": "Typing event."
      }
    },
    "required": [
      "eventType"
    ],
    "type": "object"
  },
  "OpenMessageNormalizedMessage": {
    "description": "Open Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "content": {
        "description": "List of content elements.",
        "items": {
          "$ref": "#/definitions/OpenMessageContent"
        },
        "type": "array"
      },
      "id": {
        "description": "Unique ID of the message generated by Messaging Platform.",
        "type": "string"
      },
      "metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this message.",
        "type": "object"
      },
      "text": {
        "description": "Message text.",
        "type": "string"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Text"
        ],
        "type": "string"
      }
    },
    "required": [
      "channel",
      "type"
    ],
    "type": "object"
  },
  "OpenMessagingChannel": {
    "description": "Channel-specific information that describes the message and the message channel/provider.",
    "properties": {
      "from": {
        "$ref": "#/definitions/OpenMessagingFromRecipient",
        "description": "Information about the recipient the message is received from."
      },
      "id": {
        "description": "The Messaging Platform integration ID.",
        "readOnly": true,
        "type": "string"
      },
      "messageId": {
        "description": "Unique provider ID of the message such as a Facebook message ID.",
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/ConversationChannelMetadata",
        "description": "Information about the channel."
      },
      "platform": {
        "description": "The provider type.",
        "enum": [
          "Open"
        ],
        "readOnly": true,
        "type": "string"
      },
      "time": {
        "description": "Original time of the event. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "$ref": "#/definitions/OpenMessagingToRecipient",
        "description": "Information about the recipient the message is sent to."
      },
      "type": {
        "description": "Specifies if this message is part of a private or public conversation.",
        "enum": [
          "Private"
        ],
        "type": "string"
      }
    },
    "required": [
      "from",
      "time",
      "to"
    ],
    "type": "object"
  },
  "OpenMessagingFromRecipient": {
    "description": "Information about the recipient the message is received from.",
    "properties": {
      "email": {
        "description": "E-mail address of the recipient.",
        "type": "string"
      },
      "firstName": {
        "description": "First name of the recipient.",
        "type": "string"
      },
      "id": {
        "description": "The recipient ID specific to the provider.",
        "type": "string"
      },
      "idType": {
        "description": "The recipient ID type. This is used to indicate the format used for the ID.",
        "enum": [
          "Email",
          "Phone",
          "Opaque"
        ],
        "type": "string"
      },
      "image": {
        "description": "URL of an image that represents the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "lastName": {
        "description": "Last name of the recipient.",
        "type": "string"
      },
      "nickname": {
        "description": "Nickname or display name of the recipient.",
        "type": "string"
      }
    },
    "required": [
      "id",
      "idType"
    ],
    "type": "object"
  },
  "OpenMessagingToRecipient": {
    "description": "Information about the recipient the message is sent to.",
    "properties": {
      "email": {
        "description": "E-mail address of the recipient.",
        "type": "string"
      },
      "firstName": {
        "description": "First name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The recipient ID specific to the provider.",
        "type": "string"
      },
      "idType": {
        "description": "The recipient ID type. This is used to indicate the format used for the ID.",
        "enum": [
          "Email",
          "Phone",
          "Opaque"
        ],
        "readOnly": true,
        "type": "string"
      },
      "image": {
        "description": "URL of an image that represents the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "lastName": {
        "description": "Last name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "nickname": {
        "description": "Nickname or display name of the recipient.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "OpenNormalizedMessage": {
    "description": "Open Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "content": {
        "description": "List of content elements.",
        "items": {
          "$ref": "#/definitions/OpenMessageContent"
        },
        "type": "array"
      },
      "direction": {
        "description": "The direction of the message.",
        "enum": [
          "Inbound",
          "Outbound"
        ],
        "type": "string"
      },
      "id": {
        "description": "Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference, as such should only be set when sending a message receipt.",
        "type": "string"
      },
      "isFinalReceipt": {
        "description": "Indicates if this is the last message receipt for this message, or if another message receipt can be expected.",
        "type": "boolean"
      },
      "metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this message.",
        "type": "object"
      },
      "reasons": {
        "description": "List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.",
        "items": {
          "$ref": "#/definitions/ConversationReason"
        },
        "type": "array"
      },
      "status": {
        "description": "Message receipt status, only used with type Receipt.",
        "enum": [
          "Sent",
          "Delivered",
          "Read",
          "Failed",
          "Published",
          "Removed"
        ],
        "type": "string"
      },
      "text": {
        "description": "Message text.",
        "type": "string"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Text",
          "Receipt"
        ],
        "type": "string"
      }
    },
    "required": [
      "channel",
      "type"
    ],
    "type": "object"
  },
  "OpenReceiptNormalizedMessage": {
    "description": "Open Messaging rich media message structure",
    "properties": {
      "channel": {
        "$ref": "#/definitions/OpenMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "direction": {
        "description": "The direction of the message.",
        "enum": [
          "Inbound",
          "Outbound"
        ],
        "type": "string"
      },
      "id": {
        "description": "The original unique message Id generated by the messaging platform, that this receipt message is referencing.",
        "type": "string"
      },
      "isFinalReceipt": {
        "description": "Indicates if this is the last message receipt for this message, or if another message receipt can be expected.",
        "type": "boolean"
      },
      "reasons": {
        "description": "List of reasons for a message receipt that indicates the message has failed. Only used with Failed status.",
        "items": {
          "$ref": "#/definitions/ConversationReason"
        },
        "type": "array"
      },
      "status": {
        "description": "Message receipt status.",
        "enum": [
          "Sent",
          "Delivered",
          "Failed",
          "Published",
          "Removed"
        ],
        "type": "string"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Receipt"
        ],
        "type": "string"
      }
    },
    "required": [
      "channel",
      "direction",
      "id",
      "status",
      "type"
    ],
    "type": "object"
  },
  "Operand": {
    "properties": {
      "digitalWordsPosition": {
        "$ref": "#/definitions/OperandPosition",
        "description": "Dictates when the operand must occur in a digital interaction"
      },
      "infixOperator": {
        "$ref": "#/definitions/InfixOperator",
        "description": "Defines a logical operation that is applied on the current operand, against the following operand"
      },
      "inverted": {
        "description": "Applies a NOT modifier to the operand group",
        "type": "boolean"
      },
      "occurrence": {
        "description": "The minimum number of occurrences of the defined operand type",
        "format": "int32",
        "type": "integer"
      },
      "operands": {
        "description": "Contains a new level of operands",
        "items": {
          "$ref": "#/definitions/Operand"
        },
        "type": "array"
      },
      "term": {
        "$ref": "#/definitions/Term",
        "description": "Filter interaction by word(s)"
      },
      "topicId": {
        "description": "Filter interaction by topic ID",
        "type": "string"
      },
      "type": {
        "description": "The Operand type of the category",
        "enum": [
          "Term",
          "Topic",
          "OperandGroup"
        ],
        "type": "string"
      },
      "voiceSecondsPosition": {
        "$ref": "#/definitions/OperandPosition",
        "description": "Dictates when the operand must occur in a voice interaction"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "OperandPosition": {
    "properties": {
      "endingPositionDirection": {
        "description": "Dictates ending position directionality",
        "enum": [
          "FromStart",
          "FromEnd"
        ],
        "type": "string"
      },
      "endingPositionValue": {
        "description": "Defines ending point of a position range - number of seconds or words from the start or from the end of the interaction",
        "format": "int32",
        "type": "integer"
      },
      "startingPositionDirection": {
        "description": "Dictates starting position directionality",
        "enum": [
          "FromStart",
          "FromEnd"
        ],
        "type": "string"
      },
      "startingPositionValue": {
        "description": "Defines starting point of a position range - number of seconds or words from the start or from the end of the interaction",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Operation": {
    "properties": {
      "actionName": {
        "description": "Action name",
        "enum": [
          "CREATE",
          "CHECKIN",
          "CHECKOUT",
          "DEBUG",
          "DELETE",
          "HISTORY",
          "PUBLISH",
          "REVERT",
          "SAVE",
          "STATE_CHANGE",
          "UPDATE",
          "VALIDATE"
        ],
        "type": "string"
      },
      "actionStatus": {
        "description": "Action status",
        "enum": [
          "LOCKED",
          "UNLOCKED",
          "STARTED",
          "PENDING_GENERATION",
          "PENDING_BACKEND_NOTIFICATION",
          "SUCCESS",
          "FAILURE"
        ],
        "type": "string"
      },
      "client": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "complete": {
        "type": "boolean"
      },
      "errorCode": {
        "type": "string"
      },
      "errorDetails": {
        "items": {
          "$ref": "#/definitions/Detail"
        },
        "type": "array"
      },
      "errorMessage": {
        "type": "string"
      },
      "errorMessageParams": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "id": {
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "OperatorPosition": {
    "properties": {
      "digitalWordsPosition": {
        "description": "Number of words (for digital interactions) from operand match",
        "format": "int32",
        "type": "integer"
      },
      "voiceSecondsPosition": {
        "description": "Number of seconds (for voice interactions) from operand match",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OptInSettings": {
    "properties": {
      "keyword": {
        "description": "List of keywords for compliance",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "response": {
        "$ref": "#/definitions/ComplianceResponse",
        "description": "The response configuration for the keywords"
      }
    },
    "required": [
      "keyword",
      "response"
    ],
    "type": "object"
  },
  "OrgAuthSettings": {
    "properties": {
      "domainAllowlist": {
        "description": "The list of domains that will be allowed to embed Genesys Cloud applications.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "domainAllowlistEnabled": {
        "description": "Indicates whether the domain allowlist is enabled.",
        "type": "boolean"
      },
      "ipAddressAllowlist": {
        "description": "The list of IP addresses that will be allowed to authenticate with Genesys Cloud.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "multifactorAuthenticationRequired": {
        "description": "Indicates whether multi-factor authentication is required.",
        "type": "boolean"
      },
      "passwordRequirements": {
        "$ref": "#/definitions/PasswordRequirements",
        "description": "The password requirements for the organization."
      }
    },
    "type": "object"
  },
  "OrgOAuthClient": {
    "properties": {
      "authorizedGrantType": {
        "description": "The OAuth Grant/Client type supported by this client.\nCode Authorization Grant/Client type - Preferred client type where the Client ID and Secret are required to create tokens. Used where the secret can be secured.\nPKCE-Enabled Code Authorization grant type - Code grant type which requires PKCE challenge and verifier to create tokens. Used in public clients for increased security.\nImplicit grant type - Client ID only is required to create tokens. Used in browser and mobile apps where the secret can not be secured.\nSAML2-Bearer extension grant type - SAML2 assertion provider for user authentication at the token endpoint.\nClient Credential grant type - Used to created access tokens that are tied only to the client.\n",
        "enum": [
          "CODE",
          "TOKEN",
          "SAML2-BEARER",
          "PASSWORD",
          "CLIENT-CREDENTIALS"
        ],
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User that created this client"
      },
      "dateCreated": {
        "description": "Date this client was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this client was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateToDelete": {
        "description": "The time at which this client will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User that last modified this client"
      },
      "name": {
        "description": "The name of the OAuth client.",
        "type": "string"
      },
      "organization": {
        "$ref": "#/definitions/NamedEntity",
        "description": "The  oauth client's organization.",
        "readOnly": true
      },
      "roleDivisions": {
        "description": "Set of roles and their corresponding divisions associated with this client. Roles and divisions only apply to clients using the client_credential grant",
        "items": {
          "$ref": "#/definitions/RoleDivision"
        },
        "type": "array",
        "uniqueItems": true
      },
      "scope": {
        "description": "The scope requested by this client. Scopes only apply to clients not using the client_credential grant",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "state": {
        "description": "The state of the OAuth client.\nActive: The OAuth client can be used to create access tokens. This is the default state.\nDisabled: Access tokens created by the client are invalid and new ones cannot be created.\nInactive: Access tokens cannot be created with this OAuth client and it will be deleted.",
        "enum": [
          "active",
          "disabled",
          "inactive"
        ],
        "type": "string"
      }
    },
    "required": [
      "authorizedGrantType",
      "name"
    ],
    "type": "object"
  },
  "OrgUser": {
    "properties": {
      "acdAutoAnswer": {
        "description": "acd auto answer",
        "type": "boolean"
      },
      "addresses": {
        "description": "Email addresses and phone numbers for this user",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "authorization": {
        "$ref": "#/definitions/UserAuthorization",
        "description": "Roles and permissions assigned to the user",
        "readOnly": true
      },
      "biography": {
        "$ref": "#/definitions/Biography"
      },
      "certifications": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "chat": {
        "$ref": "#/definitions/Chat"
      },
      "conversationSummary": {
        "$ref": "#/definitions/UserConversationSummary",
        "description": "Summary of conversion statistics for conversation types.",
        "readOnly": true
      },
      "dateLastLogin": {
        "description": "The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "department": {
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "email": {
        "type": "string"
      },
      "employerInfo": {
        "$ref": "#/definitions/EmployerInfo"
      },
      "geolocation": {
        "$ref": "#/definitions/Geolocation",
        "description": "Current geolocation position",
        "readOnly": true
      },
      "groups": {
        "description": "The groups the user is a member of",
        "items": {
          "$ref": "#/definitions/Group"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "integrationPresence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Integration presence",
        "readOnly": true
      },
      "languagePreference": {
        "description": "preferred language by the user",
        "readOnly": true,
        "type": "string"
      },
      "languages": {
        "description": "Routing (ACD) languages possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "lastTokenIssued": {
        "$ref": "#/definitions/OAuthLastTokenIssued"
      },
      "locations": {
        "description": "The user placement at each site location.",
        "items": {
          "$ref": "#/definitions/Location"
        },
        "readOnly": true,
        "type": "array"
      },
      "manager": {
        "$ref": "#/definitions/User"
      },
      "name": {
        "type": "string"
      },
      "organization": {
        "$ref": "#/definitions/Organization"
      },
      "outOfOffice": {
        "$ref": "#/definitions/OutOfOffice",
        "description": "Determine if out of office is enabled",
        "readOnly": true
      },
      "preferredName": {
        "description": "Preferred full name of the agent",
        "type": "string"
      },
      "presence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Active presence",
        "readOnly": true
      },
      "primaryContactInfo": {
        "description": "Auto populated from addresses.",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "readOnly": true,
        "type": "array"
      },
      "profileSkills": {
        "description": "Profile skills possessed by the user",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "routingStatus": {
        "$ref": "#/definitions/RoutingStatus",
        "description": "ACD routing status",
        "readOnly": true
      },
      "skills": {
        "description": "Routing (ACD) skills possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingSkill"
        },
        "readOnly": true,
        "type": "array"
      },
      "state": {
        "description": "The current state for this user.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "station": {
        "$ref": "#/definitions/UserStations",
        "description": "Effective, default, and last station information",
        "readOnly": true
      },
      "team": {
        "$ref": "#/definitions/Team",
        "description": "The team the user is a member of",
        "readOnly": true
      },
      "title": {
        "type": "string"
      },
      "username": {
        "type": "string"
      },
      "version": {
        "description": "Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.",
        "format": "int32",
        "type": "integer"
      },
      "workPlanBidRanks": {
        "$ref": "#/definitions/WorkPlanBidRanks",
        "description": "The WFM work plan bid rank settings for the user",
        "readOnly": true
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "OrgWhitelistSettings": {
    "properties": {
      "domainWhitelist": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "enableWhitelist": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Organization": {
    "properties": {
      "defaultCountryCode": {
        "description": "The default country code for this organization. Example: 'US'",
        "type": "string"
      },
      "defaultLanguage": {
        "description": "The default language for this organization. Example: 'en'",
        "type": "string"
      },
      "defaultSiteId": {
        "type": "string"
      },
      "domain": {
        "type": "string"
      },
      "features": {
        "additionalProperties": {
          "type": "boolean"
        },
        "description": "The state of features available for the organization.",
        "readOnly": true,
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "productPlatform": {
        "description": "Organizations Originating Platform.",
        "enum": [
          "GenesysCloud",
          "PureCloud",
          "PureEngage",
          "PureEngageCloud",
          "PureConnect",
          "PureConnectCloud",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The current state. Examples are active, inactive, deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "supportURI": {
        "description": "Email address where support tickets are sent to.",
        "type": "string"
      },
      "thirdPartyOrgName": {
        "description": "The short name for the organization. This field is globally unique and cannot be changed.",
        "readOnly": true,
        "type": "string"
      },
      "thirdPartyURI": {
        "format": "uri",
        "type": "string"
      },
      "version": {
        "description": "The current version of the organization.",
        "format": "int32",
        "type": "integer"
      },
      "voicemailEnabled": {
        "type": "boolean"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "OrganizationFeatures": {
    "properties": {
      "chat": {
        "type": "boolean"
      },
      "contactCenter": {
        "type": "boolean"
      },
      "custserv": {
        "type": "boolean"
      },
      "directory": {
        "type": "boolean"
      },
      "hipaa": {
        "type": "boolean"
      },
      "informalPhotos": {
        "type": "boolean"
      },
      "pci": {
        "type": "boolean"
      },
      "purecloud": {
        "type": "boolean"
      },
      "purecloudVoice": {
        "type": "boolean"
      },
      "realtimeCIC": {
        "type": "boolean"
      },
      "ucEnabled": {
        "type": "boolean"
      },
      "unifiedCommunications": {
        "type": "boolean"
      },
      "xmppFederation": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "OrganizationPresence": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/User"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "deactivated": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "languageLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The label used for the system presence in each specified language",
        "type": "object"
      },
      "modifiedBy": {
        "$ref": "#/definitions/User"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "primary": {
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "systemPresence": {
        "type": "string"
      }
    },
    "required": [
      "languageLabels"
    ],
    "type": "object"
  },
  "OrganizationPresenceDefinition": {
    "properties": {
      "deactivated": {
        "type": "boolean"
      },
      "divisionId": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "languageLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The label used for the definition in each specified language",
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "systemPresence": {
        "enum": [
          "Available",
          "Away",
          "Busy",
          "Offline",
          "Idle",
          "OnQueue",
          "Meal",
          "Training",
          "Meeting",
          "Break"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of definition",
        "enum": [
          "System",
          "User"
        ],
        "type": "string"
      }
    },
    "required": [
      "languageLabels"
    ],
    "type": "object"
  },
  "OrganizationPresenceDefinitionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OrganizationPresenceDefinition"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OrganizationPresenceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OrganizationPresence"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OrganizationProductEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainOrganizationProduct"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OrganizationRoleEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainOrganizationRole"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OrphanRecording": {
    "properties": {
      "createdTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "fileState": {
        "enum": [
          "ARCHIVED",
          "AVAILABLE",
          "DELETED",
          "RESTORED",
          "RESTORING",
          "UPLOADING"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaSizeBytes": {
        "format": "int64",
        "type": "integer"
      },
      "mediaSubject": {
        "type": "string"
      },
      "mediaSubtype": {
        "enum": [
          "Trunk",
          "Station",
          "Consult",
          "Screen"
        ],
        "type": "string"
      },
      "mediaType": {
        "enum": [
          "CALL",
          "CHAT",
          "EMAIL",
          "SCREEN"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "orphanStatus": {
        "description": "The status of the orphaned recording's conversation.",
        "enum": [
          "NO_CONVERSATION",
          "UNKNOWN_CONVERSATION",
          "CONVERSATION_NOT_COMPLETE",
          "CONVERSATION_NOT_EVALUATED",
          "EVALUATED"
        ],
        "type": "string"
      },
      "providerEndpoint": {
        "$ref": "#/definitions/Endpoint"
      },
      "providerType": {
        "enum": [
          "EDGE",
          "CHAT",
          "EMAIL",
          "SCREEN_RECORDING",
          "PUREENGAGE",
          "PURECONNECT"
        ],
        "type": "string"
      },
      "recording": {
        "$ref": "#/definitions/Recording"
      },
      "recoveredTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "region": {
        "enum": [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-central-2",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-central-1",
          "sa-east-1",
          "us-east-1",
          "us-west-2"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceOrphaningId": {
        "description": "An identifier used during recovery operations by the supplying hybrid platform to track back and determine which interaction this recording is associated with",
        "type": "string"
      }
    },
    "type": "object"
  },
  "OrphanRecordingListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OrphanRecording"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OrphanUpdateRequest": {
    "properties": {
      "archiveDate": {
        "description": "The orphan recording's archive date. Must be greater than 1 day from now if set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationId": {
        "description": "A conversation Id that this orphan's recording is to be attached to. If not present, the conversationId will be deduced from the recording media.",
        "type": "string"
      },
      "deleteDate": {
        "description": "The orphan recording's delete date. Must be greater than archiveDate and exportDate if set, otherwise one day from now. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "exportDate": {
        "description": "The orphan recording's export date. Must be greater than 1 day from now if set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "integrationId": {
        "description": "IntegrationId to access AWS S3 bucket for export. This field is required if exportDate is set.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "OtherProfileAssignment": {
    "properties": {
      "currentProfile": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The current performance profile that this user belongs to"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "OutOfOffice": {
    "properties": {
      "active": {
        "type": "boolean"
      },
      "endDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "indefinite": {
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "OutboundDomain": {
    "properties": {
      "cnameVerificationResult": {
        "$ref": "#/definitions/VerificationResult",
        "description": "CNAME registration Status"
      },
      "dkimVerificationResult": {
        "$ref": "#/definitions/VerificationResult",
        "description": "DKIM registration Status"
      },
      "id": {
        "description": "Unique Id of the domain such as: example.com",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "senderType": {
        "description": "Sender Type",
        "enum": [
          "Unknown",
          "EmailDomain",
          "MockEmailDomain"
        ],
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "OutboundDomainEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OutboundDomain"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OutboundRoute": {
    "properties": {
      "classificationTypes": {
        "description": "The site associated to the outbound route.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "distribution": {
        "enum": [
          "SEQUENTIAL",
          "RANDOM"
        ],
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "enabled": {
        "type": "boolean"
      },
      "externalTrunkBases": {
        "description": "Trunk base settings of trunkType \"EXTERNAL\".  This base must also be set on an edge logical interface for correct routing.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managed": {
        "description": "Is this outbound route being managed remotely.",
        "readOnly": true,
        "type": "boolean"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/Site",
        "description": "The site associated to the outbound route.",
        "readOnly": true
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "classificationTypes",
      "name"
    ],
    "type": "object"
  },
  "OutboundRouteBase": {
    "properties": {
      "classificationTypes": {
        "description": "The site associated to the outbound route.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "distribution": {
        "enum": [
          "SEQUENTIAL",
          "RANDOM"
        ],
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "enabled": {
        "type": "boolean"
      },
      "externalTrunkBases": {
        "description": "Trunk base settings of trunkType \"EXTERNAL\".  This base must also be set on an edge logical interface for correct routing.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "classificationTypes",
      "name"
    ],
    "type": "object"
  },
  "OutboundRouteBaseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OutboundRouteBase"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OutboundRouteEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OutboundRoute"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OutboundSettings": {
    "properties": {
      "abandonSeconds": {
        "description": "The number of seconds used to determine if a call is abandoned",
        "format": "double",
        "type": "number"
      },
      "automaticTimeZoneMapping": {
        "$ref": "#/definitions/AutomaticTimeZoneMappingSettings",
        "description": "The settings for automatic time zone mapping. Note that changing these settings will change them for both voice and messaging campaigns."
      },
      "complianceAbandonRateDenominator": {
        "description": "The denominator to be used in determining the compliance abandon rate",
        "enum": [
          "ALL_CALLS",
          "CALLS_THAT_REACHED_QUEUE"
        ],
        "type": "string"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxCallsPerAgent": {
        "description": "The maximum number of calls that can be placed per agent on any campaign",
        "format": "int32",
        "type": "integer"
      },
      "maxConfigurableCallsPerAgent": {
        "description": "The maximum number of calls that can be configured to be placed per agent on any campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxLineUtilization": {
        "description": "The maximum percentage of lines that should be used for Outbound, expressed as a decimal in the range [0.0, 1.0]",
        "format": "double",
        "type": "number"
      },
      "name": {
        "type": "string"
      },
      "rescheduleTimeZoneSkippedContacts": {
        "description": "Whether or not to reschedule time-zone blocked contacts",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Outcome": {
    "properties": {
      "associatedValueField": {
        "$ref": "#/definitions/AssociatedValueField",
        "description": "The field from the event indicating the associated value."
      },
      "context": {
        "$ref": "#/definitions/Context",
        "description": "The context of the outcome."
      },
      "createdDate": {
        "description": "Timestamp indicating when the outcome was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "A description of the outcome.",
        "type": "string"
      },
      "displayName": {
        "description": "The display name of the outcome.",
        "type": "string"
      },
      "id": {
        "description": "ID of the outcome.",
        "type": "string"
      },
      "isActive": {
        "description": "Whether or not the outcome is active.",
        "type": "boolean"
      },
      "isPositive": {
        "description": "Whether or not the outcome is positive.",
        "type": "boolean"
      },
      "journey": {
        "$ref": "#/definitions/Journey",
        "description": "The pattern of rules defining the filter of the outcome."
      },
      "modifiedDate": {
        "description": "Timestamp indicating when the outcome was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The version of the outcome.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "context",
      "createdDate",
      "displayName",
      "id",
      "isActive",
      "isPositive",
      "journey",
      "modifiedDate",
      "version"
    ],
    "type": "object"
  },
  "OutcomeAchievedEvent": {
    "properties": {
      "browser": {
        "$ref": "#/definitions/Browser",
        "description": "Customer's browser."
      },
      "device": {
        "$ref": "#/definitions/Device",
        "description": "Customer's device."
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "ipAddress": {
        "description": "Visitor's IP address.",
        "type": "string"
      },
      "ipOrganization": {
        "description": "Visitor's IP-based organization or ISP name.",
        "type": "string"
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Marketing / traffic source information."
      },
      "outcome": {
        "$ref": "#/definitions/OutcomeAchievedEventOutcome",
        "description": "The outcome achieved."
      },
      "userAgentString": {
        "description": "HTTP User-Agent string (see https://tools.ietf.org/html/rfc1945#section-10.15).",
        "type": "string"
      },
      "visitCreatedDate": {
        "description": "When visit was created (e.g. timestamp of the first event in visit). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "visitReferrer": {
        "$ref": "#/definitions/Referrer",
        "description": "Visit's referrer."
      }
    },
    "required": [
      "outcome"
    ],
    "type": "object"
  },
  "OutcomeAchievedEventOutcome": {
    "properties": {
      "displayName": {
        "description": "The display name of the outcome.",
        "type": "string"
      },
      "id": {
        "description": "ID of the outcome.",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "version": {
        "description": "The version of the outcome.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "displayName",
      "id",
      "version"
    ],
    "type": "object"
  },
  "OutcomeAchievement": {
    "properties": {
      "achievedDate": {
        "description": "Timestamp indicating when the outcome was achieved. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "outcome": {
        "$ref": "#/definitions/AchievedOutcome",
        "description": "The outcome that was achieved."
      }
    },
    "required": [
      "achievedDate",
      "outcome"
    ],
    "type": "object"
  },
  "OutcomeConfig": {
    "properties": {
      "values": {
        "description": "A set of valid Outcome UUIDs used to optimize a KPI.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "OutcomeListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Outcome"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "OutcomePercentileCondition": {
    "properties": {
      "fallbackPercentile": {
        "description": "Additional percentile condition, where if set, the action map will trigger if the current outcome percentile is lower or equal to the value.",
        "format": "float",
        "type": "number"
      },
      "maximumPercentile": {
        "description": "Percentile value for the selected outcome, at or above which the action map will trigger.",
        "format": "float",
        "type": "number"
      },
      "outcomeId": {
        "description": "The outcome ID.",
        "type": "string"
      }
    },
    "required": [
      "maximumPercentile",
      "outcomeId"
    ],
    "type": "object"
  },
  "OutcomePredictor": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "outcome": {
        "$ref": "#/definitions/OutcomeRef",
        "description": "The outcome for which this predictor will provide predictions."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "OutcomePredictorListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/OutcomePredictor"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "OutcomePredictorRequest": {
    "properties": {
      "outcome": {
        "$ref": "#/definitions/OutcomeRefRequest",
        "description": "The outcome for which this predictor will provide predictions."
      }
    },
    "required": [
      "outcome"
    ],
    "type": "object"
  },
  "OutcomeProbabilityCondition": {
    "properties": {
      "maximumProbability": {
        "description": "Probability value for the selected outcome at or above which the action map will trigger.",
        "format": "float",
        "type": "number"
      },
      "outcomeId": {
        "description": "The outcome ID.",
        "type": "string"
      },
      "probability": {
        "description": "Additional probability condition, where if set, the action map will trigger if the current outcome probability is lower or equal to the value.",
        "format": "float",
        "type": "number"
      }
    },
    "required": [
      "maximumProbability",
      "outcomeId"
    ],
    "type": "object"
  },
  "OutcomeQuantileCondition": {
    "properties": {
      "fallbackQuantileThreshold": {
        "description": "(Optional) If set, this Condition is met when maxQuantileThreshold is met, AND the current quantile of the OutcomeScore is below this fallbackQuantileThreshold. Range 0.00-1.00",
        "format": "float",
        "type": "number"
      },
      "maxQuantileThreshold": {
        "description": "This Outcome Quantile Condition is met when sessionMaxQuantile of the OutcomeScore is above this value, (unless fallbackQuantile is set). Range 0.00-1.00",
        "format": "float",
        "type": "number"
      },
      "outcomeId": {
        "description": "The outcome ID.",
        "type": "string"
      }
    },
    "required": [
      "maxQuantileThreshold",
      "outcomeId"
    ],
    "type": "object"
  },
  "OutcomeRef": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "OutcomeRefRequest": {
    "properties": {
      "id": {
        "description": "ID of outcome.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "OutcomeRequest": {
    "properties": {
      "associatedValueField": {
        "$ref": "#/definitions/AssociatedValueField",
        "description": "The field from the event indicating the associated value."
      },
      "context": {
        "$ref": "#/definitions/RequestContext",
        "description": "The context of the outcome."
      },
      "description": {
        "description": "A description of the outcome.",
        "type": "string"
      },
      "displayName": {
        "description": "The display name of the outcome.",
        "type": "string"
      },
      "isActive": {
        "description": "Whether or not the outcome is active.",
        "type": "boolean"
      },
      "isPositive": {
        "description": "Whether or not the outcome is positive.",
        "type": "boolean"
      },
      "journey": {
        "$ref": "#/definitions/RequestJourney",
        "description": "The pattern of rules defining the filter of the outcome."
      },
      "version": {
        "description": "The version of the outcome.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "displayName"
    ],
    "type": "object"
  },
  "OutcomeScore": {
    "properties": {
      "outcome": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The outcome that the score was calculated for."
      },
      "percentile": {
        "description": "(Deprecated: use the 'quantile' field instead) Represents the predicted probability's percentile score when compared with all other generated probabilities for a given outcome.",
        "format": "int32",
        "type": "integer"
      },
      "probability": {
        "description": "Represents the likelihood of a customer reaching or achieving a given outcome.",
        "format": "float",
        "type": "number"
      },
      "quantile": {
        "description": "Represents the quantity of sessions that have a maximum probability less than the predicted probability.",
        "format": "float",
        "type": "number"
      },
      "sessionMaxPercentile": {
        "description": "(Deprecated: use the 'quantile' field instead) Represents the maximum likelihood percentile score reached for a given outcome by the current session.",
        "format": "int32",
        "type": "integer"
      },
      "sessionMaxProbability": {
        "description": "Represents the max probability reached in the session.",
        "format": "float",
        "type": "number"
      },
      "sessionMaxQuantile": {
        "description": "Represents the quantity of sessions that have a maximum probability less than the predicted session max probability.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "OutcomeScoresResult": {
    "properties": {
      "modifiedDate": {
        "description": "Timestamp indicating the last time that the event was scored. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "outcomeScores": {
        "description": "List of scored outcomes in the session.",
        "items": {
          "$ref": "#/definitions/OutcomeScore"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "OutlierInfo": {
    "properties": {
      "outlier": {
        "description": "Boolean to identify if an outlier or not.",
        "type": "boolean"
      },
      "score": {
        "description": "Outlier score for this utterance. The score is always 0 or greater and higher the score, the more outlier.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "OverallBestPoints": {
    "properties": {
      "bestPoints": {
        "description": "List of gamification best point items",
        "items": {
          "$ref": "#/definitions/OverallBestPointsItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The requested division",
        "readOnly": true
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "OverallBestPointsItem": {
    "properties": {
      "count": {
        "description": "The count of the user IDs in the list",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "dateEndWorkday": {
        "description": "End workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "granularityType": {
        "description": "Best points aggregation interval granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "readOnly": true,
        "type": "string"
      },
      "points": {
        "description": "Gamification points",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "users": {
        "description": "List of associated users with the equal points.",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "PINConfiguration": {
    "properties": {
      "maximumLength": {
        "format": "int32",
        "type": "integer"
      },
      "minimumLength": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Page": {
    "properties": {
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "rootContainer": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "versionId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PagedNamespaceListing": {
    "type": "object"
  },
  "PagelessDomainEntityListingEvaluationVersion": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/EvaluationVersion"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PagelessEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/AddressableEntity"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PagingSpec": {
    "properties": {
      "pageNumber": {
        "description": "How many pages in",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "How many results per page",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "pageNumber",
      "pageSize"
    ],
    "type": "object"
  },
  "ParsedCertificate": {
    "description": "Represents the parsed certificate information.",
    "properties": {
      "certificateDetails": {
        "description": "The details of the certificates that were parsed correctly.",
        "items": {
          "$ref": "#/definitions/CertificateDetails"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Participant": {
    "properties": {
      "address": {
        "description": "The address for the this participant. For a phone call this will be the ANI.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "ani": {
        "description": "The address for the this participant. For a phone call this will be the ANI.",
        "type": "string"
      },
      "aniName": {
        "description": "The ani-based name for this participant.",
        "type": "string"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional participant attributes",
        "type": "object"
      },
      "bargedParticipantId": {
        "description": "If this participant barged in a participant's call, then this will be the id of the targeted participant.",
        "type": "string"
      },
      "callbacks": {
        "items": {
          "$ref": "#/definitions/Callback"
        },
        "type": "array"
      },
      "calls": {
        "items": {
          "$ref": "#/definitions/Call"
        },
        "type": "array"
      },
      "chats": {
        "items": {
          "$ref": "#/definitions/ConversationChat"
        },
        "type": "array"
      },
      "coachedParticipantId": {
        "description": "If this participant is a coach, then this will be the id of the participant that is being coached.",
        "type": "string"
      },
      "cobrowsesessions": {
        "items": {
          "$ref": "#/definitions/Cobrowsesession"
        },
        "type": "array"
      },
      "connectedTime": {
        "description": "The timestamp when this participant was connected to the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "consultParticipantId": {
        "description": "If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred.",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "dnis": {
        "description": "The address for the this participant. For a phone call this will be the ANI.",
        "type": "string"
      },
      "emails": {
        "items": {
          "$ref": "#/definitions/Email"
        },
        "type": "array"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The timestamp when this participant disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluations": {
        "items": {
          "$ref": "#/definitions/Evaluation"
        },
        "type": "array"
      },
      "externalContactId": {
        "description": "If this participant represents an external contact, then this will be the globally unique identifier for the external contact.",
        "type": "string"
      },
      "externalOrganizationId": {
        "description": "If this participant represents an external org, then this will be the globally unique identifier for the external org.",
        "type": "string"
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "groupId": {
        "description": "If present, group of users the participant represents.",
        "type": "string"
      },
      "id": {
        "description": "A globally unique identifier for this conversation.",
        "type": "string"
      },
      "locale": {
        "description": "An ISO 639 language code specifying the locale for this participant",
        "type": "string"
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "messages": {
        "items": {
          "$ref": "#/definitions/Message"
        },
        "type": "array"
      },
      "monitoredParticipantId": {
        "description": "If this participant is a monitor, then this will be the id of the participant that is being monitored.",
        "type": "string"
      },
      "name": {
        "description": "A human readable name identifying the participant.",
        "type": "string"
      },
      "participantType": {
        "description": "A well known string that specifies the type of this participant.",
        "type": "string"
      },
      "purpose": {
        "description": "A well known string that specifies the purpose of this participant.",
        "type": "string"
      },
      "queueId": {
        "description": "If present, the queue id that the communication channel came in on.",
        "type": "string"
      },
      "queueName": {
        "description": "If present, the queue name that the communication channel came in on.",
        "type": "string"
      },
      "screenRecordingState": {
        "description": "The current screen recording state for this participant.",
        "enum": [
          "requested",
          "active",
          "paused",
          "stopped",
          "error",
          "timeout"
        ],
        "type": "string"
      },
      "screenshares": {
        "items": {
          "$ref": "#/definitions/Screenshare"
        },
        "type": "array"
      },
      "socialExpressions": {
        "items": {
          "$ref": "#/definitions/SocialExpression"
        },
        "type": "array"
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The timestamp when this participant joined the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "teamId": {
        "description": "The team id that this participant is a member of when added to the conversation.",
        "type": "string"
      },
      "userId": {
        "description": "If this participant represents a user, then this will be the globally unique identifier for the user.",
        "type": "string"
      },
      "userUri": {
        "description": "If this participant represents a user, then this will be an URI that can be used to fetch the user.",
        "type": "string"
      },
      "videos": {
        "items": {
          "$ref": "#/definitions/Video"
        },
        "type": "array"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      },
      "wrapupPrompt": {
        "description": "This field controls how the UI prompts the agent for a wrapup.",
        "enum": [
          "mandatory",
          "optional",
          "agentRequested",
          "timeout",
          "forcedTimeout"
        ],
        "type": "string"
      },
      "wrapupRequired": {
        "description": "True iff this participant is required to enter wrapup for this conversation.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "The UI sets this field when the agent chooses to skip entering a wrapup for this participant.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "Specifies how long a timed ACW session will last.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ParticipantAttributes": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The map of attribute keys to values.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "ParticipantBasic": {
    "properties": {
      "address": {
        "description": "The address for the this participant. For a phone call this will be the ANI.",
        "type": "string"
      },
      "alertingTimeoutMs": {
        "description": "Specifies how long the agent has to answer an interaction before being marked as not responding.",
        "format": "int32",
        "type": "integer"
      },
      "ani": {
        "description": "The address for the this participant. For a phone call this will be the ANI.",
        "type": "string"
      },
      "aniName": {
        "description": "The ani-based name for this participant.",
        "type": "string"
      },
      "attributes": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional participant attributes",
        "type": "object"
      },
      "bargedParticipantId": {
        "description": "If this participant barged in a participant's call, then this will be the id of the targeted participant.",
        "type": "string"
      },
      "callbacks": {
        "items": {
          "$ref": "#/definitions/CallbackBasic"
        },
        "type": "array"
      },
      "calls": {
        "items": {
          "$ref": "#/definitions/CallBasic"
        },
        "type": "array"
      },
      "chats": {
        "items": {
          "$ref": "#/definitions/ConversationChat"
        },
        "type": "array"
      },
      "coachedParticipantId": {
        "description": "If this participant is a coach, then this will be the id of the participant that is being coached.",
        "type": "string"
      },
      "cobrowsesessions": {
        "items": {
          "$ref": "#/definitions/Cobrowsesession"
        },
        "type": "array"
      },
      "connectedTime": {
        "description": "The timestamp when this participant was connected to the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "consultParticipantId": {
        "description": "If this participant is part of a consult transfer, then this will be the participant id of the participant being transferred.",
        "type": "string"
      },
      "conversationRoutingData": {
        "$ref": "#/definitions/ConversationRoutingData",
        "description": "Information on how a communication should be routed to an agent."
      },
      "dnis": {
        "description": "The address for the this participant. For a phone call this will be the ANI.",
        "type": "string"
      },
      "emails": {
        "items": {
          "$ref": "#/definitions/Email"
        },
        "type": "array"
      },
      "endAcwTime": {
        "description": "The timestamp when this participant ended after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "description": "The timestamp when this participant disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "evaluations": {
        "items": {
          "$ref": "#/definitions/Evaluation"
        },
        "type": "array"
      },
      "externalContactId": {
        "description": "If this participant represents an external contact, then this will be the globally unique identifier for the external contact.",
        "type": "string"
      },
      "externalOrganizationId": {
        "description": "If this participant represents an external org, then this will be the globally unique identifier for the external org.",
        "type": "string"
      },
      "flaggedReason": {
        "description": "The reason specifying why participant flagged the conversation.",
        "enum": [
          "general"
        ],
        "type": "string"
      },
      "groupId": {
        "description": "If present, group of users the participant represents.",
        "type": "string"
      },
      "id": {
        "description": "A globally unique identifier for this conversation.",
        "type": "string"
      },
      "locale": {
        "description": "An ISO 639 language code specifying the locale for this participant",
        "type": "string"
      },
      "mediaRoles": {
        "description": "List of roles this participant's media has had on the conversation, ie monitor, coach, etc.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "messages": {
        "items": {
          "$ref": "#/definitions/Message"
        },
        "type": "array"
      },
      "monitoredParticipantId": {
        "description": "If this participant is a monitor, then this will be the id of the participant that is being monitored.",
        "type": "string"
      },
      "name": {
        "description": "A human readable name identifying the participant.",
        "type": "string"
      },
      "participantType": {
        "description": "A well known string that specifies the type of this participant.",
        "type": "string"
      },
      "purpose": {
        "description": "A well known string that specifies the purpose of this participant.",
        "type": "string"
      },
      "queueId": {
        "description": "If present, the queue id that the communication channel came in on.",
        "type": "string"
      },
      "queueName": {
        "description": "If present, the queue name that the communication channel came in on.",
        "type": "string"
      },
      "screenRecordingState": {
        "description": "The current screen recording state for this participant.",
        "enum": [
          "requested",
          "active",
          "paused",
          "stopped",
          "error",
          "timeout"
        ],
        "type": "string"
      },
      "screenshares": {
        "items": {
          "$ref": "#/definitions/Screenshare"
        },
        "type": "array"
      },
      "socialExpressions": {
        "items": {
          "$ref": "#/definitions/SocialExpression"
        },
        "type": "array"
      },
      "startAcwTime": {
        "description": "The timestamp when this participant started after-call work. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startTime": {
        "description": "The timestamp when this participant joined the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "teamId": {
        "description": "The team id that this participant is a member of when added to the conversation.",
        "type": "string"
      },
      "userId": {
        "description": "If this participant represents a user, then this will be the globally unique identifier for the user.",
        "type": "string"
      },
      "userUri": {
        "description": "If this participant represents a user, then this will be an URI that can be used to fetch the user.",
        "type": "string"
      },
      "videos": {
        "items": {
          "$ref": "#/definitions/Video"
        },
        "type": "array"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      },
      "wrapupPrompt": {
        "description": "This field controls how the UI prompts the agent for a wrapup.",
        "enum": [
          "mandatory",
          "optional",
          "agentRequested",
          "timeout",
          "forcedTimeout"
        ],
        "type": "string"
      },
      "wrapupRequired": {
        "description": "True iff this participant is required to enter wrapup for this conversation.",
        "type": "boolean"
      },
      "wrapupSkipped": {
        "description": "The UI sets this field when the agent chooses to skip entering a wrapup for this participant.",
        "type": "boolean"
      },
      "wrapupTimeoutMs": {
        "description": "Specifies how long a timed ACW session will last.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ParticipantMetrics": {
    "properties": {
      "acdDurationPercentage": {
        "description": "Percentage of ACD duration in the conversation",
        "format": "double",
        "type": "number"
      },
      "agentDurationPercentage": {
        "description": "Percentage of Agent duration in the conversation",
        "format": "double",
        "type": "number"
      },
      "customerDurationPercentage": {
        "description": "Percentage of Customer duration in the conversation",
        "format": "double",
        "type": "number"
      },
      "ivrDurationPercentage": {
        "description": "Percentage of IVR duration in the conversation",
        "format": "double",
        "type": "number"
      },
      "otherDurationPercentage": {
        "description": "Percentage of Other events duration in the conversation",
        "format": "double",
        "type": "number"
      },
      "overtalkCount": {
        "description": "Number of Overtalks in the conversation",
        "format": "int32",
        "type": "integer"
      },
      "overtalkDurationPercentage": {
        "description": "Percentage of Overtalk duration in the conversation",
        "format": "double",
        "type": "number"
      },
      "silenceDurationPercentage": {
        "description": "Percentage of Silence duration in the conversation",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "PasswordRequirements": {
    "properties": {
      "expirationDays": {
        "format": "int32",
        "type": "integer"
      },
      "minimumAgeSeconds": {
        "format": "int32",
        "type": "integer"
      },
      "minimumDigits": {
        "format": "int32",
        "type": "integer"
      },
      "minimumLength": {
        "format": "int32",
        "type": "integer"
      },
      "minimumLetters": {
        "format": "int32",
        "type": "integer"
      },
      "minimumLower": {
        "format": "int32",
        "type": "integer"
      },
      "minimumSpecials": {
        "format": "int32",
        "type": "integer"
      },
      "minimumUpper": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PatchAction": {
    "properties": {
      "actionTargetId": {
        "description": "Action target ID.",
        "type": "string"
      },
      "actionTemplate": {
        "$ref": "#/definitions/ActionMapActionTemplate",
        "description": "Action template associated with the action map."
      },
      "architectFlowFields": {
        "$ref": "#/definitions/ArchitectFlowFields",
        "description": "Architect Flow Id and input contract."
      },
      "isPacingEnabled": {
        "description": "Whether this action should be throttled.",
        "type": "boolean"
      },
      "mediaType": {
        "description": "Media type of action.",
        "enum": [
          "webchat",
          "webMessagingOffer",
          "contentOffer",
          "integrationAction",
          "architectFlow",
          "openAction"
        ],
        "type": "string"
      },
      "openActionFields": {
        "$ref": "#/definitions/OpenActionFields",
        "description": "Admin-configurable fields of an open action."
      },
      "props": {
        "$ref": "#/definitions/PatchActionProperties",
        "description": "Additional properties."
      },
      "webMessagingOfferFields": {
        "$ref": "#/definitions/PatchWebMessagingOfferFields",
        "description": "Admin-configurable fields of a web messaging offer action."
      }
    },
    "required": [
      "mediaType"
    ],
    "type": "object"
  },
  "PatchActionMap": {
    "properties": {
      "action": {
        "$ref": "#/definitions/PatchAction",
        "description": "The action that will be executed if this action map is triggered."
      },
      "actionMapScheduleGroups": {
        "$ref": "#/definitions/PatchActionMapScheduleGroups",
        "description": "The action map's associated schedule groups."
      },
      "activation": {
        "$ref": "#/definitions/Activation",
        "description": "Type of activation."
      },
      "createdDate": {
        "description": "Timestamp indicating when the action map was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "displayName": {
        "description": "Display name of the action map.",
        "type": "string"
      },
      "endDate": {
        "description": "Timestamp at which the action map is scheduled to stop firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "ignoreFrequencyCap": {
        "description": "Override organization-level frequency cap and always offer web engagements from this action map.",
        "type": "boolean"
      },
      "isActive": {
        "description": "Whether the action map is active.",
        "type": "boolean"
      },
      "modifiedDate": {
        "description": "Timestamp indicating when the action map was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "pageUrlConditions": {
        "description": "URL conditions that a page must match for web actions to be displayable.",
        "items": {
          "$ref": "#/definitions/UrlCondition"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "Timestamp at which the action map is scheduled to start firing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "triggerWithEventConditions": {
        "description": "List of event conditions that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/EventCondition"
        },
        "type": "array"
      },
      "triggerWithOutcomePercentileConditions": {
        "description": "(deprecated - use triggerWithOutcomeQuantileConditions instead) Percentile conditions for outcomes that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/OutcomePercentileCondition"
        },
        "type": "array"
      },
      "triggerWithOutcomeProbabilityConditions": {
        "description": "(deprecated - use triggerWithOutcomeQuantileConditions instead) Probability conditions for outcomes that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/OutcomeProbabilityCondition"
        },
        "type": "array"
      },
      "triggerWithOutcomeQuantileConditions": {
        "description": "Quantile conditions for outcomes that must be satisfied to trigger the action map.",
        "items": {
          "$ref": "#/definitions/OutcomeQuantileCondition"
        },
        "type": "array"
      },
      "triggerWithSegments": {
        "description": "Trigger action map if any segment in the list is assigned to a given customer.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "version": {
        "description": "The version of the action map.",
        "format": "int32",
        "type": "integer"
      },
      "weight": {
        "description": "Weight of the action map with higher number denoting higher weight.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "displayName",
      "pageUrlConditions",
      "triggerWithSegments"
    ],
    "type": "object"
  },
  "PatchActionMapScheduleGroups": {
    "properties": {
      "actionMapScheduleGroup": {
        "$ref": "#/definitions/ActionMapScheduleGroup",
        "description": "The actions map's associated schedule group."
      },
      "emergencyActionMapScheduleGroup": {
        "$ref": "#/definitions/ActionMapScheduleGroup",
        "description": "The action map's associated emergency schedule group."
      }
    },
    "required": [
      "actionMapScheduleGroup"
    ],
    "type": "object"
  },
  "PatchActionProperties": {
    "properties": {
      "webchatAcceptText": {
        "description": "Accept button text shown to user, used for webchat type action.",
        "type": "string"
      },
      "webchatDeclineText": {
        "description": "Decline button text shown to user, used for webchat type action.",
        "type": "string"
      },
      "webchatPrompt": {
        "description": "Prompt message shown to user, used for webchat type action.",
        "type": "string"
      },
      "webchatSurvey": {
        "$ref": "#/definitions/PatchActionSurvey",
        "description": "Survey provided to the user, used for webchat type action."
      },
      "webchatTitleText": {
        "description": "Title shown to the user, used for webchat type action.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchActionSurvey": {
    "properties": {
      "questions": {
        "description": "Questions shown to the user.",
        "items": {
          "$ref": "#/definitions/PatchSurveyQuestion"
        },
        "type": "array"
      }
    },
    "required": [
      "questions"
    ],
    "type": "object"
  },
  "PatchActionTarget": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serviceLevel": {
        "$ref": "#/definitions/ServiceLevel",
        "description": "Service Level of the action target. Chat offers for the target will be throttled with the aim of achieving this service level."
      },
      "shortAbandonThreshold": {
        "description": "Indicates the non-default short abandon threshold",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PatchActionTemplate": {
    "properties": {
      "contentOffer": {
        "$ref": "#/definitions/PatchContentOffer",
        "description": "Properties used to configure an action of type content offer"
      },
      "description": {
        "description": "Description of the action template's functionality.",
        "type": "string"
      },
      "mediaType": {
        "description": "Media type of action described by the action template.",
        "enum": [
          "webchat",
          "webMessagingOffer",
          "contentOffer",
          "integrationAction",
          "architectFlow",
          "openAction"
        ],
        "type": "string"
      },
      "name": {
        "description": "Name of the action template.",
        "type": "string"
      },
      "state": {
        "description": "Whether the action template is currently active, inactive or deleted.",
        "enum": [
          "Active",
          "Inactive",
          "Deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "The version of the action template.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "PatchAssociatedValueField": {
    "properties": {
      "dataType": {
        "description": "The data type of the value field.",
        "enum": [
          "Number",
          "Integer"
        ],
        "type": "string"
      },
      "name": {
        "description": "The field name for extracting value from event.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchBuReschedulingOptionsManagementUnitRequest": {
    "properties": {
      "applied": {
        "description": "Whether to mark the run as applied.  Only applies to reschedule runs.  Once applied, a run cannot be un-marked as applied",
        "type": "boolean"
      },
      "managementUnitId": {
        "description": "The management unit portion of the rescheduling run to update",
        "type": "string"
      }
    },
    "required": [
      "managementUnitId"
    ],
    "type": "object"
  },
  "PatchBuReschedulingOptionsRequest": {
    "properties": {
      "managementUnits": {
        "description": "Per-management unit rescheduling options to update",
        "items": {
          "$ref": "#/definitions/PatchBuReschedulingOptionsManagementUnitRequest"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchBuScheduleRunRequest": {
    "properties": {
      "reschedulingOptions": {
        "$ref": "#/definitions/PatchBuReschedulingOptionsRequest",
        "description": "The rescheduling options to update"
      }
    },
    "type": "object"
  },
  "PatchCallToAction": {
    "properties": {
      "target": {
        "description": "Where the URL should be opened when the user clicks on the call to action button.",
        "enum": [
          "Blank",
          "Self"
        ],
        "type": "string"
      },
      "text": {
        "description": "Text displayed on the call to action button.",
        "type": "string"
      },
      "url": {
        "description": "URL to open when user clicks on the call to action button.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchCallbackRequest": {
    "properties": {
      "agentId": {
        "description": "The agentId.",
        "type": "string"
      },
      "callbackScheduledTime": {
        "description": "The scheduled date-time for the callback. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2015-01-02T16:59:59.000Z",
        "format": "date-time",
        "type": "string"
      },
      "conversationId": {
        "description": "The conversationId.",
        "type": "string"
      },
      "queueId": {
        "description": "The identifier of the queue to be used for the callback.",
        "type": "string"
      }
    },
    "required": [
      "agentId",
      "conversationId"
    ],
    "type": "object"
  },
  "PatchCallbackResponse": {
    "properties": {
      "callbackIdentifiers": {
        "description": "The list of communication identifiers for the callback participants",
        "items": {
          "$ref": "#/definitions/CallbackIdentifier"
        },
        "type": "array"
      },
      "conversation": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The conversation associated with the callback"
      }
    },
    "required": [
      "callbackIdentifiers",
      "conversation"
    ],
    "type": "object"
  },
  "PatchCloseButtonStyleProperties": {
    "properties": {
      "color": {
        "description": "Color of button. (eg. #FF0000)",
        "type": "string"
      },
      "opacity": {
        "description": "Opacity of button.",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "PatchContentOffer": {
    "properties": {
      "body": {
        "description": "Body text of the content offer.",
        "type": "string"
      },
      "callToAction": {
        "$ref": "#/definitions/PatchCallToAction",
        "description": "Properties customizing the call to action button on the content offer."
      },
      "displayMode": {
        "description": "The display mode of Genesys Widgets when displaying content offer.",
        "enum": [
          "Modal",
          "Overlay",
          "Toast"
        ],
        "type": "string"
      },
      "headline": {
        "description": "Headline displayed above the body text of the content offer.",
        "type": "string"
      },
      "imageUrl": {
        "description": "URL for image displayed to the customer when displaying content offer.",
        "type": "string"
      },
      "layoutMode": {
        "description": "The layout mode of the text shown to the user when displaying content offer.",
        "enum": [
          "TextOnly",
          "ImageOnly",
          "LeftText",
          "RightText",
          "TopText",
          "BottomText"
        ],
        "type": "string"
      },
      "style": {
        "$ref": "#/definitions/PatchContentOfferStylingConfiguration",
        "description": "Properties customizing the styling of the content offer."
      },
      "title": {
        "description": "Title used in the header of the content offer.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchContentOfferStyleProperties": {
    "properties": {
      "backgroundColor": {
        "description": "Background color of the offer. (eg. #000000)",
        "type": "string"
      },
      "color": {
        "description": "Text color of the offer. (eg. #FF0000)",
        "type": "string"
      },
      "padding": {
        "description": "Padding of the offer. (eg. 10px)",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchContentOfferStylingConfiguration": {
    "properties": {
      "body": {
        "$ref": "#/definitions/PatchTextStyleProperties",
        "description": "Properties for customizing the appearance of the body text."
      },
      "closeButton": {
        "$ref": "#/definitions/PatchCloseButtonStyleProperties",
        "description": "Properties for customizing the appearance of the close button."
      },
      "ctaButton": {
        "$ref": "#/definitions/PatchCtaButtonStyleProperties",
        "description": "Properties for customizing the appearance of the CTA button."
      },
      "headline": {
        "$ref": "#/definitions/PatchTextStyleProperties",
        "description": "Properties for customizing the appearance of the headline text."
      },
      "offer": {
        "$ref": "#/definitions/PatchContentOfferStyleProperties",
        "description": "Properties for customizing the appearance of the content offer."
      },
      "position": {
        "$ref": "#/definitions/PatchContentPositionProperties",
        "description": "Properties for customizing the positioning of the content offer."
      },
      "title": {
        "$ref": "#/definitions/PatchTextStyleProperties",
        "description": "Properties for customizing the appearance of the title text."
      }
    },
    "type": "object"
  },
  "PatchContentPositionProperties": {
    "properties": {
      "bottom": {
        "description": "Bottom positioning offset.",
        "type": "string"
      },
      "left": {
        "description": "Left positioning offset.",
        "type": "string"
      },
      "right": {
        "description": "Right positioning offset.",
        "type": "string"
      },
      "top": {
        "description": "Top positioning offset.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchContext": {
    "properties": {
      "patterns": {
        "description": "A list of one or more patterns to match.",
        "items": {
          "$ref": "#/definitions/PatchContextPattern"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchContextPattern": {
    "properties": {
      "criteria": {
        "description": "A list of one or more criteria to satisfy.",
        "items": {
          "$ref": "#/definitions/PatchEntityTypeCriteria"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchCriteria": {
    "properties": {
      "key": {
        "description": "The criteria key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "shouldIgnoreCase": {
        "description": "Should criteria be case insensitive.",
        "type": "boolean"
      },
      "values": {
        "description": "The criteria values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchCtaButtonStyleProperties": {
    "properties": {
      "backgroundColor": {
        "description": "Background color of the CTA button. (eg. #A04033)",
        "type": "string"
      },
      "color": {
        "description": "Color of the text. (eg. #FFFFFF)",
        "type": "string"
      },
      "font": {
        "description": "Font of the text. (eg. Helvetica)",
        "type": "string"
      },
      "fontSize": {
        "description": "Font size of the text. (eg. '12')",
        "type": "string"
      },
      "textAlign": {
        "description": "Text alignment.",
        "enum": [
          "Left",
          "Right",
          "Center"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchEntityTypeCriteria": {
    "properties": {
      "entityType": {
        "description": "The entity to match the pattern against.",
        "enum": [
          "visit"
        ],
        "type": "string"
      },
      "key": {
        "description": "The criteria key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "shouldIgnoreCase": {
        "description": "Should criteria be case insensitive.",
        "type": "boolean"
      },
      "values": {
        "description": "The criteria values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchExternalSegment": {
    "properties": {
      "name": {
        "description": "Name for the external segment in the system where it originates from.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchIntegrationAction": {
    "properties": {
      "id": {
        "description": "ID of the integration action to be invoked.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchIntegrationActionFields": {
    "properties": {
      "integrationAction": {
        "$ref": "#/definitions/PatchIntegrationAction",
        "description": "Reference to the Integration Action to be used when integrationAction type is qualified"
      },
      "requestMappings": {
        "description": "Collection of Request Mappings to use",
        "items": {
          "$ref": "#/definitions/RequestMapping"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchJourney": {
    "properties": {
      "patterns": {
        "description": "A list of zero or more patterns to match.",
        "items": {
          "$ref": "#/definitions/PatchJourneyPattern"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PatchJourneyPattern": {
    "properties": {
      "count": {
        "description": "The number of times the pattern must match.",
        "format": "int32",
        "type": "integer"
      },
      "criteria": {
        "description": "A list of one or more criteria to satisfy.",
        "items": {
          "$ref": "#/definitions/PatchCriteria"
        },
        "type": "array"
      },
      "eventName": {
        "description": "The name of the event for which this pattern can be matched on.",
        "type": "string"
      },
      "sessionType": {
        "description": "The session type for which this pattern can be matched on.",
        "type": "string"
      },
      "streamType": {
        "description": "The stream type for which this pattern can be matched on.",
        "enum": [
          "Web",
          "Custom",
          "Conversation",
          "App"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchOutcome": {
    "properties": {
      "associatedValueField": {
        "$ref": "#/definitions/PatchAssociatedValueField",
        "description": "The field from the event indicating the associated value."
      },
      "context": {
        "$ref": "#/definitions/PatchContext",
        "description": "The context of the outcome."
      },
      "description": {
        "description": "A description of the outcome.",
        "type": "string"
      },
      "displayName": {
        "description": "The display name of the outcome.",
        "type": "string"
      },
      "isActive": {
        "description": "Whether or not the outcome is active.",
        "type": "boolean"
      },
      "isPositive": {
        "description": "Whether or not the outcome is positive.",
        "type": "boolean"
      },
      "journey": {
        "$ref": "#/definitions/PatchJourney",
        "description": "The pattern of rules defining the filter of the outcome."
      },
      "version": {
        "description": "The version of the outcome.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "displayName"
    ],
    "type": "object"
  },
  "PatchPredictorRequest": {
    "properties": {
      "routingTimeoutSeconds": {
        "description": "Number of seconds allocated to predictive routing before attempting a different routing method. This is a value between 12 and 900 seconds.",
        "format": "int32",
        "type": "integer"
      },
      "schedule": {
        "$ref": "#/definitions/PredictorSchedule",
        "description": "The predictor schedule that determines when the predictor is used for routing interactions."
      },
      "workloadBalancingConfig": {
        "$ref": "#/definitions/PredictorWorkloadBalancing",
        "description": "The predictor balancing configuration to enable workload balancing"
      }
    },
    "type": "object"
  },
  "PatchSegment": {
    "properties": {
      "assignmentExpirationDays": {
        "description": "Time, in days, from when the segment is assigned until it is automatically unassigned.",
        "format": "int32",
        "type": "integer"
      },
      "color": {
        "description": "The hexadecimal color value of the segment.",
        "type": "string"
      },
      "context": {
        "$ref": "#/definitions/PatchContext",
        "description": "The context of the segment."
      },
      "description": {
        "description": "A description of the segment.",
        "type": "string"
      },
      "displayName": {
        "description": "The display name of the segment.",
        "type": "string"
      },
      "externalSegment": {
        "$ref": "#/definitions/PatchExternalSegment",
        "description": "Details of an entity corresponding to this segment in an external system."
      },
      "isActive": {
        "description": "Whether or not the segment is active.",
        "type": "boolean"
      },
      "journey": {
        "$ref": "#/definitions/PatchJourney",
        "description": "The pattern of rules defining the segment."
      },
      "shouldDisplayToAgent": {
        "description": "Whether or not the segment should be displayed to agent/supervisor users.",
        "type": "boolean"
      },
      "version": {
        "description": "The version of the segment.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PatchShiftTradeRequest": {
    "properties": {
      "acceptableIntervals": {
        "$ref": "#/definitions/ListWrapperInterval",
        "description": "Update the acceptable intervals the initiating user is willing to accept in trade. Setting the enclosed list to empty will make this a one sided trade request"
      },
      "expiration": {
        "$ref": "#/definitions/ValueWrapperDate",
        "description": "Update the expiration time for this shift trade."
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata"
      },
      "receivingUserId": {
        "$ref": "#/definitions/ValueWrapperString",
        "description": "Update the ID of the receiving user to direct the request at a specific user, or set the wrapped id to null to open up a trade to be matched by any user."
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "PatchSurveyQuestion": {
    "properties": {
      "choices": {
        "description": "Choices available to user.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "customerProperty": {
        "description": "The customer property that the answer maps to.",
        "enum": [
          "givenName",
          "familyName",
          "email",
          "phone",
          "gender",
          "companyName"
        ],
        "type": "string"
      },
      "isMandatory": {
        "description": "Whether answering this question is mandatory.",
        "type": "boolean"
      },
      "label": {
        "description": "Label of question.",
        "type": "string"
      },
      "type": {
        "description": "Type of survey question.",
        "enum": [
          "text",
          "hidden",
          "select",
          "checkbox",
          "textarea"
        ],
        "type": "string"
      }
    },
    "required": [
      "label"
    ],
    "type": "object"
  },
  "PatchTextStyleProperties": {
    "properties": {
      "color": {
        "description": "Color of the text. (eg. #FFFFFF)",
        "type": "string"
      },
      "font": {
        "description": "Font of the text. (eg. Helvetica)",
        "type": "string"
      },
      "fontSize": {
        "description": "Font size of the text. (eg. '12')",
        "type": "string"
      },
      "textAlign": {
        "description": "Text alignment.",
        "enum": [
          "Left",
          "Right",
          "Center"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchUser": {
    "properties": {
      "acdAutoAnswer": {
        "description": "The value that denotes if acdAutoAnswer is set on the user",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "preferredName": {
        "description": "Preferred full name of agent",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PatchWebMessagingOfferFields": {
    "properties": {
      "architectFlow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Flow to be invoked, overrides default flow when specified."
      },
      "offerText": {
        "description": "Text value to be used when inviting a visitor to engage with a web messaging offer.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Pattern": {
    "properties": {
      "daysOfWeek": {
        "description": "The day(s) of week the occurrence should be repeated. Required to set for Weekly pattern type. E.g. [\"Monday\", \"Wednesday\"]",
        "items": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "The interval of days between the occurrences for Daily pattern type, and weeks between the occurrences for Weekly",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Pattern type (Daily/Weekly)",
        "enum": [
          "Daily",
          "Weekly"
        ],
        "type": "string"
      }
    },
    "required": [
      "interval",
      "type"
    ],
    "type": "object"
  },
  "PauseCriteria": {
    "properties": {
      "condition": {
        "enum": [
          "Includes",
          "DoesNotInclude",
          "StartsWith",
          "EndsWith",
          "Equals"
        ],
        "type": "string"
      },
      "urlFragment": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PerformancePredictionOutputs": {
    "properties": {
      "calculationIntervalLengthMinutes": {
        "description": "Interval length of the response metrics",
        "format": "int32",
        "type": "integer"
      },
      "calculationStartDate": {
        "description": "Date as an ISO-8601 string, corresponding to the beginning of the performance prediction results",
        "format": "date-time",
        "type": "string"
      },
      "planningGroupResults": {
        "description": "List of planning group level performance prediction results",
        "items": {
          "$ref": "#/definitions/PlanningGroupOutputs"
        },
        "type": "array"
      }
    },
    "required": [
      "calculationIntervalLengthMinutes",
      "calculationStartDate",
      "planningGroupResults"
    ],
    "type": "object"
  },
  "PerformancePredictionRecalculationResponse": {
    "properties": {
      "downloadResult": {
        "$ref": "#/definitions/PerformancePredictionOutputs",
        "description": "Result will always come via downloadUrls; however the schema is included for documentation"
      },
      "downloadUrl": {
        "description": "The url to GET the results of the performance prediction. This field is populated only if query state is 'Complete'",
        "type": "string"
      },
      "operationId": {
        "description": "The operationId for which to listen",
        "type": "string"
      },
      "state": {
        "description": "The state of the performance prediction",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "required": [
      "operationId",
      "state"
    ],
    "type": "object"
  },
  "PerformancePredictionRecalculationUploadResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers for the PUT request to the url",
        "type": "object"
      },
      "uploadBodySchema": {
        "$ref": "#/definitions/PerformancePredictionUploadSchema",
        "description": "Always null. Defines the schema of the json body to be PUT to the url. The json body should be gzip encoded before uploading"
      },
      "uploadKey": {
        "description": "The key to pass to the secondary request to start processing of the upload",
        "type": "string"
      },
      "url": {
        "description": "The url to which to PUT the upload body",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PerformancePredictionResponse": {
    "properties": {
      "downloadResult": {
        "$ref": "#/definitions/PerformancePredictionOutputs",
        "description": "Result will always come via downloadUrls; however the schema is included for documentation"
      },
      "downloadUrl": {
        "description": "The url to GET the results of the performance prediction. This field is populated only if query state is 'Complete'",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "scheduleId": {
        "description": "The ID of the schedule this performance prediction is associated with",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the performance prediction",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      },
      "weekDate": {
        "description": "The weekDate of the short term forecast in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "scheduleId",
      "state",
      "weekDate"
    ],
    "type": "object"
  },
  "PerformancePredictionUploadSchema": {
    "properties": {
      "calculationStartDate": {
        "description": "Date as an ISO-8601 string, corresponding to the beginning of the performance prediction results",
        "format": "date-time",
        "type": "string"
      },
      "onQueueTimes": {
        "description": "List of agent on queue times by management unit",
        "items": {
          "$ref": "#/definitions/MuAgentQueueTimeRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "calculationStartDate",
      "onQueueTimes"
    ],
    "type": "object"
  },
  "PerformanceProfile": {
    "properties": {
      "active": {
        "description": "The flag for active profiles",
        "readOnly": true,
        "type": "boolean"
      },
      "dateCreated": {
        "description": "Creation date for this performance profile. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "A description about this performance profile",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division for this performance profile associate to",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxLeaderboardRankSize": {
        "description": "The maximum rank size for the leaderboard. This counts the number of ranks can be retrieved in a leaderboard queries",
        "format": "int32",
        "type": "integer"
      },
      "memberCount": {
        "description": "The number of members in this performance profile",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "metricOrders": {
        "description": "Order of the associated metrics. The list should contain valid ids for metrics",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "A name for this performance profile",
        "type": "string"
      },
      "reportingIntervals": {
        "description": "The reporting interval periods for this performance profile",
        "items": {
          "$ref": "#/definitions/ReportingInterval"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "description",
      "metricOrders",
      "name"
    ],
    "type": "object"
  },
  "PermissionCollectionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainPermissionCollection"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PermissionDetails": {
    "properties": {
      "allowsCurrentUser": {
        "description": "Whether the current user can subscribe, when division permissions are otherwise required",
        "type": "boolean"
      },
      "enforced": {
        "description": "Whether or not this permission requirement is enforced",
        "type": "boolean"
      },
      "permissions": {
        "description": "List of required permissions",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of permission requirement",
        "enum": [
          "requiresCurrentUser",
          "requiresPermissions",
          "requiresDivisionPermissions",
          "requiresAnyDivisionPermissions",
          "requiresUserBeConversationParticipant"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Permissions": {
    "properties": {
      "ids": {
        "description": "List of permission ids.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "ids"
    ],
    "type": "object"
  },
  "Phone": {
    "properties": {
      "capabilities": {
        "$ref": "#/definitions/PhoneCapabilities"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lineBaseSettings": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "lines": {
        "description": "Lines",
        "items": {
          "$ref": "#/definitions/Line"
        },
        "type": "array"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "phoneBaseSettings": {
        "$ref": "#/definitions/PhoneBaseSettings",
        "description": "Phone Base Settings"
      },
      "phoneMetaBase": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "primaryEdge": {
        "$ref": "#/definitions/Edge"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "secondaryEdge": {
        "$ref": "#/definitions/Edge"
      },
      "secondaryStatus": {
        "$ref": "#/definitions/PhoneStatus",
        "description": "The status of the phone and lines from the secondary Edge."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The site associated to the phone."
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "$ref": "#/definitions/PhoneStatus",
        "description": "The status of the phone and lines from the primary Edge."
      },
      "userAgentInfo": {
        "$ref": "#/definitions/UserAgentInfo",
        "description": "User Agent Information for this phone. This includes model, firmware version, and manufacturer.",
        "readOnly": true
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      },
      "webRtcUser": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "This is the user associated with a WebRTC type phone.  It is required for all WebRTC phones."
      }
    },
    "required": [
      "lines",
      "name",
      "phoneBaseSettings",
      "site"
    ],
    "type": "object"
  },
  "PhoneBase": {
    "properties": {
      "capabilities": {
        "$ref": "#/definitions/PhoneCapabilities"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lines": {
        "description": "The list of linebases associated with the phone base.",
        "items": {
          "$ref": "#/definitions/LineBase"
        },
        "type": "array"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "phoneMetaBase": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A phone metabase is essentially a database for storing phone configuration settings, which simplifies the configuration process."
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "lines",
      "name",
      "phoneMetaBase"
    ],
    "type": "object"
  },
  "PhoneBaseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/PhoneBase"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PhoneBaseSettings": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for this phone base settings",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "PhoneCapabilities": {
    "properties": {
      "allowReboot": {
        "type": "boolean"
      },
      "cdm": {
        "type": "boolean"
      },
      "dualRegisters": {
        "type": "boolean"
      },
      "hardwareIdType": {
        "type": "string"
      },
      "mediaCodecs": {
        "items": {
          "enum": [
            "audio/opus",
            "audio/pcmu",
            "audio/pcma",
            "audio/g729",
            "audio/g722"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "noCloudProvisioning": {
        "type": "boolean"
      },
      "noRebalance": {
        "type": "boolean"
      },
      "provisions": {
        "type": "boolean"
      },
      "registers": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "PhoneColumn": {
    "properties": {
      "columnName": {
        "description": "The name of the phone column.",
        "type": "string"
      },
      "type": {
        "description": "The type of the phone column. For example, 'cell' or 'home'.",
        "type": "string"
      }
    },
    "required": [
      "columnName",
      "type"
    ],
    "type": "object"
  },
  "PhoneEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Phone"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PhoneEstablishedEvent": {
    "properties": {
      "ani": {
        "description": "The automatic number identification if it is available for this conversation.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "dnis": {
        "description": "The dialed number identification if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/InitialConfiguration",
        "description": "Metadata about this communication."
      },
      "phoneNumber": {
        "description": "The phone number for this phone.",
        "type": "string"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "PhoneMetaBaseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Metabase"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PhoneNumber": {
    "properties": {
      "acceptsSMS": {
        "description": "Whether this phone number can accept SMS messages.",
        "type": "boolean"
      },
      "countryCode": {
        "description": "The detected country code from the provided phone number. This field is not user-writeable and will only be set when the provided phone number could be read as E164.",
        "type": "string"
      },
      "display": {
        "description": "The displayed form of the phone number string. Users should input the phone number in this field, but it will be altered by the API on write. If the phone number can be read as E164, the value will be replaced with international formatted-version of the number. If the number cannot be read as E164, the value will be preserved as-is. In both cases, the provided input string will be copied to the userInput field.",
        "type": "string"
      },
      "e164": {
        "description": "The E164-formatted form of the provided phone number. This field is not user-writeable and will only be set when the provided phone number could be read as E164.",
        "type": "string"
      },
      "extension": {
        "description": "An optional extension for the provided phone number.",
        "format": "int64",
        "type": "integer"
      },
      "normalizationCountryCode": {
        "description": "The country code that will be used for E164 conversion of a provided phone number. If the country code is omitted from the provided phone number, the country code provided in this field will be used during the E164 conversion attempt. If this field is left empty, the default country code for any provided phone number that does not explicitly include a country code is assumed to be +1 (North America).",
        "type": "string"
      },
      "userInput": {
        "description": "The user-inputted phone number string that was provided to the display field on write. This field is not user-writeable and will always be set by the system.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PhoneNumberColumn": {
    "properties": {
      "columnName": {
        "type": "string"
      },
      "type": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PhoneNumberStatus": {
    "properties": {
      "callable": {
        "description": "Indicates whether or not a phone number is callable.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "PhoneStatus": {
    "properties": {
      "edge": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The URI of the edge that provided this status information."
      },
      "edgesStatus": {
        "description": "The status of the primary or secondary Edges assigned to the phone lines.",
        "enum": [
          "IN_SERVICE",
          "MIXED_SERVICE",
          "OUT_OF_SERVICE",
          "NO_EDGES"
        ],
        "type": "string"
      },
      "eventCreationTime": {
        "description": "Event Creation Time represents an ISO-8601 string. For example: UTC, UTC+01:00, or Europe/London",
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "lineStatuses": {
        "description": "A list of LineStatus information for each of the lines of this phone",
        "items": {
          "$ref": "#/definitions/LineStatus"
        },
        "type": "array"
      },
      "operationalStatus": {
        "description": "The Operational Status of this phone",
        "enum": [
          "OPERATIONAL",
          "DEGRADED",
          "OFFLINE",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "phoneAssignmentToEdgeType": {
        "description": "The phone status's edge assignment type.",
        "enum": [
          "PRIMARY",
          "SECONDARY"
        ],
        "type": "string"
      },
      "provision": {
        "$ref": "#/definitions/ProvisionInfo",
        "description": "Provision information for this phone"
      },
      "selfUri": {
        "description": "The URI for this object. Deprecated. Do not use.",
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PhoneTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationPhoneNumber": {
        "description": "The desired destination phone number that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "The id (V4 UUID) of the communication representing the participant that is initiating the transfer.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationPhoneNumber",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "PhonesReboot": {
    "properties": {
      "phoneIds": {
        "description": "The list of phone Ids to reboot.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "siteId": {
        "description": "ID of the site for which to reboot all phones at that site.\nno.active.edge and phone.cannot.resolve errors are ignored.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Phrase": {
    "properties": {
      "sentiment": {
        "description": "The phrase sentiment, default value is Unspecified. Note: Sentiment value for phrases is currently not in use and has no impact to the system.",
        "enum": [
          "Unspecified",
          "Positive",
          "Neutral",
          "Negative"
        ],
        "type": "string"
      },
      "strictness": {
        "description": "The phrase strictness, default value is null",
        "enum": [
          "1",
          "55",
          "65",
          "72",
          "85",
          "90"
        ],
        "type": "string"
      },
      "text": {
        "description": "The phrase text",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "PhraseAssociations": {
    "properties": {
      "documentId": {
        "description": "Id of the document to be linked",
        "type": "string"
      },
      "phraseId": {
        "description": "Id of the phrase to be linked",
        "type": "string"
      }
    },
    "required": [
      "documentId",
      "phraseId"
    ],
    "type": "object"
  },
  "PhysicalInterfaceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/DomainPhysicalInterface"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PingIdentity": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PinnedMessageRequest": {
    "properties": {
      "pinnedMessageIds": {
        "description": "Ids of the messages to pin",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pinnedMessageIds"
    ],
    "type": "object"
  },
  "PlanningGroup": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the planning group"
      },
      "name": {
        "type": "string"
      },
      "routePaths": {
        "description": "Set of route paths associated with the planning group",
        "items": {
          "$ref": "#/definitions/RoutePathResponse"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serviceGoalTemplate": {
        "$ref": "#/definitions/ServiceGoalTemplateReference",
        "description": "The ID of the service goal template associated with this planning group"
      }
    },
    "type": "object"
  },
  "PlanningGroupList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/PlanningGroup"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the planning groups"
      }
    },
    "type": "object"
  },
  "PlanningGroupOutputs": {
    "properties": {
      "abandonRatePerInterval": {
        "description": "List of Abandon rate percentage (0.0-100.0) results per interval",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "averageSpeedOfAnswerSecondsPerInterval": {
        "description": "List of Average Speed of Answer (in seconds) results per interval",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "occupancyPerInterval": {
        "description": "List of Occupancy percentage (0.0-100.0) results per interval",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      },
      "planningGroupId": {
        "description": "The ID for for the associated planning group result",
        "type": "string"
      },
      "serviceLevelPerInterval": {
        "description": "List of Service Level percentage (0.0-100.0) results per interval",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      }
    },
    "required": [
      "abandonRatePerInterval",
      "averageSpeedOfAnswerSecondsPerInterval",
      "occupancyPerInterval",
      "planningGroupId",
      "serviceLevelPerInterval"
    ],
    "type": "object"
  },
  "PlanningGroupReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PlanningPeriodSettings": {
    "properties": {
      "startDate": {
        "description": "Start date of the planning period in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "weekCount": {
        "description": "Planning period length in weeks",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "startDate",
      "weekCount"
    ],
    "type": "object"
  },
  "Policy": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/PolicyActions",
        "description": "Actions"
      },
      "conditions": {
        "$ref": "#/definitions/PolicyConditions",
        "description": "Conditions"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "enabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaPolicies": {
        "$ref": "#/definitions/MediaPolicies",
        "description": "Conditions and actions per media type"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "order": {
        "format": "int32",
        "type": "integer"
      },
      "policyErrors": {
        "$ref": "#/definitions/PolicyErrors"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PolicyActions": {
    "properties": {
      "alwaysDelete": {
        "description": "true to delete the recording associated with the conversation regardless of the values of retainRecording or deleteRecording. Default = false",
        "type": "boolean"
      },
      "assignCalibrations": {
        "items": {
          "$ref": "#/definitions/CalibrationAssignment"
        },
        "type": "array"
      },
      "assignEvaluations": {
        "items": {
          "$ref": "#/definitions/EvaluationAssignment"
        },
        "type": "array"
      },
      "assignMeteredAssignmentByAgent": {
        "items": {
          "$ref": "#/definitions/MeteredAssignmentByAgent"
        },
        "type": "array"
      },
      "assignMeteredEvaluations": {
        "items": {
          "$ref": "#/definitions/MeteredEvaluationAssignment"
        },
        "type": "array"
      },
      "assignSurveys": {
        "items": {
          "$ref": "#/definitions/SurveyAssignment"
        },
        "type": "array"
      },
      "deleteRecording": {
        "description": "true to delete the recording associated with the conversation. If retainRecording = true, this will be ignored. Default = false",
        "type": "boolean"
      },
      "initiateScreenRecording": {
        "$ref": "#/definitions/InitiateScreenRecording"
      },
      "integrationExport": {
        "$ref": "#/definitions/IntegrationExport",
        "description": "Policy action for exporting recordings using an integration to 3rd party s3."
      },
      "mediaTranscriptions": {
        "items": {
          "$ref": "#/definitions/MediaTranscription"
        },
        "type": "array"
      },
      "retainRecording": {
        "description": "true to retain the recording associated with the conversation. Default = true",
        "type": "boolean"
      },
      "retentionDuration": {
        "$ref": "#/definitions/RetentionDuration"
      }
    },
    "type": "object"
  },
  "PolicyConditions": {
    "properties": {
      "customerParticipation": {
        "description": "This condition is to filter out conversation with and without customer participation.",
        "enum": [
          "YES",
          "NO"
        ],
        "type": "string"
      },
      "dateRanges": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "directions": {
        "items": {
          "enum": [
            "INBOUND",
            "OUTBOUND"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "duration": {
        "$ref": "#/definitions/DurationCondition"
      },
      "forQueues": {
        "items": {
          "$ref": "#/definitions/Queue"
        },
        "type": "array"
      },
      "forUsers": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "mediaTypes": {
        "items": {
          "enum": [
            "CALL",
            "CHAT"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "teams": {
        "description": "Teams to match conversations against",
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "timeAllowed": {
        "$ref": "#/definitions/TimeAllowed"
      },
      "wrapupCodes": {
        "items": {
          "$ref": "#/definitions/WrapupCode"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PolicyCreate": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/PolicyActions",
        "description": "Actions"
      },
      "conditions": {
        "$ref": "#/definitions/PolicyConditions",
        "description": "Conditions"
      },
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "enabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaPolicies": {
        "$ref": "#/definitions/MediaPolicies",
        "description": "Conditions and actions per media type"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The policy name.",
        "type": "string"
      },
      "order": {
        "format": "int32",
        "type": "integer"
      },
      "policyErrors": {
        "$ref": "#/definitions/PolicyErrors"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "PolicyEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Policy"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PolicyErrorMessage": {
    "properties": {
      "correlationId": {
        "type": "string"
      },
      "errorCode": {
        "type": "string"
      },
      "insertDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "statusCode": {
        "format": "int32",
        "type": "integer"
      },
      "userMessage": {
        "type": "object"
      },
      "userParams": {
        "items": {
          "$ref": "#/definitions/UserParam"
        },
        "type": "array"
      },
      "userParamsMessage": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PolicyErrors": {
    "properties": {
      "policyErrorMessages": {
        "items": {
          "$ref": "#/definitions/PolicyErrorMessage"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PolicyUpdate": {
    "properties": {
      "enabled": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "PositionSettings": {
    "description": "Settings concerning position",
    "properties": {
      "alignment": {
        "description": "The alignment for position",
        "enum": [
          "Auto",
          "Left",
          "Right"
        ],
        "type": "string"
      },
      "bottomSpace": {
        "description": "The bottomspace value for position",
        "format": "int32",
        "type": "integer"
      },
      "sideSpace": {
        "description": "The sidespace value for position",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PossibleWorkShiftsForWeek": {
    "properties": {
      "dailyPossibleShifts": {
        "description": "Daily shifts in this possible weekly shift",
        "items": {
          "$ref": "#/definitions/DailyPossibleShift"
        },
        "type": "array"
      },
      "id": {
        "description": "ID of this possible weekly shift",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PostActionInput": {
    "description": "Definition of an Action to be created or updated.",
    "properties": {
      "category": {
        "description": "Category of action, Can be up to 256 characters long",
        "type": "string"
      },
      "config": {
        "$ref": "#/definitions/ActionConfig",
        "description": "Configuration to support request and response processing"
      },
      "contract": {
        "$ref": "#/definitions/ActionContractInput",
        "description": "Action contract"
      },
      "integrationId": {
        "description": "The ID of the integration this action is associated to",
        "type": "string"
      },
      "name": {
        "description": "Name of action, Can be up to 256 characters long",
        "type": "string"
      },
      "secure": {
        "description": "Indication of whether or not the action is designed to accept sensitive data",
        "type": "boolean"
      }
    },
    "required": [
      "category",
      "config",
      "contract",
      "integrationId",
      "name"
    ],
    "type": "object"
  },
  "PostInputContract": {
    "description": "The schemas defining all of the expected requests/inputs.",
    "properties": {
      "inputSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path."
      }
    },
    "required": [
      "inputSchema"
    ],
    "type": "object"
  },
  "PostOutputContract": {
    "description": "The schemas defining all of the expected responses/outputs.",
    "properties": {
      "successSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "JSON schema that defines the transformed, successful result that will be sent back to the caller."
      }
    },
    "required": [
      "successSchema"
    ],
    "type": "object"
  },
  "PostTextMessage": {
    "properties": {
      "content": {
        "description": "A list of content elements in message",
        "items": {
          "$ref": "#/definitions/ConversationMessageContent"
        },
        "type": "array"
      },
      "text": {
        "description": "Message text. If type is structured, used as fallback for clients that do not support particular structured content",
        "type": "string"
      },
      "type": {
        "description": "Message type",
        "enum": [
          "Text",
          "Structured",
          "Receipt",
          "Event",
          "Message",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "PostTextRequest": {
    "properties": {
      "amazonLexRequest": {
        "$ref": "#/definitions/AmazonLexRequest",
        "description": "Provider specific settings, if any"
      },
      "botAlias": {
        "description": "Alias/Version of the bot",
        "type": "string"
      },
      "botChannels": {
        "description": "The channels this bot is utilizing",
        "items": {
          "enum": [
            "Call",
            "Callback",
            "Messaging",
            "Webchat"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botCorrelationId": {
        "description": "Id for tracking the activity - this will be returned in the response",
        "type": "string"
      },
      "botId": {
        "description": "ID of the bot to send the text to.",
        "type": "string"
      },
      "botSessionId": {
        "description": "GUID for this bot's session",
        "type": "string"
      },
      "botSessionTimeoutMinutes": {
        "description": "Override timeout for the bot session. This should be greater than 10 minutes.",
        "format": "int32",
        "type": "integer"
      },
      "genesysBotConnector": {
        "$ref": "#/definitions/GenesysBotConnector",
        "description": "Provider specific settings, if any"
      },
      "googleDialogflow": {
        "$ref": "#/definitions/GoogleDialogflowCustomSettings",
        "description": "Provider specific settings, if any"
      },
      "integrationId": {
        "description": "the integration service id for the bot's credentials",
        "type": "string"
      },
      "languageCode": {
        "description": "The launguage code the bot will run under",
        "type": "string"
      },
      "messagingPlatformType": {
        "description": "If the channels list contains a 'Messaging' item and the messaging platform is known, include it here to get accurate analytics",
        "enum": [
          "Phone",
          "SMS",
          "GenesysWebWidget",
          "FacebookMessenger",
          "WeChat",
          "Whatsapp",
          "AppleBusinessChat",
          "Telegram",
          "Slack",
          "Signal",
          "Line",
          "Discord",
          "TwitterDirectMessage",
          "Open",
          "Instagram",
          "Other",
          "Unknown"
        ],
        "type": "string"
      },
      "nuanceMixDlg": {
        "$ref": "#/definitions/NuanceMixDlgSettings",
        "description": "Provider specific settings, if any"
      },
      "postTextMessage": {
        "$ref": "#/definitions/PostTextMessage",
        "description": "Message to send to the bot"
      }
    },
    "required": [
      "botId",
      "botSessionId",
      "integrationId",
      "postTextMessage"
    ],
    "type": "object"
  },
  "PostTextResponse": {
    "properties": {
      "amazonLex": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Raw data response from AWS (if called)",
        "type": "object"
      },
      "botCorrelationId": {
        "description": "The optional ID specified in the request",
        "type": "string"
      },
      "botState": {
        "description": "The state of the bot after completion of the request",
        "enum": [
          "Complete",
          "Failed",
          "MoreData"
        ],
        "type": "string"
      },
      "genesysBotConnector": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Raw data response from Genesys' BotConnector (if called)",
        "type": "object"
      },
      "genesysDialogEngine": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Raw data response from Genesys' Dialogengine (if called)",
        "type": "object"
      },
      "googleDialogFlow": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Raw data response from Google Dialogflow (if called)",
        "type": "object"
      },
      "intentName": {
        "description": "The name of the intent the bot is either processing or has processed, this will be blank if no intent could be detected.",
        "type": "string"
      },
      "nuanceMixDlg": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Raw data response from Nuance Mix Dlg (if called)",
        "type": "object"
      },
      "replyMessages": {
        "description": "The list of messages to respond with, if any",
        "items": {
          "$ref": "#/definitions/PostTextMessage"
        },
        "type": "array"
      },
      "slots": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Data parameters detected and filled by the bot.",
        "type": "object"
      }
    },
    "required": [
      "botState"
    ],
    "type": "object"
  },
  "PredictionResults": {
    "properties": {
      "estimatedWaitTimeSeconds": {
        "description": "Estimated wait time in seconds",
        "format": "int32",
        "type": "integer"
      },
      "formula": {
        "description": "Indicates the estimated wait time Formula",
        "enum": [
          "BEST",
          "SIMPLE",
          "ABANDON",
          "PATIENCE_ABANDON"
        ],
        "type": "string"
      },
      "intent": {
        "description": "Indicates the media type scope of this estimated wait time",
        "enum": [
          "ALL",
          "CALL",
          "CALLBACK",
          "CHAT",
          "EMAIL",
          "SOCIALEXPRESSION",
          "VIDEOCOMM",
          "MESSAGE"
        ],
        "type": "string"
      }
    },
    "required": [
      "estimatedWaitTimeSeconds",
      "formula"
    ],
    "type": "object"
  },
  "PredictiveRouting": {
    "properties": {
      "enableConversationScoreBiasing": {
        "description": "A switch used to determine if conversations are weighted by conversation score when the system attempts to assign an agent a new conversation.",
        "type": "boolean"
      },
      "respectSkills": {
        "description": "A switch used to determine if agent skills will be considered.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Predictor": {
    "properties": {
      "dateCreated": {
        "description": "DateTime indicating when the predictor was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "DateTime indicating when the predictor was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "errorCode": {
        "description": "Predictor error code - optional details on why the predictor went into error state.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "kpi": {
        "description": "The KPI that the predictor attempts to maximize/minimize.",
        "type": "string"
      },
      "models": {
        "description": "Predictor's models",
        "items": {
          "$ref": "#/definitions/PredictorModelBrief"
        },
        "readOnly": true,
        "type": "array"
      },
      "queues": {
        "description": "The queue IDs associated with the predictor.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "routingTimeoutSeconds": {
        "description": "Number of seconds allocated to predictive routing before attempting a different routing method. This is a value between 12 and 900 seconds.",
        "format": "int32",
        "type": "integer"
      },
      "schedule": {
        "$ref": "#/definitions/PredictorSchedule",
        "description": "The predictor schedule that determines when the predictor is used for routing interactions."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The predictor state.",
        "enum": [
          "Created",
          "Error",
          "Active"
        ],
        "readOnly": true,
        "type": "string"
      },
      "workloadBalancingConfig": {
        "$ref": "#/definitions/PredictorWorkloadBalancing",
        "description": "The predictor balancing configuration to enable workload balancing."
      }
    },
    "required": [
      "kpi",
      "queues"
    ],
    "type": "object"
  },
  "PredictorListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Predictor"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PredictorModel": {
    "properties": {
      "dateCreated": {
        "description": "DateTime indicating when the model was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateTrained": {
        "description": "DateTime indicating when the model was last trained. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "features": {
        "items": {
          "$ref": "#/definitions/PredictorModelFeature"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "kpi": {
        "description": "The key performance indicator used in the model.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The media type of the model.",
        "enum": [
          "voice",
          "email",
          "message"
        ],
        "readOnly": true,
        "type": "string"
      },
      "queues": {
        "description": "The List of Queues that are assessed for Predictive Routing.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "PredictorModelBrief": {
    "properties": {
      "dateModified": {
        "description": "The date the model was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The media type of the model.",
        "enum": [
          "voice",
          "email",
          "message"
        ],
        "readOnly": true,
        "type": "string"
      },
      "retrainingErrors": {
        "description": "The model's retraining errors.",
        "items": {
          "$ref": "#/definitions/PredictorModelRetrainingError"
        },
        "readOnly": true,
        "type": "array"
      },
      "state": {
        "description": "The state of the model",
        "enum": [
          "Trained",
          "Error",
          "InvalidDataset",
          "Inactive"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PredictorModelFeature": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "percentageImportance": {
        "description": "The percentage of how important a feature is in the model.",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "type": {
        "description": "The type of feature.",
        "enum": [
          "User",
          "Customer",
          "Other"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PredictorModelFeatureListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/PredictorModelFeature"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PredictorModelRetrainingError": {
    "properties": {
      "dateOfFirstOccurrence": {
        "description": "Date when the first retraining failure happened. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "errorCode": {
        "description": "Error code describing model training failure.",
        "enum": [
          "NotEnoughData",
          "ServiceError",
          "UnknownError"
        ],
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "dateOfFirstOccurrence",
      "errorCode"
    ],
    "type": "object"
  },
  "PredictorModels": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/PredictorModel"
        },
        "type": "array"
      },
      "predictorModels": {
        "items": {
          "$ref": "#/definitions/PredictorModel"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "PredictorSchedule": {
    "properties": {
      "dateStarted": {
        "description": "DateTime indicating when the predictor schedule was started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "scheduleType": {
        "description": "The predictor schedule type.",
        "enum": [
          "HourOnHourOff",
          "OngoingValueMonitoring"
        ],
        "type": "string"
      }
    },
    "required": [
      "scheduleType"
    ],
    "type": "object"
  },
  "PredictorWorkloadBalancing": {
    "properties": {
      "enabled": {
        "description": "Flag to activate and deactivate workload balancing.",
        "type": "boolean"
      },
      "maximumOccupancy": {
        "description": "Desired maximum occupancy threshold of agents. Must be between 0 and 100.",
        "format": "int32",
        "type": "integer"
      },
      "minimumOccupancy": {
        "description": "Desired minimum occupancy threshold of agents. Must be between 0 and 100.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "PreprocessingRule": {
    "properties": {
      "find": {
        "description": "The regular expression to which file lines are to be matched.",
        "type": "string"
      },
      "global": {
        "description": "Replaces all matching substrings in every line.",
        "type": "boolean"
      },
      "ignoreCase": {
        "description": "Enables case-insensitive matching",
        "type": "boolean"
      },
      "replaceWith": {
        "description": "The string to be substituted for each match.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PresenceDefinition": {
    "properties": {
      "id": {
        "description": "description",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "systemPresence": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "PresenceDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/PresenceDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "PresenceDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/PresenceDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/PresenceDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "PresenceDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "organizationPresenceId",
          "systemPresence"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "PresenceSettings": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "restorePresenceSettings": {
        "$ref": "#/definitions/RestorePresenceSettings",
        "description": "The settings for the restore presence feature"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ProcessScheduleUpdateUploadRequest": {
    "properties": {
      "managementUnitIdsForAddedTeamUsers": {
        "description": "The set of muIds to which agents belong if agents are being newly added to the schedule, if the requesting user has conditional permission to wfm:schedule:edit",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "teamIds": {
        "description": "The list of teams to which the users being modified belong. Only required if the requesting user has conditional permission to wfm:schedule:edit",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "uploadKey": {
        "description": "The uploadKey provided by the request to get an upload URL",
        "type": "string"
      }
    },
    "required": [
      "uploadKey"
    ],
    "type": "object"
  },
  "ProfileWithDateRange": {
    "properties": {
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "Profile ID",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Program": {
    "properties": {
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "datePublished": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "name": {
        "type": "string"
      },
      "published": {
        "type": "boolean"
      },
      "publishedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "topicLinksJob": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "topics": {
        "items": {
          "$ref": "#/definitions/BaseTopicEntitiy"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ProgramJob": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "programs": {
        "items": {
          "$ref": "#/definitions/BaseProgramEntity"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "enum": [
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ProgramJobRequest": {
    "properties": {
      "programIds": {
        "description": "The ids of the programs used for this job",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "programIds"
    ],
    "type": "object"
  },
  "ProgramMappings": {
    "properties": {
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "flows": {
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "program": {
        "$ref": "#/definitions/BaseProgramEntity"
      },
      "queues": {
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ProgramMappingsRequest": {
    "properties": {
      "flowIds": {
        "description": "The program flows",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "queueIds": {
        "description": "The program queues",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "flowIds",
      "queueIds"
    ],
    "type": "object"
  },
  "ProgramRequest": {
    "properties": {
      "description": {
        "description": "The program description",
        "type": "string"
      },
      "name": {
        "description": "The program name",
        "type": "string"
      },
      "tags": {
        "description": "The program tags",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "topicIds": {
        "description": "The ids of topics associated to the program",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ProgramTranscriptionEngine": {
    "properties": {
      "dialects": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "engine": {
        "enum": [
          "Genesys",
          "GenesysExtended",
          "TranscriptionConnector"
        ],
        "type": "string"
      },
      "engineIntegration": {
        "$ref": "#/definitions/EngineIntegration"
      }
    },
    "type": "object"
  },
  "ProgramTranscriptionEngines": {
    "properties": {
      "dateModified": {
        "description": "The last modified date of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The user last modified the record"
      },
      "program": {
        "$ref": "#/definitions/BaseProgramEntity",
        "description": "The ID of the program"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "transcriptionEngines": {
        "description": "The program transcription engine settings",
        "items": {
          "$ref": "#/definitions/ProgramTranscriptionEngine"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ProgramsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ListedProgram"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ProgramsMappingsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ProgramMappings"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ProgressConsultTransferEvent": {
    "properties": {
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "The id (V4 UUID) of the communication representing the participant that is initiating the transfer.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      }
    },
    "required": [
      "conversationId",
      "destinationCommunicationId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "ProgressTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used to identify the transfer already started by the external platform.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationCommunicationId",
      "eventDateTime",
      "eventId",
      "objectCommunicationId"
    ],
    "type": "object"
  },
  "Prompt": {
    "properties": {
      "currentOperation": {
        "$ref": "#/definitions/Operation",
        "description": "Current prompt operation status",
        "readOnly": true
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The prompt identifier",
        "type": "string"
      },
      "name": {
        "description": "The prompt name.",
        "type": "string"
      },
      "resources": {
        "description": "List of resources associated with this prompt",
        "items": {
          "$ref": "#/definitions/PromptAsset"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "PromptAsset": {
    "properties": {
      "durationSeconds": {
        "format": "double",
        "type": "number"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "Prompt resource language",
        "readOnly": true,
        "type": "string"
      },
      "languageDefault": {
        "description": "Whether or not this resource locale is the default for the language",
        "readOnly": true,
        "type": "boolean"
      },
      "mediaUri": {
        "description": "URI of the resource audio",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "promptId": {
        "description": "Associated prompt ID",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": "object"
      },
      "text": {
        "description": "Text of the resource",
        "type": "string"
      },
      "ttsString": {
        "description": "Text to speech of the resource",
        "type": "string"
      },
      "uploadStatus": {
        "description": "Audio upload status",
        "enum": [
          "created",
          "uploaded",
          "transcoded",
          "transcodeFailed"
        ],
        "readOnly": true,
        "type": "string"
      },
      "uploadUri": {
        "description": "Upload URI for the resource audio",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PromptAssetCreate": {
    "properties": {
      "durationSeconds": {
        "format": "double",
        "type": "number"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "The prompt language.",
        "type": "string"
      },
      "languageDefault": {
        "description": "Whether or not this resource locale is the default for the language",
        "readOnly": true,
        "type": "boolean"
      },
      "mediaUri": {
        "description": "URI of the resource audio",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "promptId": {
        "description": "Associated prompt ID",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": "object"
      },
      "text": {
        "description": "Text of the resource",
        "type": "string"
      },
      "ttsString": {
        "description": "Text to speech of the resource",
        "type": "string"
      },
      "uploadStatus": {
        "description": "Audio upload status",
        "enum": [
          "created",
          "uploaded",
          "transcoded",
          "transcodeFailed"
        ],
        "readOnly": true,
        "type": "string"
      },
      "uploadUri": {
        "description": "Upload URI for the resource audio",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "language"
    ],
    "type": "object"
  },
  "PromptAssetEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/PromptAsset"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PromptEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Prompt"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PropertyChange": {
    "properties": {
      "newValues": {
        "description": "New values for the property.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "oldValues": {
        "description": "Previous values for the property.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "property": {
        "description": "The property that was changed",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PropertyIndexRequest": {
    "properties": {
      "properties": {
        "description": "The list of properties to index",
        "items": {
          "$ref": "#/definitions/AnalyticsProperty"
        },
        "type": "array"
      },
      "sessionId": {
        "description": "Attach properties to a segment in the indicated session",
        "type": "string"
      },
      "targetDate": {
        "description": "Attach properties to a segment covering a specific point in time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "properties",
      "sessionId",
      "targetDate"
    ],
    "type": "object"
  },
  "ProvisionInfo": {
    "properties": {
      "errorInfo": {
        "description": "The error information from the provision process, if any",
        "type": "string"
      },
      "source": {
        "description": "The source of the provisioning",
        "type": "string"
      },
      "time": {
        "description": "The time at which this phone was provisioned. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "PublishDraftInput": {
    "description": "Draft to be published",
    "properties": {
      "version": {
        "description": "The current draft version.",
        "example": "If the current draft version is 2 and the current published version of Action is 33, then you would send 2 here. (Your draft will become published version 34)",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "PublishForm": {
    "properties": {
      "id": {
        "description": "Unique Id for this version of this form",
        "type": "string"
      },
      "published": {
        "description": "Is this form published",
        "type": "boolean"
      }
    },
    "required": [
      "id",
      "published"
    ],
    "type": "object"
  },
  "PublishScriptRequestData": {
    "properties": {
      "scriptId": {
        "description": "The id of the script to publish",
        "type": "string"
      },
      "versionId": {
        "type": "string"
      }
    },
    "required": [
      "scriptId"
    ],
    "type": "object"
  },
  "PublishedSurveyFormReference": {
    "properties": {
      "contextId": {
        "description": "The context id of this form.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PunctualityEvent": {
    "properties": {
      "activityCode": {
        "description": "The activity code",
        "readOnly": true,
        "type": "string"
      },
      "activityCodeId": {
        "description": "The ID of the activity code associated with this activity",
        "readOnly": true,
        "type": "string"
      },
      "activityName": {
        "description": "The activity name",
        "readOnly": true,
        "type": "string"
      },
      "bullseye": {
        "type": "boolean"
      },
      "category": {
        "description": "The category for the activity",
        "readOnly": true,
        "type": "string"
      },
      "dateScheduleStart": {
        "description": "The scheduled activity start time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateStart": {
        "description": "The time the user started the activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "delta": {
        "description": "Difference between this activity and the last activity in seconds",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "description": {
        "description": "The description of the activity",
        "readOnly": true,
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the activity in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "points": {
        "description": "The points earned for this activity",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "PureCloud": {
    "properties": {
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "PureEngage": {
    "properties": {
      "autoProvisionUsers": {
        "type": "boolean"
      },
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "QMAuditQueryRequest": {
    "properties": {
      "filters": {
        "description": "List of filters for the query.",
        "items": {
          "$ref": "#/definitions/QualityAuditQueryFilter"
        },
        "type": "array"
      },
      "interval": {
        "description": "Date and time range of data to query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "sort": {
        "description": "Sort parameter for the query.",
        "items": {
          "$ref": "#/definitions/AuditQuerySort"
        },
        "type": "array"
      }
    },
    "required": [
      "filters",
      "interval"
    ],
    "type": "object"
  },
  "QualityAuditLogMessage": {
    "properties": {
      "action": {
        "description": "Action that took place.",
        "enum": [
          "Read",
          "Create",
          "Update",
          "Delete",
          "Abandon",
          "Archive",
          "Export",
          "Download",
          "RestoreRequest",
          "RestoreComplete",
          "ApplyProtection",
          "RevokeProtection",
          "UpdateRetention"
        ],
        "type": "string"
      },
      "client": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Client associated with this audit message."
      },
      "context": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional context for this message.",
        "type": "object"
      },
      "entity": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Entity that was impacted."
      },
      "entityType": {
        "description": "Type of the entity that was impacted.",
        "enum": [
          "Recording",
          "Evaluation",
          "Calibration",
          "Annotation",
          "ScreenRecording",
          "Survey"
        ],
        "type": "string"
      },
      "eventDate": {
        "description": "Date and time of when the audit message was logged. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "Id of the audit message.",
        "type": "string"
      },
      "level": {
        "description": "The level of this audit message.",
        "enum": [
          "User",
          "System",
          "GENESYS_INTERNAL"
        ],
        "type": "string"
      },
      "messageInfo": {
        "$ref": "#/definitions/MessageInfo",
        "description": "Message describing the event being audited."
      },
      "propertyChanges": {
        "description": "List of properties that were changed and changes made to those properties.",
        "items": {
          "$ref": "#/definitions/PropertyChange"
        },
        "type": "array"
      },
      "remoteIps": {
        "description": "List of IP addresses of systems that originated or handled the request.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "serviceName": {
        "description": "Name of the service that logged this audit message.",
        "enum": [
          "RecordingService",
          "RecordingPlaybackService",
          "QualityService"
        ],
        "type": "string"
      },
      "status": {
        "description": "The status of the action of this audit message.",
        "enum": [
          "Success",
          "Failure",
          "Warning"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User associated with this audit message."
      },
      "userHomeOrgId": {
        "description": "Home Organization Id associated with this audit message.",
        "type": "string"
      },
      "userTrusteeOrgId": {
        "description": "Trustee Organization Id if this audit message is from trustee access.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "QualityAuditQueryExecutionResultsResponse": {
    "properties": {
      "cursor": {
        "description": "Optional cursor to indicate where to resume the results.",
        "type": "string"
      },
      "entities": {
        "description": "List of audit messages.",
        "items": {
          "$ref": "#/definitions/QualityAuditLogMessage"
        },
        "type": "array"
      },
      "id": {
        "description": "Id of the audit query execution request.",
        "type": "string"
      },
      "pageSize": {
        "description": "Number of results in a page.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "QualityAuditQueryExecutionStatusResponse": {
    "properties": {
      "dateStart": {
        "description": "Start date and time of the audit query execution. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "filters": {
        "description": "Filters for the audit query.",
        "items": {
          "$ref": "#/definitions/QualityAuditQueryFilter"
        },
        "type": "array"
      },
      "id": {
        "description": "Id of the audit query execution request.",
        "type": "string"
      },
      "interval": {
        "description": "Interval for the audit query. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "sort": {
        "description": "Sort parameter for the audit query.",
        "items": {
          "$ref": "#/definitions/AuditQuerySort"
        },
        "type": "array"
      },
      "state": {
        "description": "Status of the audit query execution request.",
        "enum": [
          "Queued",
          "Running",
          "Succeeded",
          "Failed",
          "Cancelled"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "QualityAuditQueryFilter": {
    "properties": {
      "property": {
        "description": "Name of the property to filter.",
        "enum": [
          "UserId",
          "TrusteeOrganizationId",
          "TrusteeOnlyAudits",
          "ClientId",
          "Action",
          "EntityType",
          "EntityId",
          "ConversationId",
          "ServiceName"
        ],
        "type": "string"
      },
      "value": {
        "description": "Value of the property to filter.",
        "type": "string"
      }
    },
    "required": [
      "property",
      "value"
    ],
    "type": "object"
  },
  "QualityEvaluationScoreItem": {
    "properties": {
      "conversationDate": {
        "description": "The date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "conversationEndDate": {
        "description": "The end date of conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "conversationId": {
        "description": "The id of conversation",
        "readOnly": true,
        "type": "string"
      },
      "evaluationId": {
        "description": "The id of evaluation",
        "readOnly": true,
        "type": "string"
      },
      "evaluationScore": {
        "description": "The quality score of evaluation as a percentage",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "formName": {
        "description": "The name of form",
        "readOnly": true,
        "type": "string"
      },
      "maxPoints": {
        "description": "The maximum Gamification points a user may earn for this metric",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "mediaTypes": {
        "description": "A list of media types for the metric",
        "items": {
          "enum": [
            "callback",
            "chat",
            "cobrowse",
            "email",
            "message",
            "screenshare",
            "unknown",
            "video",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "points": {
        "description": "Gamification points earned for this metric",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "QueryAdherenceExplanationsResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The URL from which to download the result. May come via notification",
        "type": "string"
      },
      "job": {
        "$ref": "#/definitions/AdherenceExplanationJobReference",
        "description": "The asynchronous job handling the query"
      },
      "result": {
        "$ref": "#/definitions/AdherenceExplanationListing",
        "description": "The result of the query. May come via notification"
      }
    },
    "type": "object"
  },
  "QueryAgentsIntegrationsRequest": {
    "description": "Query integrations for agents request",
    "properties": {
      "agentIds": {
        "description": "The IDs of the agents to query associated integrations",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "agentIds"
    ],
    "type": "object"
  },
  "QueryCriteria": {
    "description": "A criteria type that can be used in tandem with other criteria type to create queries of executionData",
    "properties": {
      "categoryInfo": {
        "$ref": "#/definitions/CriteriaCategoryInfo",
        "description": "A logical grouping and display order for this item."
      },
      "criteriaGroups": {
        "description": "The executionData type that this criteria item can be used on.",
        "items": {
          "enum": [
            "flow",
            "bot"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "criteriaKey": {
        "description": "The is the name of the criteria that can be queried.",
        "enum": [
          "FlowStartDateTime",
          "FlowEndDateTime",
          "ConversationId",
          "FlowType",
          "FlowId",
          "FlowErrorReason",
          "FlowWarningReason",
          "FlowAlternateExecutionId",
          "FlowObjectExecutionId",
          "FlowActionId",
          "FlowActionType",
          "FlowActionOutputPathId",
          "FlowActionOutputPathName",
          "FlowActionIdOutputPathId",
          "FlowActionIdOutputPathName",
          "FlowActionTypeOutputPathId",
          "FlowActionTypeOutputPathName",
          "BotId",
          "BotErrorReason",
          "BotFlowExecutionId",
          "BotObjectExecutionId"
        ],
        "type": "string"
      },
      "dataType": {
        "description": "The type of data for the criteria (string, int, etc).",
        "enum": [
          "string",
          "guid",
          "dateTime"
        ],
        "type": "string"
      },
      "description": {
        "description": "The is the description of the criteria.",
        "type": "string"
      },
      "operators": {
        "description": "A list of operators that can be used on this criteria.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "QueryDivision": {
    "properties": {},
    "type": "object"
  },
  "QueryFacetInfo": {
    "properties": {
      "attributes": {
        "items": {
          "$ref": "#/definitions/FacetKeyAttribute"
        },
        "type": "array"
      },
      "facets": {
        "items": {
          "$ref": "#/definitions/FacetEntry"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "QueryRequest": {
    "properties": {
      "attributeFilters": {
        "items": {
          "$ref": "#/definitions/AttributeFilterItem"
        },
        "type": "array"
      },
      "facetNameRequests": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "filters": {
        "items": {
          "$ref": "#/definitions/ContentFilterItem"
        },
        "type": "array"
      },
      "includeShares": {
        "type": "boolean"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "queryPhrase": {
        "type": "string"
      },
      "sort": {
        "items": {
          "$ref": "#/definitions/SortItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "QueryRequestClause": {
    "properties": {
      "predicates": {
        "description": "The list of predicates used to filter the data",
        "items": {
          "$ref": "#/definitions/QueryRequestPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "The logic used to combine the predicates",
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "QueryRequestFilter": {
    "properties": {
      "clauses": {
        "description": "The list of clauses used to filter the data",
        "items": {
          "$ref": "#/definitions/QueryRequestClause"
        },
        "type": "array"
      },
      "type": {
        "description": "The logic used to combine the clauses",
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      }
    },
    "required": [
      "clauses",
      "type"
    ],
    "type": "object"
  },
  "QueryRequestPredicate": {
    "properties": {
      "dimension": {
        "description": "The dimension to be filtered",
        "enum": [
          "attendeeId",
          "facilitatorId",
          "status"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value to filter by",
        "type": "string"
      }
    },
    "required": [
      "dimension",
      "value"
    ],
    "type": "object"
  },
  "QueryResponseData": {
    "properties": {
      "interval": {
        "description": "Interval with start and end represented as ISO-8601 string. i.e: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'/yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
        "type": "string"
      },
      "metrics": {
        "description": "A list of aggregated metrics",
        "items": {
          "$ref": "#/definitions/QueryResponseMetric"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "QueryResponseGroupedData": {
    "properties": {
      "data": {
        "description": "The metrics in this group",
        "items": {
          "$ref": "#/definitions/QueryResponseData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The group values for this data",
        "type": "object"
      }
    },
    "type": "object"
  },
  "QueryResponseMetric": {
    "properties": {
      "metric": {
        "description": "The metric this applies to",
        "enum": [
          "nActivities",
          "nPlannedActivities",
          "nInProgressActivities",
          "nCompleteActivities",
          "nOverdueActivities",
          "nInvalidScheduleActivities"
        ],
        "type": "string"
      },
      "stats": {
        "$ref": "#/definitions/QueryResponseStats",
        "description": "The aggregated values for this metric"
      }
    },
    "type": "object"
  },
  "QueryResponseStats": {
    "properties": {
      "count": {
        "description": "The count for this metric",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "QueryResult": {
    "properties": {
      "body": {
        "$ref": "#/definitions/DomainEntity"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "QueryResults": {
    "properties": {
      "facetInfo": {
        "$ref": "#/definitions/QueryFacetInfo"
      },
      "results": {
        "$ref": "#/definitions/DomainEntityListingQueryResult"
      }
    },
    "type": "object"
  },
  "QueryTimeOffIntegrationStatusRequest": {
    "properties": {
      "timeOffRequestLookups": {
        "description": "A list of time off request lookups",
        "items": {
          "$ref": "#/definitions/TimeOffRequestLookup"
        },
        "type": "array"
      }
    },
    "required": [
      "timeOffRequestLookups"
    ],
    "type": "object"
  },
  "QueryTimeOffLimitValuesRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The activity code id to filter the affected limit objects by. Required if timeOffLimitId is not specified",
        "type": "string"
      },
      "dateRanges": {
        "description": "The list of the date ranges to return time off limit, allocated and waitlisted minutes. The valid number of date ranges is between 1 and 30. Maximum total number of days in all ranges in 366.",
        "items": {
          "$ref": "#/definitions/LocalDateRange"
        },
        "type": "array"
      },
      "timeOffLimitId": {
        "description": "The time off limit object id to retrieve values for. Required if activityCodeId is not specified",
        "type": "string"
      }
    },
    "required": [
      "dateRanges"
    ],
    "type": "object"
  },
  "QueryTimeOffLimitValuesResponse": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/TimeOffLimitValueRange"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "QueryUserStaffingGroupListRequest": {
    "properties": {
      "userIds": {
        "description": "The set of user IDs to fetch associated staffing groups",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "userIds"
    ],
    "type": "object"
  },
  "QueryWaitlistPositionsRequest": {
    "properties": {
      "timeOffRequests": {
        "description": "The list of the time off request ids for which to fetch the daily waitlist positions",
        "items": {
          "$ref": "#/definitions/UserTimeOffRequestReference"
        },
        "type": "array"
      }
    },
    "required": [
      "timeOffRequests"
    ],
    "type": "object"
  },
  "QuestionGroupSettings": {
    "properties": {
      "questionGroupContextId": {
        "description": "The context id of the question group in the form.",
        "type": "string"
      },
      "questionGroupIndex": {
        "description": "This field represents the location of the Question Group in the form. Note: Indexes are zero-based",
        "format": "int32",
        "type": "integer"
      },
      "questionSettings": {
        "items": {
          "$ref": "#/definitions/QuestionSettings"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "QuestionSettings": {
    "properties": {
      "questionContextId": {
        "description": "The context id of the question in the group",
        "type": "string"
      },
      "questionIndex": {
        "description": "This field represents the location of the Question in the form. Note: Indexes are zero-based",
        "format": "int32",
        "type": "integer"
      },
      "settings": {
        "$ref": "#/definitions/AiScoringSetting"
      }
    },
    "type": "object"
  },
  "Queue": {
    "properties": {
      "acwSettings": {
        "$ref": "#/definitions/AcwSettings",
        "description": "The ACW settings for the queue."
      },
      "agentOwnedRouting": {
        "$ref": "#/definitions/AgentOwnedRouting",
        "description": "The Agent Owned Routing settings for the queue"
      },
      "autoAnswerOnly": {
        "description": "Specifies whether the configured whisper should play for all ACD calls, or only for those which are auto-answered.",
        "type": "boolean"
      },
      "bullseye": {
        "$ref": "#/definitions/Bullseye",
        "description": "The bullseye settings for the queue."
      },
      "callingPartyName": {
        "description": "The name to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "callingPartyNumber": {
        "description": "The phone number to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "conditionalGroupRouting": {
        "$ref": "#/definitions/ConditionalGroupRouting",
        "description": "The Conditional Group Routing settings for the queue."
      },
      "createdBy": {
        "description": "The ID of the user that created the queue.",
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the queue. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "defaultScripts": {
        "additionalProperties": {
          "$ref": "#/definitions/Script"
        },
        "description": "The default script Ids for the communication types.",
        "type": "object"
      },
      "description": {
        "description": "The queue description.",
        "type": "string"
      },
      "directRouting": {
        "$ref": "#/definitions/DirectRouting",
        "description": "The Direct Routing settings for the queue"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "emailInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for email conversations waiting in queue."
      },
      "enableAudioMonitoring": {
        "description": "Indicates whether audio monitoring is enabled for this queue.",
        "type": "boolean"
      },
      "enableManualAssignment": {
        "description": "Indicates whether manual assignment is enabled for this queue.",
        "type": "boolean"
      },
      "enableTranscription": {
        "description": "Indicates whether voice transcription is enabled for this queue.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "joinedMemberCount": {
        "description": "The number of joined members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "mediaSettings": {
        "$ref": "#/definitions/QueueMediaSettings",
        "description": "The media settings for the queue."
      },
      "memberCount": {
        "description": "The total number of members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "memberGroups": {
        "description": "The groups of agents associated with the queue, if any.  Queue membership will update to match group membership changes.",
        "items": {
          "$ref": "#/definitions/MemberGroup"
        },
        "type": "array",
        "uniqueItems": true
      },
      "messageInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for message conversations waiting in queue."
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the queue.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "onHoldPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The audio to be played when calls on this queue are on hold. If not configured, the default on-hold music will play."
      },
      "outboundEmailAddress": {
        "$ref": "#/definitions/QueueEmailAddress"
      },
      "outboundMessagingAddresses": {
        "$ref": "#/definitions/QueueMessagingAddresses",
        "description": "The messaging addresses for the queue."
      },
      "peerId": {
        "description": "The ID of an associated external queue.",
        "type": "string"
      },
      "queueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for call conversations waiting in queue."
      },
      "routingRules": {
        "description": "The routing rules for the queue, used for Preferred Agent Routing.",
        "items": {
          "$ref": "#/definitions/RoutingRule"
        },
        "type": "array"
      },
      "scoringMethod": {
        "description": "The Scoring Method for the queue",
        "enum": [
          "TimestampAndPriority",
          "PriorityOnly"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillEvaluationMethod": {
        "description": "The skill evaluation method to use when routing conversations.",
        "enum": [
          "NONE",
          "BEST",
          "ALL"
        ],
        "type": "string"
      },
      "suppressInQueueCallRecording": {
        "description": "Indicates whether recording in-queue calls is suppressed for this queue.",
        "type": "boolean"
      },
      "userMemberCount": {
        "description": "The number of user members (i.e., non-group members) in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "whisperPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The prompt used for whisper on the queue, if configured."
      }
    },
    "type": "object"
  },
  "QueueEmailAddress": {
    "properties": {
      "domain": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "route": {
        "$ref": "#/definitions/InboundRoute"
      }
    },
    "type": "object"
  },
  "QueueEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Queue"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "QueueMediaSettings": {
    "properties": {
      "call": {
        "$ref": "#/definitions/MediaSettings",
        "description": "The queue media settings for call interactions."
      },
      "callback": {
        "$ref": "#/definitions/CallbackMediaSettings",
        "description": "The queue media settings for callback interactions."
      },
      "chat": {
        "$ref": "#/definitions/MediaSettings",
        "description": "The queue media settings for chat interactions."
      },
      "email": {
        "$ref": "#/definitions/MediaSettings",
        "description": "The queue media settings for email interactions."
      },
      "message": {
        "$ref": "#/definitions/MediaSettings",
        "description": "The queue media settings for message interactions."
      }
    },
    "type": "object"
  },
  "QueueMember": {
    "properties": {
      "id": {
        "description": "The queue member's id.",
        "type": "string"
      },
      "joined": {
        "type": "boolean"
      },
      "memberBy": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "ringNumber": {
        "format": "int32",
        "type": "integer"
      },
      "routingStatus": {
        "$ref": "#/definitions/RoutingStatus"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "QueueMemberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/QueueMember"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "QueueMemberEntityListingV1": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/QueueMember"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "QueueMessagingAddresses": {
    "properties": {
      "openMessagingRecipient": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "smsAddress": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "whatsAppRecipient": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "QueueObservationDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/ObservationMetricData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "QueueObservationQuery": {
    "properties": {
      "detailMetrics": {
        "description": "Metrics for which to include additional detailed observations",
        "items": {
          "enum": [
            "oActiveUsers",
            "oAlerting",
            "oInteracting",
            "oMemberUsers",
            "oOffQueueUsers",
            "oOnQueueUsers",
            "oUserPresences",
            "oUserRoutingStatuses",
            "oWaiting"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "filter": {
        "$ref": "#/definitions/QueueObservationQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "oActiveUsers",
            "oAlerting",
            "oInteracting",
            "oMemberUsers",
            "oOffQueueUsers",
            "oOnQueueUsers",
            "oUserPresences",
            "oUserRoutingStatuses",
            "oWaiting"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "filter",
      "metrics"
    ],
    "type": "object"
  },
  "QueueObservationQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/QueueObservationQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "QueueObservationQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/QueueObservationQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/QueueObservationQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "QueueObservationQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "mediaType",
          "queueId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "QueueObservationQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/QueueObservationDataContainer"
        },
        "type": "array"
      },
      "systemToOrganizationMappings": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": "A mapping from system presence to a list of organization presence ids",
        "type": "object"
      }
    },
    "type": "object"
  },
  "QueueReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "QueueRequest": {
    "properties": {
      "acwSettings": {
        "$ref": "#/definitions/AcwSettings",
        "description": "The ACW settings for the queue."
      },
      "agentOwnedRouting": {
        "$ref": "#/definitions/AgentOwnedRouting",
        "description": "The Agent Owned Routing settings for the queue"
      },
      "autoAnswerOnly": {
        "description": "Specifies whether the configured whisper should play for all ACD calls, or only for those which are auto-answered.",
        "type": "boolean"
      },
      "bullseye": {
        "$ref": "#/definitions/Bullseye",
        "description": "The bullseye settings for the queue."
      },
      "callingPartyName": {
        "description": "The name to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "callingPartyNumber": {
        "description": "The phone number to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "conditionalGroupRouting": {
        "$ref": "#/definitions/ConditionalGroupRouting",
        "description": "The Conditional Group Routing settings for the queue."
      },
      "createdBy": {
        "description": "The ID of the user that created the queue.",
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the queue. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "defaultScripts": {
        "additionalProperties": {
          "$ref": "#/definitions/Script"
        },
        "description": "The default script Ids for the communication types.",
        "type": "object"
      },
      "description": {
        "description": "The queue description.",
        "type": "string"
      },
      "directRouting": {
        "$ref": "#/definitions/DirectRouting",
        "description": "The Direct Routing settings for the queue"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "emailInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for email conversations waiting in queue."
      },
      "enableAudioMonitoring": {
        "description": "Indicates whether audio monitoring is enabled for this queue.",
        "type": "boolean"
      },
      "enableManualAssignment": {
        "description": "Indicates whether manual assignment is enabled for this queue.",
        "type": "boolean"
      },
      "enableTranscription": {
        "description": "Indicates whether voice transcription is enabled for this queue.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "joinedMemberCount": {
        "description": "The number of joined members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "mediaSettings": {
        "$ref": "#/definitions/QueueMediaSettings",
        "description": "The media settings for the queue."
      },
      "memberCount": {
        "description": "The total number of members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "memberGroups": {
        "description": "The groups of agents associated with the queue, if any.  Queue membership will update to match group membership changes.",
        "items": {
          "$ref": "#/definitions/MemberGroup"
        },
        "type": "array",
        "uniqueItems": true
      },
      "messageInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for message conversations waiting in queue."
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the queue.",
        "type": "string"
      },
      "name": {
        "description": "The queue name",
        "type": "string"
      },
      "onHoldPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The audio to be played when calls on this queue are on hold. If not configured, the default on-hold music will play."
      },
      "outboundEmailAddress": {
        "$ref": "#/definitions/QueueEmailAddress"
      },
      "outboundMessagingAddresses": {
        "$ref": "#/definitions/QueueMessagingAddresses",
        "description": "The messaging addresses for the queue."
      },
      "peerId": {
        "description": "The ID of an associated external queue.",
        "type": "string"
      },
      "queueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for call conversations waiting in queue."
      },
      "routingRules": {
        "description": "The routing rules for the queue, used for Preferred Agent Routing.",
        "items": {
          "$ref": "#/definitions/RoutingRule"
        },
        "type": "array"
      },
      "scoringMethod": {
        "description": "The Scoring Method for the queue",
        "enum": [
          "TimestampAndPriority",
          "PriorityOnly"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillEvaluationMethod": {
        "description": "The skill evaluation method to use when routing conversations.",
        "enum": [
          "NONE",
          "BEST",
          "ALL"
        ],
        "type": "string"
      },
      "suppressInQueueCallRecording": {
        "description": "Indicates whether recording in-queue calls is suppressed for this queue.",
        "type": "boolean"
      },
      "userMemberCount": {
        "description": "The number of user members (i.e., non-group members) in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "whisperPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The prompt used for whisper on the queue, if configured."
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "QueueUtilizationDiagnostic": {
    "properties": {
      "activeUsersInQueue": {
        "description": "The number of users active on the queue",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Identifier of the queue",
        "readOnly": true
      },
      "usersInQueue": {
        "description": "The number of users joined to the queue",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usersNotUtilized": {
        "description": "The number of users in the queue currently not engaged",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usersOnACampaignCall": {
        "description": "The number of users currently engaged in a campaign call",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usersOnANonCampaignCall": {
        "description": "The number of users currently engaged in a communication that is not part of the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usersOnDifferentEdgeGroup": {
        "description": "The number of users whose station is homed to an edge different from the campaign",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usersOnQueue": {
        "description": "The number of users with a status of on-queue",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usersOnQueueWithStation": {
        "description": "The number of users in the queue with a station",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "QuickReply": {
    "properties": {
      "action": {
        "description": "Specifies the type of action that is triggered upon clicking the quick reply. Currently, the only supported action is \"Message\" which sends a message using the quick reply text.",
        "enum": [
          "Message"
        ],
        "type": "string"
      },
      "isSelected": {
        "description": "Indicates if the quick reply option is selected by end customer",
        "type": "boolean"
      },
      "payload": {
        "description": "Content of the textback payload after clicking a quick reply",
        "type": "string"
      },
      "text": {
        "description": "Text to show inside the quick reply. This is also used as the response text after clicking on the quick reply.",
        "type": "string"
      },
      "url": {
        "description": "The location of the image file associated with quick reply",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Range": {
    "properties": {
      "end": {
        "description": "The end date time of the last occurrence of the range as an ISO-8601 string. Required for EndDate range type.",
        "example": "2023-12-21T16:30:25",
        "type": "string"
      },
      "numberOfOccurrences": {
        "description": "The number of times the schedule will be repeated, e.g: 2. Required to set for Numbered range type.",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Range type (NoEnd: without an end date. EndDate: with an end date. Numbered: with a specific number of occurrences)",
        "enum": [
          "NoEnd",
          "EndDate",
          "Numbered"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "RateLimitAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "RateLimitAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/RateLimitAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "RateLimitAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/RateLimitAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/RateLimitAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "RateLimitAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "correlationId",
          "entityId",
          "limitName",
          "max",
          "namespace",
          "timeUnit",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "RateLimitAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/RateLimitAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RateLimitAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/RateLimitAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "correlationId",
            "entityId",
            "limitName",
            "max",
            "namespace",
            "timeUnit",
            "userId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "oRateLimitRecorded"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/RateLimitAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "RateLimitAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "oRateLimitRecorded"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "Reaction": {
    "properties": {
      "data": {
        "description": "Parameter for this reaction. For transfer_flow, this would be the outbound flow id.",
        "type": "string"
      },
      "name": {
        "description": "Name of the parameter for this reaction. For transfer_flow, this would be the outbound flow name.",
        "type": "string"
      },
      "reactionType": {
        "description": "The reaction to take for a given call analysis result.",
        "enum": [
          "hangup",
          "transfer",
          "transfer_flow",
          "play_file"
        ],
        "type": "string"
      }
    },
    "required": [
      "reactionType"
    ],
    "type": "object"
  },
  "RealTimeAdherenceExplanation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of the adherence explanation in minutes",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startDate": {
        "description": "The start timestamp of the adherence explanation in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "status": {
        "description": "The status of the adherence explanation",
        "enum": [
          "Pending",
          "Approved",
          "Denied"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecallEntry": {
    "properties": {
      "minutesBetweenAttempts": {
        "format": "int32",
        "type": "integer"
      },
      "nbrAttempts": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Recipient": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/User",
        "description": "User that created this recipient"
      },
      "dateCreated": {
        "description": "Date this recipient was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this recipient was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/Flow",
        "description": "An automate flow object which defines the set of actions to be taken, when a message is received by this recipient."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messengerType": {
        "description": "The messenger type for this recipient",
        "enum": [
          "sms",
          "facebook",
          "twitter",
          "whatsapp",
          "webmessaging",
          "instagram",
          "open"
        ],
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/User",
        "description": "User that modified this recipient"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecipientAdditionalIdentifier": {
    "description": "Additional identifiers for describing messaging recipient.",
    "properties": {
      "type": {
        "description": "Type of the Identifier",
        "enum": [
          "Deployment",
          "Subject",
          "Topic",
          "IngestionRule",
          "IngestionRuleVersion"
        ],
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "The Identifier value.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "type",
      "value"
    ],
    "type": "object"
  },
  "RecipientFlow": {
    "properties": {
      "id": {
        "description": "The flow identifier",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecipientListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Recipient"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "RecipientRequest": {
    "properties": {
      "flow": {
        "$ref": "#/definitions/RecipientFlow",
        "description": "An automate flow object which defines the set of actions to be taken, when a message is received by this recipient."
      }
    },
    "type": "object"
  },
  "Recognition": {
    "properties": {
      "contextId": {
        "description": "The context id (optional)",
        "type": "string"
      },
      "contextType": {
        "description": "The context type (optional)",
        "enum": [
          "Interaction",
          "Insights",
          "Development",
          "Scorecard"
        ],
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The creator of the recognition"
      },
      "dateAcknowledged": {
        "description": "The acknowledged date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2023-01-01T01:01:01Z",
        "format": "date-time",
        "type": "string"
      },
      "dateCreated": {
        "description": "The creation date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2023-01-01T01:01:01Z",
        "format": "date-time",
        "type": "string"
      },
      "dateDisplayed": {
        "description": "The displayed date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2023-01-01T01:01:01Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "note": {
        "description": "The recognition note",
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/UserReference",
        "description": "The recipient of the recognition"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "The recognition title",
        "type": "string"
      },
      "type": {
        "description": "The type of recognition",
        "enum": [
          "ThankYou",
          "Congratulations",
          "HighPerformance",
          "CompanyValues"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecognitionBase": {
    "properties": {
      "contextId": {
        "description": "The context id (optional)",
        "type": "string"
      },
      "contextType": {
        "description": "The context type (optional)",
        "enum": [
          "Interaction",
          "Insights",
          "Development",
          "Scorecard"
        ],
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The creator of the recognition"
      },
      "dateCreated": {
        "description": "The creation date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2023-01-01T01:01:01Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "note": {
        "description": "The recognition note",
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/UserReference",
        "description": "The recipient of the recognition"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "The recognition title",
        "type": "string"
      },
      "type": {
        "description": "The type of recognition",
        "enum": [
          "ThankYou",
          "Congratulations",
          "HighPerformance",
          "CompanyValues"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Record": {
    "properties": {
      "name": {
        "description": "The name of the record.",
        "type": "string"
      },
      "type": {
        "description": "The type of the record. (Example values:  MX, TXT, CNAME)",
        "type": "string"
      },
      "value": {
        "description": "The value of the record.",
        "type": "string"
      }
    },
    "required": [
      "name",
      "type",
      "value"
    ],
    "type": "object"
  },
  "Recording": {
    "properties": {
      "actualTranscodeTimeMs": {
        "format": "int64",
        "type": "integer"
      },
      "annotations": {
        "description": "Annotations that belong to the recording.",
        "items": {
          "$ref": "#/definitions/Annotation"
        },
        "type": "array"
      },
      "archiveDate": {
        "description": "The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "archiveMedium": {
        "description": "The type of archive medium used. Example: CloudArchive",
        "enum": [
          "CLOUDARCHIVE"
        ],
        "type": "string"
      },
      "conversationId": {
        "type": "string"
      },
      "creationTime": {
        "description": "The creation time of the recording. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "deleteDate": {
        "description": "The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "emailTranscript": {
        "description": "Represents an email transcript",
        "items": {
          "$ref": "#/definitions/RecordingEmailMessage"
        },
        "type": "array"
      },
      "endTime": {
        "description": "The end time of the recording. Null when there is no playable media.",
        "type": "string"
      },
      "estimatedTranscodeTimeMs": {
        "format": "int64",
        "type": "integer"
      },
      "exportDate": {
        "description": "The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "exportedDate": {
        "description": "The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "fileState": {
        "description": "Represents the current file state for a recording. Examples: Uploading, Archived, etc",
        "enum": [
          "ARCHIVED",
          "AVAILABLE",
          "DELETED",
          "RESTORED",
          "RESTORING",
          "UPLOADING",
          "ERROR"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxAllowedRestorationsForOrg": {
        "description": "How many archive restorations the organization is allowed to have.",
        "format": "int32",
        "type": "integer"
      },
      "media": {
        "description": "The media type of the recording. This could be audio, chat, messaging, email, or screen.",
        "type": "string"
      },
      "mediaSubject": {
        "description": "The media subject of the recording.",
        "type": "string"
      },
      "mediaSubtype": {
        "description": "The media subtype of the recording.",
        "enum": [
          "Trunk",
          "Station",
          "Consult",
          "Screen"
        ],
        "type": "string"
      },
      "mediaUris": {
        "additionalProperties": {
          "$ref": "#/definitions/MediaResult"
        },
        "description": "The different mediaUris for the recording. Null when there is no playable media.",
        "type": "object"
      },
      "messagingTranscript": {
        "description": "Represents a messaging transcript",
        "items": {
          "$ref": "#/definitions/RecordingMessagingMessage"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "originalRecordingStartTime": {
        "description": "The start time of the full recording, before any segment access restrictions are applied. Null when there is no playable media. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "outputDurationMs": {
        "description": "Duration of transcoded media in milliseconds",
        "format": "int32",
        "type": "integer"
      },
      "outputSizeInBytes": {
        "description": "Size of transcoded media in bytes. 0 if there is no transcoded media.",
        "format": "int32",
        "type": "integer"
      },
      "path": {
        "type": "string"
      },
      "recordingErrorStatus": {
        "description": "Status of a recording that cannot be returned because of an error",
        "enum": [
          "EMAIL_TRANSCRIPT_TOO_LARGE"
        ],
        "type": "string"
      },
      "recordingFileRole": {
        "description": "Role of the file recording. It can be either customer_experience or adhoc.",
        "enum": [
          "CUSTOMER_EXPERIENCE",
          "ADHOC"
        ],
        "type": "string"
      },
      "remainingRestorationsAllowedForOrg": {
        "description": "The remaining archive restorations the organization has.",
        "format": "int32",
        "type": "integer"
      },
      "restoreExpirationTime": {
        "description": "The amount of time a restored recording will remain restored before being archived again. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "The session id represents an external resource id, such as email, call, chat, etc",
        "type": "string"
      },
      "startTime": {
        "description": "The start time of the recording. Null when there is no playable media.",
        "type": "string"
      },
      "transcript": {
        "description": "Represents a chat transcript",
        "items": {
          "$ref": "#/definitions/ChatMessage"
        },
        "type": "array"
      },
      "users": {
        "description": "The users participating in the conversation",
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RecordingAnnotationFlow": {
    "properties": {
      "id": {
        "description": "The flow Id",
        "type": "string"
      },
      "name": {
        "description": "The flow name",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "RecordingAnnotationQueue": {
    "properties": {
      "id": {
        "description": "The queue Id",
        "type": "string"
      },
      "name": {
        "description": "The queue name",
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "RecordingButtonComponent": {
    "description": "Structured template button object.",
    "properties": {
      "actions": {
        "$ref": "#/definitions/RecordingContentActions"
      },
      "isSelected": {
        "type": "boolean"
      },
      "title": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingContentActions": {
    "description": "User actions available on the content. All actions are optional and all actions are executed simultaneously.",
    "properties": {
      "textback": {
        "description": "Text to be sent back in reply when the item is selected.",
        "type": "string"
      },
      "url": {
        "description": "A URL of a web page to direct the user to.",
        "type": "string"
      },
      "urlTarget": {
        "description": "The target window in which to open the URL. If empty will open a blank page or tab.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingContentStory": {
    "description": "Story object.",
    "properties": {
      "replyToId": {
        "description": "ID of the ephemeral story being replied to.",
        "type": "string"
      },
      "type": {
        "description": "Type of ephemeral story attachment.",
        "enum": [
          "Mention",
          "Reply"
        ],
        "type": "string"
      },
      "url": {
        "description": "URL to the ephemeral story.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingEmailMessage": {
    "properties": {
      "attachments": {
        "items": {
          "$ref": "#/definitions/EmailAttachment"
        },
        "type": "array"
      },
      "bcc": {
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "cc": {
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      },
      "from": {
        "$ref": "#/definitions/EmailAddress"
      },
      "htmlBody": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "subject": {
        "type": "string"
      },
      "textBody": {
        "type": "string"
      },
      "time": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RecordingEncryptionConfiguration": {
    "properties": {
      "apiId": {
        "description": "The api id for Hawk Authentication. Null if keyConfigurationType is KmsSymmetric",
        "type": "string"
      },
      "apiKey": {
        "description": "The api shared symmetric key used for hawk authentication. Null if keyConfigurationType is KmsSymmetric",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "keyConfigurationType": {
        "description": "Type should be LocalKeyManager or KmsSymmetric when create or update Key configurations; 'Native' for disabling configuration.",
        "enum": [
          "KmsSymmetric",
          "LocalKeyManager",
          "Native",
          "None"
        ],
        "type": "string"
      },
      "lastError": {
        "$ref": "#/definitions/ErrorBody",
        "description": "The error message related to the configuration"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "When keyConfigurationType is LocalKeyManager, this should be the url for decryption and must specify the path to where GenesysCloud can requests decryption. When keyConfigurationType is KmsSymmetric, this should be the arn to the key alias for the master key",
        "type": "string"
      }
    },
    "required": [
      "keyConfigurationType",
      "url"
    ],
    "type": "object"
  },
  "RecordingEncryptionConfigurationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RecordingEncryptionConfiguration"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "RecordingJob": {
    "properties": {
      "dateCreated": {
        "description": "Date when the job was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "errorMessage": {
        "description": "Error occurred during the job execution",
        "readOnly": true,
        "type": "string"
      },
      "failedRecordings": {
        "description": "Get IDs of recordings that the bulk job failed for",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "percentProgress": {
        "description": "Progress in percentage based on the number of recordings",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "recordingJobsQuery": {
        "$ref": "#/definitions/RecordingJobsQuery",
        "description": "Original query of the job.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The current state of the job.",
        "enum": [
          "FULFILLED",
          "PENDING",
          "READY",
          "PROCESSING",
          "CANCELLED",
          "FAILED"
        ],
        "type": "string"
      },
      "totalConversations": {
        "description": "Total number of conversations affected.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "totalFailedRecordings": {
        "description": "Total number of recordings that the bulk job failed to process.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "totalProcessedRecordings": {
        "description": "Total number of recordings have been processed.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "totalRecordings": {
        "description": "Total number of recordings affected.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "totalSkippedRecordings": {
        "description": "Total number of recordings that have been skipped.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Details of the user created the job",
        "readOnly": true
      }
    },
    "required": [
      "state"
    ],
    "type": "object"
  },
  "RecordingJobEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RecordingJob"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "RecordingJobFailedRecording": {
    "properties": {
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Conversation",
        "readOnly": true
      },
      "recording": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Recording",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "RecordingJobsQuery": {
    "properties": {
      "action": {
        "description": "Operation to perform bulk task. If the operation will cause the delete date of a recording to be older than the export date, the export date will be adjusted to the delete date.",
        "enum": [
          "ARCHIVE",
          "DELETE",
          "EXPORT"
        ],
        "type": "string"
      },
      "actionAge": {
        "description": "The number of days after each recording's creation date when the action will be performed. If screenRecordingActionAge is also provided, this value is only used for non-screen recordings. Otherwise this value is used for all recordings.",
        "format": "int32",
        "type": "integer"
      },
      "actionDate": {
        "description": "The date when the action will be performed. If screenRecordingActionDate is also provided, this value is only used for non-screen recordings. Otherwise this value is used for all recordings. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "agedConversationInterval": {
        "description": "As an alternative to conversationQuery, specify the date and time range of conversations that are older than 5 years to query.Results will include all conversations that had activity during the interval. This is supported only when querying for conversations older than 5 years;conversationQuery must not be provided when this is provided. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss.Interval duration must not exceed 6 months. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "clearExport": {
        "description": "For DELETE action, setting this to true will clear any pending exports for recordings. This field is only used for DELETE action. Default value = false",
        "type": "boolean"
      },
      "conversationQuery": {
        "$ref": "#/definitions/AsyncConversationQuery",
        "description": "Conversation Query. Note: After the recording is created, it might take up to 48 hours for the recording to be included in the submitted job query.  This result depends on the analytics data lake job completion. See also: https://developer.genesys.cloud/analyticsdatamanagement/analytics/jobs/conversation-details-job#data-availability.This is supported only when querying for conversations up to and including 5 years old."
      },
      "includeRecordingsWithSensitiveData": {
        "description": "Whether to include recordings with PCI DSS and/or PII data, default value = false ",
        "type": "boolean"
      },
      "includeScreenRecordings": {
        "description": "Whether to include Screen recordings for the action, default value = true ",
        "type": "boolean"
      },
      "integrationId": {
        "description": "IntegrationId to Access AWS S3 bucket for bulk recording exports. This field is required and used only for EXPORT action.",
        "type": "string"
      },
      "screenRecordingActionAge": {
        "description": "The number of days after each screen recording's creation date when the action will be performed. If this is provided then includeScreenRecordings must be true.",
        "format": "int32",
        "type": "integer"
      },
      "screenRecordingActionDate": {
        "description": "The date when the action will be performed for screen recordings. If this is provided then includeScreenRecordings must be true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "action"
    ],
    "type": "object"
  },
  "RecordingMessagingMessage": {
    "properties": {
      "buttonResponse": {
        "$ref": "#/definitions/ButtonResponse",
        "description": "Button Response selected by user for this message."
      },
      "cards": {
        "description": "List of cards offered for this message",
        "items": {
          "$ref": "#/definitions/Card"
        },
        "type": "array"
      },
      "contentType": {
        "description": "Indicates the content type for this message",
        "enum": [
          "QuickReply",
          "Story",
          "Card",
          "Carousel",
          "Attachment",
          "Location",
          "Notification",
          "GenericTemplate",
          "ListTemplate",
          "Postback",
          "Reactions",
          "Mention",
          "ButtonResponse"
        ],
        "type": "string"
      },
      "from": {
        "description": "The message sender session id.",
        "type": "string"
      },
      "fromExternalContact": {
        "$ref": "#/definitions/ExternalContact",
        "description": "The PureCloud external contact sender details."
      },
      "fromUser": {
        "$ref": "#/definitions/User",
        "description": "The user who sent this message."
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "messageMediaAttachments": {
        "description": "List of media objects attached  with this message.",
        "items": {
          "$ref": "#/definitions/MessageMediaAttachment"
        },
        "type": "array"
      },
      "messageStickerAttachments": {
        "description": "List of message stickers attached with this message.",
        "items": {
          "$ref": "#/definitions/MessageStickerAttachment"
        },
        "type": "array"
      },
      "messageText": {
        "description": "The content of this message.",
        "type": "string"
      },
      "participantId": {
        "description": "A globally unique identifier for the participant on this communication.",
        "type": "string"
      },
      "purpose": {
        "description": "A well known string that specifies the purpose or type of the participant on this communication.",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A globally unique identifier for the queue involved in this communication."
      },
      "quickReplies": {
        "description": "List of quick reply options offered with this message.",
        "items": {
          "$ref": "#/definitions/QuickReply"
        },
        "type": "array"
      },
      "story": {
        "$ref": "#/definitions/RecordingContentStory",
        "description": "Ephemeral story content."
      },
      "timestamp": {
        "description": "The time when the message was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "description": "The message recipient.",
        "type": "string"
      },
      "workflow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A globally unique identifier for the workflow involved in this communication."
      }
    },
    "type": "object"
  },
  "RecordingMetadata": {
    "properties": {
      "annotations": {
        "description": "Annotations that belong to the recording. Populated when recording filestate is AVAILABLE.",
        "items": {
          "$ref": "#/definitions/Annotation"
        },
        "type": "array"
      },
      "archiveDate": {
        "description": "The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "archiveMedium": {
        "description": "The type of archive medium used. Example: CloudArchive",
        "enum": [
          "CLOUDARCHIVE"
        ],
        "type": "string"
      },
      "conversationId": {
        "type": "string"
      },
      "deleteDate": {
        "description": "The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "endTime": {
        "type": "string"
      },
      "exportDate": {
        "description": "The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "exportedDate": {
        "description": "The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "fileState": {
        "description": "Represents the current file state for a recording. Examples: Uploading, Archived, etc",
        "enum": [
          "ARCHIVED",
          "AVAILABLE",
          "DELETED",
          "RESTORED",
          "RESTORING",
          "UPLOADING",
          "ERROR"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxAllowedRestorationsForOrg": {
        "description": "How many archive restorations the organization is allowed to have.",
        "format": "int32",
        "type": "integer"
      },
      "media": {
        "description": "The type of media that the recording is. At the moment that could be audio, chat, email, or message.",
        "type": "string"
      },
      "mediaSubject": {
        "description": "The recording media subject.",
        "type": "string"
      },
      "mediaSubtype": {
        "description": "The recording media subtype.",
        "enum": [
          "Trunk",
          "Station",
          "Consult",
          "Screen"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "path": {
        "type": "string"
      },
      "remainingRestorationsAllowedForOrg": {
        "description": "The remaining archive restorations the organization has.",
        "format": "int32",
        "type": "integer"
      },
      "restoreExpirationTime": {
        "description": "The amount of time a restored recording will remain restored before being archived again. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionId": {
        "description": "The session id represents an external resource id, such as email, call, chat, etc",
        "type": "string"
      },
      "startTime": {
        "description": "The start time of the recording for screen recordings. Null for other types.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingRetention": {
    "properties": {
      "archiveDate": {
        "description": "The date the recording will be archived. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "archiveMedium": {
        "description": "The type of archive medium used. Example: CloudArchive",
        "enum": [
          "CLOUDARCHIVE"
        ],
        "type": "string"
      },
      "conversationId": {
        "type": "string"
      },
      "creationTime": {
        "description": "The creation time of the recording. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "deleteDate": {
        "description": "The date the recording will be deleted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "exportDate": {
        "description": "The date the recording will be exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "exportedDate": {
        "description": "The date the recording was exported. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "recordingId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingRetentionCursorEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RecordingRetention"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingSettings": {
    "properties": {
      "maxConfigurableScreenRecordingStreams": {
        "description": "Upper limit that maxSimultaneousStreams can be configured",
        "format": "int32",
        "type": "integer"
      },
      "maxSimultaneousStreams": {
        "description": "Maximum number of simultaneous screen recording streams",
        "format": "int32",
        "type": "integer"
      },
      "recordingBatchDownloadUrlTtl": {
        "description": "TThe duration in minutes for which the generated URL for recording batch download remains valid.The default duration is set to 60 minutes, with a minimum allowable duration of 2 minutes and a maximum of 60 minutes.",
        "format": "int32",
        "type": "integer"
      },
      "recordingPlaybackUrlTtl": {
        "description": "The duration in minutes for which the generated URL for recording playback remains valid.The default duration is set to 60 minutes, with a minimum allowable duration of 2 minutes and a maximum of 60 minutes.",
        "format": "int32",
        "type": "integer"
      },
      "regionalRecordingStorageEnabled": {
        "description": "Store call recordings in the region where they are intended to be recorded, otherwise in the organization's home region",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "RecordingUploadReport": {
    "properties": {
      "id": {
        "description": "The report id.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "signedUrl": {
        "description": "For COMPLETED tasks, the signed url to download the report.",
        "type": "string"
      },
      "state": {
        "description": "The current status of the upload report.",
        "enum": [
          "InProgress",
          "Completed",
          "Failed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "RecordingUploadReportRequest": {
    "properties": {
      "dateSince": {
        "description": "Report will include uploads since this date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "uploadStatus": {
        "description": "Report will include uploads with this status",
        "enum": [
          "Pending",
          "Success",
          "Failure",
          "WaitForConversation"
        ],
        "type": "string"
      }
    },
    "required": [
      "dateSince"
    ],
    "type": "object"
  },
  "RecurrenceEndSettings": {
    "properties": {
      "lastDate": {
        "description": "The end date of the recurrence for the activity plan, in ISO-8601 format. Only one of lastDate or noEndDate may be set",
        "format": "date-time",
        "type": "string"
      },
      "noEndDate": {
        "description": "Whether this activity plan should continue indefinitely. If set to true, lastDate must not be set",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "RecurrencePeriod": {
    "properties": {
      "granularity": {
        "description": "The granularity unit to interpret the period of this activity plan",
        "enum": [
          "Days",
          "Weeks"
        ],
        "type": "string"
      },
      "magnitude": {
        "description": "The period of the activity plan in granularity units",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "granularity",
      "magnitude"
    ],
    "type": "object"
  },
  "RecurrenceSettings": {
    "properties": {
      "endAfter": {
        "$ref": "#/definitions/RecurrenceEndSettings",
        "description": "Settings controlling when to end the recurrence for the activity plan"
      },
      "minimumTimeBetweenOccurrences": {
        "$ref": "#/definitions/RecurrencePeriod",
        "description": "Constraint indicating the minimum time in hours between recurrences of the activity plan"
      },
      "recurrencePeriod": {
        "$ref": "#/definitions/RecurrencePeriod",
        "description": "The recurrence period of the activity plan"
      }
    },
    "required": [
      "endAfter",
      "minimumTimeBetweenOccurrences",
      "recurrencePeriod"
    ],
    "type": "object"
  },
  "Referrer": {
    "properties": {
      "domain": {
        "description": "Referrer URL domain.",
        "type": "string"
      },
      "fragment": {
        "description": "Referrer URL fragment.",
        "type": "string"
      },
      "hostname": {
        "description": "Referrer URL hostname.",
        "type": "string"
      },
      "keywords": {
        "description": "Referrer keywords.",
        "type": "string"
      },
      "medium": {
        "description": "Type of referrer (e.g. search, social).",
        "enum": [
          "internal",
          "search",
          "social",
          "email",
          "unknown",
          "paid"
        ],
        "type": "string"
      },
      "name": {
        "description": "Name of referrer (e.g. Yahoo!, Google, InfoSpace).",
        "type": "string"
      },
      "pathname": {
        "description": "Referrer URL pathname.",
        "type": "string"
      },
      "queryString": {
        "description": "Referrer URL querystring.",
        "type": "string"
      },
      "url": {
        "description": "Referrer URL.",
        "type": "string"
      }
    },
    "required": [
      "domain",
      "hostname",
      "medium",
      "pathname",
      "url"
    ],
    "type": "object"
  },
  "RegionTimeZone": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "offset": {
        "format": "int64",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "RegisterArchitectJobResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers when uploading a file through PUT request to the URL",
        "readOnly": true,
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "presignedUrl": {
        "description": "Presigned URL to upload the file in S3",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Relationship": {
    "properties": {
      "externalDataSources": {
        "description": "Links to the sources of data (e.g. one source might be a CRM) that contributed data to this record.  Read-only, and only populated when requested via expand param.",
        "items": {
          "$ref": "#/definitions/ExternalDataSource"
        },
        "readOnly": true,
        "type": "array"
      },
      "externalOrganization": {
        "$ref": "#/definitions/ExternalOrganization",
        "description": "The external organization this relationship is attached to"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "relationship": {
        "description": "The relationship or role of the user to this external organization.Examples: Account Manager, Sales Engineer, Implementation Consultant",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "The user associated with the external organization. When creating or updating a relationship, only User.id is required. User object is fully populated when expanding a note."
      }
    },
    "required": [
      "externalOrganization",
      "relationship",
      "user"
    ],
    "type": "object"
  },
  "RelationshipListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Relationship"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "partialResults": {
        "type": "boolean"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Reoccurrence": {
    "properties": {
      "alterations": {
        "description": "Modifications to the original recurrence schedule (Exclusions/Inclusions)",
        "items": {
          "$ref": "#/definitions/Alteration"
        },
        "type": "array"
      },
      "end": {
        "description": "The end date time of the initial occurrence as an ISO-8601 string in the format YYYY-MM-DDThh:mm:ss",
        "example": "2023-11-21T16:30:25",
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "nextOccurrenceDetails": {
        "$ref": "#/definitions/NextOccurrenceDetails",
        "description": "The next occurrence details for the next start and end occurrences for the recurrence",
        "readOnly": true
      },
      "pattern": {
        "$ref": "#/definitions/Pattern",
        "description": "The schedule pattern e.g.: Daily/Weekly"
      },
      "range": {
        "$ref": "#/definitions/Range",
        "description": "The schedule range e.g.: EndDate/NoEnd/Numbered"
      },
      "start": {
        "description": "The start date time of the initial occurrence as an ISO-8601 string in the format YYYY-MM-DDThh:mm:ss",
        "example": "2023-11-21T16:30:25",
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for the recurrence. The time zone of the recurrence is determined by prioritizing the recurrence's time zone if specified, then the schedule's time zone if set, and finally defaulting to UTC if neither defines a time zone.",
        "example": "America/New_York",
        "type": "string"
      }
    },
    "required": [
      "end",
      "pattern",
      "range",
      "start",
      "timeZone"
    ],
    "type": "object"
  },
  "ReplaceRequest": {
    "properties": {
      "authToken": {
        "type": "string"
      },
      "changeNumber": {
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReplaceResponse": {
    "properties": {
      "changeNumber": {
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "uploadDestinationUri": {
        "format": "uri",
        "type": "string"
      },
      "uploadMethod": {
        "enum": [
          "SINGLE_PUT",
          "MULTIPART_POST"
        ],
        "type": "string"
      },
      "uploadStatus": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "ReplacementTerm": {
    "properties": {
      "existingValue": {
        "type": "string"
      },
      "type": {
        "enum": [
          "NAME",
          "ADDRESS",
          "PHONE",
          "EMAIL",
          "TWITTER"
        ],
        "type": "string"
      },
      "updatedValue": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReplyToEmailAddress": {
    "properties": {
      "domain": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The InboundDomain used for the email address."
      },
      "route": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The InboundRoute used for the email address."
      }
    },
    "required": [
      "domain",
      "route"
    ],
    "type": "object"
  },
  "ReportingExportJobListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ReportingExportJobResponse"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ReportingExportJobRequest": {
    "properties": {
      "csvDelimiter": {
        "description": "The user supplied csv delimiter string value either of type 'comma' or 'semicolon' permitted for the export request",
        "enum": [
          "SEMICOLON",
          "COMMA"
        ],
        "type": "string"
      },
      "durationFormat": {
        "description": "Indicates the duration format for the exports",
        "enum": [
          "Seconds",
          "Milliseconds",
          "Hhmmss",
          "Hms"
        ],
        "type": "string"
      },
      "excludeEmptyRows": {
        "description": "Excludes empty rows from the exports",
        "type": "boolean"
      },
      "exportFormat": {
        "description": "The requested format of the exported data",
        "enum": [
          "CSV",
          "PDF"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/ViewFilter",
        "description": "Filters to apply to create the view"
      },
      "hasCustomParticipantAttributes": {
        "description": "Indicates if custom participant attributes will be exported",
        "type": "boolean"
      },
      "hasFormatDurations": {
        "description": "Indicates if durations are formatted in hh:mm:ss format instead of ms",
        "type": "boolean"
      },
      "hasSplitByMedia": {
        "description": "Indicates if media type will be split in aggregate detail exports",
        "type": "boolean"
      },
      "hasSplitFilters": {
        "description": "Indicates if filters will be split in aggregate detail exports",
        "type": "boolean"
      },
      "hasSummaryRow": {
        "description": "Indicates if summary row needs to be present in exports",
        "type": "boolean"
      },
      "includeDurationFormatInHeader": {
        "description": "Indicates whether to include selected duration format to the column headers",
        "type": "boolean"
      },
      "interval": {
        "description": "The time period used to limit the the exported data. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "locale": {
        "description": "The locale used for localization of the exported data, i.e. en-US, es",
        "type": "string"
      },
      "name": {
        "description": "The user supplied name of the export request",
        "type": "string"
      },
      "period": {
        "description": "The Period of the request in which to break down the intervals. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "read": {
        "description": "Indicates if the request has been marked as read",
        "type": "boolean"
      },
      "recipientEmails": {
        "description": "The list of email recipients for the exports",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selectedColumns": {
        "description": "The list of ordered selected columns from the export view by the user",
        "items": {
          "$ref": "#/definitions/SelectedColumns"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "The requested timezone of the exported data. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "viewType": {
        "description": "The type of view export job to be created",
        "enum": [
          "QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "QUEUE_PERFORMANCE_DETAIL_VIEW",
          "INTERACTION_SEARCH_VIEW",
          "AGENT_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_PERFORMANCE_DETAIL_VIEW",
          "AGENT_STATUS_SUMMARY_VIEW",
          "AGENT_STATUS_DETAIL_VIEW",
          "AGENT_EVALUATION_SUMMARY_VIEW",
          "AGENT_EVALUATION_DETAIL_VIEW",
          "AGENT_QUEUE_DETAIL_VIEW",
          "AGENT_INTERACTION_DETAIL_VIEW",
          "ABANDON_INSIGHTS_VIEW",
          "SKILLS_PERFORMANCE_VIEW",
          "SURVEY_FORM_PERFORMANCE_SUMMARY_VIEW",
          "SURVEY_FORM_PERFORMANCE_DETAIL_VIEW",
          "DNIS_PERFORMANCE_SUMMARY_VIEW",
          "DNIS_PERFORMANCE_DETAIL_VIEW",
          "WRAP_UP_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_WRAP_UP_PERFORMANCE_DETAIL_VIEW",
          "QUEUE_ACTIVITY_SUMMARY_VIEW",
          "QUEUE_ACTIVITY_DETAIL_VIEW",
          "AGENT_QUEUE_ACTIVITY_SUMMARY_VIEW",
          "QUEUE_AGENT_DETAIL_VIEW",
          "QUEUE_INTERACTION_DETAIL_VIEW",
          "AGENT_SCHEDULE_DETAIL_VIEW",
          "IVR_PERFORMANCE_SUMMARY_VIEW",
          "IVR_PERFORMANCE_DETAIL_VIEW",
          "ANSWER_INSIGHTS_VIEW",
          "HANDLE_INSIGHTS_VIEW",
          "TALK_INSIGHTS_VIEW",
          "HOLD_INSIGHTS_VIEW",
          "ACW_INSIGHTS_VIEW",
          "WAIT_INSIGHTS_VIEW",
          "AGENT_WRAP_UP_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "FLOW_OUTCOME_SUMMARY_VIEW",
          "FLOW_OUTCOME_PERFORMANCE_DETAIL_VIEW",
          "FLOW_OUTCOME_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "FLOW_DESTINATION_SUMMARY_VIEW",
          "FLOW_DESTINATION_DETAIL_VIEW",
          "API_USAGE_VIEW",
          "SCHEDULED_CALLBACKS_VIEW",
          "CONTENT_SEARCH_VIEW",
          "LANDING_PAGE",
          "DASHBOARD_SUMMARY",
          "DASHBOARD_DETAIL",
          "DASHBOARD_USERS",
          "DASHBOARD_USERS_DETAIL",
          "JOURNEY_ACTION_MAP_SUMMARY_VIEW",
          "JOURNEY_OUTCOME_SUMMARY_VIEW",
          "JOURNEY_SEGMENT_SUMMARY_VIEW",
          "AGENT_DEVELOPMENT_DETAIL_VIEW",
          "AGENT_DEVELOPMENT_DETAIL_ME_VIEW",
          "AGENT_DEVELOPMENT_SUMMARY_VIEW",
          "AGENT_PERFORMANCE_ME_VIEW",
          "AGENT_STATUS_ME_VIEW",
          "AGENT_EVALUATION_ME_VIEW",
          "AGENT_SCORECARD_VIEW",
          "AGENT_SCORECARD_ME_VIEW",
          "AGENT_GAMIFICATION_LEADERSHIP_VIEW",
          "AGENT_SCHEDULE_ME_VIEW",
          "BOT_PERFORMANCE_SUMMARY_VIEW",
          "BOT_PERFORMANCE_DETAIL_VIEW",
          "SCHEDULED_EXPORTS_VIEW",
          "TOPIC_TREND_SUMMARY_VIEW",
          "TOPIC_TREND_DETAIL_VIEW",
          "ACTION_MAP_BLOCKED_CONSTRAINTS_DETAIL_VIEW",
          "ACTION_MAP_BLOCKED_CONSTRAINTS_INTERVAL_DETAIL_VIEW",
          "FLOW_MILESTONE_PERFORMANCE_DETAIL_VIEW",
          "FLOW_MILESTONE_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "AGENT_TOPIC_SUMMARY_VIEW",
          "AGENT_TOPIC_DETAIL_VIEW",
          "QUEUE_TOPIC_SUMMARY_VIEW",
          "QUEUE_TOPIC_DETAIL_VIEW",
          "FLOW_TOPIC_SUMMARY_VIEW",
          "FLOW_TOPIC_DETAIL_VIEW",
          "AGENT_INTERACTIONS_ME_VIEW",
          "ALERT_RULES_VIEW",
          "CONFIGURE_ALERT_RULE_VIEW",
          "PREDICTIVE_ROUTING_VIEW",
          "PREDICTIVE_ROUTING_QUEUE_OVERVIEW",
          "PREDICTIVE_ROUTING_MODEL_VIEW",
          "PREDICTIVE_ROUTING_IMPACT_VIEW",
          "DATA_ACTIONS_PERFORMANCE_SUMMARY_VIEW",
          "DATA_ACTIONS_PERFORMANCE_DETAIL_VIEW",
          "AGENT_TIMELINE_SUMMARY_VIEW",
          "AGENT_TIMELINE_DETAIL_VIEW",
          "AGENT_LOGIN_LOGOUT_SUMMARY_VIEW",
          "AGENT_LOGIN_LOGOUT_DETAIL_VIEW",
          "CAMPAIGN_PERFORMANCE_SUMMARY_VIEW",
          "CAMPAIGN_PERFORMANCE_DETAIL_VIEW",
          "KNOWLEDGE_PERFORMANCE_VIEW",
          "AGENT_SCORECARD_INSIGHTS_SUMMARY_VIEW",
          "AGENT_SCORECARD_INSIGHTS_DETAIL_VIEW",
          "QUEUE_WRAPUP_DETAIL_VIEW",
          "INTERACTION_DETAIL_VIEW",
          "CAMPAIGN_INTERACTION_DETAIL_VIEW",
          "CAMPAIGN_ATTEMPT_DETAIL_VIEW",
          "WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_ASSIST_PERFORMANCE_VIEW",
          "CONTACT_CENTER_PERFORMANCE_VIEW",
          "QUEUE_ROUTING_PERFORMANCE_VIEW",
          "AGENT_WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_WORKITEM_PERFORMANCE_DETAIL_VIEW",
          "QUEUE_WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "QUEUE_WORKITEM_PERFORMANCE_DETAIL_VIEW",
          "EMAIL_AGENT_PERFORMANCE_SUMMARY_VIEW",
          "EMAIL_AGENT_PERFORMANCE_DETAIL_VIEW",
          "MESSAGING_AGENT_PERFORMANCE_SUMMARY_VIEW",
          "MESSAGING_AGENT_PERFORMANCE_DETAIL_VIEW",
          "EMAIL_QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "EMAIL_QUEUE_PERFORMANCE_DETAIL_VIEW",
          "MESSAGING_QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "MESSAGING_QUEUE_PERFORMANCE_DETAIL_VIEW",
          "SOCIAL_LISTENING_VIEW",
          "SOCIAL_LISTENING_POSTS_VIEW",
          "AGENT_PERFORMANCE_TIMELINE_DETAIL_VIEW"
        ],
        "type": "string"
      }
    },
    "required": [
      "exportFormat",
      "filter",
      "interval",
      "locale",
      "name",
      "period",
      "timeZone",
      "viewType"
    ],
    "type": "object"
  },
  "ReportingExportJobResponse": {
    "properties": {
      "createdDateTime": {
        "description": "The created date/time of the request. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "csvDelimiter": {
        "description": "The user supplied csv delimiter string value either of type 'comma' or 'semicolon' permitted for the export request",
        "enum": [
          "SEMICOLON",
          "COMMA"
        ],
        "type": "string"
      },
      "downloadUrl": {
        "description": "The url to download the request if it's status is completed",
        "type": "string"
      },
      "durationFormat": {
        "description": "Indicates the duration format for the exports",
        "enum": [
          "Seconds",
          "Milliseconds",
          "Hhmmss",
          "Hms"
        ],
        "type": "string"
      },
      "emailErrorDescription": {
        "description": "The optional error message in case the export fail to email",
        "type": "string"
      },
      "emailStatuses": {
        "additionalProperties": {
          "enum": [
            "Sent",
            "Pending",
            "Failed"
          ],
          "type": "string"
        },
        "description": "The status of individual email addresses as a map",
        "type": "object"
      },
      "enabled": {
        "type": "boolean"
      },
      "excludeEmptyRows": {
        "description": "Excludes empty rows from the exports",
        "type": "boolean"
      },
      "exportAllowedToRerun": {
        "description": "Indicates whether the export run is allowed to rerun",
        "type": "boolean"
      },
      "exportErrorMessagesType": {
        "description": "The error message in case the export request failed",
        "enum": [
          "FAILED_CONVERTING_EXPORT_JOB",
          "FAILED_NO_DATA_EXPORT_JOB_FOUND",
          "FAILED_GETTING_DATA_FROM_SERVICE",
          "FAILED_GENERATING_TEMP_FILE",
          "FAILED_SAVING_FILE_TO_S3",
          "FAILED_NOTIFYING_SKYWALKER_OF_DOWNLOAD",
          "FAILED_BUILDING_DOWNLOAD_URL_FROM_SKYWALKER_RESPONSE",
          "FAILED_CONVERTING_EXPORT_JOB_TO_QUEUE_PERFORMANCE_JOB",
          "EXPORT_TYPE_NOT_IMPLEMENTED",
          "REACHED_MAXIMUM_ATTEMPT_OF_RETRY",
          "FAILED_LONG_RUNNING_EXPORT",
          "TOO_MANY_REQUESTS_FROM_AN_ORGANIZATION",
          "FAILED_AS_EXPORT_FILE_SIZE_IS_GREATER_THAN_10MB",
          "NOT_AUTHORIZED_TO_VIEW_EXPORT",
          "STATIC_LINK_EXPORT_FAILED",
          "TOO_MANY_SEARCH_CRITERIA",
          "SEARCH_CRITERIA_VALUES_EXCEED_LIMIT",
          "EXPORT_EMAIL_FILE_SIZE_EXCEEDED_LIMIT",
          "CIRCUIT_BREAKER_OPEN_FOR_VIEW_TYPE"
        ],
        "type": "string"
      },
      "exportFormat": {
        "description": "The requested format of the exported data",
        "enum": [
          "CSV",
          "PDF"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/ViewFilter",
        "description": "Filters to apply to create the view"
      },
      "hasCustomParticipantAttributes": {
        "description": "Indicates if custom participant attributes will be exported",
        "type": "boolean"
      },
      "hasFormatDurations": {
        "description": "Indicates if durations are formatted in hh:mm:ss format instead of ms",
        "type": "boolean"
      },
      "hasSplitByMedia": {
        "description": "Indicates if media type will be split in aggregate detail exports",
        "type": "boolean"
      },
      "hasSplitFilters": {
        "description": "Indicates if filters will be split in aggregate detail exports",
        "type": "boolean"
      },
      "hasSummaryRow": {
        "description": "Indicates if summary row needs to be present in exports",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "includeDurationFormatInHeader": {
        "description": "Indicates whether to include selected duration format to the column headers",
        "type": "boolean"
      },
      "interval": {
        "description": "The time period used to limit the the exported data. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "locale": {
        "description": "The locale use for localization of the exported data, i.e. en-us, es-mx  ",
        "type": "string"
      },
      "modifiedDateTime": {
        "description": "The last modified date/time of the request. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "percentageComplete": {
        "description": "The percentage of the job that has completed processing",
        "format": "double",
        "type": "number"
      },
      "period": {
        "description": "The Period of the request in which to break down the intervals. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "read": {
        "description": "Indicates if the request has been marked as read",
        "type": "boolean"
      },
      "recipientEmails": {
        "description": "The list of email recipients for the exports",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "runId": {
        "description": "The unique run id of the export schedule execute",
        "type": "string"
      },
      "selectedColumns": {
        "description": "The list of ordered selected columns from the export view by the user",
        "items": {
          "$ref": "#/definitions/SelectedColumns"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current status of the export request",
        "enum": [
          "SUBMITTED",
          "RUNNING",
          "CANCELLING",
          "CANCELLED",
          "COMPLETED",
          "COMPLETED_WITH_PARTIAL_RESULTS",
          "FAILED"
        ],
        "type": "string"
      },
      "timeZone": {
        "description": "The requested timezone of the exported data. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "viewType": {
        "description": "The type of view export job to be created",
        "enum": [
          "QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "QUEUE_PERFORMANCE_DETAIL_VIEW",
          "INTERACTION_SEARCH_VIEW",
          "AGENT_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_PERFORMANCE_DETAIL_VIEW",
          "AGENT_STATUS_SUMMARY_VIEW",
          "AGENT_STATUS_DETAIL_VIEW",
          "AGENT_EVALUATION_SUMMARY_VIEW",
          "AGENT_EVALUATION_DETAIL_VIEW",
          "AGENT_QUEUE_DETAIL_VIEW",
          "AGENT_INTERACTION_DETAIL_VIEW",
          "ABANDON_INSIGHTS_VIEW",
          "SKILLS_PERFORMANCE_VIEW",
          "SURVEY_FORM_PERFORMANCE_SUMMARY_VIEW",
          "SURVEY_FORM_PERFORMANCE_DETAIL_VIEW",
          "DNIS_PERFORMANCE_SUMMARY_VIEW",
          "DNIS_PERFORMANCE_DETAIL_VIEW",
          "WRAP_UP_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_WRAP_UP_PERFORMANCE_DETAIL_VIEW",
          "QUEUE_ACTIVITY_SUMMARY_VIEW",
          "QUEUE_ACTIVITY_DETAIL_VIEW",
          "AGENT_QUEUE_ACTIVITY_SUMMARY_VIEW",
          "QUEUE_AGENT_DETAIL_VIEW",
          "QUEUE_INTERACTION_DETAIL_VIEW",
          "AGENT_SCHEDULE_DETAIL_VIEW",
          "IVR_PERFORMANCE_SUMMARY_VIEW",
          "IVR_PERFORMANCE_DETAIL_VIEW",
          "ANSWER_INSIGHTS_VIEW",
          "HANDLE_INSIGHTS_VIEW",
          "TALK_INSIGHTS_VIEW",
          "HOLD_INSIGHTS_VIEW",
          "ACW_INSIGHTS_VIEW",
          "WAIT_INSIGHTS_VIEW",
          "AGENT_WRAP_UP_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "FLOW_OUTCOME_SUMMARY_VIEW",
          "FLOW_OUTCOME_PERFORMANCE_DETAIL_VIEW",
          "FLOW_OUTCOME_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "FLOW_DESTINATION_SUMMARY_VIEW",
          "FLOW_DESTINATION_DETAIL_VIEW",
          "API_USAGE_VIEW",
          "SCHEDULED_CALLBACKS_VIEW",
          "CONTENT_SEARCH_VIEW",
          "LANDING_PAGE",
          "DASHBOARD_SUMMARY",
          "DASHBOARD_DETAIL",
          "DASHBOARD_USERS",
          "DASHBOARD_USERS_DETAIL",
          "JOURNEY_ACTION_MAP_SUMMARY_VIEW",
          "JOURNEY_OUTCOME_SUMMARY_VIEW",
          "JOURNEY_SEGMENT_SUMMARY_VIEW",
          "AGENT_DEVELOPMENT_DETAIL_VIEW",
          "AGENT_DEVELOPMENT_DETAIL_ME_VIEW",
          "AGENT_DEVELOPMENT_SUMMARY_VIEW",
          "AGENT_PERFORMANCE_ME_VIEW",
          "AGENT_STATUS_ME_VIEW",
          "AGENT_EVALUATION_ME_VIEW",
          "AGENT_SCORECARD_VIEW",
          "AGENT_SCORECARD_ME_VIEW",
          "AGENT_GAMIFICATION_LEADERSHIP_VIEW",
          "AGENT_SCHEDULE_ME_VIEW",
          "BOT_PERFORMANCE_SUMMARY_VIEW",
          "BOT_PERFORMANCE_DETAIL_VIEW",
          "SCHEDULED_EXPORTS_VIEW",
          "TOPIC_TREND_SUMMARY_VIEW",
          "TOPIC_TREND_DETAIL_VIEW",
          "ACTION_MAP_BLOCKED_CONSTRAINTS_DETAIL_VIEW",
          "ACTION_MAP_BLOCKED_CONSTRAINTS_INTERVAL_DETAIL_VIEW",
          "FLOW_MILESTONE_PERFORMANCE_DETAIL_VIEW",
          "FLOW_MILESTONE_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "AGENT_TOPIC_SUMMARY_VIEW",
          "AGENT_TOPIC_DETAIL_VIEW",
          "QUEUE_TOPIC_SUMMARY_VIEW",
          "QUEUE_TOPIC_DETAIL_VIEW",
          "FLOW_TOPIC_SUMMARY_VIEW",
          "FLOW_TOPIC_DETAIL_VIEW",
          "AGENT_INTERACTIONS_ME_VIEW",
          "ALERT_RULES_VIEW",
          "CONFIGURE_ALERT_RULE_VIEW",
          "PREDICTIVE_ROUTING_VIEW",
          "PREDICTIVE_ROUTING_QUEUE_OVERVIEW",
          "PREDICTIVE_ROUTING_MODEL_VIEW",
          "PREDICTIVE_ROUTING_IMPACT_VIEW",
          "DATA_ACTIONS_PERFORMANCE_SUMMARY_VIEW",
          "DATA_ACTIONS_PERFORMANCE_DETAIL_VIEW",
          "AGENT_TIMELINE_SUMMARY_VIEW",
          "AGENT_TIMELINE_DETAIL_VIEW",
          "AGENT_LOGIN_LOGOUT_SUMMARY_VIEW",
          "AGENT_LOGIN_LOGOUT_DETAIL_VIEW",
          "CAMPAIGN_PERFORMANCE_SUMMARY_VIEW",
          "CAMPAIGN_PERFORMANCE_DETAIL_VIEW",
          "KNOWLEDGE_PERFORMANCE_VIEW",
          "AGENT_SCORECARD_INSIGHTS_SUMMARY_VIEW",
          "AGENT_SCORECARD_INSIGHTS_DETAIL_VIEW",
          "QUEUE_WRAPUP_DETAIL_VIEW",
          "INTERACTION_DETAIL_VIEW",
          "CAMPAIGN_INTERACTION_DETAIL_VIEW",
          "CAMPAIGN_ATTEMPT_DETAIL_VIEW",
          "WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_ASSIST_PERFORMANCE_VIEW",
          "CONTACT_CENTER_PERFORMANCE_VIEW",
          "QUEUE_ROUTING_PERFORMANCE_VIEW",
          "AGENT_WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_WORKITEM_PERFORMANCE_DETAIL_VIEW",
          "QUEUE_WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "QUEUE_WORKITEM_PERFORMANCE_DETAIL_VIEW",
          "EMAIL_AGENT_PERFORMANCE_SUMMARY_VIEW",
          "EMAIL_AGENT_PERFORMANCE_DETAIL_VIEW",
          "MESSAGING_AGENT_PERFORMANCE_SUMMARY_VIEW",
          "MESSAGING_AGENT_PERFORMANCE_DETAIL_VIEW",
          "EMAIL_QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "EMAIL_QUEUE_PERFORMANCE_DETAIL_VIEW",
          "MESSAGING_QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "MESSAGING_QUEUE_PERFORMANCE_DETAIL_VIEW",
          "SOCIAL_LISTENING_VIEW",
          "SOCIAL_LISTENING_POSTS_VIEW",
          "AGENT_PERFORMANCE_TIMELINE_DETAIL_VIEW"
        ],
        "type": "string"
      }
    },
    "required": [
      "createdDateTime",
      "exportFormat",
      "filter",
      "interval",
      "locale",
      "modifiedDateTime",
      "percentageComplete",
      "period",
      "read",
      "runId",
      "status",
      "timeZone",
      "viewType"
    ],
    "type": "object"
  },
  "ReportingExportMetadataJobListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ReportingExportMetadataJobResponse"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ReportingExportMetadataJobResponse": {
    "properties": {
      "availableColumnIds": {
        "description": "The list of available column ids for the export metadata",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "dateLimitations": {
        "description": "The date limitations of the export metadata",
        "type": "string"
      },
      "dependentColumnIds": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": "The list of dependent column ids for the export metadata",
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "requiredColumnIds": {
        "description": "The list of required column ids for the export metadata",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requiredFilters": {
        "description": "The list of required filters for the export metadata",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedFilters": {
        "description": "The list of supported filters for the export metadata",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "viewType": {
        "description": "The view type of the export metadata",
        "enum": [
          "QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "QUEUE_PERFORMANCE_DETAIL_VIEW",
          "INTERACTION_SEARCH_VIEW",
          "AGENT_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_PERFORMANCE_DETAIL_VIEW",
          "AGENT_STATUS_SUMMARY_VIEW",
          "AGENT_STATUS_DETAIL_VIEW",
          "AGENT_EVALUATION_SUMMARY_VIEW",
          "AGENT_EVALUATION_DETAIL_VIEW",
          "AGENT_QUEUE_DETAIL_VIEW",
          "AGENT_INTERACTION_DETAIL_VIEW",
          "ABANDON_INSIGHTS_VIEW",
          "SKILLS_PERFORMANCE_VIEW",
          "SURVEY_FORM_PERFORMANCE_SUMMARY_VIEW",
          "SURVEY_FORM_PERFORMANCE_DETAIL_VIEW",
          "DNIS_PERFORMANCE_SUMMARY_VIEW",
          "DNIS_PERFORMANCE_DETAIL_VIEW",
          "WRAP_UP_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_WRAP_UP_PERFORMANCE_DETAIL_VIEW",
          "QUEUE_ACTIVITY_SUMMARY_VIEW",
          "QUEUE_ACTIVITY_DETAIL_VIEW",
          "AGENT_QUEUE_ACTIVITY_SUMMARY_VIEW",
          "QUEUE_AGENT_DETAIL_VIEW",
          "QUEUE_INTERACTION_DETAIL_VIEW",
          "AGENT_SCHEDULE_DETAIL_VIEW",
          "IVR_PERFORMANCE_SUMMARY_VIEW",
          "IVR_PERFORMANCE_DETAIL_VIEW",
          "ANSWER_INSIGHTS_VIEW",
          "HANDLE_INSIGHTS_VIEW",
          "TALK_INSIGHTS_VIEW",
          "HOLD_INSIGHTS_VIEW",
          "ACW_INSIGHTS_VIEW",
          "WAIT_INSIGHTS_VIEW",
          "AGENT_WRAP_UP_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "FLOW_OUTCOME_SUMMARY_VIEW",
          "FLOW_OUTCOME_PERFORMANCE_DETAIL_VIEW",
          "FLOW_OUTCOME_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "FLOW_DESTINATION_SUMMARY_VIEW",
          "FLOW_DESTINATION_DETAIL_VIEW",
          "API_USAGE_VIEW",
          "SCHEDULED_CALLBACKS_VIEW",
          "CONTENT_SEARCH_VIEW",
          "LANDING_PAGE",
          "DASHBOARD_SUMMARY",
          "DASHBOARD_DETAIL",
          "DASHBOARD_USERS",
          "DASHBOARD_USERS_DETAIL",
          "JOURNEY_ACTION_MAP_SUMMARY_VIEW",
          "JOURNEY_OUTCOME_SUMMARY_VIEW",
          "JOURNEY_SEGMENT_SUMMARY_VIEW",
          "AGENT_DEVELOPMENT_DETAIL_VIEW",
          "AGENT_DEVELOPMENT_DETAIL_ME_VIEW",
          "AGENT_DEVELOPMENT_SUMMARY_VIEW",
          "AGENT_PERFORMANCE_ME_VIEW",
          "AGENT_STATUS_ME_VIEW",
          "AGENT_EVALUATION_ME_VIEW",
          "AGENT_SCORECARD_VIEW",
          "AGENT_SCORECARD_ME_VIEW",
          "AGENT_GAMIFICATION_LEADERSHIP_VIEW",
          "AGENT_SCHEDULE_ME_VIEW",
          "BOT_PERFORMANCE_SUMMARY_VIEW",
          "BOT_PERFORMANCE_DETAIL_VIEW",
          "SCHEDULED_EXPORTS_VIEW",
          "TOPIC_TREND_SUMMARY_VIEW",
          "TOPIC_TREND_DETAIL_VIEW",
          "ACTION_MAP_BLOCKED_CONSTRAINTS_DETAIL_VIEW",
          "ACTION_MAP_BLOCKED_CONSTRAINTS_INTERVAL_DETAIL_VIEW",
          "FLOW_MILESTONE_PERFORMANCE_DETAIL_VIEW",
          "FLOW_MILESTONE_PERFORMANCE_INTERVAL_DETAIL_VIEW",
          "AGENT_TOPIC_SUMMARY_VIEW",
          "AGENT_TOPIC_DETAIL_VIEW",
          "QUEUE_TOPIC_SUMMARY_VIEW",
          "QUEUE_TOPIC_DETAIL_VIEW",
          "FLOW_TOPIC_SUMMARY_VIEW",
          "FLOW_TOPIC_DETAIL_VIEW",
          "AGENT_INTERACTIONS_ME_VIEW",
          "ALERT_RULES_VIEW",
          "CONFIGURE_ALERT_RULE_VIEW",
          "PREDICTIVE_ROUTING_VIEW",
          "PREDICTIVE_ROUTING_QUEUE_OVERVIEW",
          "PREDICTIVE_ROUTING_MODEL_VIEW",
          "PREDICTIVE_ROUTING_IMPACT_VIEW",
          "DATA_ACTIONS_PERFORMANCE_SUMMARY_VIEW",
          "DATA_ACTIONS_PERFORMANCE_DETAIL_VIEW",
          "AGENT_TIMELINE_SUMMARY_VIEW",
          "AGENT_TIMELINE_DETAIL_VIEW",
          "AGENT_LOGIN_LOGOUT_SUMMARY_VIEW",
          "AGENT_LOGIN_LOGOUT_DETAIL_VIEW",
          "CAMPAIGN_PERFORMANCE_SUMMARY_VIEW",
          "CAMPAIGN_PERFORMANCE_DETAIL_VIEW",
          "KNOWLEDGE_PERFORMANCE_VIEW",
          "AGENT_SCORECARD_INSIGHTS_SUMMARY_VIEW",
          "AGENT_SCORECARD_INSIGHTS_DETAIL_VIEW",
          "QUEUE_WRAPUP_DETAIL_VIEW",
          "INTERACTION_DETAIL_VIEW",
          "CAMPAIGN_INTERACTION_DETAIL_VIEW",
          "CAMPAIGN_ATTEMPT_DETAIL_VIEW",
          "WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_ASSIST_PERFORMANCE_VIEW",
          "CONTACT_CENTER_PERFORMANCE_VIEW",
          "QUEUE_ROUTING_PERFORMANCE_VIEW",
          "AGENT_WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "AGENT_WORKITEM_PERFORMANCE_DETAIL_VIEW",
          "QUEUE_WORKITEM_PERFORMANCE_SUMMARY_VIEW",
          "QUEUE_WORKITEM_PERFORMANCE_DETAIL_VIEW",
          "EMAIL_AGENT_PERFORMANCE_SUMMARY_VIEW",
          "EMAIL_AGENT_PERFORMANCE_DETAIL_VIEW",
          "MESSAGING_AGENT_PERFORMANCE_SUMMARY_VIEW",
          "MESSAGING_AGENT_PERFORMANCE_DETAIL_VIEW",
          "EMAIL_QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "EMAIL_QUEUE_PERFORMANCE_DETAIL_VIEW",
          "MESSAGING_QUEUE_PERFORMANCE_SUMMARY_VIEW",
          "MESSAGING_QUEUE_PERFORMANCE_DETAIL_VIEW",
          "SOCIAL_LISTENING_VIEW",
          "SOCIAL_LISTENING_POSTS_VIEW",
          "AGENT_PERFORMANCE_TIMELINE_DETAIL_VIEW"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingInterval": {
    "properties": {
      "intervalType": {
        "description": "The granularity of the reporting interval period",
        "enum": [
          "Day",
          "Week",
          "Month"
        ],
        "type": "string"
      },
      "intervalValue": {
        "description": "The value of the reporting interval period for a given interval type",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "intervalType",
      "intervalValue"
    ],
    "type": "object"
  },
  "ReportingTurn": {
    "properties": {
      "askAction": {
        "$ref": "#/definitions/ReportingTurnAction",
        "description": "The bot flow 'ask' action associated with this reporting turn (e.g. AskForIntent)."
      },
      "askActionResult": {
        "description": "Result of the bot flow 'ask' action.",
        "enum": [
          "SuccessCollection",
          "SuccessConfirmationYes",
          "SuccessConfirmationNo",
          "SkippedCollection",
          "NoMatchCollection",
          "NoMatchConfirmation",
          "AgentRequestedByUser",
          "ConfirmationRequired",
          "Error",
          "ExpressionError",
          "NoInputCollection",
          "NoInputConfirmation",
          "DisambiguationRequired",
          "SuccessDisambiguation",
          "SuccessDisambiguationNone",
          "NoMatchDisambiguation",
          "NoInputDisambiguation"
        ],
        "type": "string"
      },
      "botPrompts": {
        "description": "The bot prompts associated with this reporting turn.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The conversation details, across potentially multiple Bot Flow sessions.",
        "readOnly": true
      },
      "dateCompleted": {
        "description": "Timestamp indicating when the original turn was completed. Note: The 'interval' query param uses this timestamp to filter the output. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateCreated": {
        "description": "Timestamp indicating when the original turn was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "intent": {
        "$ref": "#/definitions/ReportingTurnIntent",
        "description": "The intent and associated slots detected during this reporting turn."
      },
      "knowledge": {
        "$ref": "#/definitions/ReportingTurnKnowledge",
        "description": "The knowledge data captured during this reporting turn."
      },
      "knowledgeBaseEvents": {
        "$ref": "#/definitions/ReportingTurnKnowledgeEvents",
        "description": "The knowledge data captured during this reporting turn."
      },
      "sessionEndDetails": {
        "$ref": "#/definitions/SessionEndDetails",
        "description": "The details related to end of bot flow session."
      },
      "sessionId": {
        "description": "The bot session ID that this reporting turn is grouped under.",
        "type": "string"
      },
      "userInput": {
        "description": "The chosen user input associated with this reporting turn.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnAction": {
    "properties": {
      "actionId": {
        "description": "The ID of the action in the bot flow.",
        "type": "string"
      },
      "actionName": {
        "description": "The name of the action in the bot flow.",
        "type": "string"
      },
      "actionNumber": {
        "description": "The number of the action in the bot flow.",
        "format": "int32",
        "type": "integer"
      },
      "actionType": {
        "enum": [
          "AddFlowMilestoneAction",
          "AskForNLUIntentAction",
          "AskForBooleanAction",
          "AskForSlotAction",
          "AskSurveyQuestionAction",
          "AskForNLUNextIntentAction",
          "BotState",
          "CallTaskAction",
          "ClearSlotAction",
          "ClearUtilizationLabelAction",
          "DisconnectAction",
          "EndTaskAction",
          "ExitBotFlowAction",
          "UpdateVariableAction",
          "CommunicateAction",
          "DecisionAction",
          "FindEmergencyGroupAction",
          "FindGrammarAction",
          "FindGrammarByIdAction",
          "FindGroupAction",
          "FindLanguageSkillAction",
          "FindQueueAction",
          "FindQueueByIdAction",
          "FindScheduleAction",
          "FindScheduleGroupAction",
          "FindSkillAction",
          "FindSystemPromptAction",
          "FindUserAction",
          "FindUserByIdAction",
          "FindUsersByIdAction",
          "FindUserPromptAction",
          "FindUtilizationLabelAction",
          "SwitchAction",
          "DataAction",
          "DataTableLookupAction",
          "GetExternalContactAction",
          "GetExternalOrganizationAction",
          "LoopAction",
          "ExitLoopAction",
          "NextLoopAction",
          "LoopUntilAction",
          "SetActiveIntentAction",
          "SetFlowOutcomeAction",
          "InitializeFlowOutcomeAction",
          "AskForStringAction",
          "SendResponseAction",
          "GetResponseAction",
          "ExtractSecureDataAction",
          "SecureAction",
          "TransferTaskAction",
          "DigitalMenuAction",
          "WaitForInputAction",
          "EvaluateScheduleAction",
          "EvaluateScheduleGroupAction",
          "ShowKnowledgeArticleAction",
          "SendKnowledgeFeedbackAction",
          "SetLocaleAction",
          "ScreenPopAction",
          "SetUtilizationLabelAction",
          "SetWrapupCodeAction",
          "TransferPureMatchAction",
          "GetAttributesAction",
          "SetAttributesAction",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnIntent": {
    "properties": {
      "confidence": {
        "description": "The confidence score of the intent detected during this reporting turn.",
        "format": "double",
        "type": "number"
      },
      "name": {
        "description": "The name of the intent detected during this reporting turn.",
        "type": "string"
      },
      "slots": {
        "description": "The slots detected during this reporting turn.",
        "items": {
          "$ref": "#/definitions/ReportingTurnIntentSlot"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ReportingTurnIntentSlot": {
    "properties": {
      "confidence": {
        "description": "The confidence score this slot received during detection.",
        "format": "double",
        "type": "number"
      },
      "name": {
        "description": "The name of the slot.",
        "type": "string"
      },
      "type": {
        "description": "The NLU entity type of the slot (either builtin or user defined)",
        "type": "string"
      },
      "value": {
        "description": "The value of the slot.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledge": {
    "properties": {
      "feedback": {
        "$ref": "#/definitions/ReportingTurnKnowledgeFeedback",
        "description": "The knowledge feedback data that was captured during this reporting turn."
      },
      "knowledgeBaseId": {
        "description": "The Knowledge Base ID that the captured knowledge data relates to.",
        "type": "string"
      },
      "search": {
        "$ref": "#/definitions/ReportingTurnKnowledgeSearch",
        "description": "The knowledge search data that was captured during this reporting turn."
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledgeDocument": {
    "properties": {
      "answer": {
        "description": "The corresponding answer to the question.",
        "type": "string"
      },
      "confidence": {
        "description": "The confidence score of how well the question matched the search query.",
        "format": "double",
        "type": "number"
      },
      "id": {
        "description": "The ID of the knowledge document.",
        "type": "string"
      },
      "question": {
        "description": "The the question that was used to match against the search query.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledgeEvents": {
    "properties": {
      "feedback": {
        "description": "The knowledge feedback data captured during this reporting turn.",
        "items": {
          "$ref": "#/definitions/ReportingTurnKnowledgeFeedbackEvent"
        },
        "type": "array"
      },
      "search": {
        "description": "The knowledge search data captured during this reporting turn.",
        "items": {
          "$ref": "#/definitions/ReportingTurnKnowledgeSearchEvent"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledgeFeedback": {
    "properties": {
      "documents": {
        "description": "The list of search documents that the feedback applies to.",
        "items": {
          "$ref": "#/definitions/ReportingTurnKnowledgeDocument"
        },
        "type": "array"
      },
      "rating": {
        "description": "The feedback rating for the search (1.0 - 5.0). 1 = Negative, 5 = Positive.",
        "format": "int32",
        "type": "integer"
      },
      "searchId": {
        "description": "The ID of the original knowledge search that this feedback relates to.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledgeFeedbackEvent": {
    "properties": {
      "documentVariationId": {
        "description": "The variation of the document.",
        "type": "string"
      },
      "documentVersionId": {
        "description": "The version of the document.",
        "type": "string"
      },
      "documents": {
        "description": "The list of search documents that the feedback applies to.",
        "items": {
          "$ref": "#/definitions/ReportingTurnKnowledgeDocument"
        },
        "type": "array"
      },
      "feedbackRating": {
        "description": "The feedback rating for the search (1.0 - 5.0). 1 = Negative, 5 = Positive.",
        "format": "int32",
        "type": "integer"
      },
      "knowledgeBaseId": {
        "description": "The Knowledge Base ID that the captured knowledge data relates to.",
        "type": "string"
      },
      "searchId": {
        "description": "The ID of this knowledge search.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledgeSearch": {
    "properties": {
      "documents": {
        "description": "The list of search documents captured during this reporting turn.",
        "items": {
          "$ref": "#/definitions/ReportingTurnKnowledgeDocument"
        },
        "type": "array"
      },
      "query": {
        "description": "The search query that was used to search the Knowledge Base documents for a matching question.",
        "type": "string"
      },
      "searchId": {
        "description": "The ID of this knowledge search.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnKnowledgeSearchEvent": {
    "properties": {
      "answerDocumentId": {
        "description": "The document ID of the search answer.",
        "type": "string"
      },
      "documents": {
        "description": "The list of search documents that the feedback applies to.",
        "items": {
          "$ref": "#/definitions/ReportingTurnKnowledgeDocument"
        },
        "type": "array"
      },
      "knowledgeBaseId": {
        "description": "The Knowledge Base ID that the captured knowledge data relates to.",
        "type": "string"
      },
      "searchId": {
        "description": "The ID of this knowledge search.",
        "type": "string"
      },
      "searchQuery": {
        "description": "The search query that was used to search the Knowledge Base documents for a matching question.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ReportingTurnsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ReportingTurn"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "RequestConfig": {
    "description": "Defines response components of the Action Request.",
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Headers to include in request in (Header Name, Value) pairs.",
        "type": "object"
      },
      "requestTemplate": {
        "description": "Velocity template to define request body sent to 3rd party service.",
        "type": "string"
      },
      "requestTemplateUri": {
        "description": "URI to retrieve requestTemplate",
        "type": "string"
      },
      "requestType": {
        "description": "HTTP method to use for request",
        "type": "string"
      },
      "requestUrlTemplate": {
        "description": "URL that may include placeholders for requests to 3rd party service. This value is read only for Function Integrations and will be set when a draft is created.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RequestContext": {
    "properties": {
      "patterns": {
        "description": "A list of one or more patterns to match.",
        "items": {
          "$ref": "#/definitions/RequestContextPattern"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RequestContextPattern": {
    "properties": {
      "criteria": {
        "description": "A list of one or more criteria to satisfy.",
        "items": {
          "$ref": "#/definitions/RequestEntityTypeCriteria"
        },
        "type": "array"
      }
    },
    "required": [
      "criteria"
    ],
    "type": "object"
  },
  "RequestCriteria": {
    "properties": {
      "key": {
        "description": "The criteria key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "shouldIgnoreCase": {
        "description": "Should criteria be case insensitive.",
        "type": "boolean"
      },
      "values": {
        "description": "The criteria values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "key",
      "values"
    ],
    "type": "object"
  },
  "RequestDevice": {
    "properties": {
      "category": {
        "description": "Device category.",
        "enum": [
          "desktop",
          "mobile",
          "tablet",
          "other"
        ],
        "type": "string"
      },
      "fingerprint": {
        "description": "Fingerprint generated by looking at the individual device features.",
        "type": "string"
      },
      "isMobile": {
        "description": "Flag that is true for mobile devices.",
        "type": "boolean"
      },
      "manufacturer": {
        "description": "Manufacturer of the device.",
        "type": "string"
      },
      "osFamily": {
        "description": "Operating system family.",
        "type": "string"
      },
      "osVersion": {
        "description": "Operating system version.",
        "type": "string"
      },
      "screenDensity": {
        "description": "Device's screen density, measured as a scale factor where a value of 1 represents a baseline 1:1 ratio of pixels to logical (device-independent) pixels.",
        "format": "int32",
        "type": "integer"
      },
      "screenHeight": {
        "description": "Device's screen height.",
        "format": "int32",
        "type": "integer"
      },
      "screenWidth": {
        "description": "Device's screen width.",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Device type (e.g. iPad, iPhone, Other).",
        "type": "string"
      }
    },
    "required": [
      "category",
      "osFamily",
      "osVersion",
      "type"
    ],
    "type": "object"
  },
  "RequestEntityTypeCriteria": {
    "properties": {
      "entityType": {
        "description": "The entity to match the pattern against.",
        "enum": [
          "visit"
        ],
        "type": "string"
      },
      "key": {
        "description": "The criteria key.",
        "type": "string"
      },
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "shouldIgnoreCase": {
        "description": "Should criteria be case insensitive.",
        "type": "boolean"
      },
      "values": {
        "description": "The criteria values.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "entityType",
      "key",
      "values"
    ],
    "type": "object"
  },
  "RequestExternalSegment": {
    "properties": {
      "id": {
        "description": "Identifier for the external segment in the system where it originates from.",
        "type": "string"
      },
      "name": {
        "description": "Name for the external segment in the system where it originates from.",
        "type": "string"
      },
      "source": {
        "description": "The external system where the segment originates from.",
        "enum": [
          "AdobeExperiencePlatform",
          "Custom"
        ],
        "type": "string"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "RequestJourney": {
    "properties": {
      "patterns": {
        "description": "A list of zero or more patterns to match.",
        "items": {
          "$ref": "#/definitions/RequestJourneyPattern"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RequestJourneyPattern": {
    "properties": {
      "count": {
        "description": "The number of times the pattern must match.",
        "format": "int32",
        "type": "integer"
      },
      "criteria": {
        "description": "A list of one or more criteria to satisfy.",
        "items": {
          "$ref": "#/definitions/RequestCriteria"
        },
        "type": "array"
      },
      "eventName": {
        "description": "The name of the event for which this pattern can be matched on.",
        "type": "string"
      },
      "sessionType": {
        "description": "The session type for which this pattern can be matched on.",
        "type": "string"
      },
      "streamType": {
        "description": "The stream type for which this pattern can be matched on.",
        "enum": [
          "Web",
          "Custom",
          "Conversation",
          "App"
        ],
        "type": "string"
      }
    },
    "required": [
      "count",
      "criteria",
      "sessionType",
      "streamType"
    ],
    "type": "object"
  },
  "RequestMapping": {
    "properties": {
      "attributeType": {
        "description": "Type of the value supplied",
        "enum": [
          "String",
          "Number",
          "Integer",
          "Boolean"
        ],
        "type": "string"
      },
      "mappingType": {
        "description": "Method of finding value to use with Attribute",
        "enum": [
          "Lookup",
          "HardCoded"
        ],
        "type": "string"
      },
      "name": {
        "description": "Name of the Integration Action Attribute to supply the value for",
        "type": "string"
      },
      "value": {
        "description": "Value to supply for the specified Attribute",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RequestPage": {
    "properties": {
      "keywords": {
        "description": "Keywords from the HTML \u003cmeta\u003e tag of the page.",
        "type": "string"
      },
      "lang": {
        "description": "ISO 639-1 language code for the page as defined in the \u003chtml\u003e tag.",
        "type": "string"
      },
      "title": {
        "description": "Title of the page.",
        "type": "string"
      },
      "url": {
        "description": "The page URL.",
        "type": "string"
      }
    },
    "required": [
      "title",
      "url"
    ],
    "type": "object"
  },
  "RequestScoredAgent": {
    "properties": {
      "id": {
        "description": "Agent's user ID",
        "type": "string"
      },
      "score": {
        "description": "Agent's score for the current conversation, from 0 - 100, higher being better",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "RequiredLocalDateRange": {
    "properties": {
      "endDate": {
        "description": "The inclusive end of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "startDate": {
        "description": "The inclusive start of a date range in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "endDate",
      "startDate"
    ],
    "type": "object"
  },
  "ReschedulingManagementUnitResponse": {
    "properties": {
      "applied": {
        "description": "Whether the rescheduling run is applied for the given management unit",
        "type": "boolean"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit"
      }
    },
    "type": "object"
  },
  "ReschedulingOptionsRunResponse": {
    "properties": {
      "activityCodeIds": {
        "description": "The IDs of the activity codes being considered for reschedule",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "agentCount": {
        "description": "The number of agents to be considered in the reschedule",
        "format": "int32",
        "type": "integer"
      },
      "doNotChangeDailyPaidTime": {
        "description": "Whether daily paid time is allowed to be changed",
        "type": "boolean"
      },
      "doNotChangeManuallyEditedShifts": {
        "description": "Whether manually edited shifts are allowed to be changed",
        "type": "boolean"
      },
      "doNotChangeShiftStartTimes": {
        "description": "Whether shift start times are allowed to be changed",
        "type": "boolean"
      },
      "doNotChangeWeeklyPaidTime": {
        "description": "Whether weekly paid time is allowed to be changed",
        "type": "boolean"
      },
      "endDate": {
        "description": "The end date of the period to reschedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "existingSchedule": {
        "$ref": "#/definitions/BuScheduleReference",
        "description": "The existing schedule to which this reschedule run applies"
      },
      "managementUnits": {
        "description": "Per-management unit rescheduling options",
        "items": {
          "$ref": "#/definitions/ReschedulingManagementUnitResponse"
        },
        "type": "array"
      },
      "startDate": {
        "description": "The start date of the period to reschedule. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResolutionDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ResolutionDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "ResolutionDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/ResolutionDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/ResolutionDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "ResolutionDetailQueryPredicate": {
    "properties": {
      "metric": {
        "description": "Left hand side for metric predicates",
        "enum": [
          "nNextContactAvoided"
        ],
        "type": "string"
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for metric predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for metric predicates",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResourceConditionNode": {
    "properties": {
      "conjunction": {
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      },
      "operands": {
        "items": {
          "$ref": "#/definitions/ResourceConditionValue"
        },
        "type": "array"
      },
      "operator": {
        "enum": [
          "EQ",
          "IN",
          "GE",
          "GT",
          "LE",
          "LT"
        ],
        "type": "string"
      },
      "terms": {
        "items": {
          "$ref": "#/definitions/ResourceConditionNode"
        },
        "type": "array"
      },
      "variableName": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResourceConditionValue": {
    "properties": {
      "type": {
        "enum": [
          "SCALAR",
          "VARIABLE",
          "USER",
          "QUEUE"
        ],
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResourcePermissionPolicy": {
    "properties": {
      "actionSet": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "actionSetKey": {
        "type": "string"
      },
      "allowConditions": {
        "type": "boolean"
      },
      "domain": {
        "type": "string"
      },
      "entityName": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "namedResources": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "policyDescription": {
        "type": "string"
      },
      "policyName": {
        "type": "string"
      },
      "resourceCondition": {
        "type": "string"
      },
      "resourceConditionNode": {
        "$ref": "#/definitions/ResourceConditionNode"
      }
    },
    "type": "object"
  },
  "Response": {
    "description": "Contains information about a response.",
    "properties": {
      "assets": {
        "description": "Assets used in the response",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "createdBy": {
        "$ref": "#/definitions/User",
        "description": "User that created the response",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date and time the response was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "footer": {
        "$ref": "#/definitions/FooterTemplate",
        "description": "Footer template definition for responseType.Footer."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interactionType": {
        "description": "The interaction type for this response.",
        "enum": [
          "chat",
          "email",
          "twitter"
        ],
        "type": "string"
      },
      "libraries": {
        "description": "One or more libraries response is associated with.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "messagingTemplate": {
        "$ref": "#/definitions/MessagingTemplate",
        "description": "An optional messaging template definition for responseType.MessagingTemplate."
      },
      "name": {
        "type": "string"
      },
      "responseType": {
        "description": "The response type represented by the response.",
        "enum": [
          "MessagingTemplate",
          "CampaignSmsTemplate",
          "CampaignEmailTemplate",
          "Footer"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "substitutions": {
        "description": "Details about any text substitutions used in the texts for this response.",
        "items": {
          "$ref": "#/definitions/ResponseSubstitution"
        },
        "type": "array"
      },
      "substitutionsSchema": {
        "$ref": "#/definitions/JsonSchemaDocument",
        "description": "Metadata about the text substitutions in json schema format."
      },
      "texts": {
        "description": "One or more texts associated with the response.",
        "items": {
          "$ref": "#/definitions/ResponseText"
        },
        "type": "array"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "libraries",
      "texts"
    ],
    "type": "object"
  },
  "ResponseAsset": {
    "properties": {
      "contentLength": {
        "description": "response asset size in bytes",
        "format": "int64",
        "type": "integer"
      },
      "contentLocation": {
        "description": "response asset location.",
        "type": "string"
      },
      "contentType": {
        "description": "MIME type of response asset",
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User who created the response asset"
      },
      "dateCreated": {
        "description": "Created date of the response asset. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date of the response asset. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User who last modified the response asset"
      },
      "name": {
        "type": "string"
      },
      "responses": {
        "description": "Canned responses actively using this asset",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResponseAssetFilter": {
    "properties": {
      "endValue": {
        "description": "The end value of the range. This field is used for range search types. Accepts numbers and date in ISO8601 format",
        "type": "string"
      },
      "fields": {
        "description": "Field name to search against. Allowed Values: divisionId, name, contentLength, contentType, dateCreated",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types. Accepts numbers and date in ISO8601 format",
        "type": "string"
      },
      "type": {
        "description": "How to apply this search criteria against other criteria. Filter type supported for each field:- name:[STARTS_WITH, TERM], divisionId:[TERM, TERMS], contentLength:[RANGE, GREATER_THAN_EQUAL_TO, LESS_THAN_EQUAL_TO], contentType:[STARTS_WITH, TERM] dateCreated:[DATE_RANGE]",
        "enum": [
          "TERM",
          "TERMS",
          "STARTS_WITH",
          "RANGE",
          "GREATER_THAN_EQUAL_TO",
          "LESS_THAN_EQUAL_TO",
          "DATE_RANGE"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ResponseAssetRequest": {
    "properties": {
      "divisionId": {
        "description": "Division to associate to this asset. Can only be used with this division.",
        "type": "string"
      },
      "name": {
        "description": "Name of the file to upload. It must not start with a dot and not end with a forward slash. Whitespace and the following characters are not allowed: \\{^}%`]\"\u003e[~\u003c#|",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ResponseAssetSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page. Default: 25, Maximum: 100.",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Filter the query results.",
        "items": {
          "$ref": "#/definitions/ResponseAssetFilter"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "ResponseAssetSearchResults": {
    "properties": {
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/ResponseAsset"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ResponseAssetStatus": {
    "properties": {
      "errorCode": {
        "description": "Error code. Used for localization",
        "readOnly": true,
        "type": "string"
      },
      "errorMessage": {
        "description": "Error message that explains upload failure status ",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "Upload status of the asset",
        "enum": [
          "InProgress",
          "Uploaded",
          "Failed"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResponseConfig": {
    "description": "Defines response components of the Action Request.",
    "properties": {
      "successTemplate": {
        "description": "Velocity template to build response to return from Action.",
        "type": "string"
      },
      "successTemplateUri": {
        "description": "URI to retrieve success template.",
        "type": "string"
      },
      "translationMap": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Map 'attribute name' and 'JSON path' pairs used to extract data from REST response.",
        "type": "object"
      },
      "translationMapDefaults": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Map 'attribute name' and 'default value' pairs used as fallback values if JSON path extraction fails for specified key.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "ResponseEntityList": {
    "description": "Query result list",
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Response"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ResponseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Response"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ResponseFilter": {
    "description": "Used to filter response queries",
    "properties": {
      "name": {
        "description": "Field to filter on. Allowed values are 'name', 'libraryId', 'text.contentType', 'messagingTemplate' and 'responseType'",
        "type": "string"
      },
      "operator": {
        "description": "Filter operation: IN, EQUALS, NOTEQUALS.",
        "enum": [
          "IN",
          "EQUALS",
          "NOTEQUALS"
        ],
        "type": "string"
      },
      "values": {
        "description": "Values to filter on. If name is 'responseType' then allowed values are 'CampaignSmsTemplate', 'CampaignEmailTemplate', 'Footer' and 'Signature'",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "name",
      "operator",
      "values"
    ],
    "type": "object"
  },
  "ResponsePage": {
    "properties": {
      "domain": {
        "description": "Domain of the page's URL.",
        "type": "string"
      },
      "fragment": {
        "description": "Fragment or hash of the page's URL.",
        "type": "string"
      },
      "hostname": {
        "description": "Hostname of the page's URL.",
        "type": "string"
      },
      "keywords": {
        "description": "Keywords from the HTML \u003cmeta\u003e tag of the page.",
        "type": "string"
      },
      "lang": {
        "description": "ISO 639-1 language code for the page as defined in the \u003chtml\u003e tag.",
        "type": "string"
      },
      "pathname": {
        "description": "Path name of the page for the event.",
        "type": "string"
      },
      "queryString": {
        "description": "Query string that is passed to the page in the current event.",
        "type": "string"
      },
      "title": {
        "description": "Title of the page.",
        "type": "string"
      },
      "url": {
        "description": "The page URL.",
        "type": "string"
      }
    },
    "required": [
      "domain",
      "hostname",
      "pathname",
      "title",
      "url"
    ],
    "type": "object"
  },
  "ResponseQueryRequest": {
    "description": "Used to query for responses",
    "properties": {
      "filters": {
        "description": "Filter the query results.",
        "items": {
          "$ref": "#/definitions/ResponseFilter"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "Page Number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The maximum number of hits to return. Default: 25, Maximum: 500.",
        "format": "int32",
        "type": "integer"
      },
      "queryPhrase": {
        "description": "Query phrase to search response text and name. If not set will match all.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ResponseQueryResults": {
    "description": "Used to return response query results",
    "properties": {
      "results": {
        "$ref": "#/definitions/ResponseEntityList",
        "description": "Contains the query results"
      }
    },
    "required": [
      "results"
    ],
    "type": "object"
  },
  "ResponseSet": {
    "properties": {
      "amdSpeechDistinguishEnabled": {
        "description": "Whether to enable answering machine detection",
        "type": "boolean"
      },
      "beepDetectionEnabled": {
        "description": "Whether to enable answering machine beep detection",
        "type": "boolean"
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the ResponseSet.",
        "type": "string"
      },
      "responses": {
        "additionalProperties": {
          "$ref": "#/definitions/Reaction"
        },
        "description": "Map of disposition identifiers to reactions. For example: {\"disposition.classification.callable.person\": {\"reactionType\": \"transfer\"}}.",
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "responses"
    ],
    "type": "object"
  },
  "ResponseSetEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ResponseSet"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ResponseSubstitution": {
    "description": "Contains information about the substitutions associated with a response.",
    "properties": {
      "defaultValue": {
        "description": "Response substitution default value.",
        "type": "string"
      },
      "description": {
        "description": "Response substitution description.",
        "type": "string"
      },
      "id": {
        "description": "Response substitution identifier.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "ResponseText": {
    "description": "Contains information about the text associated with a response.",
    "properties": {
      "content": {
        "description": "Response text content.",
        "type": "string"
      },
      "contentType": {
        "description": "Response text content type.",
        "enum": [
          "text/plain",
          "text/html"
        ],
        "type": "string"
      },
      "type": {
        "description": "Response text type.",
        "enum": [
          "body",
          "subject"
        ],
        "type": "string"
      }
    },
    "required": [
      "content"
    ],
    "type": "object"
  },
  "RestErrorDetail": {
    "properties": {
      "details": {
        "description": "additional information regarding the error",
        "readOnly": true,
        "type": "string"
      },
      "error": {
        "description": "name of the error",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "error"
    ],
    "type": "object"
  },
  "RestorePresenceSettings": {
    "properties": {
      "enabled": {
        "description": "Whether the restore presence feature is enabled",
        "type": "boolean"
      },
      "restoreOnQueueEnabled": {
        "description": "Whether the ON_QUEUE presence will be restored",
        "type": "boolean"
      },
      "restoreTimeMilliseconds": {
        "description": "How many milliseconds the presence will be restored within",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "enabled",
      "restoreOnQueueEnabled",
      "restoreTimeMilliseconds"
    ],
    "type": "object"
  },
  "ResultCounters": {
    "properties": {
      "failure": {
        "format": "int32",
        "type": "integer"
      },
      "success": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "RetentionDuration": {
    "properties": {
      "archiveRetention": {
        "$ref": "#/definitions/ArchiveRetention"
      },
      "deleteRetention": {
        "$ref": "#/definitions/DeleteRetention"
      }
    },
    "type": "object"
  },
  "ReverseWhitepagesLookupResult": {
    "properties": {
      "contacts": {
        "items": {
          "$ref": "#/definitions/ExternalContact"
        },
        "type": "array"
      },
      "externalOrganizations": {
        "items": {
          "$ref": "#/definitions/ExternalOrganization"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ReviewAssessmentResults": {
    "properties": {
      "byAssignees": {
        "description": "If true, learning assignment results can be seen in detail by assignees",
        "type": "boolean"
      },
      "byViewers": {
        "description": "If true, learning assignment results can be seen in detail by people who are eligible to view",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Ring": {
    "properties": {
      "actions": {
        "$ref": "#/definitions/Actions",
        "description": "The actions that will be performed just before moving conversations to the next bullseye ring."
      },
      "expansionCriteria": {
        "description": "The conditions that will trigger conversations to move to the next bullseye ring.",
        "items": {
          "$ref": "#/definitions/ExpansionCriterium"
        },
        "type": "array"
      },
      "memberGroups": {
        "description": "The groups of agents associated with the ring, if any.  Ring membership will update to match group membership changes.",
        "items": {
          "$ref": "#/definitions/MemberGroup"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "RoleDivision": {
    "properties": {
      "divisionId": {
        "description": "Division associated with the given role which forms a grant",
        "type": "string"
      },
      "roleId": {
        "description": "Role to be associated with the given division which forms a grant",
        "type": "string"
      }
    },
    "required": [
      "divisionId",
      "roleId"
    ],
    "type": "object"
  },
  "RoleDivisionGrants": {
    "properties": {
      "grants": {
        "description": "A list containing pairs of role and division IDs",
        "items": {
          "$ref": "#/definitions/RoleDivisionPair"
        },
        "type": "array"
      }
    },
    "required": [
      "grants"
    ],
    "type": "object"
  },
  "RoleDivisionPair": {
    "properties": {
      "divisionId": {
        "description": "The ID of the division",
        "type": "string"
      },
      "roleId": {
        "description": "The ID of the role",
        "type": "string"
      }
    },
    "required": [
      "divisionId",
      "roleId"
    ],
    "type": "object"
  },
  "RoleSettings": {
    "properties": {
      "authorizationGrantDivisionAware": {
        "allowEmptyValue": true,
        "description": "Boolean enabling enforcement of division aware for authorization grant add and delete",
        "type": "boolean"
      },
      "backfillEnabled": {
        "description": "Boolean showing if organization is opted in or not to role backfills",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Room": {
    "properties": {
      "dateCreated": {
        "description": "Room's created time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "Room's description",
        "type": "string"
      },
      "id": {
        "description": "The jid of the room if adhoc, the id of the group for group rooms",
        "readOnly": true,
        "type": "string"
      },
      "jid": {
        "description": "The jid of the room",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "owners": {
        "description": "Room's owners",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "participantLimit": {
        "description": "Room's size limit",
        "format": "int32",
        "type": "integer"
      },
      "pinnedMessages": {
        "description": "Room's pinned messages",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "type": "array"
      },
      "roomType": {
        "description": "The type of room",
        "enum": [
          "adhoc",
          "acd",
          "group",
          "oneOnOne",
          "supervisorAssistance"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "subject": {
        "description": "Room's subject",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RoomParticipant": {
    "properties": {
      "participantJid": {
        "description": "participantJid",
        "type": "string"
      }
    },
    "required": [
      "participantJid"
    ],
    "type": "object"
  },
  "RoomParticipantResponse": {
    "properties": {
      "jid": {
        "description": "jid of the participant",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "User id of the participant"
      }
    },
    "type": "object"
  },
  "RoomParticipantsResponse": {
    "properties": {
      "participants": {
        "description": "list of room participants",
        "items": {
          "$ref": "#/definitions/RoomParticipantResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RoomUpdateRequest": {
    "properties": {
      "description": {
        "description": "Room's description",
        "type": "string"
      },
      "ownerIds": {
        "description": "Room's owners",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pinnedMessageIds": {
        "description": "Room's pinned messages",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "subject": {
        "description": "Room's subject",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RoutePathRequest": {
    "properties": {
      "languageId": {
        "description": "The ID of the language to associate with the route path",
        "example": "e3d65f6a-c0d2-41da-8152-82d3f075d77c",
        "type": "string"
      },
      "mediaType": {
        "description": "The media type of the given queue to associate with the route path",
        "enum": [
          "Voice",
          "Chat",
          "Email",
          "Callback",
          "Message"
        ],
        "example": "Email",
        "type": "string"
      },
      "queueId": {
        "description": "The ID of the queue to associate with the route path",
        "example": "f27450c9-c1a0-451a-804c-2579b268b273",
        "type": "string"
      },
      "skillIds": {
        "description": "The set of skill IDs to associate with the route path",
        "example": "[\"33d29376-4267-4968-8042-dcabdf2c1d98\"]",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "sourcePlanningGroup": {
        "$ref": "#/definitions/SourcePlanningGroupRequest",
        "description": "The planning group from which to take route paths. This property is only needed if a route path already exists in another planning group.Note that taking a route path from another planning group will modify the other planning group"
      }
    },
    "required": [
      "mediaType",
      "queueId"
    ],
    "type": "object"
  },
  "RoutePathResponse": {
    "properties": {
      "language": {
        "$ref": "#/definitions/LanguageReference",
        "description": "The ID of the language associated with the route path"
      },
      "mediaType": {
        "description": "The media type of the given queue associated with the route path",
        "enum": [
          "Voice",
          "Chat",
          "Email",
          "Callback",
          "Message"
        ],
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/QueueReference",
        "description": "The ID of the queue associated with the route path"
      },
      "skills": {
        "description": "The set of skills associated with the route path",
        "items": {
          "$ref": "#/definitions/RoutingSkillReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "RoutingActivityData": {
    "properties": {
      "data": {
        "description": "Data for metrics",
        "items": {
          "$ref": "#/definitions/RoutingActivityMetricValue"
        },
        "type": "array"
      },
      "entities": {
        "description": "Details for active entities",
        "items": {
          "$ref": "#/definitions/RoutingActivityEntityData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from grouping dimension to value",
        "type": "object"
      },
      "truncated": {
        "description": "Flag for a truncated list of entities. If truncated, the first half of the list of entities will contain the oldest entities and the second half the newest entities.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "RoutingActivityEntityData": {
    "properties": {
      "activityDate": {
        "description": "The time at which the activity was observed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "organizationPresenceId": {
        "description": "Organization presence identifier",
        "type": "string"
      },
      "presenceDate": {
        "description": "Date of the latest presence change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "queueId": {
        "description": "Queue identifier",
        "type": "string"
      },
      "queueMembershipStatus": {
        "description": "Queue membership status (e.g. active or inactive)",
        "type": "string"
      },
      "routingStatus": {
        "description": "Agent routing status",
        "type": "string"
      },
      "routingStatusDate": {
        "description": "Date of the latest routing status change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "systemPresence": {
        "description": "System presence",
        "type": "string"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "required": [
      "activityDate"
    ],
    "type": "object"
  },
  "RoutingActivityMetricValue": {
    "properties": {
      "count": {
        "description": "metric count",
        "format": "int32",
        "type": "integer"
      },
      "metric": {
        "description": "metric",
        "enum": [
          "oActiveUsers",
          "oMemberUsers",
          "oOffQueueUsers",
          "oOnQueueUsers",
          "oUserPresences",
          "oUserRoutingStatuses"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "RoutingActivityQuery": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/RoutingActivityQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "groupBy": {
        "description": "Dimension(s) to group by",
        "items": {
          "enum": [
            "queueId"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metrics": {
        "description": "List of requested metrics",
        "items": {
          "$ref": "#/definitions/RoutingActivityQueryMetric"
        },
        "type": "array"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      }
    },
    "required": [
      "groupBy",
      "metrics"
    ],
    "type": "object"
  },
  "RoutingActivityQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/RoutingActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "RoutingActivityQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/RoutingActivityQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/RoutingActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "RoutingActivityQueryMetric": {
    "properties": {
      "details": {
        "description": "Flag for including observation details for this metric in the response",
        "type": "boolean"
      },
      "metric": {
        "description": "The requested metric",
        "enum": [
          "oActiveUsers",
          "oMemberUsers",
          "oOffQueueUsers",
          "oOnQueueUsers",
          "oUserPresences",
          "oUserRoutingStatuses"
        ],
        "type": "string"
      }
    },
    "required": [
      "metric"
    ],
    "type": "object"
  },
  "RoutingActivityQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "organizationPresenceId",
          "presenceDate",
          "queueId",
          "queueMembershipStatus",
          "routingStatus",
          "routingStatusDate",
          "systemPresence",
          "teamId",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "RoutingActivityResponse": {
    "properties": {
      "entityIdDimension": {
        "description": "Dimension that is used as an entityId",
        "enum": [
          "organizationPresenceId",
          "presenceDate",
          "queueId",
          "queueMembershipStatus",
          "routingStatus",
          "routingStatusDate",
          "systemPresence",
          "teamId",
          "userId"
        ],
        "type": "string"
      },
      "results": {
        "description": "Query results",
        "items": {
          "$ref": "#/definitions/RoutingActivityData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RoutingConversationAttributesRequest": {
    "properties": {
      "labelId": {
        "description": "Label requirement for the conversation.  To remove the label requirement (setting it to System Default Label), specify an empty string, i.e., \"\".",
        "type": "string"
      },
      "languageId": {
        "description": "Language requirement for the conversation.  To remove the language requirement, specify an empty string, i.e., \"\".",
        "type": "string"
      },
      "priority": {
        "description": "Priority for the conversation.  Each point of priority is equivalent to one minute of time in queue.  Range:[-25000000, 25000000].  To reset, specify 0.",
        "format": "int32",
        "maximum": 25000000,
        "minimum": -25000000,
        "type": "integer"
      },
      "requestScoredAgents": {
        "items": {
          "$ref": "#/definitions/RequestScoredAgent"
        },
        "type": "array"
      },
      "skillIds": {
        "description": "Skill requirements for the conversation.  To remove all skill requirements, specify an empty list, i.e. [].",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RoutingConversationAttributesResponse": {
    "properties": {
      "label": {
        "$ref": "#/definitions/UtilizationLabel",
        "description": "Current label on in-queue conversation"
      },
      "language": {
        "$ref": "#/definitions/Language",
        "description": "Current language on in-queue conversation"
      },
      "priority": {
        "description": "Current priority value on in-queue conversation. Range:[-25000000, 25000000]",
        "format": "int32",
        "type": "integer"
      },
      "scoredAgents": {
        "description": "Current scored agents on in-queue conversation",
        "items": {
          "$ref": "#/definitions/ScoredAgent"
        },
        "type": "array"
      },
      "skills": {
        "description": "Current routing skills on in-queue conversation",
        "items": {
          "$ref": "#/definitions/RoutingSkill"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "RoutingData": {
    "properties": {
      "label": {
        "description": "An optional label that categorizes the conversation.  Max-utilization settings can be configured at a per-label level",
        "type": "string"
      },
      "languageId": {
        "description": "The identifier of a language to be considered in routing",
        "type": "string"
      },
      "preferredAgentIds": {
        "description": "A list of agents to be preferred in routing",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "priority": {
        "description": "The priority for routing",
        "format": "int32",
        "type": "integer"
      },
      "queueId": {
        "description": "The identifier of the routing queue",
        "type": "string"
      },
      "routingFlags": {
        "description": "An array of flags indicating how the conversation should be routed. Use \"AGENT_OWNED_CALLBACK\" when creating an Agent Owned Callback.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "scoredAgents": {
        "description": "A list of scored agents for routing decisions. For Agent Owned Callbacks use one scored agent with a score of 100.",
        "items": {
          "$ref": "#/definitions/ScoredAgent"
        },
        "type": "array"
      },
      "skillIds": {
        "description": "A list of skill identifiers to be considered in routing",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "queueId"
    ],
    "type": "object"
  },
  "RoutingEstablishedEvent": {
    "properties": {
      "ani": {
        "description": "The automatic number identification if it is available for this conversation.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "dnis": {
        "description": "The dialed number identification if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/InitialConfiguration",
        "description": "Metadata about this communication."
      },
      "languageId": {
        "description": "The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.",
        "type": "string"
      },
      "phoneNumber": {
        "description": "Identifies the phone number used to reach this queue if it is different from the information that would be accessed by queueId.",
        "type": "string"
      },
      "queueId": {
        "description": "The id (V4 UUID) of the queue that is routing this conversation.",
        "type": "string"
      },
      "skillIds": {
        "description": "The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "queueId",
      "sourceConfiguration"
    ],
    "type": "object"
  },
  "RoutingRule": {
    "properties": {
      "operator": {
        "description": "matching operator.  MEETS_THRESHOLD matches any agent with a score at or above the rule's threshold.  ANY matches all specified agents, regardless of score.",
        "enum": [
          "MEETS_THRESHOLD",
          "ANY"
        ],
        "type": "string"
      },
      "threshold": {
        "description": "threshold required for routing attempt (generally an agent score).  may be null for operator ANY.",
        "format": "int32",
        "type": "integer"
      },
      "waitSeconds": {
        "description": "seconds to wait in this rule before moving to the next",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "RoutingSettings": {
    "properties": {
      "resetAgentScoreOnPresenceChange": {
        "description": "Reset agent score when agent presence changes from off-queue to on-queue",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "RoutingSkill": {
    "properties": {
      "dateModified": {
        "description": "Date last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the skill.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The current state for this skill.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required when updating. Version must be the current version. Only the system can assign version.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "RoutingSkillReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "RoutingStatus": {
    "properties": {
      "startTime": {
        "description": "The timestamp when the agent went into this state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "status": {
        "description": "Indicates the Routing State of the agent.  A value of OFF_QUEUE will be returned if the specified user does not exist.",
        "enum": [
          "OFF_QUEUE",
          "IDLE",
          "INTERACTING",
          "NOT_RESPONDING",
          "COMMUNICATING"
        ],
        "type": "string"
      },
      "userId": {
        "description": "The userId of the agent",
        "type": "string"
      }
    },
    "type": "object"
  },
  "RoutingStatusDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/RoutingStatusDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "RoutingStatusDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/RoutingStatusDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/RoutingStatusDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "RoutingStatusDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "routingStatus"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "RoutingTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent *Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationQueueId": {
        "description": "The id (V4 UUID) of the desired destination queue that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "Indicates the desired type of transfer.",
        "type": "string"
      },
      "languageId": {
        "description": "The unique identifier (V4 UUID) for the language that should be used to determine the destination for the conversation.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "skillIds": {
        "description": "The unique identifiers (V4 UUID) for the skills that should be used to determine the destination for the conversation.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationQueueId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "RuleConfig": {
    "properties": {
      "enabled": {
        "description": "Rule enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "Rule ID.",
        "type": "string"
      },
      "rule": {
        "$ref": "#/definitions/CopilotRule",
        "description": "Rule configuration."
      }
    },
    "required": [
      "enabled",
      "rule"
    ],
    "type": "object"
  },
  "RuleEngineConfig": {
    "properties": {
      "fallback": {
        "$ref": "#/definitions/Fallback",
        "description": "Fallback configuration."
      },
      "rules": {
        "description": "List of rules to evaluate by the engine.",
        "items": {
          "$ref": "#/definitions/RuleConfig"
        },
        "type": "array"
      }
    },
    "required": [
      "rules"
    ],
    "type": "object"
  },
  "RuleSet": {
    "properties": {
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A ContactList to provide user-interface suggestions for contact columns on relevant conditions and actions."
      },
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the RuleSet.",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A Queue to provide user-interface suggestions for wrap-up codes on relevant conditions and actions."
      },
      "rules": {
        "description": "The list of rules.",
        "items": {
          "$ref": "#/definitions/DialerRule"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "rules"
    ],
    "type": "object"
  },
  "RuleSetDiagnostic": {
    "properties": {
      "ruleSet": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A campaign rule set",
        "readOnly": true
      },
      "warnings": {
        "description": "Diagnostic warnings for the rule set",
        "items": {
          "enum": [
            "WRAPUP_CODE_NOT_IN_QUEUE",
            "CONTACT_ATTRIBUTE_NOT_IN_CONTACT_LIST",
            "NO_DNC_LIST_FOR_APPEND",
            "PHONE_CONDITIONS_WITH_MULTICOLUMN_PREVIEW"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "RuleSetEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RuleSet"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SIPSearchPublicRequest": {
    "properties": {
      "callId": {
        "description": "unique identification of the placed call",
        "type": "string"
      },
      "conversationId": {
        "description": "Unique identification of the conversation",
        "type": "string"
      },
      "dateEnd": {
        "description": "End date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStart": {
        "description": "Start date of the search. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "fromUser": {
        "description": "SIP user who placed the call",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "participantId": {
        "description": "Unique identification of the participant",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "toUser": {
        "description": "SIP user to who the call was placed",
        "type": "string"
      }
    },
    "required": [
      "dateEnd",
      "dateStart"
    ],
    "type": "object"
  },
  "SMSAvailablePhoneNumberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SmsAvailablePhoneNumber"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Salesforce": {
    "properties": {
      "certificate": {
        "type": "string"
      },
      "certificates": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "disabled": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "issuerURI": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "relyingPartyIdentifier": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sloBinding": {
        "type": "string"
      },
      "sloURI": {
        "type": "string"
      },
      "ssoTargetURI": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Schedule": {
    "description": "Defines a period of time to perform a specific action.  Each schedule must be associated with one or more schedule groups to be used.",
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "end": {
        "description": "Date time is represented as an ISO-8601 string without a timezone. For example: yyyy-MM-ddTHH:mm:ss.SSS",
        "format": "local-date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "rrule": {
        "description": "An iCal Recurrence Rule (RRULE) string. It is required to be set for schedules determining when upgrades to the Edge software can be applied.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "start": {
        "description": "Date time is represented as an ISO-8601 string without a timezone. For example: yyyy-MM-ddTHH:mm:ss.SSS",
        "format": "local-date-time",
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "end",
      "name",
      "start"
    ],
    "type": "object"
  },
  "ScheduleActivity": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this activity",
        "type": "string"
      },
      "dateStart": {
        "description": "The start date/time of this activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of this activity",
        "type": "string"
      },
      "externalActivityId": {
        "description": "The ID of the external activity associated with this activity, if applicable",
        "type": "string"
      },
      "externalActivityType": {
        "description": "The type of the external activity associated with this activity, if applicable",
        "enum": [
          "ActivityPlan",
          "Coaching",
          "Learning"
        ],
        "type": "string"
      },
      "lengthMinutes": {
        "description": "The length of this activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "paid": {
        "description": "Whether this activity is paid",
        "type": "boolean"
      },
      "timeOffRequestId": {
        "description": "The ID of the time off request associated with this activity, if applicable",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScheduleDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SchedulesDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScheduleEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Schedule"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScheduleGenerationMessage": {
    "properties": {
      "arguments": {
        "description": "The arguments describing the message",
        "items": {
          "$ref": "#/definitions/SchedulerMessageArgument"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of the message",
        "enum": [
          "AgentNotFound",
          "AgentNotInSelectedManagementUnit",
          "AgentNotLicensed",
          "AgentWithoutWorkPlan",
          "WorkPlanNotEnabled",
          "WorkPlanNotFound",
          "AgentWithoutCapability",
          "NoNeedDays",
          "UnableToProduceAgentSchedule",
          "UnableToScheduleMaxConsecutiveWorkingDaysFromAgentHistory",
          "UnableToScheduleMaxConsecutiveWorkingWeekendsFromAgentHistory",
          "UnableToScheduleMaxWeeklyPaidTimeFromTimeOff",
          "UnableToScheduleMaxWorkDayPaidTimeFromTimeOff",
          "UnableToScheduleMinIntershiftTimeFromAgentHistory",
          "UnableToScheduleMinIntershiftTimeFromDst",
          "UnableToScheduleMinShiftStartDistanceFromAgentHistory",
          "UnableToScheduleMinShiftStartDistanceFromDst",
          "UnableToScheduleMinWeeklyPaidTimeFromTimeOff",
          "UnableToScheduleMinWeeklyWorkDaysFromTimeOff",
          "UnableToScheduleMinWorkDayPaidTimeFromTimeOff",
          "UnableToSchedulePlanningPeriodMaxDaysOffFromAgentHistory",
          "UnableToSchedulePlanningPeriodMaxDaysOffFromTimeOff",
          "UnableToSchedulePlanningPeriodMaxPaidTimeFromAgentHistory",
          "UnableToSchedulePlanningPeriodMaxPaidTimeFromTimeOff",
          "UnableToSchedulePlanningPeriodMinDaysOffFromAgentHistory",
          "UnableToSchedulePlanningPeriodMinPaidTimeFromAgentHistory",
          "UnableToSchedulePlanningPeriodMinPaidTimeFromTimeOff",
          "UnableToScheduleWorkDayFromTimeOff",
          "UnableToScheduleMaxConsecutiveWorkingDays",
          "UnableToScheduleMaxConsecutiveWorkingWeekends",
          "UnableToScheduleMaxWeeklyPaidTime",
          "UnableToScheduleMaxWeeklyWorkDays",
          "UnableToScheduleMaxWorkDayPaidTime",
          "UnableToScheduleMinConsecutiveNonWorkingTimePerWeek",
          "UnableToScheduleMinIntershiftTime",
          "UnableToScheduleMinShiftStartDistance",
          "UnableToScheduleMinWeeklyPaidTime",
          "UnableToScheduleMinWeeklyWorkDays",
          "UnableToScheduleMinWorkDayPaidTime",
          "UnableToSchedulePlanningPeriodMaxDaysOff",
          "UnableToSchedulePlanningPeriodMaxPaidTime",
          "UnableToSchedulePlanningPeriodMinDaysOff",
          "UnableToSchedulePlanningPeriodMinPaidTime",
          "UnableToScheduleShiftVariance",
          "UnableToScheduleWorkDay"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScheduleGenerationResult": {
    "properties": {
      "failed": {
        "description": "Whether the schedule generation run failed",
        "type": "boolean"
      },
      "messageCount": {
        "description": "The number of schedule generation messages for this schedule generation run",
        "format": "int32",
        "type": "integer"
      },
      "messageSeverities": {
        "description": "The list of messages by severity in this schedule generation run",
        "items": {
          "$ref": "#/definitions/SchedulerMessageTypeSeverity"
        },
        "type": "array"
      },
      "messages": {
        "description": "User facing messages related to the schedule generation run",
        "items": {
          "$ref": "#/definitions/ScheduleGenerationMessage"
        },
        "type": "array"
      },
      "runId": {
        "description": "The ID of the schedule generation run. Reference this when requesting support",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScheduleGenerationResultSummary": {
    "properties": {
      "failed": {
        "description": "Whether the schedule generation run failed",
        "type": "boolean"
      },
      "messageCount": {
        "description": "The number of schedule generation messages for this schedule generation run",
        "format": "int32",
        "type": "integer"
      },
      "messageSeverityCounts": {
        "description": "The list of schedule generation message counts by severity for this schedule generation run",
        "items": {
          "$ref": "#/definitions/SchedulerMessageSeverityCount"
        },
        "type": "array"
      },
      "runId": {
        "description": "The ID of the schedule generation run. Reference this when requesting support",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScheduleGenerationWarning": {
    "properties": {
      "noNeedDays": {
        "description": "Days agent was scheduled but there was no need to meet. The scheduled days have no effect on service levels",
        "items": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "shiftsTooCloseTogether": {
        "description": "Whether the schedule did not meet the minimum time between shifts defined in the agent work plan",
        "type": "boolean"
      },
      "unableToMeetMaxDays": {
        "description": "Whether the number of scheduled days exceeded the maximum days to schedule defined in the agent work plan",
        "type": "boolean"
      },
      "unableToMeetMaxPaidForTheWeek": {
        "description": "Whether the schedule exceeded the maximum paid time for the week defined in the agent work plan",
        "type": "boolean"
      },
      "unableToMeetMinPaidForTheWeek": {
        "description": "Whether the schedule did not meet the minimum paid time for the week defined in the agent work plan",
        "type": "boolean"
      },
      "unableToScheduleRequiredDays": {
        "description": "Days indicated as required to work in agent work plan where no viable shift was found to schedule",
        "items": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "userId": {
        "description": "ID of the user in the warning",
        "type": "string"
      },
      "userNotLicensed": {
        "description": "Whether the user does not have the appropriate license to be scheduled",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ScheduleGroup": {
    "description": "A group of schedules that define the operating hours of an organization.",
    "properties": {
      "closedSchedules": {
        "description": "The schedules defining the hours an organization is closed.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "holidaySchedules": {
        "description": "The schedules defining the hours an organization is closed for the holidays.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "openSchedules": {
        "description": "The schedules defining the hours an organization is open.",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "timeZone": {
        "description": "The timezone the schedules are a part of.  This is not a schedule property to allow a schedule to be used in multiple timezones.",
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ScheduleGroupDivisionView": {
    "description": "A schedule group.",
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The schedule group identifier",
        "type": "string"
      },
      "name": {
        "description": "The schedule group name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ScheduleGroupDivisionViewEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ScheduleGroupDivisionView"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScheduleGroupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ScheduleGroup"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScheduleInterval": {
    "properties": {
      "end": {
        "description": "The scheduled end time as an ISO-8601 string, i.e. yyyy-MM-ddTHH:mm:ss.SSSZ",
        "type": "string"
      },
      "start": {
        "description": "The scheduled start time as an ISO-8601 string, i.e yyyy-MM-ddTHH:mm:ss.SSSZ",
        "type": "string"
      }
    },
    "required": [
      "end",
      "start"
    ],
    "type": "object"
  },
  "ScheduleUploadProcessingResponse": {
    "properties": {
      "operationId": {
        "description": "The ID for the operation",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/BuScheduleMetadata",
        "description": "The result of the operation.  Null unless status == Complete"
      },
      "status": {
        "description": "The status of the operation",
        "enum": [
          "Processing",
          "Complete",
          "Canceled",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulerMessageArgument": {
    "properties": {
      "type": {
        "description": "The type of this message parameter",
        "enum": [
          "AgentId",
          "Date"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value of this message parameter",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulerMessageSeverityCount": {
    "properties": {
      "count": {
        "description": "The number of schedule messages with the given severity",
        "format": "int32",
        "type": "integer"
      },
      "severity": {
        "description": "The schedule message severity",
        "enum": [
          "Ignore",
          "Information",
          "Warning",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulerMessageTypeSeverity": {
    "properties": {
      "severity": {
        "description": "The severity of the message",
        "enum": [
          "Ignore",
          "Information",
          "Warning",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "The type of the message",
        "enum": [
          "AgentNotFound",
          "AgentNotInSelectedManagementUnit",
          "AgentNotLicensed",
          "AgentWithoutWorkPlan",
          "WorkPlanNotEnabled",
          "WorkPlanNotFound",
          "AgentWithoutCapability",
          "NoNeedDays",
          "UnableToProduceAgentSchedule",
          "UnableToScheduleMaxConsecutiveWorkingDaysFromAgentHistory",
          "UnableToScheduleMaxConsecutiveWorkingWeekendsFromAgentHistory",
          "UnableToScheduleMaxWeeklyPaidTimeFromTimeOff",
          "UnableToScheduleMaxWorkDayPaidTimeFromTimeOff",
          "UnableToScheduleMinIntershiftTimeFromAgentHistory",
          "UnableToScheduleMinIntershiftTimeFromDst",
          "UnableToScheduleMinShiftStartDistanceFromAgentHistory",
          "UnableToScheduleMinShiftStartDistanceFromDst",
          "UnableToScheduleMinWeeklyPaidTimeFromTimeOff",
          "UnableToScheduleMinWeeklyWorkDaysFromTimeOff",
          "UnableToScheduleMinWorkDayPaidTimeFromTimeOff",
          "UnableToSchedulePlanningPeriodMaxDaysOffFromAgentHistory",
          "UnableToSchedulePlanningPeriodMaxDaysOffFromTimeOff",
          "UnableToSchedulePlanningPeriodMaxPaidTimeFromAgentHistory",
          "UnableToSchedulePlanningPeriodMaxPaidTimeFromTimeOff",
          "UnableToSchedulePlanningPeriodMinDaysOffFromAgentHistory",
          "UnableToSchedulePlanningPeriodMinPaidTimeFromAgentHistory",
          "UnableToSchedulePlanningPeriodMinPaidTimeFromTimeOff",
          "UnableToScheduleWorkDayFromTimeOff",
          "UnableToScheduleMaxConsecutiveWorkingDays",
          "UnableToScheduleMaxConsecutiveWorkingWeekends",
          "UnableToScheduleMaxWeeklyPaidTime",
          "UnableToScheduleMaxWeeklyWorkDays",
          "UnableToScheduleMaxWorkDayPaidTime",
          "UnableToScheduleMinConsecutiveNonWorkingTimePerWeek",
          "UnableToScheduleMinIntershiftTime",
          "UnableToScheduleMinShiftStartDistance",
          "UnableToScheduleMinWeeklyPaidTime",
          "UnableToScheduleMinWeeklyWorkDays",
          "UnableToScheduleMinWorkDayPaidTime",
          "UnableToSchedulePlanningPeriodMaxDaysOff",
          "UnableToSchedulePlanningPeriodMaxPaidTime",
          "UnableToSchedulePlanningPeriodMinDaysOff",
          "UnableToSchedulePlanningPeriodMinPaidTime",
          "UnableToScheduleShiftVariance",
          "UnableToScheduleWorkDay"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulesDivisionView": {
    "description": "A schedule.",
    "properties": {
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The schedule identifier",
        "type": "string"
      },
      "name": {
        "description": "The schedule name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "SchedulingNoForecastOptionsRequest": {
    "properties": {
      "shiftLength": {
        "description": "The shift length option to apply if no forecast is supplied",
        "enum": [
          "Shortest",
          "Median",
          "Longest",
          "Random"
        ],
        "type": "string"
      },
      "shiftStart": {
        "description": "The shift start option to apply if no forecast is supplied",
        "enum": [
          "Earliest",
          "Median",
          "Latest",
          "Random"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulingOptionsRequest": {
    "properties": {
      "noForecastOptions": {
        "$ref": "#/definitions/SchedulingNoForecastOptionsRequest",
        "description": "Schedule generation options to apply if no forecast is supplied"
      }
    },
    "type": "object"
  },
  "SchedulingPeriod": {
    "properties": {
      "earliestStartDate": {
        "description": "The earliest date the associated activity plan can begin, in YYYY-MM-DD format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "latestEndDate": {
        "description": "The latest date the associated activity plan can end, in YYYY-MM-DD format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "earliestStartDate",
      "latestEndDate"
    ],
    "type": "object"
  },
  "SchedulingProcessingError": {
    "properties": {
      "description": {
        "description": "A text description of the error",
        "readOnly": true,
        "type": "string"
      },
      "internalErrorCode": {
        "description": "An internal code representing the type of error. BadJson for 'Unable to parse json.' NotFound for 'Resource not found.' Fail for 'An unexpected server error occured.'",
        "enum": [
          "BadJson",
          "NotFound",
          "Fail"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulingSettingsRequest": {
    "properties": {
      "defaultShrinkagePercent": {
        "description": "Default shrinkage percent for scheduling",
        "format": "double",
        "type": "number"
      },
      "maxOccupancyPercentForDeferredWork": {
        "description": "Max occupancy percent for deferred work",
        "format": "int32",
        "type": "integer"
      },
      "planningPeriod": {
        "$ref": "#/definitions/ValueWrapperPlanningPeriodSettings",
        "description": "Planning period settings for scheduling"
      },
      "shrinkageOverrides": {
        "$ref": "#/definitions/ShrinkageOverrides",
        "description": "Shrinkage overrides for scheduling"
      },
      "startDayOfWeekend": {
        "description": "Start day of weekend for scheduling",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulingSettingsResponse": {
    "properties": {
      "defaultShrinkagePercent": {
        "description": "Default shrinkage percent for scheduling",
        "format": "double",
        "type": "number"
      },
      "maxOccupancyPercentForDeferredWork": {
        "description": "Max occupancy percent for deferred work",
        "format": "int32",
        "type": "integer"
      },
      "planningPeriod": {
        "$ref": "#/definitions/PlanningPeriodSettings",
        "description": "Planning period settings for scheduling"
      },
      "shrinkageOverrides": {
        "$ref": "#/definitions/ShrinkageOverrides",
        "description": "Shrinkage overrides for scheduling"
      },
      "startDayOfWeekend": {
        "description": "Start day of weekend for scheduling",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulingStatusResponse": {
    "properties": {
      "errorDetails": {
        "description": "If the request could not be properly processed, error details will be given here.",
        "items": {
          "$ref": "#/definitions/SchedulingProcessingError"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The ID generated for the scheduling job.  Use to GET result when job is completed.",
        "readOnly": true,
        "type": "string"
      },
      "percentComplete": {
        "description": "The percentage of the job that is complete.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "schedulingResultUri": {
        "description": "The uri of the scheduling result. It has a value if the status is 'Success'.",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the scheduling job.",
        "enum": [
          "Pending",
          "Success",
          "Failed",
          "Ongoing",
          "PartialFailure"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SchedulingTestingOptionsRequest": {
    "properties": {
      "delayScheduling": {
        "description": "Whether to force delayed scheduling",
        "type": "boolean"
      },
      "failScheduling": {
        "description": "Whether to force scheduling to fail",
        "type": "boolean"
      },
      "fastScheduling": {
        "description": "Whether to enable fast scheduling",
        "type": "boolean"
      },
      "populateDeprecatedWarnings": {
        "description": "Whether to populate deprecated warnings in the generated schedule",
        "type": "boolean"
      },
      "populateWarnings": {
        "description": "Whether to populate warnings in the generated schedule",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Schema": {
    "properties": {
      "description": {
        "description": "A core type's description",
        "readOnly": true,
        "type": "string"
      },
      "items": {
        "$ref": "#/definitions/Items",
        "description": "Denotes the type and pattern of the items in an enum core type",
        "example": "{\ntype\": \"string\",\n\"pattern\": \"^[\\\\S]+$\"\n}",
        "readOnly": true
      },
      "pattern": {
        "description": "For the \"date\" and \"datetime\" core types, denotes the regex prescribing the allowable date/datetime format",
        "readOnly": true,
        "type": "string"
      },
      "title": {
        "description": "A core type's title",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "An array of fundamental JSON Schema primitive types on which the core type is based",
        "example": "[\"string\"] for a text-based core type, [\"integer\"] for a numeric core type, or [\"boolean\", \"null\"] for the checkbox core type",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "SchemaQuantityLimits": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maxFieldDescriptionCharacters": {
        "description": "The maximum number of schema field description characters allowed.",
        "example": "\"maxFieldDescriptionCharacters\":200",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxFieldNameCharacters": {
        "description": "The maximum number of schema field name characters allowed.",
        "example": "\"minFieldNameCharacters\":100",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxNumberOfFieldsPerOrg": {
        "description": "The maximum number of schema fields allowed per organization across all of their schemas.",
        "example": "\"maxNumberOfFieldsPerOrg\":500",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxNumberOfFieldsPerSchema": {
        "description": "The maximum number of schema fields allowed per schema.",
        "example": "\"maxNumberOfFieldsPerSchema\":25",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxNumberOfSchemasPerOrg": {
        "description": "The maximum number of schema allowed per org.",
        "example": "\"maxNumberOfSchemasPerOrg\":20",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxSchemaDescriptionCharacters": {
        "description": "The maximum number of schema description characters allowed.",
        "example": "\"maxSchemaDescriptionCharacters\":200",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxSchemaNameCharacters": {
        "description": "The maximum number of schema name characters allowed.",
        "example": "\"maxSchemaNameCharacters\":50",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "minFieldDescriptionCharacters": {
        "description": "The minimum number of schema field description characters allowed.",
        "example": "\"minFieldDescriptionCharacters\":0",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "minFieldNameCharacters": {
        "description": "The minimum number of schema field name characters allowed.",
        "example": "\"minFieldNameCharacters\":1",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "minSchemaDescriptionCharacters": {
        "description": "The minimum number of schema description characters allowed.",
        "example": "\"minSchemaDescriptionCharacters\":0",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "minSchemaNameCharacters": {
        "description": "The minimum number of schema name characters allowed.",
        "example": "\"minSchemaNameCharacters\":1",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimConfigResourceType": {
    "description": "Defines a SCIM resource.",
    "properties": {
      "description": {
        "description": "The description of the resource type.",
        "readOnly": true,
        "type": "string"
      },
      "endpoint": {
        "description": "The HTTP-addressable endpoint of the resource type. Appears after the base URL.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The ID of the SCIM resource. Set by the service provider. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readOnly\". \"returned\" is set to \"always\".",
        "readOnly": true,
        "type": "string"
      },
      "meta": {
        "$ref": "#/definitions/ScimMetadata",
        "description": "The metadata of the SCIM resource. Only \"location\" and \"resourceType\" are set for \"ResourceType\" resources.",
        "readOnly": true
      },
      "name": {
        "description": "The name of the resource type.",
        "readOnly": true,
        "type": "string"
      },
      "schema": {
        "description": "The URI of the primary or base schema for the resource type.",
        "readOnly": true,
        "type": "string"
      },
      "schemaExtensions": {
        "description": "The list of schema extensions for the resource type.",
        "items": {
          "$ref": "#/definitions/ScimConfigResourceTypeSchemaExtension"
        },
        "readOnly": true,
        "type": "array"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "ScimConfigResourceTypeSchemaExtension": {
    "description": "Defines a SCIM resource type's schema extension.",
    "properties": {
      "required": {
        "description": "Indicates whether a schema extension is required.",
        "readOnly": true,
        "type": "boolean"
      },
      "schema": {
        "description": "The URI of an extended schema, for example, \"urn:edu:2.0:Staff\". Must be equal to the \"id\" attribute of a schema.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimConfigResourceTypesListResponse": {
    "description": "Defines a response for a list of SCIM resource types.",
    "properties": {
      "Resources": {
        "description": "The list of requested resources.",
        "items": {
          "$ref": "#/definitions/ScimConfigResourceType"
        },
        "readOnly": true,
        "type": "array"
      },
      "itemsPerPage": {
        "description": "The number of resources returned per page.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startIndex": {
        "description": "The 1-based index of the first result returned by this request. Add this to \"itemsPerPage\" when requesting the next page of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "totalResults": {
        "description": "The total number of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScimEmail": {
    "description": "Defines a SCIM email address.",
    "properties": {
      "primary": {
        "description": "Indicates whether the email address is the primary email address.",
        "type": "boolean"
      },
      "type": {
        "description": "The type of email address. \"value\" is immutable if \"type\" is set to \"other\".",
        "enum": [
          "work",
          "other"
        ],
        "type": "string"
      },
      "value": {
        "description": "The email address. Is immutable if \"type\" is set to \"other\".",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimError": {
    "description": "Defines a SCIM error.",
    "properties": {
      "detail": {
        "description": "The detailed description of the SCIM error.",
        "readOnly": true,
        "type": "string"
      },
      "schemas": {
        "description": "The list of schemas for the SCIM error.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "scimType": {
        "description": "The type of SCIM error when httpStatus is a \"400\" error.",
        "enum": [
          "invalidFilter",
          "tooMany",
          "uniqueness",
          "mutability",
          "invalidSyntax",
          "invalidPath",
          "noTarget",
          "invalidValue",
          "invalidVers",
          "sensitive"
        ],
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The HTTP status code returned for the SCIM error.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimGenesysUserExternalId": {
    "description": "External Identifiers of user. The external identifier must be unique within the organization and the 'authority'",
    "properties": {
      "authority": {
        "description": "Authority, or scope, of \"externalId\". Allows multiple external identifiers to be defined. Represents the source of the external identifier.",
        "type": "string"
      },
      "value": {
        "description": "Identifier of the user in an external system.",
        "type": "string"
      }
    },
    "required": [
      "authority",
      "value"
    ],
    "type": "object"
  },
  "ScimGroupListResponse": {
    "description": "Defines a response for a list of SCIM groups.",
    "properties": {
      "Resources": {
        "description": "The list of requested resources. If \"count\" is 0, then the list will be empty.",
        "items": {
          "$ref": "#/definitions/ScimV2Group"
        },
        "readOnly": true,
        "type": "array"
      },
      "itemsPerPage": {
        "description": "The number of resources returned per page.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startIndex": {
        "description": "The 1-based index of the first result returned by this request. Add this to \"itemsPerPage\" when requesting the next page of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "totalResults": {
        "description": "The total number of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScimMetadata": {
    "description": "Defines the SCIM metadata.",
    "properties": {
      "lastModified": {
        "description": "The last time that the resource was modified. Date time is represented as an \"ISO-8601 string\", for example, yyyy-MM-ddTHH:mm:ss.SSSZ. Not included with \"Schema\" and \"ResourceType\" resources.",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "location": {
        "description": "The URI of the resource.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "resourceType": {
        "description": "The type of SCIM resource.",
        "enum": [
          "User",
          "Group",
          "ServiceProviderConfig",
          "ResourceType",
          "Schema"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The version of the resource. Matches the ETag HTTP response header. Not included with \"Schema\" and \"ResourceType\" resources.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimPhoneNumber": {
    "description": "Defines a SCIM phone number.",
    "properties": {
      "primary": {
        "description": "Indicates whether the phone number is the primary phone number.",
        "type": "boolean"
      },
      "type": {
        "description": "The type of phone number.",
        "enum": [
          "work",
          "work2",
          "work3",
          "work4",
          "home",
          "mobile",
          "other",
          "microsoftteams",
          "zoomphone",
          "eightbyeight"
        ],
        "type": "string"
      },
      "value": {
        "description": "The phone number in E.164 or tel URI format, for example, tel:+nnnnnnnn; ext=xxxxx.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimServiceProviderConfig": {
    "description": "Defines a SCIM service provider's configuration.",
    "properties": {
      "authenticationSchemes": {
        "description": "The list of supported authentication schemes.",
        "items": {
          "$ref": "#/definitions/ScimServiceProviderConfigAuthenticationScheme"
        },
        "readOnly": true,
        "type": "array"
      },
      "bulk": {
        "$ref": "#/definitions/ScimServiceProviderConfigBulkFeature",
        "description": "The \"bulk\" configuration options.",
        "readOnly": true
      },
      "changePassword": {
        "$ref": "#/definitions/ScimServiceProviderConfigSimpleFeature",
        "description": "The \"changePassword\" configuration options.",
        "readOnly": true
      },
      "documentationUri": {
        "description": "The HTTP-addressable URL that points to the service provider's documentation.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "etag": {
        "$ref": "#/definitions/ScimServiceProviderConfigSimpleFeature",
        "description": "The \"etag\" configuration options.",
        "readOnly": true
      },
      "filter": {
        "$ref": "#/definitions/ScimServiceProviderConfigFilterFeature",
        "description": "The \"filter\" configuration options.",
        "readOnly": true
      },
      "meta": {
        "$ref": "#/definitions/ScimMetadata",
        "description": "The metadata of the SCIM resource. Metadata is defined as immutable per SCIM RFC.",
        "readOnly": true
      },
      "patch": {
        "$ref": "#/definitions/ScimServiceProviderConfigSimpleFeature",
        "description": "The \"patch\" configuration options.",
        "readOnly": true
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "sort": {
        "$ref": "#/definitions/ScimServiceProviderConfigSimpleFeature",
        "description": "The \"sort\" configuration options.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "ScimServiceProviderConfigAuthenticationScheme": {
    "description": "Defines an authentication scheme in the SCIM service provider's configuration.",
    "properties": {
      "description": {
        "description": "The description of the authentication scheme.",
        "readOnly": true,
        "type": "string"
      },
      "documentationUri": {
        "description": "The HTTP-addressable URL that points to the authentication scheme's usage documentation.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the authentication scheme, for example, HTTP Basic.",
        "readOnly": true,
        "type": "string"
      },
      "primary": {
        "description": "Indicates whether this authentication scheme is the primary method of authentication.",
        "readOnly": true,
        "type": "boolean"
      },
      "specUri": {
        "description": "The HTTP-addressable URL that points to the authentication scheme's specification.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of authentication scheme.",
        "enum": [
          "oauth",
          "oauth2",
          "oauthbearertoken",
          "httpbasic",
          "httpdigest"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "description",
      "name",
      "type"
    ],
    "type": "object"
  },
  "ScimServiceProviderConfigBulkFeature": {
    "description": "Defines a \"bulk\" request in the SCIM service provider's configuration.",
    "properties": {
      "maxOperations": {
        "description": "The maximum number of operations for each bulk request.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "maxPayloadSize": {
        "description": "The maximum payload size.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "supported": {
        "description": "Indicates whether configuration options are supported.",
        "readOnly": true,
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ScimServiceProviderConfigFilterFeature": {
    "description": "Defines a \"filter\" request in the SCIM service provider's configuration.",
    "properties": {
      "maxResults": {
        "description": "The maximum number of results returned from a filtered query.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "supported": {
        "description": "Indicates whether configuration options are supported.",
        "readOnly": true,
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ScimServiceProviderConfigSimpleFeature": {
    "description": "Defines a request in the SCIM service provider's configuration.",
    "properties": {
      "supported": {
        "description": "Indicates whether configuration options are supported.",
        "readOnly": true,
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "ScimUserExtensions": {
    "description": "Genesys Cloud user extensions to SCIM RFC.",
    "properties": {
      "externalIds": {
        "description": "The list of external identifiers assigned to user. Always includes an immutable SCIM authority prefixed with \"x-pc:scimv2:v1\". ExternalIds are searchable with complex filter query parameter using 'authority' and 'value', e.g., filter=urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User:externalIds[authority eq \"matchAuthName\" and value eq \"matchingExternalKeyValue\"].",
        "items": {
          "$ref": "#/definitions/ScimGenesysUserExternalId"
        },
        "type": "array"
      },
      "routingLanguages": {
        "description": "The list of routing languages assigned to a user. Maximum 50 languages.",
        "items": {
          "$ref": "#/definitions/ScimUserRoutingLanguage"
        },
        "type": "array"
      },
      "routingSkills": {
        "description": "The list of routing skills assigned to a user. Maximum 50 skills.",
        "items": {
          "$ref": "#/definitions/ScimUserRoutingSkill"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ScimUserListResponse": {
    "description": "Defines a response for a list of SCIM users.",
    "properties": {
      "Resources": {
        "description": "The list of requested resources. If \"count\" is 0, then the list will be empty.",
        "items": {
          "$ref": "#/definitions/ScimV2User"
        },
        "readOnly": true,
        "type": "array"
      },
      "itemsPerPage": {
        "description": "The number of resources returned per page.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startIndex": {
        "description": "The 1-based index of the first result returned by this request. Add this to \"itemsPerPage\" when requesting the next page of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "totalResults": {
        "description": "The total number of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScimUserRole": {
    "description": "Defines a user role.",
    "properties": {
      "value": {
        "description": "The role of the Genesys Cloud user.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimUserRoutingLanguage": {
    "description": "The routing language assigned to a user.",
    "properties": {
      "name": {
        "description": "The case-sensitive name of a routing language configured in Genesys Cloud.",
        "type": "string"
      },
      "proficiency": {
        "description": "A rating from 0.0 to 5.0 that indicates how fluent an agent is in a particular language. ACD interactions are routed to agents with higher proficiency ratings.",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ScimUserRoutingSkill": {
    "description": "The routing skill assigned to a user.",
    "properties": {
      "name": {
        "description": "The case-sensitive name of a routing skill configured in Genesys Cloud.",
        "type": "string"
      },
      "proficiency": {
        "description": "A rating from 0.0 to 5.0 that indicates how adept an agent is at a particular skill. When \"Best available skills\" is enabled for a queue in Genesys Cloud, ACD interactions in that queue are routed to agents with higher proficiency ratings.",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "ScimV2CreateUser": {
    "description": "Defines the creation of a SCIM user.",
    "properties": {
      "active": {
        "description": "Indicates whether the user's administrative status is active.",
        "type": "boolean"
      },
      "displayName": {
        "description": "The display name of the user.",
        "type": "string"
      },
      "emails": {
        "description": "The list of the user's email addresses.",
        "items": {
          "$ref": "#/definitions/ScimEmail"
        },
        "type": "array"
      },
      "externalId": {
        "description": "The external ID of the user. Set by the provisioning client. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readWrite\".",
        "type": "string"
      },
      "groups": {
        "description": "The list of groups that the user is a member of. This list is immutable per SCIM RFC and may only be updated using the GROUPS resource endpoint.",
        "items": {
          "$ref": "#/definitions/ScimV2GroupReference"
        },
        "readOnly": true,
        "type": "array"
      },
      "password": {
        "description": "The new password for the Genesys Cloud user. Does not return an existing password. When creating a user, if a password is not supplied, then a password will be randomly generated that is 40 characters in length and contains five characters from each of the password policy groups.",
        "type": "string"
      },
      "phoneNumbers": {
        "description": "The list of the user's phone numbers.",
        "items": {
          "$ref": "#/definitions/ScimPhoneNumber"
        },
        "type": "array"
      },
      "roles": {
        "description": "The list of roles assigned to the user.",
        "items": {
          "$ref": "#/definitions/ScimUserRole"
        },
        "type": "array"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "title": {
        "description": "The user's title.",
        "type": "string"
      },
      "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "$ref": "#/definitions/ScimV2EnterpriseUser",
        "description": "The URI of the schema for the enterprise user."
      },
      "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User": {
        "$ref": "#/definitions/ScimUserExtensions",
        "description": "The URI of the schema for the Genesys Cloud user."
      },
      "userName": {
        "description": "The user's Genesys Cloud email address. Must be unique.",
        "type": "string"
      }
    },
    "required": [
      "displayName",
      "userName"
    ],
    "type": "object"
  },
  "ScimV2EnterpriseUser": {
    "description": "Defines a SCIM enterprise user.",
    "properties": {
      "department": {
        "description": "The department that the user belongs to.",
        "type": "string"
      },
      "division": {
        "description": "The division that the user belongs to.",
        "type": "string"
      },
      "employeeNumber": {
        "description": "The user's employee number.",
        "type": "string"
      },
      "manager": {
        "$ref": "#/definitions/Manager",
        "description": "The user's manager."
      }
    },
    "type": "object"
  },
  "ScimV2Group": {
    "description": "Defines a SCIM group.",
    "properties": {
      "displayName": {
        "description": "The display name of the group.",
        "readOnly": true,
        "type": "string"
      },
      "externalId": {
        "description": "The external ID of the group. Set by the provisioning client. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readWrite\".",
        "type": "string"
      },
      "id": {
        "description": "The ID of the SCIM resource. Set by the service provider. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readOnly\". \"returned\" is set to \"always\".",
        "readOnly": true,
        "type": "string"
      },
      "members": {
        "description": "The list of members in the group.",
        "items": {
          "$ref": "#/definitions/ScimV2MemberReference"
        },
        "type": "array"
      },
      "meta": {
        "$ref": "#/definitions/ScimMetadata",
        "description": "The metadata of the SCIM resource. Metadata is defined as immutable per SCIM RFC.",
        "readOnly": true
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "required": [
      "displayName"
    ],
    "type": "object"
  },
  "ScimV2GroupReference": {
    "description": "Defines a reference to SCIM groups.",
    "properties": {
      "$ref": {
        "description": "The reference URI of the SCIM resource.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of SCIM resource.",
        "enum": [
          "User",
          "Group",
          "ServiceProviderConfig",
          "ResourceType",
          "Schema"
        ],
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "The ID of the group member. Can be \"userId\" or \"groupId\".",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimV2MemberReference": {
    "description": "Defines a reference to SCIM group members.",
    "properties": {
      "$ref": {
        "description": "The reference URI of the SCIM resource.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of SCIM resource.",
        "enum": [
          "User",
          "Group",
          "ServiceProviderConfig",
          "ResourceType",
          "Schema"
        ],
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "The ID of the group member. Can be \"userId\" or \"groupId\".",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimV2PatchOperation": {
    "description": "Defines a SCIM PATCH operation. The path and value follow very specific rules based on operation types. See section 3.5.2 \"Modifying with PATCH\" in RFC 7644 for details.",
    "properties": {
      "op": {
        "description": "The PATCH operation to perform.",
        "enum": [
          "add",
          "replace",
          "remove"
        ],
        "type": "string"
      },
      "path": {
        "description": "The attribute path that describes the target of the operation. Required for a \"remove\" operation.",
        "type": "string"
      },
      "value": {
        "$ref": "#/definitions/JsonNode",
        "description": "The value to set in the path."
      }
    },
    "required": [
      "op"
    ],
    "type": "object"
  },
  "ScimV2PatchRequest": {
    "description": "Defines a SCIM PATCH request. See section 3.5.2 \"Modifying with PATCH\" in RFC 7644 for details.",
    "properties": {
      "Operations": {
        "description": "The list of operations to perform for the PATCH request.",
        "items": {
          "$ref": "#/definitions/ScimV2PatchOperation"
        },
        "type": "array"
      },
      "schemas": {
        "description": "The list of schemas used in the PATCH request.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "schemas"
    ],
    "type": "object"
  },
  "ScimV2SchemaAttribute": {
    "description": "A complex type that defines service provider attributes or subattributes and their qualities.",
    "properties": {
      "canonicalValues": {
        "description": "The list of standard values that service providers may use. Service providers may ignore unsupported values.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "caseExact": {
        "description": "Indicates whether a string attribute is case-sensitive. If set to \"true\", the server preserves case sensitivity. If set to \"false\", the server may change the case. The server also uses case sensitivity when evaluating filters. See section 3.4.2.2 \"Filtering\" in RFC 7644 for details.",
        "readOnly": true,
        "type": "boolean"
      },
      "description": {
        "description": "The description of the attribute.",
        "readOnly": true,
        "type": "string"
      },
      "multiValued": {
        "description": "Indicates whether an attribute contains multiple values.",
        "readOnly": true,
        "type": "boolean"
      },
      "mutability": {
        "description": "The circumstances under which an attribute can be defined or redefined. The default is \"readWrite\".",
        "enum": [
          "readWrite",
          "readOnly",
          "immutable",
          "writeOnly"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the attribute.",
        "readOnly": true,
        "type": "string"
      },
      "referenceTypes": {
        "description": "The list of SCIM resource types that may be referenced. Only applies when \"type\" is set to \"reference\".",
        "items": {
          "enum": [
            "User",
            "Group",
            "external",
            "uri"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "required": {
        "description": "Indicates whether an attribute is required.",
        "readOnly": true,
        "type": "boolean"
      },
      "returned": {
        "description": "The circumstances under which an attribute and its values are returned in response to a GET, PUT, POST, or PATCH request.",
        "enum": [
          "always",
          "never",
          "default",
          "request"
        ],
        "readOnly": true,
        "type": "string"
      },
      "subAttributes": {
        "description": "The list of subattributes for an attribute of the type \"complex\". Uses the same schema as \"attributes\".",
        "items": {
          "$ref": "#/definitions/ScimV2SchemaAttribute"
        },
        "readOnly": true,
        "type": "array"
      },
      "type": {
        "description": "The data type of the attribute.",
        "enum": [
          "string",
          "boolean",
          "decimal",
          "integer",
          "dateTime",
          "reference",
          "complex"
        ],
        "readOnly": true,
        "type": "string"
      },
      "uniqueness": {
        "description": "The method by which the service provider enforces the uniqueness of an attribute value. A server can reject a value by returning the HTTP response code 400 (Bad Request). A client can enforce uniqueness to a greater degree than the server provider enforces. For example, a client could make a value unique even though the server has \"uniqueness\" set to \"none\".",
        "enum": [
          "none",
          "server",
          "global"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimV2SchemaDefinition": {
    "description": "Defines a SCIM schema.",
    "properties": {
      "attributes": {
        "description": "The list of service provider attributes.",
        "items": {
          "$ref": "#/definitions/ScimV2SchemaAttribute"
        },
        "readOnly": true,
        "type": "array"
      },
      "description": {
        "description": "The description of the schema.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The ID of the SCIM resource. Set by the service provider. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readOnly\". \"returned\" is set to \"always\".",
        "readOnly": true,
        "type": "string"
      },
      "meta": {
        "$ref": "#/definitions/ScimMetadata",
        "description": "The metadata of the SCIM resource. Only \"location\" and \"resourceType\" are set for \"Schema\" resources.",
        "readOnly": true
      },
      "name": {
        "description": "The name of the schema.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScimV2SchemaListResponse": {
    "description": "Defines the list response for SCIM resource types.",
    "properties": {
      "Resources": {
        "description": "The list of requested resources.",
        "items": {
          "$ref": "#/definitions/ScimV2SchemaDefinition"
        },
        "readOnly": true,
        "type": "array"
      },
      "itemsPerPage": {
        "description": "The number of resources returned per page.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "startIndex": {
        "description": "The 1-based index of the first result returned by this request. Add this to \"itemsPerPage\" when requesting the next page of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "totalResults": {
        "description": "The total number of results.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScimV2User": {
    "description": "Defines a SCIM user.",
    "properties": {
      "active": {
        "description": "Indicates whether the user's administrative status is active.",
        "type": "boolean"
      },
      "displayName": {
        "description": "The display name of the user.",
        "type": "string"
      },
      "emails": {
        "description": "The list of the user's email addresses.",
        "items": {
          "$ref": "#/definitions/ScimEmail"
        },
        "type": "array"
      },
      "externalId": {
        "description": "The external ID of the user. Set by the provisioning client. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readWrite\".",
        "type": "string"
      },
      "groups": {
        "description": "The list of groups that the user is a member of. This list is immutable per SCIM RFC and may only be updated using the GROUPS resource endpoint.",
        "items": {
          "$ref": "#/definitions/ScimV2GroupReference"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The ID of the SCIM resource. Set by the service provider. \"caseExact\" is set to \"true\". \"mutability\" is set to \"readOnly\". \"returned\" is set to \"always\".",
        "readOnly": true,
        "type": "string"
      },
      "meta": {
        "$ref": "#/definitions/ScimMetadata",
        "description": "The metadata of the SCIM resource. Metadata is defined as immutable per SCIM RFC.",
        "readOnly": true
      },
      "password": {
        "description": "The new password for the Genesys Cloud user. Does not return an existing password. When creating a user, if a password is not supplied, then a password will be randomly generated that is 40 characters in length and contains five characters from each of the password policy groups.",
        "type": "string"
      },
      "phoneNumbers": {
        "description": "The list of the user's phone numbers.",
        "items": {
          "$ref": "#/definitions/ScimPhoneNumber"
        },
        "type": "array"
      },
      "roles": {
        "description": "The list of roles assigned to the user.",
        "items": {
          "$ref": "#/definitions/ScimUserRole"
        },
        "type": "array"
      },
      "schemas": {
        "description": "The list of supported schemas.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "title": {
        "description": "The user's title.",
        "type": "string"
      },
      "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "$ref": "#/definitions/ScimV2EnterpriseUser",
        "description": "The URI of the schema for the enterprise user."
      },
      "urn:ietf:params:scim:schemas:extension:genesys:purecloud:2.0:User": {
        "$ref": "#/definitions/ScimUserExtensions",
        "description": "The URI of the schema for the Genesys Cloud user."
      },
      "userName": {
        "description": "The user's Genesys Cloud email address. Must be unique.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScorableSurvey": {
    "properties": {
      "answers": {
        "$ref": "#/definitions/SurveyScoringSet"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "Pending",
          "Sent",
          "InProgress",
          "Finished",
          "OptOut",
          "Error",
          "Expired"
        ],
        "type": "string"
      },
      "surveyForm": {
        "$ref": "#/definitions/SurveyForm",
        "description": "Survey form used for this survey."
      }
    },
    "type": "object"
  },
  "ScoredAgent": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The agent"
      },
      "score": {
        "description": "Agent's score for the current conversation, from 0 - 100, higher being better",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScreenRecordingActiveSessions": {
    "properties": {
      "count": {
        "description": "Current concurrent active screen recordings count for organization",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScreenRecordingMetaData": {
    "properties": {
      "main": {
        "type": "boolean"
      },
      "mediaId": {
        "type": "string"
      },
      "originX": {
        "format": "int32",
        "type": "integer"
      },
      "originY": {
        "format": "int32",
        "type": "integer"
      },
      "primary": {
        "type": "boolean"
      },
      "screenId": {
        "type": "string"
      },
      "trackId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScreenRecordingMetaDataRequest": {
    "properties": {
      "metaData": {
        "items": {
          "$ref": "#/definitions/ScreenRecordingMetaData"
        },
        "type": "array"
      },
      "participantJid": {
        "type": "string"
      },
      "roomId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScreenRecordingSession": {
    "properties": {
      "communicationId": {
        "description": "The id of the communication that is being recorded on the conversation",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/Conversation"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      }
    },
    "type": "object"
  },
  "ScreenRecordingSessionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ScreenRecordingSession"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScreenRecordingSessionRequest": {
    "properties": {
      "archiveDate": {
        "description": "The screen recording session's archive date. Must be greater than 1 day from now if set. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "deleteDate": {
        "description": "The screen recording session's delete date. Must be greater than archiveDate if set, otherwise one day from now. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The screen recording session's state.  Values can be: 'stopped'",
        "enum": [
          "STOPPED"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScreenRecordingUserAuthenticatedInfo": {
    "properties": {
      "backgroundAssistantId": {
        "description": "Id of Genesys Cloud Background Assistant",
        "type": "string"
      }
    },
    "required": [
      "backgroundAssistantId"
    ],
    "type": "object"
  },
  "Screenshare": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "context": {
        "description": "The room id context (xmpp jid) for the conference session.",
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "peerCount": {
        "description": "The number of peer participants from the perspective of the participant in the conference.",
        "format": "int32",
        "type": "integer"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the screen share.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's call, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "sharing": {
        "description": "Indicates whether this participant is sharing their screen.",
        "type": "boolean"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "Script": {
    "properties": {
      "createdDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customActions": {
        "type": "object"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "features": {
        "type": "object"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "pages": {
        "items": {
          "$ref": "#/definitions/Page"
        },
        "type": "array"
      },
      "publishedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "startPageId": {
        "type": "string"
      },
      "startPageName": {
        "type": "string"
      },
      "variables": {
        "type": "object"
      },
      "versionDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "versionId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "ScriptEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Script"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ScrollPercentageEventTrigger": {
    "description": "Details about a scroll percentage event trigger",
    "properties": {
      "eventName": {
        "description": "Name of event triggered after scrolling to the specified percentage.",
        "type": "string"
      },
      "percentage": {
        "description": "Percentage of a webpage at which an event is triggered.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "eventName",
      "percentage"
    ],
    "type": "object"
  },
  "SdkLibrary": {
    "properties": {
      "name": {
        "description": "The name of the SDK.",
        "type": "string"
      },
      "version": {
        "description": "The version of the SDK.",
        "type": "string"
      }
    },
    "required": [
      "name",
      "version"
    ],
    "type": "object"
  },
  "SearchAggregation": {
    "properties": {
      "field": {
        "description": "The field used for aggregation",
        "type": "string"
      },
      "name": {
        "description": "The name of the aggregation. The response aggregation uses this name.",
        "type": "string"
      },
      "order": {
        "description": "The order in which aggregation results are sorted",
        "items": {
          "enum": [
            "VALUE_DESC",
            "VALUE_ASC",
            "COUNT_DESC",
            "COUNT_ASC"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "size": {
        "description": "The number aggregations results to return out of the entire result set",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "The type of aggregation to perform",
        "enum": [
          "COUNT",
          "SUM",
          "AVERAGE",
          "TERM",
          "CONTAINS",
          "STARTS_WITH",
          "ENDS_WITH"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value to use for aggregation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SearchAlternativeShiftTradesRequest": {
    "properties": {
      "agentIds": {
        "description": "The list of agent IDs for this alternative shift trade search. Either managementUnitIds or agentIds is required",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "managementUnitIds": {
        "description": "The list of management unit IDs for this alternative shift trade search. Either managementUnitIds or agentIds is required",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "addresses.email",
            "addresses.voice",
            "addresses.address",
            "addresses.voicemailEnabled",
            "chat.jabberId",
            "department",
            "email",
            "username",
            "siteId",
            "manager.id",
            "hr.employeeId",
            "integration",
            "groups.social.id",
            "groups.official.id",
            "groups.distribution.id",
            "state",
            "id",
            "languages.guid",
            "languages.name",
            "languages.namespace",
            "languages.proficiency",
            "name",
            "primaryContactInfo.voice",
            "primaryContactInfo.sms",
            "primaryContactInfo.email",
            "profileSkills",
            "queueMembership.added",
            "queueMembership.joined",
            "routingSkills.guid",
            "routingSkills.name",
            "routingSkills.namespace",
            "routingSkills.proficiency",
            "title",
            "divisionId",
            "teamId",
            "description",
            "notes",
            "addressFields.city",
            "addressFields.country",
            "addressFields.state",
            "addressFields.street1",
            "addressFields.street2",
            "addressFields.zipcode",
            "addressVerified",
            "emergencyNumber",
            "voicemailId",
            "ownerId",
            "ownerType",
            "deleted",
            "read",
            "callerAddress",
            "callerUser",
            "createdDate",
            "modifiedDate",
            "queueId",
            "wrapupCodeId",
            "body",
            "created",
            "fromUserJid",
            "targetJids"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/SearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "enum": [
          "EXACT",
          "CONTAINS",
          "STARTS_WITH",
          "REQUIRED_FIELDS",
          "RANGE",
          "DATE_RANGE",
          "LESS_THAN",
          "LESS_THAN_EQUAL_TO",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL_TO",
          "SIMPLE",
          "TERM",
          "TERMS",
          "QUERY_STRING",
          "MATCH_ALL",
          "REGEX"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SearchRequest": {
    "properties": {
      "aggregations": {
        "description": "Aggregation criteria",
        "items": {
          "$ref": "#/definitions/SearchAggregation"
        },
        "type": "array"
      },
      "expand": {
        "description": "Provides more details about a specified resource",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "The search criteria",
        "items": {
          "$ref": "#/definitions/SearchCriteria"
        },
        "type": "array"
      },
      "returnFields": {
        "description": "A List of strings.  Possible values are any field in the resource you are searching on.  The other option is to use ALL_FIELDS, when this is provided all fields in the resource will be returned in the search results.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      },
      "types": {
        "description": "Resource domain type to search",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "types"
    ],
    "type": "object"
  },
  "SearchShiftTradeResponse": {
    "properties": {
      "matchingReceivingShiftIds": {
        "description": "IDs of shifts which match the search criteria",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "preview": {
        "$ref": "#/definitions/ShiftTradePreviewResponse",
        "description": "A preview of what the shift trade would look like if matched"
      },
      "trade": {
        "$ref": "#/definitions/ShiftTradeResponse",
        "description": "A trade which matches search criteria"
      }
    },
    "type": "object"
  },
  "SearchShiftTradesRequest": {
    "properties": {
      "receivingScheduleId": {
        "description": "The ID of the schedule for which to search for available shift trades",
        "type": "string"
      },
      "receivingShiftIds": {
        "description": "The IDs of shifts that the receiving user would potentially be willing to trade. If empty, only returns one sided trades (pick up a shift)",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "receivingScheduleId"
    ],
    "type": "object"
  },
  "SearchShiftTradesResponse": {
    "properties": {
      "downloadUrl": {
        "description": "URL from which to fetch results for requests with a large result set. If populated, the downloaded data will conform to the same schema as would normally be returned, excepting downloaded data will never itself contain a downloadUrl",
        "type": "string"
      },
      "trades": {
        "description": "The shift trades that match the search criteria",
        "items": {
          "$ref": "#/definitions/SearchShiftTradeResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SearchSort": {
    "properties": {
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SearchUpdateRequest": {
    "properties": {
      "answered": {
        "description": "Mark the search as answered/unanswered",
        "type": "boolean"
      },
      "selectedAnswer": {
        "$ref": "#/definitions/SelectedAnswer",
        "description": "The selected search result chosen as the answer."
      },
      "sessionId": {
        "description": "The unique identifier of this session",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "answered"
    ],
    "type": "object"
  },
  "SecondaryPresence": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "Section": {
    "properties": {
      "fieldList": {
        "items": {
          "$ref": "#/definitions/FieldList"
        },
        "type": "array"
      },
      "instructionText": {
        "type": "string"
      },
      "key": {
        "type": "string"
      },
      "state": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SecureSession": {
    "properties": {
      "disconnect": {
        "description": "If true, disconnect the agent after creating the session",
        "type": "boolean"
      },
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The flow to execute securely"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceParticipantId": {
        "description": "Unique identifier for the participant initiating the secure session.",
        "type": "string"
      },
      "state": {
        "description": "The current state of a secure session",
        "enum": [
          "PENDING",
          "COMPLETED",
          "FAILED"
        ],
        "type": "string"
      },
      "userData": {
        "description": "Customer-provided data",
        "type": "string"
      }
    },
    "required": [
      "flow",
      "state"
    ],
    "type": "object"
  },
  "SecureSessionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SecureSession"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SecurityProfile": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "permissions": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SecurityProfileEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SecurityProfile"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Segment": {
    "properties": {
      "disconnectType": {
        "description": "A description of the event that disconnected the segment",
        "type": "string"
      },
      "endTime": {
        "description": "The timestamp when this segment ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "howEnded": {
        "description": "A description of the event that ended the segment.",
        "type": "string"
      },
      "startTime": {
        "description": "The timestamp when this segment began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "type": {
        "description": "The activity taking place for the participant in the segment.",
        "type": "string"
      }
    },
    "required": [
      "endTime",
      "startTime"
    ],
    "type": "object"
  },
  "SegmentAssignmentEvent": {
    "properties": {
      "segment": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The segment which was assigned."
      }
    },
    "required": [
      "segment"
    ],
    "type": "object"
  },
  "SegmentDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/SegmentDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "SegmentDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/SegmentDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/SegmentDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "SegmentDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "addressFrom",
          "addressTo",
          "agentAssistantId",
          "agentOwned",
          "ani",
          "authenticated",
          "bargedParticipantId",
          "callbackNumber",
          "callbackScheduledTime",
          "canonicalExternalContactId",
          "cleared",
          "coachedParticipantId",
          "conference",
          "deliveryStatus",
          "destinationAddress",
          "destinationConversationId",
          "detectedSpeechEnd",
          "detectedSpeechStart",
          "direction",
          "disconnectType",
          "dnis",
          "edgeId",
          "errorCode",
          "exitReason",
          "extendedDeliveryStatus",
          "externalContactId",
          "externalOrganizationId",
          "flaggedReason",
          "flowId",
          "flowName",
          "flowOutType",
          "flowOutcome",
          "flowOutcomeId",
          "flowOutcomeValue",
          "flowVersion",
          "groupId",
          "journeyActionId",
          "journeyActionMapId",
          "journeyCustomerId",
          "journeyCustomerIdType",
          "journeyCustomerSessionId",
          "mediaCount",
          "mediaType",
          "messageType",
          "monitoredParticipantId",
          "outboundCampaignId",
          "outboundContactId",
          "outboundContactListId",
          "participantName",
          "protocolCallId",
          "provider",
          "purpose",
          "queueId",
          "recording",
          "remote",
          "remoteNameDisplayable",
          "requestedLanguageId",
          "requestedRouting",
          "requestedRoutingSkillId",
          "scoredAgentId",
          "screenRecording",
          "scriptId",
          "segmentEnd",
          "segmentType",
          "sessionDnis",
          "sipResponseCode",
          "subject",
          "teamId",
          "transferTargetAddress",
          "transferTargetName",
          "transferType",
          "usedRouting",
          "userId",
          "wrapUpCode",
          "wrapUpNote"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "metric": {
        "description": "Left hand side for metric predicates",
        "enum": [
          "tSegmentDuration"
        ],
        "type": "string"
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "property": {
        "description": "Left hand side for property predicates",
        "type": "string"
      },
      "propertyType": {
        "description": "Left hand side for property predicates",
        "enum": [
          "bool",
          "integer",
          "real",
          "date",
          "string",
          "uuid"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension, metric, or property predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension, metric, or property predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "SegmentEstimateCount": {
    "properties": {
      "count": {
        "description": "Estimate count per segment.",
        "format": "int32",
        "type": "integer"
      },
      "segmentId": {
        "description": "ID of Segment.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SegmentListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/JourneySegment"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SegmentUrl": {
    "properties": {
      "recording": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The Recording Reference"
      },
      "url": {
        "description": "The pre-signed S3 URL of the transcript",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SelectedAnswer": {
    "properties": {
      "document": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The search result document chosen as the answer."
      }
    },
    "required": [
      "document"
    ],
    "type": "object"
  },
  "SelectedColumns": {
    "properties": {
      "columnName": {
        "description": "Indicates enum name of the column from the export view",
        "type": "string"
      },
      "columnOrder": {
        "description": "Indicates the order/position of the selected column",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SelectorEventTrigger": {
    "description": "Details about a selector event trigger",
    "properties": {
      "eventName": {
        "description": "Name of event triggered when element matching selector is interacted with.",
        "type": "string"
      },
      "selector": {
        "description": "Element that triggers event.",
        "type": "string"
      }
    },
    "required": [
      "eventName",
      "selector"
    ],
    "type": "object"
  },
  "SendAgentlessOutboundMessageRequest": {
    "properties": {
      "fromAddress": {
        "description": "The messaging address of the sender of the message. For an SMS messenger type, this must be a currently provisioned SMS phone number. For a WhatsApp messenger type use the provisioned WhatsApp integration’s ID",
        "type": "string"
      },
      "messagingTemplate": {
        "$ref": "#/definitions/MessagingTemplateRequest",
        "description": "The messaging template to use in the case of WhatsApp messenger type. This field is required when using WhatsApp messenger type"
      },
      "textBody": {
        "description": "The text of the message to send. This field is required in the case of SMS messenger type. Maximum character counts are: SMS - 765 characters, other channels - 2000 characters.",
        "type": "string"
      },
      "toAddress": {
        "description": "The messaging address of the recipient of the message. For an SMS messenger type, the phone number address must be in E.164 format. E.g. +13175555555 or +34234234234. For WhatsApp messenger type, use a WhatsApp ID of a phone number. E.g for a E.164 formatted phone number `+13175555555`, a WhatsApp ID would be 13175555555",
        "type": "string"
      },
      "toAddressMessengerType": {
        "description": "The recipient messaging address messenger type.",
        "enum": [
          "sms",
          "whatsapp",
          "open"
        ],
        "type": "string"
      },
      "useExistingActiveConversation": {
        "description": "Use an existing active conversation to send the agentless outbound message. Set this parameter to 'true' to use active conversation. Default value: false",
        "type": "boolean"
      }
    },
    "required": [
      "fromAddress",
      "toAddress",
      "toAddressMessengerType"
    ],
    "type": "object"
  },
  "SendAgentlessOutboundMessageResponse": {
    "properties": {
      "conversationId": {
        "description": "The identifier of the conversation.",
        "type": "string"
      },
      "fromAddress": {
        "description": "The sender of the message.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "$ref": "#/definitions/MessageData",
        "description": "Sent agentless outbound message in normalized format"
      },
      "messagingTemplate": {
        "$ref": "#/definitions/MessagingTemplateRequest",
        "description": "The messaging template sent"
      },
      "messengerType": {
        "description": "Type of messenger.",
        "enum": [
          "sms",
          "whatsapp",
          "open"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "textBody": {
        "description": "The body of the text message.",
        "type": "string"
      },
      "timestamp": {
        "description": "The time when the message was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "toAddress": {
        "description": "The recipient of the message.",
        "type": "string"
      },
      "useExistingActiveConversation": {
        "description": "Use an existing active conversation to send the agentless outbound message. Set this parameter to 'true' to use active conversation. Default value: false",
        "type": "boolean"
      },
      "user": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Details of the user created the job",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SendMessageBody": {
    "properties": {
      "mentions": {
        "description": "user ids to be notified",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "message": {
        "description": "The body of the message",
        "type": "string"
      },
      "threadId": {
        "description": "The thread id of the message",
        "type": "string"
      }
    },
    "required": [
      "message"
    ],
    "type": "object"
  },
  "SentimentFeedback": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The Id of user who created the sentiment feedback",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The Timestamp when sentiment feedback created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dialect": {
        "description": "The dialect for the given phrase, dialect format is {language}-{country} where language follows ISO 639-1 standard and country follows ISO 3166-1 alpha 2 standard",
        "example": "en-US",
        "type": "string"
      },
      "feedbackValue": {
        "description": "The sentiment feedback value for the given phrase",
        "enum": [
          "Neutral",
          "Positive",
          "Negative"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "phrase": {
        "description": "The phrase for which sentiment feedback is provided",
        "type": "string"
      }
    },
    "required": [
      "dialect",
      "feedbackValue",
      "phrase"
    ],
    "type": "object"
  },
  "SentimentFeedbackEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SentimentFeedback"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SequenceSchedule": {
    "properties": {
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "intervals": {
        "description": "A list of intervals during which to run the associated CampaignSequence.",
        "items": {
          "$ref": "#/definitions/ScheduleInterval"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sequence": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The CampaignSequence that this SequenceSchedule is for."
      },
      "timeZone": {
        "description": "The time zone for this SequenceSchedule. For example, Africa/Abidjan.",
        "example": "Africa/Abidjan",
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "intervals",
      "sequence",
      "timeZone"
    ],
    "type": "object"
  },
  "ServerDate": {
    "properties": {
      "currentDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ServiceGoalTemplate": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/BuAbandonRate",
        "description": "Abandon rate targets for this service goal template"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/BuAverageSpeedOfAnswer",
        "description": "Average speed of answer targets for this service goal template"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "impactOverride": {
        "$ref": "#/definitions/ServiceGoalTemplateImpactOverride",
        "description": "Settings controlling max percent increase and decrease of service goals for this service goal template"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the service goal template"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serviceLevel": {
        "$ref": "#/definitions/BuServiceLevel",
        "description": "Service level targets for this service goal template"
      }
    },
    "type": "object"
  },
  "ServiceGoalTemplateImpactOverride": {
    "properties": {
      "enabled": {
        "description": "Whether service goal overrides are enabled for this service goal template",
        "type": "boolean"
      },
      "impact": {
        "$ref": "#/definitions/WfmServiceGoalImpactSettings",
        "description": "Settings controlling max percent increase and decrease of service goals for this service goal template"
      }
    },
    "required": [
      "enabled",
      "impact"
    ],
    "type": "object"
  },
  "ServiceGoalTemplateList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ServiceGoalTemplate"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the service goal templates"
      }
    },
    "type": "object"
  },
  "ServiceGoalTemplateReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "ServiceLevel": {
    "properties": {
      "durationMs": {
        "description": "Service Level target in milliseconds.",
        "format": "int64",
        "type": "integer"
      },
      "percentage": {
        "description": "The desired Service Level. A value between 0 and 1.",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "Session": {
    "properties": {
      "app": {
        "$ref": "#/definitions/JourneyApp",
        "description": "Application that the customer is interacting with (for app sessions)."
      },
      "attributeLists": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttributeList"
        },
        "description": "List-type attributes projected from the session's event stream.",
        "type": "object"
      },
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "Attributes projected from the session's event stream.",
        "type": "object"
      },
      "authenticated": {
        "description": "Indicates whether or not the session is authenticated.",
        "type": "boolean"
      },
      "awayDate": {
        "description": "Timestamp indicating when the visitor should be considered as away. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "browser": {
        "$ref": "#/definitions/Browser",
        "description": "Customer's browser."
      },
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The conversation for this session.",
        "readOnly": true
      },
      "conversationChannels": {
        "description": "Represents the channels used for this conversation.",
        "items": {
          "$ref": "#/definitions/ConversationChannel"
        },
        "type": "array"
      },
      "conversationSubject": {
        "description": "The subject for the conversation, for example an email subject.",
        "type": "string"
      },
      "createdDate": {
        "description": "Timestamp indicating when the session was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerId": {
        "description": "Primary identifier of the customer in the source where the events for the session originate from.",
        "type": "string"
      },
      "customerIdType": {
        "description": "Type of source customer identifier (e.g. cookie, email, phone).",
        "type": "string"
      },
      "device": {
        "$ref": "#/definitions/Device",
        "description": "Customer's device."
      },
      "durationInSeconds": {
        "description": "Indicates how long the session has been active (valid for an individual device).",
        "format": "int32",
        "type": "integer"
      },
      "endedDate": {
        "description": "Timestamp indicating when the session was ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventCount": {
        "description": "The count of all events performed during the session.",
        "format": "int32",
        "type": "integer"
      },
      "externalContact": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The external contact associated with this session.",
        "readOnly": true
      },
      "externalId": {
        "description": "Unique identifier in the external system where the events for the session originate from.",
        "type": "string"
      },
      "externalUrl": {
        "description": "A URL that identifies an external system-of-record resource that may have more detailed information on the session.",
        "type": "string"
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "id": {
        "description": "The ID of the session.",
        "type": "string"
      },
      "idleDate": {
        "description": "Timestamp indicating when the visitor should be considered as idle. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "ipAddress": {
        "description": "Customer's IP address.",
        "type": "string"
      },
      "ipOrganization": {
        "description": "Customer's IP-based organization or ISP name.",
        "type": "string"
      },
      "lastAcdOutcome": {
        "description": "Last ACD outcome for the conversation.",
        "enum": [
          "Unknown",
          "Abandon",
          "Answered",
          "FlowOut"
        ],
        "type": "string"
      },
      "lastConnectedQueue": {
        "$ref": "#/definitions/ConnectedQueue",
        "description": "The last queue connected to this session."
      },
      "lastConnectedUser": {
        "$ref": "#/definitions/ConnectedUser",
        "description": "The last user connected to this session."
      },
      "lastEvent": {
        "$ref": "#/definitions/SessionLastEvent",
        "description": "Information about the most recent event in this session."
      },
      "lastPage": {
        "$ref": "#/definitions/JourneyPage",
        "description": "The webpage where the customer's last web interaction occurred."
      },
      "lastUserDisconnectType": {
        "description": "Disconnect reason for the last user connected to the conversation.",
        "enum": [
          "Unknown",
          "Endpoint",
          "Client",
          "System",
          "Transfer",
          "Error",
          "Peer",
          "Other",
          "Spam",
          "Timeout",
          "TransportFailure",
          "ConferenceTransfer",
          "ConsultTransfer",
          "ForwardTransfer",
          "NoAnswerTransfer",
          "NotAvailableTransfer",
          "Uncallable",
          "DoNotDisturbEndpoint",
          "DoNotDisturbTransfer"
        ],
        "type": "string"
      },
      "lastUserDisposition": {
        "$ref": "#/definitions/ConversationUserDisposition",
        "description": "The last user disposition connected to this session."
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Marketing / traffic source information."
      },
      "networkConnectivity": {
        "$ref": "#/definitions/NetworkConnectivity",
        "description": "Information relating to the device's network connectivity (for app sessions)."
      },
      "originatingDirection": {
        "description": "The original direction of the conversation.",
        "enum": [
          "Unknown",
          "Inbound",
          "Outbound"
        ],
        "type": "string"
      },
      "outcomeAchievements": {
        "description": "List of the outcome achievements by the customer in this session.",
        "items": {
          "$ref": "#/definitions/OutcomeAchievement"
        },
        "type": "array"
      },
      "pageviewCount": {
        "description": "The count of all pageviews performed during the session.",
        "format": "int32",
        "type": "integer"
      },
      "referrer": {
        "$ref": "#/definitions/Referrer",
        "description": "Identifies the page URL that originally generated the request for the current page being viewed."
      },
      "screenviewCount": {
        "description": "The count of all screenviews performed during the session.",
        "format": "int32",
        "type": "integer"
      },
      "sdkLibrary": {
        "$ref": "#/definitions/SdkLibrary",
        "description": "SDK library used to generate the events for the session (for app and web sessions)."
      },
      "searchTerms": {
        "description": "Search terms associated with the session.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "segmentAssignments": {
        "description": "List of the segment assignments to the customer in this session.",
        "items": {
          "$ref": "#/definitions/SessionSegmentAssignment"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortId": {
        "description": "Shortened numeric identifier of 4-6 digits.",
        "type": "string"
      },
      "type": {
        "description": "Session types indicate the type or category of sessions (e.g. web, app).",
        "type": "string"
      },
      "userAgentString": {
        "description": "String identifying the user agent.",
        "type": "string"
      }
    },
    "required": [
      "authenticated",
      "createdDate",
      "eventCount",
      "id",
      "lastEvent",
      "type"
    ],
    "type": "object"
  },
  "SessionEndDetails": {
    "properties": {
      "reason": {
        "description": "The reason for termination action. It can be due to an error or normal flow execution",
        "type": "string"
      },
      "type": {
        "description": "The type of termination handling that resulted in the session end. It can be either Exit or Disconnect",
        "enum": [
          "Disconnect",
          "Exit"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SessionLastEvent": {
    "properties": {
      "createdDate": {
        "description": "Timestamp indicating when the event was published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventName": {
        "description": "The name of the event.",
        "type": "string"
      },
      "id": {
        "description": "The ID of the last event.",
        "type": "string"
      }
    },
    "required": [
      "createdDate",
      "eventName",
      "id"
    ],
    "type": "object"
  },
  "SessionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Session"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SessionSegmentAssignment": {
    "properties": {
      "assignedDate": {
        "description": "Timestamp indicating when the segment was assigned. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "segment": {
        "$ref": "#/definitions/AssignedSegment",
        "description": "The segment that was assigned."
      }
    },
    "required": [
      "assignedDate",
      "segment"
    ],
    "type": "object"
  },
  "SessionsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/BotFlowSession"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SetContentTemplateActionSettings": {
    "properties": {
      "emailContentTemplateId": {
        "description": "A string of email contentTemplateId.",
        "type": "string"
      },
      "smsContentTemplateId": {
        "description": "A string of sms contentTemplateId.",
        "type": "string"
      }
    },
    "required": [
      "emailContentTemplateId",
      "smsContentTemplateId"
    ],
    "type": "object"
  },
  "SetRecordingState": {
    "properties": {
      "recordingState": {
        "description": "On update, 'paused' initiates a secure pause, 'active' resumes any paused recordings.",
        "enum": [
          "ACTIVE",
          "PAUSED",
          "NONE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SetSmsPhoneNumberActionSettings": {
    "properties": {
      "senderSmsPhoneNumber": {
        "description": "The string address for the sms phone number.",
        "type": "string"
      }
    },
    "required": [
      "senderSmsPhoneNumber"
    ],
    "type": "object"
  },
  "SetTimeOffIntegrationStatusRequest": {
    "properties": {
      "integrationStatus": {
        "description": "The integration status value for the time off request",
        "enum": [
          "Processing",
          "Error",
          "AutomaticallyComplete",
          "ManuallyComplete"
        ],
        "type": "string"
      }
    },
    "required": [
      "integrationStatus"
    ],
    "type": "object"
  },
  "SetTimeOffLimitValuesRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off limit"
      },
      "values": {
        "items": {
          "$ref": "#/definitions/TimeOffLimitRange"
        },
        "type": "array"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "SetUuiDataRequest": {
    "properties": {
      "uuiData": {
        "description": "The value of the uuiData to set.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SetWrapperDayOfWeek": {
    "properties": {
      "values": {
        "items": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "SetWrapperRoutePathRequest": {
    "properties": {
      "values": {
        "items": {
          "$ref": "#/definitions/RoutePathRequest"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "SetWrapperString": {
    "properties": {
      "values": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "SetWrapperSyncTimeOffProperty": {
    "properties": {
      "values": {
        "items": {
          "enum": [
            "PayableMinutes"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "SettingDirection": {
    "properties": {
      "inbound": {
        "description": "Status for the Inbound Direction",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "type": "string"
      },
      "outbound": {
        "description": "Status for the Outbound Direction",
        "enum": [
          "Enabled",
          "Disabled"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Settings": {
    "properties": {
      "allowCallbackQueueSelection": {
        "description": "Allow Callback Queue Selection",
        "type": "boolean"
      },
      "callbacksInheritRoutingFromInboundCall": {
        "description": "Inherit callback routing data from inbound calls",
        "type": "boolean"
      },
      "communicationBasedACW": {
        "description": "Communication Based ACW",
        "type": "boolean"
      },
      "completeAcwWhenAgentTransitionsOffline": {
        "description": "Complete ACW When Agent Transitions Offline",
        "type": "boolean"
      },
      "includeNonAgentConversationSummary": {
        "description": "Display communication summary",
        "type": "boolean"
      },
      "totalActiveCallback": {
        "description": "Exclude the 'interacting' duration from the handle calculations of callbacks",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "Share": {
    "properties": {
      "group": {
        "$ref": "#/definitions/Group"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "member": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "memberType": {
        "enum": [
          "USER",
          "GROUP",
          "PUBLIC"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sharedBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "sharedEntity": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "sharedEntityType": {
        "enum": [
          "DOCUMENT"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "ShareEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Share"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SharedEntity": {
    "properties": {
      "id": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SharedResponse": {
    "properties": {
      "document": {
        "$ref": "#/definitions/Document"
      },
      "downloadUri": {
        "format": "uri",
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "share": {
        "$ref": "#/definitions/Share"
      },
      "viewUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ShiftStartVariance": {
    "properties": {
      "applicableDays": {
        "description": "Days for which shift start variance is configured",
        "items": {
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "maxShiftStartVarianceMinutes": {
        "description": "Maximum variance in minutes across shift starts",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "applicableDays",
      "maxShiftStartVarianceMinutes"
    ],
    "type": "object"
  },
  "ShiftTradeActivityPreviewResponse": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code for this activity",
        "type": "string"
      },
      "countsAsPaidTime": {
        "description": "Whether this activity counts as paid time",
        "type": "boolean"
      },
      "lengthMinutes": {
        "description": "The length in minutes of this activity",
        "format": "int32",
        "type": "integer"
      },
      "payableMinutes": {
        "description": "Payable minutes for this activity",
        "format": "int32",
        "type": "integer"
      },
      "startDate": {
        "description": "The start date and time of this activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ShiftTradeActivityRule": {
    "properties": {
      "action": {
        "description": "The action this rule invokes",
        "enum": [
          "Replace",
          "DoNotAllowTrade",
          "KeepWithSchedule"
        ],
        "type": "string"
      },
      "activityCategory": {
        "description": "The activity category to which to apply this rule",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "activityCodeIdReplacement": {
        "description": "The activity code ID with which to replace activities belonging to the original category if applicable (required if action == Replace, must be a default activity code ID)",
        "type": "string"
      }
    },
    "required": [
      "action",
      "activityCategory"
    ],
    "type": "object"
  },
  "ShiftTradeListResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ShiftTradeResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ShiftTradeMatchReviewResponse": {
    "properties": {
      "adminReviewViolations": {
        "description": "Constraint violations associated with this shift trade which require shift trade administrator review",
        "items": {
          "$ref": "#/definitions/ShiftTradeMatchViolation"
        },
        "type": "array"
      },
      "initiatingUser": {
        "$ref": "#/definitions/ShiftTradeMatchReviewUserResponse",
        "description": "Details for the initiatingUser side of the shift trade"
      },
      "receivingUser": {
        "$ref": "#/definitions/ShiftTradeMatchReviewUserResponse",
        "description": "Details for the receivingUser side of the shift trade"
      },
      "violations": {
        "description": "Constraint violations introduced after being matched that would normally disallow a trade, but which can still be overridden by the shift trade administrator",
        "items": {
          "$ref": "#/definitions/ShiftTradeMatchViolation"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ShiftTradeMatchReviewUserResponse": {
    "properties": {
      "postTradeNewShift": {
        "$ref": "#/definitions/ShiftTradePreviewResponse",
        "description": "Preview of what the shift will look like for the opposite side of this trade after the match is approved"
      },
      "postTradeSchedulePaidMinutes": {
        "description": "The paid minutes on the week schedule for this user if the shift trade is approved",
        "format": "int32",
        "type": "integer"
      },
      "preTradeSchedulePaidMinutes": {
        "description": "The paid minutes on the week schedule for this user prior to the shift trade",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMaximumPaidMinutes": {
        "description": "The maximum weekly paid minutes for this user per the work plan tied to the agent schedule",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMinimumPaidMinutes": {
        "description": "The minimum weekly paid minutes for this user per the work plan tied to the agent schedule",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ShiftTradeMatchViolation": {
    "properties": {
      "params": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Clarifying user params for constructing helpful error messages",
        "type": "object"
      },
      "type": {
        "description": "The type of constraint violation",
        "enum": [
          "AgentCapabilityMismatch",
          "CannotTradeWithYourself",
          "DirectTradeForOtherUser",
          "InitiatingAgentScheduleDoesNotExist",
          "InitiatingShiftDisallowedActivityCategory",
          "InitiatingShiftDoesNotExist",
          "InitiatingShiftHasExternalActivities",
          "InitiatingShiftOverlapsExisting",
          "InitiatingShiftStartTooClose",
          "InitiatingShiftTimesChanged",
          "InitiatingWeeklyMaxPaidTime",
          "InitiatingWeeklyMinPaidTime",
          "InvalidState",
          "OneSidedTradeCreation",
          "ReceivingAgentScheduleDoesNotExist",
          "ReceivingShiftDisallowedActivityCategory",
          "ReceivingShiftDoesNotExist",
          "ReceivingShiftForOneSidedTrade",
          "ReceivingShiftHasExternalActivities",
          "ReceivingShiftMissingForTwoSidedTrade",
          "ReceivingShiftOutsideAcceptableIntervals",
          "ReceivingShiftOverlapsExisting",
          "ReceivingShiftStartTooClose",
          "ReceivingShiftTimesChanged",
          "ReceivingWeeklyMaxPaidTime",
          "ReceivingWeeklyMinPaidTime",
          "ShiftTradingNotEnabled",
          "UnequalPaidTime",
          "WeekScheduleDifferent",
          "WeekScheduleDoesNotExist",
          "WeekScheduleUnpublished"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ShiftTradeMatchesSummaryResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WeekShiftTradeMatchesSummaryResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ShiftTradeNotification": {
    "properties": {
      "initiatingShiftDate": {
        "description": "The start date and time of the initiating shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "initiatingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who initiated the shift trade"
      },
      "newState": {
        "description": "The new state of the shift trade, null if there was no change",
        "enum": [
          "Unmatched",
          "Matched",
          "Approved",
          "Denied",
          "Expired",
          "Canceled"
        ],
        "type": "string"
      },
      "oneSided": {
        "description": "Whether this is a one sided shift trade",
        "type": "boolean"
      },
      "receivingShiftDate": {
        "description": "The start date and time of the receiving shift (null if not matched or if one-sided. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "receivingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user on the receiving side of this shift trade (null if not matched)"
      },
      "tradeId": {
        "description": "The ID of the shift trade",
        "type": "string"
      },
      "weekDate": {
        "description": "The start date of the schedule with which this trade is associated",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ShiftTradePreviewResponse": {
    "properties": {
      "activities": {
        "description": "List of activities that will make up the new shift if this shift trade is approved",
        "items": {
          "$ref": "#/definitions/ShiftTradeActivityPreviewResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ShiftTradeResponse": {
    "properties": {
      "acceptableIntervals": {
        "description": "Time frames when the initiating user is willing to accept trades.  Empty means giving up the shift. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "items": {
          "description": "Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
          "type": "string"
        },
        "type": "array"
      },
      "expiration": {
        "description": "When this shift trade offer will expire if not matched or approved. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The ID of this shift trade",
        "type": "string"
      },
      "initiatingShiftEnd": {
        "description": "The end date/time of the shift being offered for trade. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "initiatingShiftId": {
        "description": "The ID of the shift offered for trade by the initiating user",
        "type": "string"
      },
      "initiatingShiftStart": {
        "description": "The start date/time of the shift being offered for trade. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "initiatingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who initiated this trade"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version data for this trade"
      },
      "oneSided": {
        "description": "Whether this is a one-sided shift trade (e.g. the initiating user is not asking for a shift in return)",
        "type": "boolean"
      },
      "receivingShiftEnd": {
        "description": "The end date/time of the receiving shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "receivingShiftId": {
        "description": "The ID of the shift being exchanged for the initiating shift, null if the receiving user is picking up a shift",
        "type": "string"
      },
      "receivingShiftStart": {
        "description": "The start date/time of the receiving shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "receivingUser": {
        "$ref": "#/definitions/UserReference",
        "description": "The user matching the trade, or if the state is not Matched, the user to whom the trade request was sent"
      },
      "reviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who reviewed this shift trade"
      },
      "reviewedDate": {
        "description": "The timestamp when this shift trade was reviewed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "schedule": {
        "$ref": "#/definitions/BuScheduleReferenceForMuRoute",
        "description": "A reference to the associated schedule"
      },
      "state": {
        "description": "The state of this shift trade",
        "enum": [
          "Unmatched",
          "Matched",
          "Approved",
          "Denied",
          "Expired",
          "Canceled"
        ],
        "type": "string"
      },
      "weekDate": {
        "description": "The start week date of the associated schedule in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ShiftTradeSettings": {
    "properties": {
      "activityCategoryRules": {
        "description": "Rules that specify what to do with activity categories that are part of a shift defined in a trade",
        "items": {
          "$ref": "#/definitions/ShiftTradeActivityRule"
        },
        "type": "array"
      },
      "allowDirectTrades": {
        "description": "Whether direct shift trades between agents are allowed",
        "type": "boolean"
      },
      "autoReview": {
        "description": "Whether automatic shift trade review is enabled according to the rules defined in for this management unit",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether shift trading is enabled for this management unit",
        "type": "boolean"
      },
      "minHoursInFuture": {
        "description": "The minimum number of hours in the future shift trades are allowed",
        "format": "int32",
        "type": "integer"
      },
      "oneSided": {
        "description": "How to handle one-sided shift trades",
        "enum": [
          "Allow",
          "Disallow",
          "AdminReview"
        ],
        "type": "string"
      },
      "requiresMatchingLanguages": {
        "description": "Whether to constrain shift trades to agents with matching languages",
        "type": "boolean"
      },
      "requiresMatchingPlanningGroups": {
        "description": "Whether to constrain shift trades to agents with matching planning groups",
        "type": "boolean"
      },
      "requiresMatchingQueues": {
        "description": "Whether to constrain shift trades to agents with matching queues",
        "type": "boolean"
      },
      "requiresMatchingSkills": {
        "description": "Whether to constrain shift trades to agents with matching skills",
        "type": "boolean"
      },
      "unequalPaid": {
        "description": "How to handle shift trades which involve unequal paid times",
        "enum": [
          "Allow",
          "Disallow",
          "AdminReview"
        ],
        "type": "string"
      },
      "weeklyMaxPaidViolations": {
        "description": "How to handle shift trades which result in violations of weekly maximum paid time constraint",
        "enum": [
          "Allow",
          "Disallow",
          "AdminReview"
        ],
        "type": "string"
      },
      "weeklyMinPaidViolations": {
        "description": "How to handle shift trades which result in violations of weekly minimum paid time constraint",
        "enum": [
          "Allow",
          "Disallow",
          "AdminReview"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "ShortTermForecastReference": {
    "properties": {
      "description": {
        "description": "The description of the short term forecast",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The weekDate of the short term forecast in yyyy-MM-dd format",
        "type": "string"
      }
    },
    "required": [
      "weekDate"
    ],
    "type": "object"
  },
  "ShortTermForecastingSettings": {
    "properties": {
      "defaultHistoryWeeks": {
        "description": "The number of weeks to consider by default when generating a volume forecast",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "ShrinkageOverride": {
    "properties": {
      "intervalIndex": {
        "description": "Index of shrinkage override interval. Starting index is 0 and indexes are based on 15 minute intervals for a 7 day week",
        "format": "int32",
        "type": "integer"
      },
      "shrinkagePercent": {
        "description": "Shrinkage override percent. Setting a null value will reset the interval to the default",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "intervalIndex"
    ],
    "type": "object"
  },
  "ShrinkageOverrides": {
    "properties": {
      "clear": {
        "description": "Set true to clear the shrinkage interval overrides",
        "type": "boolean"
      },
      "values": {
        "description": "List of interval shrinkage overrides",
        "items": {
          "$ref": "#/definitions/ShrinkageOverride"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Signature": {
    "properties": {
      "alwaysIncluded": {
        "description": "A toggle that defines if a signature is always included or only set on the first email in an email chain.",
        "type": "boolean"
      },
      "cannedResponseId": {
        "description": "The identifier referring to an email signature canned response.",
        "type": "string"
      },
      "enabled": {
        "description": "A toggle to enable the signature on email send.",
        "type": "boolean"
      },
      "inclusionType": {
        "description": "The configuration to indicate when the signature of a conversation has to be included",
        "enum": [
          "Draft",
          "Send",
          "SendOnce"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SignedData": {
    "properties": {
      "jwt": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SignedUrlResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "Url of the downloaded pcap file",
        "format": "url",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SingleWorkdayAveragePoints": {
    "properties": {
      "averagePoints": {
        "description": "The average points per agent earned within the division",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "dateWorkday": {
        "description": "Queried target workday. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The targeted division for the average points",
        "readOnly": true
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SingleWorkdayAverageValues": {
    "properties": {
      "dateWorkday": {
        "description": "The targeted workday for average value query. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The targeted division for the metrics",
        "readOnly": true
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      },
      "results": {
        "description": "The metric value averages",
        "items": {
          "$ref": "#/definitions/WorkdayValuesMetricItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "timezone": {
        "description": "The time zone used for aggregating metric values",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The targeted user for the metrics",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SipDownloadResponse": {
    "properties": {
      "documentId": {
        "description": "Document id of pcap file",
        "type": "string"
      },
      "downloadId": {
        "description": "unique id of the downloaded file",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SipSearchResult": {
    "properties": {
      "auth": {
        "description": "Auth token used for this search request",
        "type": "string"
      },
      "count": {
        "description": "Number of records returned",
        "format": "int32",
        "type": "integer"
      },
      "data": {
        "description": "Homer search data that is returned",
        "items": {
          "$ref": "#/definitions/HomerRecord"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "description": "Any messages returned from homer as part of the response",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sid": {
        "description": "Session id associated to the search request",
        "type": "string"
      },
      "status": {
        "description": "Status of the search request",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Site": {
    "properties": {
      "addresses": {
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "callerId": {
        "description": "The caller ID value for the site.",
        "type": "string"
      },
      "callerName": {
        "description": "The caller name for the site.",
        "type": "string"
      },
      "cloudProxyForceTurn": {
        "description": "Enables premises Edge Force Turn ",
        "type": "boolean"
      },
      "coreSite": {
        "description": "Is this site a core site",
        "type": "boolean"
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edgeAutoUpdateConfig": {
        "$ref": "#/definitions/EdgeAutoUpdateConfig",
        "description": "Recurrance rule, time zone, and start/end settings for automatic edge updates for this site"
      },
      "edges": {
        "items": {
          "$ref": "#/definitions/Edge"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "location": {
        "$ref": "#/definitions/LocationDefinition",
        "description": "Location"
      },
      "managed": {
        "type": "boolean"
      },
      "mediaModel": {
        "description": "Media model for the site",
        "enum": [
          "Premises",
          "Cloud"
        ],
        "type": "string"
      },
      "mediaRegions": {
        "description": "The ordered list of AWS regions through which media can stream.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "mediaRegionsUseLatencyBased": {
        "type": "boolean"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "ntpSettings": {
        "$ref": "#/definitions/NTPSettings",
        "description": "Network Time Protocol settings for the site"
      },
      "primaryEdges": {
        "items": {
          "$ref": "#/definitions/Edge"
        },
        "type": "array"
      },
      "primarySites": {
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "secondaryEdges": {
        "items": {
          "$ref": "#/definitions/Edge"
        },
        "type": "array"
      },
      "secondarySites": {
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "siteConnections": {
        "description": "The site connections",
        "items": {
          "$ref": "#/definitions/SiteConnection"
        },
        "type": "array"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "location",
      "name"
    ],
    "type": "object"
  },
  "SiteConnection": {
    "properties": {
      "coreSite": {
        "description": "The core site",
        "readOnly": true,
        "type": "boolean"
      },
      "edgeList": {
        "description": "All of the edges to which the site connects",
        "items": {
          "$ref": "#/definitions/ConnectedEdge"
        },
        "readOnly": true,
        "type": "array"
      },
      "enabled": {
        "description": "Indicates if the current site is linked",
        "type": "boolean"
      },
      "id": {
        "type": "string"
      },
      "managed": {
        "type": "boolean"
      },
      "mediaModel": {
        "description": "Media model for the current site.",
        "enum": [
          "Premises",
          "Cloud"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "primaryCoreSites": {
        "description": "List of site ids names and selfUris for the primary core sites",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "secondaryCoreSites": {
        "description": "List of site ids names and selfUris for the secondary core sites",
        "items": {
          "$ref": "#/definitions/DomainEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "type": {
        "description": "Connection method from site to site (Direct, Indirect, CloudProxy",
        "enum": [
          "Direct",
          "Indirect",
          "CloudProxy"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SiteConnections": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "siteConnections": {
        "description": "List of site connections",
        "items": {
          "$ref": "#/definitions/SiteConnection"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "SiteEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Site"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SkillEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RoutingSkill"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SkillGroup": {
    "properties": {
      "dateCreated": {
        "description": "Created date/time of the skill group. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date/time of the skill group. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Group description",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "memberCount": {
        "description": "Estimated number of members in this group. It can take some time for the count to be updated after expressions are changed.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillConditions": {
        "description": "Conditions for this group",
        "items": {
          "$ref": "#/definitions/SkillGroupCondition"
        },
        "type": "array"
      },
      "status": {
        "description": "Group's filling status",
        "enum": [
          "InProgress",
          "Complete"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name",
      "skillConditions"
    ],
    "type": "object"
  },
  "SkillGroupCondition": {
    "properties": {
      "languageSkillConditions": {
        "description": "Routing skill conditions that will be used for building the query",
        "items": {
          "$ref": "#/definitions/SkillGroupLanguageCondition"
        },
        "type": "array"
      },
      "operation": {
        "description": "Operator that will be applied to the conditions",
        "enum": [
          "And",
          "Not",
          "Or"
        ],
        "type": "string"
      },
      "routingSkillConditions": {
        "description": "Routing skill conditions that will be used for building the query",
        "items": {
          "$ref": "#/definitions/SkillGroupRoutingCondition"
        },
        "type": "array"
      }
    },
    "required": [
      "languageSkillConditions",
      "operation",
      "routingSkillConditions"
    ],
    "type": "object"
  },
  "SkillGroupDefinition": {
    "properties": {
      "dateCreated": {
        "description": "Created date/time of the skill group. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date/time of the skill group. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Group description",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "memberCount": {
        "description": "Estimated number of members in this group. It can take some time for the count to be updated after expressions are changed.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "SkillGroupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SkillGroupDefinition"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SkillGroupLanguageCondition": {
    "properties": {
      "childConditions": {
        "description": "Nested conditions to be applied to this skill condition",
        "items": {
          "$ref": "#/definitions/SkillGroupCondition"
        },
        "type": "array"
      },
      "comparator": {
        "description": "Comparator that will be applied to the proficiency",
        "enum": [
          "EqualTo",
          "NotEqualTo",
          "LessThan",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThanOrEqualTo"
        ],
        "type": "string"
      },
      "languageSkill": {
        "description": "The language skill to be used in the skill condition query",
        "example": "English-Written",
        "type": "string"
      },
      "proficiency": {
        "description": "The skill proficiency that will be used for the language skill. Integer range 0-5",
        "example": 5,
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "comparator",
      "languageSkill",
      "proficiency"
    ],
    "type": "object"
  },
  "SkillGroupMemberDivisionList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Division"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SkillGroupMemberDivisions": {
    "properties": {
      "addDivisionIds": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "removeDivisionIds": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SkillGroupMemberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserReferenceWithName"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SkillGroupRoutingCondition": {
    "properties": {
      "childConditions": {
        "description": "Nested conditions to be applied to this skill condition",
        "items": {
          "$ref": "#/definitions/SkillGroupCondition"
        },
        "type": "array"
      },
      "comparator": {
        "description": "Comparator that will be applied to the proficiency",
        "enum": [
          "EqualTo",
          "NotEqualTo",
          "LessThan",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThanOrEqualTo"
        ],
        "type": "string"
      },
      "proficiency": {
        "description": "The skill proficiency that will be used for the routing skill. Integer range 0-5",
        "example": 5,
        "format": "int32",
        "type": "integer"
      },
      "routingSkill": {
        "description": "The routing skill to be used in the skill condition query",
        "type": "string"
      }
    },
    "required": [
      "comparator",
      "proficiency",
      "routingSkill"
    ],
    "type": "object"
  },
  "SkillGroupWithMemberDivisions": {
    "properties": {
      "dateCreated": {
        "description": "Created date/time of the skill group. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date/time of the skill group. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Group description",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "memberCount": {
        "description": "Estimated number of members in this group. It can take some time for the count to be updated after expressions are changed.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "memberDivisions": {
        "description": "Member divisions for this skill group",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillConditions": {
        "description": "Conditions for this group",
        "items": {
          "$ref": "#/definitions/SkillGroupCondition"
        },
        "type": "array"
      },
      "status": {
        "description": "Group's filling status",
        "enum": [
          "InProgress",
          "Complete"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name",
      "skillConditions"
    ],
    "type": "object"
  },
  "SkillsToRemove": {
    "properties": {
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SmsAddress": {
    "properties": {
      "city": {
        "description": "The city in which this address is in",
        "type": "string"
      },
      "countryCode": {
        "description": "The ISO country code of this address",
        "type": "string"
      },
      "id": {
        "description": "The id of this address.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "postalCode": {
        "description": "The postal code this address is in",
        "type": "string"
      },
      "region": {
        "description": "The state or region this address is in",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "street": {
        "description": "The number and street address where this address is located.",
        "type": "string"
      },
      "validated": {
        "description": "In some countries, addresses are validated to comply with local regulation. In those countries, if the address you provide does not pass validation, it will not be accepted as an Address. This value will be true if the Address has been validated, or false for countries that don't require validation or if the Address is non-compliant.",
        "readOnly": true,
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "SmsAddressEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SmsAddress"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SmsAddressProvision": {
    "properties": {
      "autoCorrectAddress": {
        "description": "This is used when the address is created. If the value is not set or true, then the system will, if necessary, auto-correct the address you provide. Set this value to false if the system should not auto-correct the address.",
        "type": "boolean"
      },
      "city": {
        "description": "The city in which this address is in",
        "type": "string"
      },
      "countryCode": {
        "description": "The ISO country code of this address",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "Name associated with this address",
        "type": "string"
      },
      "postalCode": {
        "description": "The postal code this address is in",
        "type": "string"
      },
      "region": {
        "description": "The state or region this address is in",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "street": {
        "description": "The number and street address where this address is located.",
        "type": "string"
      }
    },
    "required": [
      "city",
      "countryCode",
      "name",
      "postalCode",
      "region",
      "street"
    ],
    "type": "object"
  },
  "SmsAvailablePhoneNumber": {
    "properties": {
      "addressRequirement": {
        "description": "The address requirement needed for provisioning this number. If there is a requirement, the address must be the residence or place of business of the individual or entity using the phone number.",
        "enum": [
          "none",
          "any",
          "local",
          "foreign"
        ],
        "type": "string"
      },
      "capabilities": {
        "description": "The capabilities of the phone number available for provisioning.",
        "items": {
          "enum": [
            "sms",
            "mms",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "city": {
        "description": "The city the phone number is associated with.",
        "type": "string"
      },
      "countryCode": {
        "description": "The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "phoneNumber": {
        "description": "A phone number available for provisioning in E.164 format. E.g. +13175555555 or +34234234234",
        "type": "string"
      },
      "phoneNumberType": {
        "description": "The type of phone number available for provisioning.",
        "enum": [
          "local",
          "mobile",
          "tollfree",
          "shortcode",
          "alphanumeric"
        ],
        "type": "string"
      },
      "region": {
        "description": "The region/province/state the phone number is associated with.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SmsConfig": {
    "properties": {
      "contentTemplate": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The content template used to formulate the message to send to the contact."
      },
      "messageColumn": {
        "description": "The Contact List column specifying the message to send to the contact.",
        "type": "string"
      },
      "phoneColumn": {
        "description": "The Contact List column specifying the phone number to send a message to.",
        "type": "string"
      },
      "senderSmsPhoneNumber": {
        "$ref": "#/definitions/SmsPhoneNumberRef",
        "description": "A reference to the SMS Phone Number that will be used as the sender of a message."
      }
    },
    "required": [
      "messageColumn",
      "phoneColumn",
      "senderSmsPhoneNumber"
    ],
    "type": "object"
  },
  "SmsPhoneNumber": {
    "properties": {
      "addressId": {
        "$ref": "#/definitions/SmsAddress",
        "description": "The id of an address attached to this phone number."
      },
      "autoRenewable": {
        "description": "Renewal time period of this phone number, if the phoneNumberType is shortcode.",
        "enum": [
          "Quarterly"
        ],
        "type": "string"
      },
      "cancellationDate": {
        "description": "Contract end date of this phone number, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "capabilities": {
        "description": "The capabilities of the phone number available for provisioning.",
        "items": {
          "enum": [
            "sms",
            "mms",
            "voice"
          ],
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "compliance": {
        "$ref": "#/definitions/Compliance",
        "description": "Compliance configuration for short codes, including help, stop and opt in."
      },
      "country": {
        "description": "Localized country name for the country code this phone number belongs too",
        "type": "string"
      },
      "countryCode": {
        "description": "The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.",
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/User",
        "description": "User that provisioned this phone number"
      },
      "dateCreated": {
        "description": "Date this phone number was provisioned. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this phone number was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integration": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Genesys Cloud integration this phone number belongs to."
      },
      "modifiedBy": {
        "$ref": "#/definitions/User",
        "description": "User that last modified this phone number"
      },
      "name": {
        "type": "string"
      },
      "phoneNumber": {
        "description": "A phone number provisioned for SMS communications.",
        "type": "string"
      },
      "phoneNumberStatus": {
        "description": "Status of the provisioned phone number.",
        "enum": [
          "INVALID",
          "ACTIVE",
          "PORTING",
          "PENDING",
          "PENDING_CANCELLATION",
          "INITIATED"
        ],
        "type": "string"
      },
      "phoneNumberType": {
        "description": "Type of the phone number provisioned.",
        "enum": [
          "local",
          "mobile",
          "tollfree",
          "shortcode",
          "alphanumeric"
        ],
        "readOnly": true,
        "type": "string"
      },
      "provisionedThroughPureCloud": {
        "description": "Is set to false, if the phone number is provisioned through a SMS provider, outside of PureCloud",
        "type": "boolean"
      },
      "provisioningStatus": {
        "$ref": "#/definitions/SmsProvisioningStatus",
        "description": "Status of latest asynchronous provisioning action"
      },
      "purchaseDate": {
        "description": "Date this phone number was purchased, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "renewalDate": {
        "description": "Contract renewal date of this phone number, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortCodeBillingType": {
        "description": "BillingType of this phone number, if the phoneNumberType is shortcode.",
        "enum": [
          "Basic",
          "Vanity"
        ],
        "type": "string"
      },
      "supportsMms": {
        "description": "Set to true if this phone number has the capability to support MMS",
        "type": "boolean"
      },
      "supportsSms": {
        "description": "Set to true if this phone number has the capability to support SMS",
        "type": "boolean"
      },
      "supportsVoice": {
        "description": "Set to true if this phone number has the capability to support voice",
        "type": "boolean"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "phoneNumber",
      "version"
    ],
    "type": "object"
  },
  "SmsPhoneNumberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SmsPhoneNumber"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SmsPhoneNumberImport": {
    "properties": {
      "compliance": {
        "$ref": "#/definitions/Compliance",
        "description": "Compliance configuration for short codes, including help, stop and opt in."
      },
      "countryCode": {
        "description": "The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationId": {
        "description": "The id of the Genesys Cloud integration this phone number belongs to.",
        "type": "string"
      },
      "phoneNumber": {
        "description": "A phone number to be used for SMS communications. E.g. +13175555555 or +34234234234",
        "type": "string"
      },
      "phoneNumberType": {
        "description": "Type of the phone number provisioned.",
        "enum": [
          "local",
          "mobile",
          "tollfree",
          "shortcode"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "countryCode",
      "integrationId",
      "phoneNumber",
      "phoneNumberType"
    ],
    "type": "object"
  },
  "SmsPhoneNumberProvision": {
    "properties": {
      "addressId": {
        "description": "The id of an address added on your account. Due to regulatory requirements in some countries, an address may be required when provisioning a sms number. In those cases you should provide the provisioned sms address id here",
        "type": "string"
      },
      "countryCode": {
        "description": "The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "phoneNumber": {
        "description": "A phone number to be used for SMS communications. E.g. +13175555555 or +34234234234",
        "type": "string"
      },
      "phoneNumberType": {
        "description": "Type of the phone number provisioned.",
        "enum": [
          "local",
          "mobile",
          "tollfree",
          "shortcode"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "countryCode",
      "phoneNumber",
      "phoneNumberType"
    ],
    "type": "object"
  },
  "SmsPhoneNumberRef": {
    "properties": {
      "phoneNumber": {
        "description": "A phone number provisioned for SMS communications in E.164 format. E.g. +13175555555 or +34234234234",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "required": [
      "phoneNumber"
    ],
    "type": "object"
  },
  "SmsProvisioningStatus": {
    "properties": {
      "action": {
        "description": "Provisioning action",
        "enum": [
          "Unknown",
          "Create",
          "Update",
          "Delete"
        ],
        "type": "string"
      },
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Any error associated with a Failed state"
      },
      "state": {
        "description": "Provisioning state",
        "enum": [
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      },
      "version": {
        "description": "The phone number version associated with the provisioning action",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SocialExpression": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "held": {
        "description": "True if this call is held and the person on this side hears silence.",
        "type": "boolean"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "previewText": {
        "description": "The text preview of the communication contents",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the social expression.",
        "type": "string"
      },
      "recordingId": {
        "description": "A globally unique identifier for the recording associated with this chat.",
        "type": "string"
      },
      "scriptId": {
        "description": "The UUID of the script to use.",
        "type": "string"
      },
      "segments": {
        "description": "The time line of the participant's chat, divided into activity segments.",
        "items": {
          "$ref": "#/definitions/Segment"
        },
        "type": "array"
      },
      "socialMediaHub": {
        "description": "The social network of the communication",
        "type": "string"
      },
      "socialMediaId": {
        "description": "A globally unique identifier for the social media.",
        "type": "string"
      },
      "socialUserName": {
        "description": "The user name for the communication.",
        "type": "string"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "startHoldTime": {
        "description": "The timestamp the chat was placed on hold in the cloud clock if the chat is currently on hold. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "SocialHandle": {
    "properties": {
      "type": {
        "enum": [
          "TWITTER"
        ],
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SortItem": {
    "properties": {
      "ascending": {
        "type": "boolean"
      },
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Source": {
    "properties": {
      "deactivated": {
        "type": "boolean"
      },
      "description": {
        "description": "The description of the source",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the source",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of source",
        "enum": [
          "System",
          "User"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "SourceConfiguration": {
    "properties": {
      "interactionId": {
        "description": "The customer's unique external identifier associated with the conversation that comes from the external platform.",
        "type": "string"
      },
      "sourceId": {
        "description": "Identifies the external platform that is the source of the conversation.",
        "type": "string"
      },
      "tagId": {
        "description": "The customer's external identifier or tag associated with the conversation. If set, it will be used to tag the conversation.",
        "type": "string"
      }
    },
    "required": [
      "interactionId",
      "sourceId"
    ],
    "type": "object"
  },
  "SourceEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of the source entity",
        "enum": [
          "ThankYou",
          "Congratulations",
          "HighPerformance",
          "CompanyValues"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SourceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Source"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SourcePlanningGroupRequest": {
    "properties": {
      "id": {
        "description": "The ID of the planning group",
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the planning group"
      }
    },
    "required": [
      "id",
      "metadata"
    ],
    "type": "object"
  },
  "SpeechTextAnalyticsSettingsRequest": {
    "properties": {
      "agentEmpathyEnabled": {
        "description": "Setting to enable/disable Agent Empathy setting",
        "type": "boolean"
      },
      "defaultProgramId": {
        "description": "Setting to choose name for the default program for topic detection",
        "type": "string"
      },
      "expectedDialects": {
        "description": "Setting to choose expected dialects",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "textAnalyticsEnabled": {
        "description": "Setting to enable/disable text analytics",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "SpeechTextAnalyticsSettingsResponse": {
    "properties": {
      "agentEmpathyEnabled": {
        "description": "Setting to enable/disable Agent Empathy setting",
        "type": "boolean"
      },
      "defaultProgram": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Setting to choose name for the default program for topic detection"
      },
      "expectedDialects": {
        "description": "Setting to choose expected dialects",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "textAnalyticsEnabled": {
        "description": "Setting to enable/disable text analytics",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "SplittingInformation": {
    "properties": {
      "createRemainderContactList": {
        "description": "Whether to create remainder contact list",
        "type": "boolean"
      },
      "criteria": {
        "description": "The splitting criteria type",
        "enum": [
          "Percentage",
          "Quantity",
          "Column",
          "Custom"
        ],
        "type": "string"
      },
      "criteriaValue": {
        "description": "The criteria value for the specified criteria type",
        "type": "string"
      },
      "useWaterfallRule": {
        "description": "Whether to use waterfall rule",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "StaCategory": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The user who created the record"
      },
      "criteria": {
        "$ref": "#/definitions/Operand",
        "description": "A collection of conditions joined together by logical operation to provide more refined filtering of conversations"
      },
      "dateCreated": {
        "description": "The creation date of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The last modified date of the record. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of the category",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "interactionType": {
        "description": "The type of interaction the category will apply to",
        "enum": [
          "Voice",
          "Digital",
          "All"
        ],
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The user who last modified the record"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "criteria",
      "interactionType"
    ],
    "type": "object"
  },
  "StaffingGroupListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/StaffingGroupResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "StaffingGroupReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "StaffingGroupResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The ID of the management unit to which the staffing group users belong. If undefined the staffing group can include users from the entire business unit"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the staffing group"
      },
      "name": {
        "description": "The name of the staffing group",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "users": {
        "description": "The list of users that belong to the staffing group",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "metadata",
      "name"
    ],
    "type": "object"
  },
  "StaffingRequirementsPlanningGroupData": {
    "properties": {
      "planningGroupId": {
        "description": "The ID of the planning group to which this data applies",
        "type": "string"
      },
      "staffingRequirementsPerInterval": {
        "description": "Staffing requirements per interval for this week forecast",
        "items": {
          "format": "double",
          "type": "number"
        },
        "type": "array"
      }
    },
    "required": [
      "planningGroupId",
      "staffingRequirementsPerInterval"
    ],
    "type": "object"
  },
  "StarrableDivision": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Station": {
    "properties": {
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "lineAppearanceId": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "primaryEdge": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "secondaryEdge": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "AVAILABLE",
          "ASSOCIATED"
        ],
        "type": "string"
      },
      "type": {
        "type": "string"
      },
      "userId": {
        "description": "The Id of the user currently logged in and associated with the station.",
        "type": "string"
      },
      "webRtcCallAppearances": {
        "description": "The number of call appearances on the station.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "webRtcForceTurn": {
        "description": "Whether the station is configured to require TURN for routing WebRTC calls. Empty if station type is not inin_webrtc_softphone.",
        "readOnly": true,
        "type": "boolean"
      },
      "webRtcMediaDscp": {
        "description": "The default or configured value of media dscp for the station. Empty if station type is not inin_webrtc_softphone.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "webRtcPersistentEnabled": {
        "description": "The default or configured value of persistent connection setting for the station. Empty if station type is not inin_webrtc_softphone.",
        "readOnly": true,
        "type": "boolean"
      },
      "webRtcRequireMediaHelper": {
        "description": "True when the media helper required.",
        "readOnly": true,
        "type": "boolean"
      },
      "webRtcUserId": {
        "description": "The Id of the user configured for the station if it is of type inin_webrtc_softphone. Empty if station type is not inin_webrtc_softphone.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "StationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Station"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "StatisticalResponse": {
    "properties": {
      "interval": {
        "type": "string"
      },
      "metrics": {
        "items": {
          "$ref": "#/definitions/AggregateMetricData"
        },
        "type": "array"
      },
      "views": {
        "items": {
          "$ref": "#/definitions/AggregateViewData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "StatisticalSummary": {
    "properties": {
      "count": {
        "format": "int64",
        "type": "integer"
      },
      "countNegative": {
        "format": "int64",
        "type": "integer"
      },
      "countPositive": {
        "format": "int64",
        "type": "integer"
      },
      "current": {
        "type": "number"
      },
      "denominator": {
        "type": "number"
      },
      "max": {
        "type": "number"
      },
      "min": {
        "type": "number"
      },
      "numerator": {
        "type": "number"
      },
      "p95": {
        "format": "int64",
        "type": "integer"
      },
      "p99": {
        "format": "int64",
        "type": "integer"
      },
      "ratio": {
        "type": "number"
      },
      "sum": {
        "type": "number"
      },
      "target": {
        "type": "number"
      }
    },
    "type": "object"
  },
  "StatusChange": {
    "properties": {
      "dateStatusChanged": {
        "description": "The date of this status change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "description": "A short message describing the status change",
        "readOnly": true,
        "type": "string"
      },
      "namespace": {
        "description": "The namespace for the status change",
        "enum": [
          "agent.assistant",
          "analytics.alerting",
          "analytics",
          "analytics.realtime",
          "analytics.reporting.settings",
          "architect",
          "audiohook",
          "audit",
          "auth.api",
          "authorization",
          "automation.testing",
          "bots",
          "bots.voice",
          "callback",
          "cobrowse",
          "content.management",
          "conversation",
          "dataactions",
          "datatables",
          "directory",
          "email",
          "employee.engagement",
          "event.orchestration",
          "external.contacts",
          "gcv",
          "gdpr",
          "groups",
          "historical.adherence",
          "infrastructureascode",
          "integrations",
          "intent.miner",
          "internal.messaging",
          "journey",
          "knowledge",
          "language.understanding",
          "learning",
          "limit.registry",
          "marketplace",
          "media.communications",
          "messaging",
          "notifications",
          "onboarding",
          "outbound",
          "platform.api",
          "predictive.routing",
          "presence",
          "quality",
          "recording",
          "response.management",
          "routing",
          "scim",
          "search",
          "secondary.automation.testing",
          "skills",
          "social.media",
          "speech.and.text.analytics",
          "speech.integration",
          "supportability",
          "task.management",
          "telephony.configuration",
          "usage",
          "users",
          "web.deployments",
          "web.messaging",
          "webchat",
          "webhooks",
          "workforce.management.forecast",
          "workforce.management",
          "system"
        ],
        "readOnly": true,
        "type": "string"
      },
      "previousStatus": {
        "description": "The status the change request transitioned from",
        "enum": [
          "Approved",
          "Rejected",
          "Rollback",
          "Pending",
          "Open",
          "SecondaryApprovalNamespacesAdded",
          "ReviewerApproved",
          "ReviewerRejected",
          "ReviewerRollback",
          "ImplementingChange",
          "ChangeImplemented",
          "ImplementingRollback",
          "RollbackImplemented"
        ],
        "readOnly": true,
        "type": "string"
      },
      "rejectReason": {
        "description": "The reason for rejecting the limit override request",
        "enum": [
          "AlternativeExists",
          "IncreaseNotRequired",
          "PlatformMisuse",
          "PlatformStability",
          "OtherReason"
        ],
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status the change request transitioned to",
        "enum": [
          "Approved",
          "Rejected",
          "Rollback",
          "Pending",
          "Open",
          "SecondaryApprovalNamespacesAdded",
          "ReviewerApproved",
          "ReviewerRejected",
          "ReviewerRollback",
          "ImplementingChange",
          "ChangeImplemented",
          "ImplementingRollback",
          "RollbackImplemented"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "StopSettings": {
    "properties": {
      "keyword": {
        "description": "List of keywords for compliance",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "response": {
        "$ref": "#/definitions/ComplianceResponse",
        "description": "The response configuration for the keywords"
      }
    },
    "required": [
      "keyword",
      "response"
    ],
    "type": "object"
  },
  "StorySetting": {
    "properties": {
      "mention": {
        "$ref": "#/definitions/InboundOnlySetting",
        "description": "Setting relating to Story Mentions"
      },
      "reply": {
        "$ref": "#/definitions/InboundOnlySetting",
        "description": "Setting relating to Story Replies"
      }
    },
    "type": "object"
  },
  "StreetAddress": {
    "properties": {
      "A1": {
        "description": "State or Province",
        "type": "string"
      },
      "A3": {
        "description": "City or township",
        "type": "string"
      },
      "HNO": {
        "description": "House Number",
        "type": "string"
      },
      "LOC": {
        "description": "extra location info like suite 300",
        "type": "string"
      },
      "NAM": {
        "description": "Name of the customer",
        "type": "string"
      },
      "PC": {
        "description": "Postal code",
        "type": "string"
      },
      "RD": {
        "description": "Number and street",
        "type": "string"
      },
      "country": {
        "description": "2 Letter Country code, like US or GB",
        "type": "string"
      }
    },
    "required": [
      "A1",
      "A3",
      "HNO",
      "PC",
      "RD",
      "country"
    ],
    "type": "object"
  },
  "SttEngineEntity": {
    "properties": {
      "grammarBased": {
        "description": "The STT engine is intended to be used for Grammars",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SttEngineEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SttEngineEntity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SubjectDivisionGrants": {
    "properties": {
      "divisions": {
        "items": {
          "$ref": "#/definitions/Division"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "enum": [
          "PC_USER",
          "PC_GROUP",
          "PC_OAUTH_CLIENT",
          "PC_TRUSTEE_USER",
          "PC_TRUSTEE_GROUP",
          "UNKNOWN"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "SubjectDivisionGrantsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SubjectDivisionGrants"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SubjectDivisions": {
    "properties": {
      "divisionIds": {
        "description": "A collection of division IDs to associate with the given subjects",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "subjectIds": {
        "description": "A collection of subject IDs to associate with the given divisions",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "divisionIds",
      "subjectIds"
    ],
    "type": "object"
  },
  "SubscriberResponse": {
    "properties": {
      "messageReturned": {
        "description": "Suggested valid addresses",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "status": {
        "description": "http status",
        "type": "string"
      }
    },
    "required": [
      "status"
    ],
    "type": "object"
  },
  "Subscription": {
    "properties": {
      "id": {
        "description": "The subscription id",
        "type": "string"
      },
      "topic": {
        "description": "Notification topic",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SubscriptionOverviewUsage": {
    "properties": {
      "bundleQuantity": {
        "description": "Quantity multiplier for this charge",
        "type": "string"
      },
      "grouping": {
        "description": "UI grouping key",
        "type": "string"
      },
      "isCancellable": {
        "description": "Indicates whether the item is cancellable",
        "type": "boolean"
      },
      "isThirdParty": {
        "description": "A charge from a third party entity",
        "type": "boolean"
      },
      "name": {
        "description": "Product charge name",
        "type": "string"
      },
      "overagePrice": {
        "description": "Price for usage / overage charge",
        "type": "string"
      },
      "partNumber": {
        "description": "Product part number",
        "type": "string"
      },
      "prepayPrice": {
        "description": "Price for prepay charge",
        "type": "string"
      },
      "prepayQuantity": {
        "description": "Items prepaid for specified period",
        "type": "string"
      },
      "unitOfMeasureType": {
        "description": "UI unit of measure",
        "type": "string"
      },
      "usageNotes": {
        "description": "Notes about the usage/charge item",
        "type": "string"
      },
      "usageQuantity": {
        "description": "Usage count for specified period",
        "type": "string"
      }
    },
    "required": [
      "grouping",
      "name",
      "partNumber",
      "prepayQuantity",
      "unitOfMeasureType",
      "usageQuantity"
    ],
    "type": "object"
  },
  "SuggestSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/SuggestSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SuggestSearchRequest": {
    "properties": {
      "expand": {
        "description": "Provides more details about a specified resource",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "query": {
        "description": "Suggest query",
        "items": {
          "$ref": "#/definitions/SuggestSearchCriteria"
        },
        "type": "array"
      },
      "types": {
        "description": "Resource domain type to search",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "query",
      "types"
    ],
    "type": "object"
  },
  "Suggestion": {
    "properties": {
      "answerRecordId": {
        "description": "The ID of the knowledge search that provided the suggestion.",
        "readOnly": true,
        "type": "string"
      },
      "article": {
        "$ref": "#/definitions/Article",
        "description": "The article from the knowledgebase that was provided as the suggestion.",
        "readOnly": true
      },
      "assistant": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The assistant that was used to provide the suggestions.",
        "readOnly": true
      },
      "cannedResponse": {
        "$ref": "#/definitions/SuggestionCannedResponse",
        "description": "The suggested canned response that was provided as the suggestion.",
        "readOnly": true
      },
      "context": {
        "$ref": "#/definitions/SuggestionContext",
        "description": "The conversation context in which the suggestion was raised.",
        "readOnly": true
      },
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The conversation that the suggestions correspond to.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date when the suggestion was created. For example: yyyy-MM-ddTHH:mm:ss.SSZ. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "example": "2020-09-25T11:57:02Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "faq": {
        "$ref": "#/definitions/Faq",
        "description": "The Faq from the knowledgebase that was provided as the suggestion.",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "knowledgeArticle": {
        "$ref": "#/definitions/SuggestionKnowledgeArticle",
        "description": "The suggested knowledge article that was provided as the suggestion.",
        "readOnly": true
      },
      "knowledgeSearch": {
        "$ref": "#/definitions/SuggestionKnowledgeSearch",
        "description": "The suggested knowledge search result that was provided as the suggestion.",
        "readOnly": true
      },
      "script": {
        "$ref": "#/definitions/SuggestionScript",
        "description": "The suggested script that was provided as the suggestion.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the suggestion.",
        "enum": [
          "Suggested",
          "Accepted",
          "Dismissed",
          "Failed",
          "Rated"
        ],
        "readOnly": true,
        "type": "string"
      },
      "triggerType": {
        "description": "The trigger type of the suggestion.",
        "enum": [
          "Unknown",
          "Fallback",
          "ConversationStart",
          "ConversationTransfer",
          "ConversationEnd",
          "Intent"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of the documents for which the suggestion is.",
        "enum": [
          "Faq",
          "Article",
          "KnowledgeArticle",
          "KnowledgeSearch",
          "CannedResponse",
          "Script"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SuggestionCannedResponse": {
    "properties": {
      "library": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The library from which the canned response is suggested",
        "readOnly": true
      },
      "response": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The suggested response.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SuggestionContext": {
    "properties": {
      "externalContact": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The external contact of the end-user participant, if any.",
        "readOnly": true
      },
      "mediaType": {
        "description": "The media type of the conversation in which the suggestion event was raised.",
        "enum": [
          "Message",
          "Voice",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The message in the digital conversation, after which the suggestion was raised, if any.",
        "readOnly": true
      },
      "queryStatement": {
        "description": "The query statement used when generating the suggestion, if any.",
        "readOnly": true,
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The queue used to assign the interaction to the user, if any.",
        "readOnly": true
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The agent participant who received the raised suggestion, if any.",
        "readOnly": true
      },
      "utterance": {
        "$ref": "#/definitions/Entity",
        "description": "The utterance in the voice conversation, after which the suggestion was raised, if any.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SuggestionEngagement": {
    "properties": {
      "engagementType": {
        "description": "The type of engagement with the suggestion.",
        "enum": [
          "Dismissed",
          "Copied",
          "Opened",
          "Feedback"
        ],
        "type": "string"
      },
      "feedback": {
        "$ref": "#/definitions/SuggestionFeedback",
        "description": "The given feedback on the suggestion, if any."
      }
    },
    "required": [
      "engagementType"
    ],
    "type": "object"
  },
  "SuggestionFeedback": {
    "properties": {
      "rating": {
        "description": "The rating value of the suggestion feedback.",
        "enum": [
          "Negative",
          "Positive"
        ],
        "type": "string"
      }
    },
    "required": [
      "rating"
    ],
    "type": "object"
  },
  "SuggestionKnowledgeAnswer": {
    "properties": {
      "answer": {
        "description": "The most relevant answer",
        "readOnly": true,
        "type": "string"
      },
      "endIndex": {
        "description": "The end index of the answer",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "startIndex": {
        "description": "The start index of the answer",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SuggestionKnowledgeArticle": {
    "properties": {
      "document": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The article.",
        "readOnly": true
      },
      "knowledgeAnswer": {
        "$ref": "#/definitions/SuggestionKnowledgeAnswer",
        "description": "The most relevant answer within the suggested article.",
        "readOnly": true
      },
      "snippets": {
        "description": "Snippets of text from the article matching the query.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "title": {
        "description": "The article title.",
        "readOnly": true,
        "type": "string"
      },
      "variations": {
        "description": "The variations of the article.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "version": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the article.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SuggestionKnowledgeSearch": {
    "properties": {
      "confidence": {
        "description": "Value between 0 and 1. 1 corresponds to very confident, 0 to not confident at all.",
        "format": "float",
        "readOnly": true,
        "type": "number"
      },
      "document": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The article matching the query.",
        "readOnly": true
      },
      "knowledgeAnswer": {
        "$ref": "#/definitions/SuggestionKnowledgeAnswer",
        "description": "The most relevant answer within a searched article for the searched query",
        "readOnly": true
      },
      "searchId": {
        "description": "The search id.",
        "readOnly": true,
        "type": "string"
      },
      "snippets": {
        "description": "Snippets of text from the article matching the query.",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "title": {
        "description": "The article title.",
        "readOnly": true,
        "type": "string"
      },
      "variations": {
        "description": "Variations of the article.",
        "items": {
          "$ref": "#/definitions/AddressableEntityRef"
        },
        "readOnly": true,
        "type": "array"
      },
      "version": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The version of the article.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SuggestionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Suggestion"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "SuggestionScript": {
    "properties": {
      "data": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "The payload for the script.",
        "readOnly": true,
        "type": "object"
      },
      "page": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The page of the script.",
        "readOnly": true
      },
      "script": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The suggested script.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "SummaryGenerationConfig": {
    "properties": {
      "enabled": {
        "description": "Copilot generated summary is enabled.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "SupportCenterCategory": {
    "properties": {
      "id": {
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
        "type": "string"
      },
      "image": {
        "$ref": "#/definitions/SupportCenterImage",
        "description": "Image attributes for a featured category"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SupportCenterCompactCategoryModuleTemplate": {
    "properties": {
      "active": {
        "description": "Whether this template is active or not",
        "type": "boolean"
      }
    },
    "required": [
      "active"
    ],
    "type": "object"
  },
  "SupportCenterCustomMessage": {
    "properties": {
      "defaultValue": {
        "description": "Default value for the message",
        "maxLength": 300,
        "minLength": 0,
        "type": "string"
      },
      "type": {
        "description": "Type of the message",
        "enum": [
          "Welcome",
          "Fallback"
        ],
        "type": "string"
      }
    },
    "required": [
      "defaultValue",
      "type"
    ],
    "type": "object"
  },
  "SupportCenterDetailedCategoryModuleSidebar": {
    "properties": {
      "enabled": {
        "description": "Whether sidebar is enabled or not",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "SupportCenterDetailedCategoryModuleTemplate": {
    "properties": {
      "active": {
        "description": "Whether this template is active or not",
        "type": "boolean"
      },
      "sidebar": {
        "$ref": "#/definitions/SupportCenterDetailedCategoryModuleSidebar",
        "description": "Sidebar settings for the template"
      }
    },
    "required": [
      "active",
      "sidebar"
    ],
    "type": "object"
  },
  "SupportCenterFeedbackSettings": {
    "properties": {
      "enabled": {
        "description": "Whether or not requesting customer feedback on article content and article search results is enabled",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "SupportCenterGlobalStyle": {
    "properties": {
      "backgroundColor": {
        "description": "Global background color, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      },
      "fontFamily": {
        "description": "Global font family",
        "type": "string"
      },
      "primaryColor": {
        "description": "Global primary color, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      },
      "primaryColorDark": {
        "description": "Global dark primary color, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      },
      "primaryColorLight": {
        "description": "Global light primary color, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      },
      "textColor": {
        "description": "Global text color, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      }
    },
    "required": [
      "backgroundColor",
      "fontFamily",
      "primaryColor",
      "primaryColorDark",
      "primaryColorLight",
      "textColor"
    ],
    "type": "object"
  },
  "SupportCenterHeroStyle": {
    "properties": {
      "backgroundColor": {
        "description": "Background color for hero section, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      },
      "image": {
        "$ref": "#/definitions/SupportCenterImage",
        "description": "Background image for hero section"
      },
      "textColor": {
        "description": "Text color for hero section, in hexadecimal format, eg #ffffff",
        "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        "type": "string"
      }
    },
    "required": [
      "backgroundColor",
      "textColor"
    ],
    "type": "object"
  },
  "SupportCenterImage": {
    "properties": {
      "source": {
        "$ref": "#/definitions/SupportCenterImageSource",
        "description": "Source URLs for image"
      }
    },
    "required": [
      "source"
    ],
    "type": "object"
  },
  "SupportCenterImageSource": {
    "properties": {
      "defaultUrl": {
        "description": "Default URL for image",
        "type": "string"
      }
    },
    "required": [
      "defaultUrl"
    ],
    "type": "object"
  },
  "SupportCenterModuleSetting": {
    "properties": {
      "compactCategoryModuleTemplate": {
        "$ref": "#/definitions/SupportCenterCompactCategoryModuleTemplate",
        "description": "Compact category module template"
      },
      "detailedCategoryModuleTemplate": {
        "$ref": "#/definitions/SupportCenterDetailedCategoryModuleTemplate",
        "description": "Detailed category module template"
      },
      "enabled": {
        "description": "Whether or not knowledge portal (previously support center) screen module is enabled",
        "type": "boolean"
      },
      "type": {
        "description": "Screen module type",
        "enum": [
          "Search",
          "Categories",
          "FAQ",
          "Contact",
          "Results",
          "Article",
          "TopViewedArticles"
        ],
        "type": "string"
      }
    },
    "required": [
      "enabled",
      "type"
    ],
    "type": "object"
  },
  "SupportCenterScreen": {
    "properties": {
      "moduleSettings": {
        "description": "Module settings for the screen, valid modules for each screenType: Home: Search, Categories, TopViewedArticles; Category: Search, Categories; SearchResults: Search, Results; Article: Search, Article;",
        "items": {
          "$ref": "#/definitions/SupportCenterModuleSetting"
        },
        "type": "array"
      },
      "type": {
        "description": "The type of the screen",
        "enum": [
          "Home",
          "Category",
          "SearchResults",
          "Article"
        ],
        "type": "string"
      }
    },
    "required": [
      "moduleSettings",
      "type"
    ],
    "type": "object"
  },
  "SupportCenterSettings": {
    "description": "Settings concerning knowledge portal (previously support center)",
    "properties": {
      "customMessages": {
        "description": "Customizable display texts for knowledge portal (previously support center)",
        "items": {
          "$ref": "#/definitions/SupportCenterCustomMessage"
        },
        "type": "array"
      },
      "enabled": {
        "description": "Whether or not knowledge portal (previously support center) is enabled",
        "type": "boolean"
      },
      "enabledCategories": {
        "description": "Featured categories for knowledge portal (previously support center) home screen",
        "items": {
          "$ref": "#/definitions/SupportCenterCategory"
        },
        "type": "array"
      },
      "feedback": {
        "$ref": "#/definitions/SupportCenterFeedbackSettings",
        "description": "Customer feedback settings"
      },
      "knowledgeBase": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The knowledge base for knowledge portal (previously support center)"
      },
      "routerType": {
        "description": "Router type for knowledge portal (previously support center)",
        "enum": [
          "Hash",
          "Browser"
        ],
        "type": "string"
      },
      "screens": {
        "description": "Available screens for the knowledge portal (previously support center) with its modules",
        "items": {
          "$ref": "#/definitions/SupportCenterScreen"
        },
        "type": "array"
      },
      "styleSetting": {
        "$ref": "#/definitions/SupportCenterStyleSetting",
        "description": "Style attributes for knowledge portal (previously support center)"
      }
    },
    "required": [
      "enabled",
      "enabledCategories",
      "knowledgeBase",
      "screens",
      "styleSetting"
    ],
    "type": "object"
  },
  "SupportCenterStyleSetting": {
    "properties": {
      "globalStyle": {
        "$ref": "#/definitions/SupportCenterGlobalStyle",
        "description": "Knowledge portal (previously support center) global customizations"
      },
      "heroStyle": {
        "$ref": "#/definitions/SupportCenterHeroStyle",
        "description": "Knowledge portal (previously support center) hero customizations"
      }
    },
    "required": [
      "globalStyle",
      "heroStyle"
    ],
    "type": "object"
  },
  "SupportedContent": {
    "description": "Supported content profile for inbound and outbound messages",
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this supported content profile",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date this supported content profile was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Date this supported content profile was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "A unique supported content Id.",
        "readOnly": true,
        "type": "string"
      },
      "mediaTypes": {
        "$ref": "#/definitions/MediaTypes",
        "description": "Defines the allowable media that may be accepted for an inbound message or to be sent in an outbound message. The following is an example of allowing all inbound media, and for outbound all images and only mpeg video: {\n  \"mediaTypes\": {\n    \"allow\": {\n      \"inbound\": [{\"type\": \"*/*\"}],\n      \"outbound\": [{\"type\": \"image/*\"}, {\"type\": \"video/mpeg\"}]\n    }\n  }\n}"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that modified this supported content profile",
        "readOnly": true
      },
      "name": {
        "description": "The name of the supported content profile",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Version number",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "required": [
      "id",
      "name"
    ],
    "type": "object"
  },
  "SupportedContentListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SupportedContent"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SupportedContentReference": {
    "description": "Reference to supported content profile associated with the integration",
    "properties": {
      "id": {
        "description": "The SupportedContent unique identifier associated with this integration",
        "type": "string"
      },
      "mediaTypes": {
        "$ref": "#/definitions/MediaTypes",
        "description": "Media types definition for the supported content",
        "readOnly": true
      },
      "name": {
        "description": "The SupportedContent profile name",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The SupportedContent profile URI",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "SupportedDialectsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SupportedDialectsTranscriptionEngine"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SupportedDialectsTranscriptionEngine": {
    "properties": {
      "dialects": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "engine": {
        "enum": [
          "Genesys",
          "GenesysExtended",
          "TranscriptionConnector"
        ],
        "type": "string"
      },
      "engineIntegration": {
        "$ref": "#/definitions/EngineIntegration"
      }
    },
    "type": "object"
  },
  "SupportedLanguage": {
    "properties": {
      "isDefault": {
        "description": "Whether or not this language is the default language",
        "readOnly": true,
        "type": "boolean"
      },
      "language": {
        "description": "Architect supported language tag, e.g. en-us, es-us",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "Survey": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "agentTeam": {
        "$ref": "#/definitions/Team",
        "description": "The team that the agent belongs to"
      },
      "answers": {
        "$ref": "#/definitions/SurveyScoringSet"
      },
      "completedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/ConversationReference"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/QueueReference"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "enum": [
          "Pending",
          "Sent",
          "InProgress",
          "Finished",
          "OptOut",
          "Error",
          "Expired"
        ],
        "type": "string"
      },
      "surveyErrorDetails": {
        "$ref": "#/definitions/SurveyErrorDetails",
        "description": "Additional information about what happened when the survey is in Error status."
      },
      "surveyForm": {
        "$ref": "#/definitions/SurveyForm",
        "description": "Survey form used for this survey."
      }
    },
    "type": "object"
  },
  "SurveyAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "SurveyAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/SurveyAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "SurveyAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/SurveyAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/SurveyAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "SurveyAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "conversationId",
          "divisionId",
          "externalContactId",
          "mediaType",
          "queueId",
          "requestedLanguageId",
          "requestedRoutingSkillId",
          "surveyAnswerId",
          "surveyCreatedDate",
          "surveyErrorReason",
          "surveyFormContextId",
          "surveyFormId",
          "surveyFormName",
          "surveyId",
          "surveyPartialResponse",
          "surveyPreviousStatus",
          "surveyPromoterScore",
          "surveyQuestionGroupId",
          "surveyQuestionId",
          "surveyStatus",
          "surveyType",
          "teamId",
          "userId",
          "wrapUpCode"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "SurveyAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/SurveyAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "SurveyAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime",
          "surveyCreatedDate"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/SurveyAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "conversationId",
            "divisionId",
            "externalContactId",
            "mediaType",
            "queueId",
            "requestedLanguageId",
            "requestedRoutingSkillId",
            "surveyAnswerId",
            "surveyErrorReason",
            "surveyFormContextId",
            "surveyFormId",
            "surveyFormName",
            "surveyId",
            "surveyPartialResponse",
            "surveyPreviousStatus",
            "surveyPromoterScore",
            "surveyQuestionGroupId",
            "surveyQuestionId",
            "surveyStatus",
            "surveyType",
            "teamId",
            "userId",
            "wrapUpCode"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nSurveyErrors",
            "nSurveyFullResponses",
            "nSurveyNpsDetractors",
            "nSurveyNpsPromoters",
            "nSurveyNpsResponses",
            "nSurveyPartialResponses",
            "nSurveyQuestionGroupResponses",
            "nSurveyQuestionResponses",
            "nSurveyResponses",
            "nSurveysAbandoned",
            "nSurveysDeleted",
            "nSurveysExpired",
            "nSurveysSent",
            "nSurveysStarted",
            "nVoiceSurveys",
            "nWebSurveys",
            "oSurveyQuestionGroupScore",
            "oSurveyQuestionScore",
            "oSurveyTotalScore"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/SurveyAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "SurveyAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nSurveyErrors",
          "nSurveyFullResponses",
          "nSurveyNpsDetractors",
          "nSurveyNpsPromoters",
          "nSurveyNpsResponses",
          "nSurveyPartialResponses",
          "nSurveyQuestionGroupResponses",
          "nSurveyQuestionResponses",
          "nSurveyResponses",
          "nSurveysAbandoned",
          "nSurveysDeleted",
          "nSurveysExpired",
          "nSurveysSent",
          "nSurveysStarted",
          "nVoiceSurveys",
          "nWebSurveys",
          "oSurveyQuestionGroupScore",
          "oSurveyQuestionScore",
          "oSurveyTotalScore"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "SurveyAssignment": {
    "properties": {
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The URI reference to the flow associated with this survey."
      },
      "inviteTimeInterval": {
        "description": "An ISO 8601 repeated interval consisting of the number of repetitions, the start datetime, and the interval (e.g. R2/2018-03-01T13:00:00Z/P1M10DT2H30M). Total duration must not exceed 90 days.",
        "type": "string"
      },
      "sendingDomain": {
        "description": "Validated email domain, required",
        "type": "string"
      },
      "sendingUser": {
        "description": "User together with sendingDomain used to send email, null to use no-reply",
        "type": "string"
      },
      "surveyForm": {
        "$ref": "#/definitions/PublishedSurveyFormReference",
        "description": "The survey form used for this survey."
      }
    },
    "required": [
      "sendingDomain"
    ],
    "type": "object"
  },
  "SurveyDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/SurveyDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "SurveyDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/SurveyDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/SurveyDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "SurveyDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "eventTime",
          "queueId",
          "surveyCompletedDate",
          "surveyFormContextId",
          "surveyFormId",
          "surveyId",
          "surveyPartialResponse",
          "surveyPromoterScore",
          "surveyStatus",
          "surveyType",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "metric": {
        "description": "Left hand side for metric predicates",
        "enum": [
          "oSurveyTotalScore"
        ],
        "type": "string"
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension or metric predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension or metric predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "SurveyErrorDetails": {
    "properties": {
      "flowDiagnosticInfo": {
        "$ref": "#/definitions/FlowDiagnosticInfo",
        "description": "Additional information about any errors that occurred in the survey invite flow."
      },
      "surveyErrorReason": {
        "description": "An error code indicating the reason for the survey failure.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "SurveyForm": {
    "properties": {
      "contextId": {
        "description": "Unique Id for all versions of this form",
        "readOnly": true,
        "type": "string"
      },
      "disabled": {
        "description": "Is this form disabled",
        "type": "boolean"
      },
      "footer": {
        "description": "Markdown text for the bottom of the form.",
        "type": "string"
      },
      "header": {
        "description": "Markdown text for the top of the form.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "Language for survey viewer localization. Currently localized languages: da, de, en-US, es, fi, fr, it, ja, ko, nl, no, pl, pt-BR, sv, th, tr, zh-CH, zh-TW",
        "type": "string"
      },
      "modifiedDate": {
        "description": "Last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The survey form name",
        "type": "string"
      },
      "published": {
        "description": "Is this form published",
        "type": "boolean"
      },
      "publishedVersions": {
        "$ref": "#/definitions/DomainEntityListingSurveyForm",
        "description": "List of published version of this form",
        "readOnly": true
      },
      "questionGroups": {
        "description": "A list of question groups",
        "items": {
          "$ref": "#/definitions/SurveyQuestionGroup"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "contextId",
      "language",
      "name"
    ],
    "type": "object"
  },
  "SurveyFormAndScoringSet": {
    "properties": {
      "answers": {
        "$ref": "#/definitions/SurveyScoringSet"
      },
      "surveyForm": {
        "$ref": "#/definitions/SurveyForm"
      }
    },
    "type": "object"
  },
  "SurveyFormEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SurveyForm"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SurveyQuestion": {
    "properties": {
      "answerOptions": {
        "description": "Options from which to choose an answer for this question. Only used by Multiple Choice type questions.",
        "items": {
          "$ref": "#/definitions/AnswerOption"
        },
        "type": "array"
      },
      "explanationPrompt": {
        "description": "Prompt for details explaining the chosen NPS score. Used by NPS questions.",
        "type": "string"
      },
      "helpText": {
        "type": "string"
      },
      "id": {
        "type": "string"
      },
      "maxResponseCharacters": {
        "description": "How many characters are allowed in the text response to this question. Used by NPS and Free Text question types.",
        "format": "int32",
        "type": "integer"
      },
      "naEnabled": {
        "type": "boolean"
      },
      "text": {
        "type": "string"
      },
      "type": {
        "enum": [
          "multipleChoiceQuestion",
          "freeTextQuestion",
          "npsQuestion",
          "readOnlyTextBlockQuestion"
        ],
        "type": "string"
      },
      "visibilityCondition": {
        "$ref": "#/definitions/VisibilityCondition"
      }
    },
    "type": "object"
  },
  "SurveyQuestionGroup": {
    "properties": {
      "id": {
        "type": "string"
      },
      "naEnabled": {
        "type": "boolean"
      },
      "name": {
        "type": "string"
      },
      "questions": {
        "items": {
          "$ref": "#/definitions/SurveyQuestion"
        },
        "type": "array"
      },
      "type": {
        "type": "string"
      },
      "visibilityCondition": {
        "$ref": "#/definitions/VisibilityCondition"
      }
    },
    "type": "object"
  },
  "SurveyQuestionGroupScore": {
    "properties": {
      "markedNA": {
        "description": "True when the evaluation is submitted with a question group that does not have any answers. Only allowed when naEnabled is true or if set by the system",
        "type": "boolean"
      },
      "maxTotalScore": {
        "description": "Maximum possible score of all questions in the group",
        "format": "float",
        "type": "number"
      },
      "questionGroupId": {
        "type": "string"
      },
      "questionScores": {
        "items": {
          "$ref": "#/definitions/SurveyQuestionScore"
        },
        "type": "array"
      },
      "systemMarkedNA": {
        "description": "If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.",
        "type": "boolean"
      },
      "totalScore": {
        "description": "Score of all questions in the group",
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "SurveyQuestionScore": {
    "properties": {
      "answerId": {
        "type": "string"
      },
      "assistedAnswerId": {
        "description": "AnswerId found with evaluation assistance conditions",
        "type": "string"
      },
      "freeTextAnswer": {
        "type": "string"
      },
      "markedNA": {
        "description": "True when the evaluation is submitted with a question that does not have an answer. Only allowed when naEnabled is true or if set by the system",
        "type": "boolean"
      },
      "npsScore": {
        "format": "int32",
        "type": "integer"
      },
      "npsTextAnswer": {
        "type": "string"
      },
      "questionId": {
        "type": "string"
      },
      "score": {
        "description": "Unweighted score of the question",
        "format": "int32",
        "type": "integer"
      },
      "systemMarkedNA": {
        "description": "If markedNA is true, systemMarkedNA indicates whether it was marked by a user or by the system due to visibility conditions. Always false if markedNA is false.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "SurveyScoringSet": {
    "properties": {
      "npsScore": {
        "format": "int32",
        "type": "integer"
      },
      "questionGroupScores": {
        "items": {
          "$ref": "#/definitions/SurveyQuestionGroupScore"
        },
        "type": "array"
      },
      "totalScore": {
        "format": "float",
        "type": "number"
      }
    },
    "type": "object"
  },
  "SystemPresence": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SystemPrompt": {
    "properties": {
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The system prompt identifier",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "resources": {
        "items": {
          "$ref": "#/definitions/SystemPromptAsset"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "SystemPromptAsset": {
    "properties": {
      "durationSeconds": {
        "format": "double",
        "type": "number"
      },
      "hasDefault": {
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "description": "The asset resource language",
        "type": "string"
      },
      "languageDefault": {
        "type": "boolean"
      },
      "mediaUri": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "promptId": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "tags": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": "object"
      },
      "text": {
        "type": "string"
      },
      "ttsString": {
        "type": "string"
      },
      "uploadStatus": {
        "enum": [
          "created",
          "uploaded",
          "transcoded",
          "transcodeFailed"
        ],
        "type": "string"
      },
      "uploadUri": {
        "type": "string"
      }
    },
    "required": [
      "language"
    ],
    "type": "object"
  },
  "SystemPromptAssetEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SystemPromptAsset"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "SystemPromptEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SystemPrompt"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TagQueryRequest": {
    "properties": {
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TagValue": {
    "properties": {
      "acl": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inUse": {
        "type": "boolean"
      },
      "name": {
        "description": "The workspace tag name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "TagValueEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TagValue"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TargetPerformanceProfile": {
    "properties": {
      "targetPerformanceProfileId": {
        "description": "The target destination performanceProfileId for the linked metric.",
        "type": "string"
      }
    },
    "required": [
      "targetPerformanceProfileId"
    ],
    "type": "object"
  },
  "TaskManagementErrorDetails": {
    "properties": {
      "code": {
        "description": "System defined error code for the error.",
        "type": "string"
      },
      "message": {
        "description": "Error message.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Team": {
    "properties": {
      "dateCreated": {
        "description": "Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified datetime. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "Team information.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "memberCount": {
        "description": "Number of members in a team",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "description": "The team name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "TeamActivityData": {
    "properties": {
      "data": {
        "description": "Data for metrics",
        "items": {
          "$ref": "#/definitions/TeamActivityMetricValue"
        },
        "type": "array"
      },
      "entities": {
        "description": "Details for active entities",
        "items": {
          "$ref": "#/definitions/TeamActivityEntityData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from grouping dimension to value",
        "type": "object"
      },
      "truncated": {
        "description": "Flag for a truncated list of entities. If truncated, the first half of the list of entities will contain the oldest entities and the second half the newest entities.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TeamActivityEntityData": {
    "properties": {
      "activityDate": {
        "description": "The time at which the activity was observed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "organizationPresenceId": {
        "description": "Organization presence identifier",
        "type": "string"
      },
      "presenceDate": {
        "description": "Date of the latest presence change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "queueId": {
        "description": "Queue identifier",
        "type": "string"
      },
      "queueMembershipStatus": {
        "description": "Queue membership status (e.g. active or inactive)",
        "type": "string"
      },
      "routingStatus": {
        "description": "Agent routing status",
        "type": "string"
      },
      "routingStatusDate": {
        "description": "Date of the latest routing status change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "systemPresence": {
        "description": "System presence",
        "type": "string"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "required": [
      "activityDate"
    ],
    "type": "object"
  },
  "TeamActivityMetricValue": {
    "properties": {
      "count": {
        "description": "metric count",
        "format": "int32",
        "type": "integer"
      },
      "metric": {
        "description": "metric",
        "enum": [
          "oTeamOffQueueUsers",
          "oTeamOnQueueUsers",
          "oTeamPresences",
          "oTeamRoutingStatuses"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TeamActivityQuery": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/TeamActivityQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "groupBy": {
        "description": "Dimension(s) to group by",
        "items": {
          "enum": [
            "teamId"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metrics": {
        "description": "List of requested metrics",
        "items": {
          "$ref": "#/definitions/TeamActivityQueryMetric"
        },
        "type": "array"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      }
    },
    "required": [
      "groupBy",
      "metrics"
    ],
    "type": "object"
  },
  "TeamActivityQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/TeamActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "TeamActivityQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/TeamActivityQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/TeamActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "TeamActivityQueryMetric": {
    "properties": {
      "details": {
        "description": "Flag for including observation details for this metric in the response",
        "type": "boolean"
      },
      "metric": {
        "description": "The requested metric",
        "enum": [
          "oTeamOffQueueUsers",
          "oTeamOnQueueUsers",
          "oTeamPresences",
          "oTeamRoutingStatuses"
        ],
        "type": "string"
      }
    },
    "required": [
      "metric"
    ],
    "type": "object"
  },
  "TeamActivityQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "organizationPresenceId",
          "presenceDate",
          "queueId",
          "queueMembershipStatus",
          "routingStatus",
          "routingStatusDate",
          "systemPresence",
          "teamId",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "TeamActivityResponse": {
    "properties": {
      "entityIdDimension": {
        "description": "Dimension that is used as an entityId",
        "enum": [
          "organizationPresenceId",
          "presenceDate",
          "queueId",
          "queueMembershipStatus",
          "routingStatus",
          "routingStatusDate",
          "systemPresence",
          "teamId",
          "userId"
        ],
        "type": "string"
      },
      "results": {
        "description": "Query results",
        "items": {
          "$ref": "#/definitions/TeamActivityData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TeamAddMemberFailure": {
    "properties": {
      "id": {
        "type": "string"
      },
      "reason": {
        "description": "Specific reason the member could not be added.",
        "enum": [
          "UserNotFound",
          "UserGroupLimitExceeded",
          "UserGroupDivisionMismatch"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TeamEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TeamMemberAddListingResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "failures": {
        "description": "List of any user ids that were not added.",
        "items": {
          "$ref": "#/definitions/TeamAddMemberFailure"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "TeamMemberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserReferenceWithName"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TeamMembers": {
    "properties": {
      "memberIds": {
        "description": "A list of the ids of the members to add or remove",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "memberIds"
    ],
    "type": "object"
  },
  "TeamReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TeamSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "description",
            "name"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/TeamSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "STARTS_WITH"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "TeamSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "Team Search Criteria",
        "items": {
          "$ref": "#/definitions/TeamSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "required": [
      "query"
    ],
    "type": "object"
  },
  "TeamsSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/Team"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "TemplateParameter": {
    "properties": {
      "id": {
        "description": "Response substitution identifier",
        "type": "string"
      },
      "value": {
        "description": "Response substitution value",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Term": {
    "properties": {
      "participantType": {
        "description": "Dictates if term operand must come from the internal, external or both participants",
        "enum": [
          "Internal",
          "External",
          "Both"
        ],
        "type": "string"
      },
      "word": {
        "description": "Find term in interaction",
        "type": "string"
      }
    },
    "required": [
      "participantType",
      "word"
    ],
    "type": "object"
  },
  "TermAttribute": {
    "properties": {
      "id": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "type": {
        "enum": [
          "NUMBER",
          "STRING",
          "DATE",
          "BOOLEAN",
          "LIST"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TestExecutionOperationResult": {
    "properties": {
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error that occurred during the operation"
      },
      "name": {
        "description": "Name of the operation performed",
        "type": "string"
      },
      "result": {
        "description": "The result of the operation",
        "type": "object"
      },
      "step": {
        "description": "The step number to indicate the order in which the operation was performed",
        "format": "int32",
        "type": "integer"
      },
      "success": {
        "description": "Indicated whether or not the operation was successful",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TestExecutionResult": {
    "properties": {
      "error": {
        "$ref": "#/definitions/ErrorBody",
        "description": "The final error encountered during the test that resulted in test failure"
      },
      "finalResult": {
        "description": "The final result of the test. This is the response that would be returned during normal action execution",
        "type": "object"
      },
      "operations": {
        "description": "Execution operations performed as part of the test",
        "items": {
          "$ref": "#/definitions/TestExecutionOperationResult"
        },
        "type": "array"
      },
      "success": {
        "description": "Indicates whether or not the test was a success",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TestMatchesEventOperation": {
    "description": "Results from evaluating matching criteria against test input",
    "properties": {
      "matchedTriggers": {
        "description": "Triggers that matched",
        "items": {
          "$ref": "#/definitions/TestModeTrigger"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the processing step",
        "type": "string"
      },
      "step": {
        "description": "The number of the processing step",
        "format": "int32",
        "type": "integer"
      },
      "unmatchedTriggers": {
        "description": "Triggers that did not match",
        "items": {
          "$ref": "#/definitions/TestModeTrigger"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TestMatchesOperation": {
    "description": "Information about the Trigger test mode processing step",
    "properties": {
      "details": {
        "description": "Details about why the operation did or did not succeed",
        "items": {
          "$ref": "#/definitions/MatchCriteriaTestResult"
        },
        "type": "array"
      },
      "matches": {
        "description": "Whether or not the operation matches expectations",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the processing step",
        "type": "string"
      },
      "step": {
        "description": "The number of the processing step",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TestMessage": {
    "properties": {
      "from": {
        "$ref": "#/definitions/EmailAddress",
        "description": "The sender of the email message."
      },
      "htmlBody": {
        "description": "The html body of the email message",
        "type": "string"
      },
      "id": {
        "description": "After the message has been sent, this is the value of the Message-ID email header.",
        "readOnly": true,
        "type": "string"
      },
      "subject": {
        "description": "The subject of the email message.",
        "type": "string"
      },
      "textBody": {
        "description": "The text body of the email message.",
        "type": "string"
      },
      "time": {
        "description": "The time when the message was sent. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "to": {
        "description": "The recipients of the email message.",
        "items": {
          "$ref": "#/definitions/EmailAddress"
        },
        "type": "array"
      }
    },
    "required": [
      "from",
      "textBody",
      "to"
    ],
    "type": "object"
  },
  "TestModeEventResults": {
    "description": "Information about event test mode execution",
    "properties": {
      "schemaValidation": {
        "$ref": "#/definitions/TestSchemaOperation",
        "description": "Information about the validation of the schema of the event body passed in to test mode"
      },
      "triggerMatchValidation": {
        "$ref": "#/definitions/TestMatchesEventOperation",
        "description": "Information about matched and unmatched triggers"
      }
    },
    "type": "object"
  },
  "TestModeResults": {
    "description": "Information about trigger test mode execution",
    "properties": {
      "jsonPathValidation": {
        "$ref": "#/definitions/TestMatchesOperation",
        "description": "Information about the json path matching criteria"
      },
      "schemaValidation": {
        "$ref": "#/definitions/TestSchemaOperation",
        "description": "Information about the validation of the schema of the event body passed in to test mode"
      },
      "targetValidation": {
        "$ref": "#/definitions/TestTargetOperation",
        "description": "Information about the validation of the trigger target"
      },
      "triggerMatches": {
        "description": "Whether the trigger would have matched on the provided event body",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TestModeTrigger": {
    "description": "Basic identifying information about a trigger",
    "properties": {
      "enabled": {
        "description": "Whether or not the trigger is enabled",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the trigger",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TestSchemaOperation": {
    "description": "Information about the Trigger test mode schema validation step",
    "properties": {
      "details": {
        "description": "Details about why the operation did or did not succeed",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "matches": {
        "description": "Whether or not the operation matches expectations",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the processing step",
        "type": "string"
      },
      "step": {
        "description": "The number of the processing step",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TestTargetOperation": {
    "description": "Information about the Trigger test mode target validation step",
    "properties": {
      "details": {
        "description": "Details about why the operation did or did not succeed",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "matches": {
        "description": "Whether or not the operation matches expectations",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the processing step",
        "type": "string"
      },
      "step": {
        "description": "The number of the processing step",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TextBotChannel": {
    "description": "Channel information relevant to a bot flow.",
    "properties": {
      "inputModes": {
        "description": "The input modes for the channel.",
        "items": {
          "enum": [
            "Text"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "name": {
        "description": "The name of the channel.",
        "enum": [
          "Chat",
          "Call",
          "Messaging"
        ],
        "type": "string"
      },
      "outputModes": {
        "description": "The output modes for the channel.",
        "items": {
          "enum": [
            "Text"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "userAgent": {
        "$ref": "#/definitions/TextBotUserAgent",
        "description": "Information about the end user agent calling the bot flow."
      }
    },
    "required": [
      "inputModes",
      "name",
      "outputModes",
      "userAgent"
    ],
    "type": "object"
  },
  "TextBotDisconnectAction": {
    "description": "Settings for a next-action of disconnecting, including the reason code for the disconnect.",
    "properties": {
      "flowLocation": {
        "$ref": "#/definitions/TextBotFlowLocation",
        "description": "Describes where in the Bot Flow the user was when the disconnect occurred."
      },
      "flowOutcomes": {
        "description": "The list of Flow Outcomes for the bot flow and their details.",
        "items": {
          "$ref": "#/definitions/TextBotFlowOutcome"
        },
        "type": "array"
      },
      "reason": {
        "description": "The reason for the disconnect.",
        "enum": [
          "TriggeredByUser",
          "TriggeredByFlow",
          "SessionExpired",
          "Error",
          "RecognitionFailure"
        ],
        "type": "string"
      },
      "reasonExtendedInfo": {
        "description": "Extended information related to the reason, if available.",
        "type": "string"
      }
    },
    "required": [
      "reason"
    ],
    "type": "object"
  },
  "TextBotErrorInputEvent": {
    "description": "Settings for an input event to the bot flow indicating an error has occurred.",
    "properties": {
      "code": {
        "description": "The error code.",
        "type": "string"
      },
      "message": {
        "description": "The error message.",
        "type": "string"
      }
    },
    "required": [
      "code",
      "message"
    ],
    "type": "object"
  },
  "TextBotExitAction": {
    "description": "Settings for a next-action of exiting the bot flow. Any output variables are available in the details.",
    "properties": {
      "activeIntent": {
        "description": "The active intent at the time of the exit.",
        "type": "string"
      },
      "flowLocation": {
        "$ref": "#/definitions/TextBotFlowLocation",
        "description": "Describes where in the Bot Flow the user was when the exit occurred."
      },
      "flowOutcomes": {
        "description": "The list of Flow Outcomes for the bot flow and their details.",
        "items": {
          "$ref": "#/definitions/TextBotFlowOutcome"
        },
        "type": "array"
      },
      "outputData": {
        "$ref": "#/definitions/TextBotInputOutputData",
        "description": "The output data for the bot flow."
      },
      "reason": {
        "description": "The reason for the exit.",
        "enum": [
          "TriggeredByUser",
          "AgentRequestedByUser",
          "TriggeredByFlow",
          "Error",
          "RecognitionFailure"
        ],
        "type": "string"
      },
      "reasonExtendedInfo": {
        "description": "Extended information related to the reason, if available.",
        "type": "string"
      }
    },
    "required": [
      "reason"
    ],
    "type": "object"
  },
  "TextBotFlow": {
    "description": "Description of the Bot Flow.",
    "properties": {
      "id": {
        "description": "The Bot Flow ID.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "TextBotFlowLaunchRequest": {
    "description": "Settings for launching an instance of a bot flow.",
    "properties": {
      "channel": {
        "$ref": "#/definitions/TextBotChannel",
        "description": "Channel information relevant to the bot flow."
      },
      "conversationId": {
        "description": "A conversation ID to associate with the bot flow, if available.",
        "type": "string"
      },
      "externalSessionId": {
        "description": "The ID of the external session that is associated with the bot flow.",
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/TextBotFlow",
        "description": "Specifies which Bot Flow to launch."
      },
      "inputData": {
        "$ref": "#/definitions/TextBotInputOutputData",
        "description": "Input values to the flow. Valid values are defined by the flow's input JSON schema."
      },
      "language": {
        "description": "The language that the bot will use in the session. Validated against list of supported languages and if the value is omitted or is invalid, the default language will be used.",
        "type": "string"
      }
    },
    "required": [
      "channel",
      "externalSessionId",
      "flow"
    ],
    "type": "object"
  },
  "TextBotFlowLaunchResponse": {
    "description": "Information related to a successful launch of a bot flow. The ID will be used in subsequent turn requests of the bot flow.",
    "properties": {
      "id": {
        "description": "The session ID of the bot flow, used to send to subsequent turn requests",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "TextBotFlowLocation": {
    "description": "Describes a flow location.",
    "properties": {
      "actionName": {
        "description": "The name of the action that was active when the event of interest happened.",
        "type": "string"
      },
      "actionNumber": {
        "description": "The number of the action that was active when the event of interest happened.",
        "format": "int32",
        "type": "integer"
      },
      "sequenceName": {
        "description": "The name of the state or task which was active when the event of interest happened.",
        "type": "string"
      }
    },
    "required": [
      "actionName",
      "actionNumber",
      "sequenceName"
    ],
    "type": "object"
  },
  "TextBotFlowMilestone": {
    "properties": {
      "dateReached": {
        "description": "The timestamp of when the milestone was reached. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The Milestone's ID.",
        "type": "string"
      },
      "sequence": {
        "description": "The sequence number of the milestone.",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "dateReached",
      "id",
      "sequence"
    ],
    "type": "object"
  },
  "TextBotFlowOutcome": {
    "description": "Flow Outcome data related to a bot flow which is exiting gracefully.",
    "properties": {
      "dateEnd": {
        "description": "The timestamp for when the Flow Outcome finished. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStart": {
        "description": "The timestamp for when the Flow Outcome began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "milestones": {
        "description": "The Flow Milestones for the Flow Outcome.",
        "items": {
          "$ref": "#/definitions/TextBotFlowMilestone"
        },
        "type": "array"
      },
      "outcomeId": {
        "description": "The Flow Outcome ID.",
        "type": "string"
      },
      "outcomeValue": {
        "description": "The value of the FlowOutcome.",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TextBotFlowTurnRequest": {
    "description": "Settings for a turn request to a bot flow.",
    "properties": {
      "inputEventError": {
        "$ref": "#/definitions/TextBotErrorInputEvent",
        "description": "The data for the input event of this turn if it is an error event. Only one inputEvent may be set."
      },
      "inputEventType": {
        "description": "Indicates the type of input event being requested. If appropriate, fill out the matching user input object details on this request.",
        "enum": [
          "NoOp",
          "UserInput",
          "Error",
          "NoMatch",
          "NoInput",
          "UserDisconnect",
          "ClientSessionExpired"
        ],
        "type": "string"
      },
      "inputEventUserInput": {
        "$ref": "#/definitions/TextBotUserInputEvent",
        "description": "The data for the input event of this turn if it is a user input event. Only one inputEvent may be set."
      },
      "previousTurn": {
        "$ref": "#/definitions/TextBotTurnReference",
        "description": "The reference to a previous turn if appropriate, used to avoid race conditions."
      }
    },
    "required": [
      "inputEventType"
    ],
    "type": "object"
  },
  "TextBotFlowTurnResponse": {
    "description": "Information related to a success bot flow turn request.",
    "properties": {
      "id": {
        "description": "The ID of the bot flow turn. If additional turns are needed, supply this ID as the previous turn in your next turn request.",
        "type": "string"
      },
      "nextActionDisconnect": {
        "$ref": "#/definitions/TextBotDisconnectAction",
        "description": "The next action directive for this turn if it is a Disconnect type."
      },
      "nextActionExit": {
        "$ref": "#/definitions/TextBotExitAction",
        "description": "The next action directive for this turn if it is an Exit type."
      },
      "nextActionType": {
        "description": "Indicates the suggested next action. If appropriate, the matching output event object includes additional information.",
        "enum": [
          "NoOp",
          "Disconnect",
          "WaitForInput",
          "Exit"
        ],
        "type": "string"
      },
      "nextActionWaitForInput": {
        "$ref": "#/definitions/TextBotWaitForInputAction",
        "description": "The next action directive for this turn if it is a WaitForInput type."
      },
      "previousTurn": {
        "$ref": "#/definitions/TextBotTurnReference",
        "description": "The reference to a previous turn, if applicable."
      },
      "prompts": {
        "$ref": "#/definitions/TextBotOutputPrompts",
        "description": "The output prompts for this turn."
      }
    },
    "required": [
      "id",
      "nextActionType"
    ],
    "type": "object"
  },
  "TextBotInputOutputData": {
    "description": "Input/Output data related to a bot flow which is exiting gracefully.",
    "properties": {
      "variables": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "The input/output variables using the format as appropriate for the variable data type in the flow definition.",
        "type": "object"
      }
    },
    "required": [
      "variables"
    ],
    "type": "object"
  },
  "TextBotModeConstraints": {
    "description": "Mode constraints to observe when operating on a bot flow.",
    "properties": {
      "text": {
        "$ref": "#/definitions/TextBotTextModeConstraints",
        "description": "Mode constraints that apply to text scenarios."
      }
    },
    "type": "object"
  },
  "TextBotModeOutputPrompts": {
    "description": "Prompt information related to a bot flow turn.",
    "properties": {
      "segments": {
        "description": "The list of prompt segments.",
        "items": {
          "$ref": "#/definitions/TextBotPromptSegment"
        },
        "type": "array"
      }
    },
    "required": [
      "segments"
    ],
    "type": "object"
  },
  "TextBotOutputPrompts": {
    "description": "Prompt information related to a bot flow turn.",
    "properties": {
      "outputLanguage": {
        "description": "The ISO code of the output language for this prompt item.",
        "type": "string"
      },
      "textPrompts": {
        "$ref": "#/definitions/TextBotModeOutputPrompts",
        "description": "Text output prompts, if any."
      }
    },
    "required": [
      "outputLanguage"
    ],
    "type": "object"
  },
  "TextBotPromptSegment": {
    "description": "Data for a single bot flow prompt segment.",
    "properties": {
      "content": {
        "description": "Details to display Rich Media content. This is only populated when the segment 'type' is 'Rich Media'.",
        "items": {
          "$ref": "#/definitions/MessageContent"
        },
        "type": "array"
      },
      "format": {
        "$ref": "#/definitions/Format",
        "description": "Additional details describing the segment’s contents, which the client should honour where possible."
      },
      "text": {
        "description": "The text of this prompt segment.",
        "type": "string"
      },
      "type": {
        "description": "The segment type which describes any semantics about the 'text' and also indicates which other field might include additional relevant info.",
        "enum": [
          "Text",
          "RichMedia"
        ],
        "type": "string"
      }
    },
    "required": [
      "text",
      "type"
    ],
    "type": "object"
  },
  "TextBotTextModeConstraints": {
    "description": "Mode constraints to observe when operating on a bot flow.",
    "properties": {
      "languagePreferences": {
        "description": "The list of language preferences by their ISO language code.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "noInputTimeoutMilliseconds": {
        "description": "The amount of time, in milliseconds, before the client should send the 'NoInput' event\n to trigger the \"no input\" bot response and handling on digital channels.\n Note: This optional field will only be returned for 'Digital Bot Flow' turns.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "languagePreferences"
    ],
    "type": "object"
  },
  "TextBotTranscript": {
    "description": "Data for a single bot flow transcript.",
    "properties": {
      "confidence": {
        "description": "The confidence factor, expressed as a decimal between 0.0 and 1.0, of the transcript item.",
        "format": "float",
        "type": "number"
      },
      "text": {
        "description": "The text of the transcript item.",
        "type": "string"
      }
    },
    "required": [
      "text"
    ],
    "type": "object"
  },
  "TextBotTurnReference": {
    "description": "A reference to a bot flow turn.",
    "properties": {
      "id": {
        "description": "The id of the turn.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "TextBotUserAgent": {
    "description": "Information about the caller executing a bot flow.",
    "properties": {
      "name": {
        "description": "The name of the user agent.",
        "enum": [
          "Phone",
          "SMS",
          "GenesysWebWidget",
          "FacebookMessenger",
          "WeChat",
          "Whatsapp",
          "AppleBusinessChat",
          "Telegram",
          "Slack",
          "Signal",
          "Line",
          "Discord",
          "TwitterDirectMessage",
          "Open",
          "Instagram",
          "Other",
          "Unknown"
        ],
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "TextBotUserInputAlternative": {
    "description": "User input data used in a bot flow turn.",
    "properties": {
      "transcript": {
        "$ref": "#/definitions/TextBotTranscript",
        "description": "The user input transcript."
      }
    },
    "required": [
      "transcript"
    ],
    "type": "object"
  },
  "TextBotUserInputEvent": {
    "description": "Settings for an input event to the bot flow indicating user input is available.",
    "properties": {
      "alternatives": {
        "description": "The input alternatives.",
        "items": {
          "$ref": "#/definitions/TextBotUserInputAlternative"
        },
        "type": "array"
      },
      "mode": {
        "description": "The input mode.",
        "enum": [
          "Text"
        ],
        "type": "string"
      }
    },
    "required": [
      "alternatives",
      "mode"
    ],
    "type": "object"
  },
  "TextBotWaitForInputAction": {
    "description": "Settings for a next-action of waiting for additional user input and sending the data as an input action to the bot flow.",
    "properties": {
      "modeConstraints": {
        "$ref": "#/definitions/TextBotModeConstraints",
        "description": "The mode constraints for the user input."
      }
    },
    "required": [
      "modeConstraints"
    ],
    "type": "object"
  },
  "TextMessageListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/MessageData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TextStyleProperties": {
    "properties": {
      "color": {
        "description": "Color of the text. (eg. #FFFFFF)",
        "type": "string"
      },
      "font": {
        "description": "Font of the text. (eg. Helvetica)",
        "type": "string"
      },
      "fontSize": {
        "description": "Font size of the text. (eg. '12')",
        "type": "string"
      },
      "textAlign": {
        "description": "Text alignment.",
        "enum": [
          "Left",
          "Right",
          "Center"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Ticker": {
    "properties": {
      "exchange": {
        "description": "The exchange for this ticker symbol. Examples: NYSE, FTSE, NASDAQ, etc.",
        "type": "string"
      },
      "symbol": {
        "description": "The ticker symbol for this organization. Example: ININ, AAPL, MSFT, etc.",
        "type": "string"
      }
    },
    "required": [
      "exchange",
      "symbol"
    ],
    "type": "object"
  },
  "TimeAllowed": {
    "properties": {
      "empty": {
        "type": "boolean"
      },
      "timeSlots": {
        "items": {
          "$ref": "#/definitions/TimeSlot"
        },
        "type": "array"
      },
      "timeZoneId": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeInterval": {
    "properties": {
      "days": {
        "format": "int32",
        "type": "integer"
      },
      "hours": {
        "format": "int32",
        "type": "integer"
      },
      "months": {
        "format": "int32",
        "type": "integer"
      },
      "weeks": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TimeOffBalanceJobReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeOffBalanceJobResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TimeOffBalanceResponse"
        },
        "type": "array"
      },
      "status": {
        "description": "The status of the time off balance job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeOffBalanceRequest": {
    "properties": {
      "activityCodeIds": {
        "description": "The set of activity code IDs for which to query available time off balances",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "dateRanges": {
        "description": "The list of date ranges for which to query time off balance",
        "items": {
          "$ref": "#/definitions/LocalDateRange"
        },
        "type": "array"
      }
    },
    "required": [
      "activityCodeIds"
    ],
    "type": "object"
  },
  "TimeOffBalanceResponse": {
    "properties": {
      "activityCodeId": {
        "description": "The ID for activity code associated with time off balance",
        "type": "string"
      },
      "balanceMinutesPerDay": {
        "description": "The list of available time off balance values in minutes for each day",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "hrisTimeOffTypeId": {
        "description": "The ID of the time off type configured in HRIS integration",
        "type": "string"
      },
      "hrisTimeOffTypeSecondaryId": {
        "description": "The secondary ID of the time off type configured in HRIS integration",
        "type": "string"
      },
      "startDate": {
        "description": "The Start date of the requested date range. The end date is determined by the size of interval list. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "activityCodeId",
      "hrisTimeOffTypeId"
    ],
    "type": "object"
  },
  "TimeOffBalancesResponse": {
    "properties": {
      "entities": {
        "description": "The list of time off balances. May come via notification",
        "items": {
          "$ref": "#/definitions/TimeOffBalanceResponse"
        },
        "type": "array"
      },
      "job": {
        "$ref": "#/definitions/TimeOffBalanceJobReference",
        "description": "The asynchronous job handling the query"
      }
    },
    "type": "object"
  },
  "TimeOffIntegrationStatusResponse": {
    "properties": {
      "integrationStatus": {
        "description": "The value of integration status for the time off request",
        "enum": [
          "Processing",
          "Error",
          "AutomaticallyComplete",
          "ManuallyComplete"
        ],
        "type": "string"
      },
      "timeOffRequest": {
        "$ref": "#/definitions/TimeOffRequestReference",
        "description": "The time off request associated with this integration status"
      }
    },
    "required": [
      "integrationStatus",
      "timeOffRequest"
    ],
    "type": "object"
  },
  "TimeOffIntegrationStatusResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TimeOffIntegrationStatusResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TimeOffLimit": {
    "properties": {
      "defaultLimitMinutes": {
        "description": "The default time off limit value in minutes per granularity interval",
        "format": "int32",
        "type": "integer"
      },
      "granularity": {
        "description": "Granularity choice for the time off limit",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off limit"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeOffLimitListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TimeOffLimit"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TimeOffLimitRange": {
    "properties": {
      "granularity": {
        "description": "Granularity choice for the time off limit",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "limitMinutesPerInterval": {
        "description": "The list of time off limit values in minutes per granularity interval. If 'null' is specified, then interval specific value is cleared. Such interval will have 'defaultLimitMinutes' value",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "startDate": {
        "description": "Start date of the range. The end date is determined by 'granularity' and the size of 'limitMinutesPerInterval'. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "granularity",
      "limitMinutesPerInterval",
      "startDate"
    ],
    "type": "object"
  },
  "TimeOffLimitReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeOffLimitValueRange": {
    "properties": {
      "allocatedMinutesPerInterval": {
        "description": "A list of allocated time off minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity choice for time off limit",
        "enum": [
          "Daily"
        ],
        "type": "string"
      },
      "limitMinutesPerInterval": {
        "description": "A list of time off limit values in minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off limit"
      },
      "startDate": {
        "description": "Start date of the requested date range, in ISO-8601 format. The end date is determined by the size of interval lists",
        "format": "date",
        "type": "string"
      },
      "timeOffLimit": {
        "$ref": "#/definitions/TimeOffLimitReference",
        "description": "The ID of the time off limit"
      },
      "waitlistedMinutesPerInterval": {
        "description": "A list of waitlisted time off minutes per granularity interval",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "waitlistedRequestsPerInterval": {
        "description": "The current number of waitlisted time off requests for every interval per granularity",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      }
    },
    "required": [
      "granularity",
      "startDate"
    ],
    "type": "object"
  },
  "TimeOffPlan": {
    "properties": {
      "active": {
        "description": "Whether this time off plan is currently being used by agents.",
        "type": "boolean"
      },
      "activityCodeIds": {
        "description": "The set of activity code IDs associated with this time off plan.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "autoApprovalRule": {
        "description": "Auto approval rule for this time off plan",
        "enum": [
          "Never",
          "Always",
          "CheckLimits",
          "CheckActivityCodes",
          "CheckLimitsAndActivityCodes"
        ],
        "type": "string"
      },
      "daysBeforeStartToExpireFromWaitlist": {
        "description": "The number of days before the time off request start date for when the request will be expired from the waitlist.",
        "format": "int32",
        "type": "integer"
      },
      "hrisTimeOffType": {
        "$ref": "#/definitions/HrisTimeOffType",
        "description": "Time off type, if this time off plan is associated with the integration."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off plan."
      },
      "name": {
        "description": "The name of this time off plan.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeOffLimits": {
        "description": "The set of time off limit IDs associated with this time off plan.",
        "items": {
          "$ref": "#/definitions/TimeOffLimitReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "TimeOffPlanBusinessUnitAssociation": {
    "properties": {
      "managementUnits": {
        "description": "Management units to which this time-off plan applies. This must not be set if staffingGroups is populated",
        "items": {
          "$ref": "#/definitions/ManagementUnitReference"
        },
        "type": "array",
        "uniqueItems": true
      },
      "staffingGroups": {
        "description": "Staffing groups to which this time-off plan applies. This must not be set if managementUnits is populated",
        "items": {
          "$ref": "#/definitions/StaffingGroupReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "TimeOffPlanListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TimeOffPlan"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TimeOffPlanManagementUnitAssociation": {
    "properties": {
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "Management unit to which this time-off plan belongs"
      },
      "staffingGroups": {
        "description": "Staffing groups to which this time-off plan applies. If not defined, the plan applies to the management unit",
        "items": {
          "$ref": "#/definitions/StaffingGroupReference"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "managementUnit"
    ],
    "type": "object"
  },
  "TimeOffRequest": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "dailyDurationMinutes": {
        "description": "The daily duration of this time off request in minutes",
        "format": "int32",
        "type": "integer"
      },
      "durationMinutes": {
        "description": "Daily durations for each day of this time off request in minutes",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "fullDayManagementUnitDates": {
        "description": "A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.  Will be not empty if isFullDayRequest == true",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The id of the time off request",
        "type": "string"
      },
      "isFullDayRequest": {
        "description": "Whether this is a full day request (false means partial day)",
        "type": "boolean"
      },
      "markedAsRead": {
        "description": "Whether this request has been marked as read by the agent",
        "type": "boolean"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "The version metadata of the time off request"
      },
      "notes": {
        "description": "Notes about the time off request",
        "type": "string"
      },
      "paid": {
        "description": "Whether this is a paid time off request",
        "type": "boolean"
      },
      "partialDayStartDateTimes": {
        "description": "A set of start date-times in ISO-8601 format for partial day requests.  Will be not empty if isFullDayRequest == false",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "payableMinutes": {
        "description": "Payable minutes for each day of this time off request",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "reviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who reviewed this time off request"
      },
      "reviewedDate": {
        "description": "The timestamp when this request was reviewed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of this time off request",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED",
          "CANCELED"
        ],
        "type": "string"
      },
      "submittedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who submitted this time off request"
      },
      "submittedDate": {
        "description": "The timestamp when this request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "substatus": {
        "description": "The substatus of this time off request",
        "enum": [
          "AdvanceTimeElapsed",
          "AutoApproved",
          "InsufficientBalance",
          "InvalidDailyDuration",
          "OutsideShift",
          "RemovedFromWaitlist",
          "Waitlisted",
          "OverlapsRestrictedActivityCode"
        ],
        "type": "string"
      },
      "syncVersion": {
        "description": "The sync version of this time off request for which the scheduled activity is associated",
        "format": "int32",
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user that the time off request belongs to"
      }
    },
    "required": [
      "id",
      "user"
    ],
    "type": "object"
  },
  "TimeOffRequestList": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "timeOffRequests": {
        "items": {
          "$ref": "#/definitions/TimeOffRequestResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TimeOffRequestListing": {
    "properties": {
      "downloadUrl": {
        "description": "URL from which to fetch results for requests with a large result set. If populated, the downloaded data will conform to the same schema as would normally be returned, excepting downloaded data will never itself contain a downloadUrl",
        "type": "string"
      },
      "entities": {
        "description": "List of time off requests",
        "items": {
          "$ref": "#/definitions/TimeOffRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "entities"
    ],
    "type": "object"
  },
  "TimeOffRequestLookup": {
    "properties": {
      "timeOffRequestId": {
        "description": "The ID of the time off request",
        "type": "string"
      },
      "userId": {
        "description": "The ID of the user to whom the time off request belongs",
        "type": "string"
      }
    },
    "required": [
      "timeOffRequestId",
      "userId"
    ],
    "type": "object"
  },
  "TimeOffRequestNotification": {
    "properties": {
      "fullDayManagementUnitDates": {
        "description": "A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone.  Will be not empty if isFullDayRequest == true",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "isFullDayRequest": {
        "description": "Whether this is a full day request (false means partial day)",
        "type": "boolean"
      },
      "partialDayStartDateTimes": {
        "description": "A set of start date-times in ISO-8601 format for partial day requests.  Will be not empty if isFullDayRequest == false",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "status": {
        "description": "The status of this time off request",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED",
          "CANCELED"
        ],
        "type": "string"
      },
      "timeOffRequestId": {
        "description": "The ID of this time off request",
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with this time off request"
      }
    },
    "type": "object"
  },
  "TimeOffRequestQueryBody": {
    "properties": {
      "dateRange": {
        "$ref": "#/definitions/DateRange",
        "description": "The inclusive range of dates to filter time off requests"
      },
      "ids": {
        "description": "The set of ids to filter time off requests",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "statuses": {
        "description": "The set of statuses to filter time off requests",
        "items": {
          "enum": [
            "PENDING"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "substatuses": {
        "description": "The set of substatuses to filter time off requests",
        "items": {
          "enum": [
            "AdvanceTimeElapsed",
            "AutoApproved",
            "InsufficientBalance",
            "InvalidDailyDuration",
            "OutsideShift",
            "RemovedFromWaitlist",
            "Waitlisted",
            "OverlapsRestrictedActivityCode"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "userIds": {
        "description": "The set of user ids to filter time off requests",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "type": "object"
  },
  "TimeOffRequestReference": {
    "properties": {
      "id": {
        "description": "The id of the time off request",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeOffRequestResponse": {
    "properties": {
      "activityCodeId": {
        "description": "The ID of the activity code associated with this time off request. Activity code must be of the TimeOff category",
        "type": "string"
      },
      "dailyDurationMinutes": {
        "description": "The daily duration of this time off request in minutes",
        "format": "int32",
        "type": "integer"
      },
      "durationMinutes": {
        "description": "Daily durations for each day of this time off request in minutes",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "fullDayManagementUnitDates": {
        "description": "A set of dates in yyyy-MM-dd format.  Should be interpreted in the management unit's configured time zone. Will be not empty if isFullDayRequest == true",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isFullDayRequest": {
        "description": "Whether this is a full day request (false means partial day)",
        "type": "boolean"
      },
      "markedAsRead": {
        "description": "Whether this request has been marked as read by the agent",
        "type": "boolean"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "The version metadata of the time off request"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who last modified this TimeOffRequestResponse"
      },
      "modifiedDate": {
        "description": "The timestamp when this request was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "notes": {
        "description": "Notes about the time off request",
        "type": "string"
      },
      "paid": {
        "description": "Whether this is a paid time off request",
        "type": "boolean"
      },
      "partialDayStartDateTimes": {
        "description": "A set of start date-times in ISO-8601 format for partial day requests. Will be not empty if isFullDayRequest == false",
        "items": {
          "format": "date-time",
          "type": "string"
        },
        "type": "array"
      },
      "payableMinutes": {
        "description": "Payable minutes for each day of this time off request",
        "items": {
          "format": "int32",
          "type": "integer"
        },
        "type": "array"
      },
      "reviewedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who reviewed this time off request"
      },
      "reviewedDate": {
        "description": "The timestamp when this request was reviewed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of this time off request",
        "enum": [
          "PENDING",
          "APPROVED",
          "DENIED",
          "CANCELED"
        ],
        "type": "string"
      },
      "submittedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who submitted this time off request"
      },
      "submittedDate": {
        "description": "The timestamp when this request was submitted. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "substatus": {
        "description": "The substatus of this time off request",
        "enum": [
          "AdvanceTimeElapsed",
          "AutoApproved",
          "InsufficientBalance",
          "InvalidDailyDuration",
          "OutsideShift",
          "RemovedFromWaitlist",
          "Waitlisted",
          "OverlapsRestrictedActivityCode"
        ],
        "type": "string"
      },
      "syncVersion": {
        "description": "The sync version of this time off request for which the scheduled activity is associated",
        "format": "int32",
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with this time off request"
      }
    },
    "type": "object"
  },
  "TimeOffRequestSettings": {
    "properties": {
      "submissionEarliestDaysFromNow": {
        "description": "The earliest number of days from now for which an agent can submit a time off request.  Use negative numbers to indicate days in the past",
        "format": "int32",
        "type": "integer"
      },
      "submissionLatestDaysFromNow": {
        "description": "The latest number of days from now for which an agent can submit a time off request",
        "format": "int32",
        "type": "integer"
      },
      "submissionRangeEnforced": {
        "description": "Whether to enforce a submission range for agent time off requests",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TimeSlot": {
    "properties": {
      "day": {
        "description": "Day for this time slot, Monday = 1 ... Sunday = 7",
        "format": "int32",
        "type": "integer"
      },
      "startTime": {
        "description": "start time in xx:xx:xx.xxx format",
        "type": "string"
      },
      "stopTime": {
        "description": "stop time in xx:xx:xx.xxx format",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TimeZoneEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/RegionTimeZone"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TimeZoneMappingPreview": {
    "properties": {
      "contactList": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The associated ContactList"
      },
      "contactListSize": {
        "description": "The total number of contacts in the contact list",
        "format": "int64",
        "type": "integer"
      },
      "contactsInDefaultWindow": {
        "description": "The total number of contacts that will be dialed during the default window",
        "format": "int64",
        "type": "integer"
      },
      "contactsMappedToASingleZone": {
        "description": "The total number of contacts that mapped to a single time zone",
        "format": "int64",
        "type": "integer"
      },
      "contactsMappedToASingleZoneUsingZipCode": {
        "description": "The total number of contacts that mapped to a single time zone and were mapped using the zip code column",
        "format": "int64",
        "type": "integer"
      },
      "contactsMappedToMultipleZones": {
        "description": "The total number of contacts that mapped to multiple time zones",
        "format": "int64",
        "type": "integer"
      },
      "contactsMappedToMultipleZonesUsingZipCode": {
        "description": "The total number of contacts that mapped to multiple time zones and were mapped using the zip code column",
        "format": "int64",
        "type": "integer"
      },
      "contactsMappedUsingZipCode": {
        "additionalProperties": {
          "format": "int64",
          "type": "integer"
        },
        "description": "The number of contacts per time zone that mapped to only that time zone and were mapped using the zip code column",
        "type": "object"
      },
      "contactsPerTimeZone": {
        "additionalProperties": {
          "format": "int64",
          "type": "integer"
        },
        "description": "The number of contacts per time zone that mapped to only that time zone",
        "type": "object"
      }
    },
    "type": "object"
  },
  "TokenInfo": {
    "properties": {
      "OAuthClient": {
        "$ref": "#/definitions/OrgOAuthClient"
      },
      "authorizedScope": {
        "description": "The list of scopes authorized for the OAuth client",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "clonedUser": {
        "$ref": "#/definitions/TokenInfoClonedUser",
        "description": "Only present when a user is a clone of trustee user in the trustor org.",
        "readOnly": true
      },
      "homeOrganization": {
        "$ref": "#/definitions/NamedEntity",
        "description": "The token's home organization",
        "readOnly": true
      },
      "organization": {
        "$ref": "#/definitions/NamedEntity",
        "description": "The current organization",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "TokenInfoClonedUser": {
    "properties": {
      "id": {
        "description": "User id of the original native user",
        "readOnly": true,
        "type": "string"
      },
      "organization": {
        "$ref": "#/definitions/Entity",
        "description": "Organization of the original native user",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "Topic": {
    "properties": {
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "datePublished": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "dialect": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "name": {
        "type": "string"
      },
      "participants": {
        "enum": [
          "External",
          "Internal",
          "All"
        ],
        "type": "string"
      },
      "phrases": {
        "items": {
          "$ref": "#/definitions/Phrase"
        },
        "type": "array"
      },
      "programs": {
        "items": {
          "$ref": "#/definitions/BaseProgramEntity"
        },
        "type": "array"
      },
      "published": {
        "type": "boolean"
      },
      "publishedBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "strictness": {
        "enum": [
          "1",
          "55",
          "65",
          "72",
          "85",
          "90"
        ],
        "type": "string"
      },
      "tags": {
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TopicCursorEntityListing": {
    "description": "Cursor listing of Topics.",
    "properties": {
      "entities": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TopicDuration": {
    "properties": {
      "totalMilliseconds": {
        "description": "The total duration of the topic phrase within the conversation",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TopicJob": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/AddressableEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "enum": [
          "Running",
          "Completed",
          "Failed"
        ],
        "type": "string"
      },
      "topics": {
        "items": {
          "$ref": "#/definitions/BaseTopicEntitiy"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TopicJobRequest": {
    "properties": {
      "topicIds": {
        "description": "The ids of the topics used for this job",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "topicIds"
    ],
    "type": "object"
  },
  "TopicOffset": {
    "properties": {
      "characterCount": {
        "description": "Count of characters before the topic ",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "wordCount": {
        "description": "Count of words before the topic ",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TopicPhrase": {
    "properties": {
      "id": {
        "type": "string"
      },
      "text": {
        "type": "string"
      },
      "utteranceCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TopicRequest": {
    "properties": {
      "description": {
        "description": "The topic description",
        "type": "string"
      },
      "dialect": {
        "description": "The topic dialect",
        "type": "string"
      },
      "name": {
        "description": "The topic name",
        "type": "string"
      },
      "participants": {
        "description": "The topic participants, default value is All",
        "enum": [
          "External",
          "Internal",
          "All"
        ],
        "type": "string"
      },
      "phrases": {
        "description": "The topic phrases",
        "items": {
          "$ref": "#/definitions/Phrase"
        },
        "type": "array"
      },
      "programIds": {
        "description": "The ids of programs associated to the topic",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "strictness": {
        "description": "The topic strictness, default value is 72",
        "enum": [
          "1",
          "55",
          "65",
          "72",
          "85",
          "90"
        ],
        "type": "string"
      },
      "tags": {
        "description": "The topic tags",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "dialect",
      "name"
    ],
    "type": "object"
  },
  "TopicsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ListedTopic"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrainingListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/KnowledgeTraining"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TranscriptAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "TranscriptAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/TranscriptAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "TranscriptAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/TranscriptAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/TranscriptAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "TranscriptAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "addressFrom",
          "addressTo",
          "ani",
          "channel",
          "conversationDuration",
          "conversationId",
          "direction",
          "divisionId",
          "dnis",
          "flowId",
          "flowVersion",
          "handleTime",
          "mediaType",
          "messageType",
          "queueId",
          "resultsBy",
          "teamId",
          "topicId",
          "userId",
          "wrapUpCode"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "TranscriptAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/TranscriptAggregateDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TranscriptAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/TranscriptAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "addressFrom",
            "addressTo",
            "ani",
            "channel",
            "conversationId",
            "direction",
            "divisionId",
            "dnis",
            "flowId",
            "flowVersion",
            "mediaType",
            "messageType",
            "queueId",
            "teamId",
            "topicId",
            "userId",
            "wrapUpCode"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "nTopicCommunications",
            "oCustomerSentiment",
            "oOverTalkSpeechInstances",
            "oSentimentScore",
            "tAgentSpeech",
            "tCustomerSpeech",
            "tOtherAudio",
            "tOverTalkSpeech",
            "tSilence",
            "tTotalSpeechAndSilence"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/TranscriptAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "TranscriptAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "nTopicCommunications",
          "oCustomerSentiment",
          "oOverTalkSpeechInstances",
          "oSentimentScore",
          "tAgentSpeech",
          "tCustomerSpeech",
          "tOtherAudio",
          "tOverTalkSpeech",
          "tSilence",
          "tTotalSpeechAndSilence"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "TranscriptConversationDetailSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/TranscriptConversationDetailSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "enum": [
          "EXACT",
          "EXACT_PHRASE",
          "PHRASE",
          "DATE_RANGE"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TranscriptConversationDetailSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "The search criteria",
        "items": {
          "$ref": "#/definitions/TranscriptConversationDetailSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      },
      "types": {
        "description": "Resource domain type to search",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "types"
    ],
    "type": "object"
  },
  "TranscriptSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "transcript.content",
            "language",
            "mediaType",
            "divisionId",
            "communicationId",
            "conversationId",
            "conversationSentimentScore",
            "conversationSentimentTrend",
            "participants.initialDirection",
            "participants.participantPurpose",
            "participants.queueId",
            "participants.userId",
            "topic",
            "transcriptId"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/TranscriptSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "enum": [
          "EXACT",
          "EXACT_PHRASE",
          "PHRASE",
          "DATE_RANGE",
          "RANGE",
          "GREATER_THAN",
          "LESS_THAN"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TranscriptSearchRequest": {
    "properties": {
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "description": "The search criteria",
        "items": {
          "$ref": "#/definitions/TranscriptSearchCriteria"
        },
        "type": "array"
      },
      "returnFields": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      },
      "types": {
        "description": "Resource domain type to search",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "types"
    ],
    "type": "object"
  },
  "TranscriptTopic": {
    "properties": {
      "confidence": {
        "description": "The detection confidence of the topic.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "duration": {
        "$ref": "#/definitions/TopicDuration"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the object.",
        "readOnly": true,
        "type": "string"
      },
      "offset": {
        "$ref": "#/definitions/TopicOffset",
        "description": "Location of the phrase",
        "readOnly": true
      },
      "recordingLocation": {
        "description": "Location of the phrase in the recording in milliseconds",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "startTimeMilliseconds": {
        "description": "The start time of the topic phrase.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "topicPhrase": {
        "description": "The phrase which detected the topic. ",
        "readOnly": true,
        "type": "string"
      },
      "transcriptPhrase": {
        "description": "The transcript phrase which detected the topic.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TranscriptTopics": {
    "properties": {
      "excludes": {
        "description": "List of topics which need to be excluded in exact match criteria. This field is not mutually exclusive with includes topic list.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "includes": {
        "description": "List of topics which need to be included in exact match criteria. This field is not mutually exclusive with excludes topic list.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TranscriptUrl": {
    "properties": {
      "url": {
        "description": "The pre-signed S3 URL of the transcript",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TranscriptUrls": {
    "properties": {
      "communicationId": {
        "description": "The Communication ID",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The Conversation Reference"
      },
      "urls": {
        "description": "List of Transcript URLs",
        "items": {
          "$ref": "#/definitions/SegmentUrl"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TranscriptionConfig": {
    "properties": {
      "vendorName": {
        "description": "The name of the vendor used for speech transcription.",
        "enum": [
          "GoogleDialogflow",
          "Unknown",
          "Genesys"
        ],
        "type": "string"
      }
    },
    "required": [
      "vendorName"
    ],
    "type": "object"
  },
  "TranscriptionEnginesRequest": {
    "properties": {
      "transcriptionEngines": {
        "description": "The transcription engine setting",
        "items": {
          "$ref": "#/definitions/ProgramTranscriptionEngine"
        },
        "type": "array"
      }
    },
    "required": [
      "transcriptionEngines"
    ],
    "type": "object"
  },
  "TranscriptionSettings": {
    "properties": {
      "contentSearchEnabled": {
        "description": "Setting to enable/disable content search",
        "type": "boolean"
      },
      "lowLatencyTranscriptionEnabled": {
        "description": "Boolean flag indicating whether low latency transcription via Notification API is enabled",
        "type": "boolean"
      },
      "pciDssRedactionEnabled": {
        "description": "Setting to enable/disable PCI DSS Redaction",
        "type": "boolean"
      },
      "piiRedactionEnabled": {
        "description": "Setting to enable/disable PII Redaction",
        "type": "boolean"
      },
      "transcription": {
        "description": "Setting to enable/disable transcription capability",
        "enum": [
          "Disabled",
          "EnabledGlobally",
          "EnabledQueueFlow"
        ],
        "type": "string"
      },
      "transcriptionConfidenceThreshold": {
        "description": "Configure confidence threshold. The possible values are from 1 to 100.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "transcription",
      "transcriptionConfidenceThreshold"
    ],
    "type": "object"
  },
  "Transcripts": {
    "properties": {
      "contains": {
        "description": "List of transcript contents which needs to satisfy contains criteria",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "doesNotContain": {
        "description": "List of transcript contents which needs to satisfy does not contain criteria",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "exactMatch": {
        "description": "List of transcript contents which needs to satisfy exact match criteria",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TransferDestination": {
    "properties": {
      "address": {
        "description": "The destination address if the command destination is an endpoint.",
        "type": "string"
      },
      "userId": {
        "description": "The id of the user if the command destination is a user.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TransferInitiator": {
    "properties": {
      "userId": {
        "description": "The id of the user who initiated the command if it was initiated by a user.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TransferRequest": {
    "properties": {
      "address": {
        "description": "The user ID or queue ID of the transfer target. Address like a phone number can not be used for callbacks, but they can be used for other forms of communication.",
        "type": "string"
      },
      "keepInternalMessageAlive": {
        "description": "If true, the digital internal message will NOT be terminated.",
        "type": "boolean"
      },
      "queueId": {
        "description": "The queue ID of the transfer target.",
        "type": "string"
      },
      "transferType": {
        "description": "The type of transfer to perform. Attended, where the initiating agent maintains ownership of the conversation until the intended recipient accepts the transfer, or Unattended, where the initiating agent immediately disconnects. Default is Unattended.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      },
      "userId": {
        "description": "The user ID of the transfer target.",
        "type": "string"
      },
      "userName": {
        "description": "The user name of the transfer target.",
        "type": "string"
      },
      "voicemail": {
        "description": "If true, transfer to the voicemail inbox of the participant that is being replaced.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TransferResponse": {
    "properties": {
      "dateIssued": {
        "description": "The date/time that this command was issued. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "destination": {
        "$ref": "#/definitions/TransferDestination",
        "description": "The destination of the command."
      },
      "id": {
        "description": "The id of the command.",
        "type": "string"
      },
      "initiator": {
        "$ref": "#/definitions/TransferInitiator",
        "description": "The initiator of the command."
      },
      "modifiedBy": {
        "$ref": "#/definitions/TransferResponseModifiedBy",
        "description": "The user or entity that modified the command."
      },
      "state": {
        "description": "The state of the command.",
        "enum": [
          "Pending",
          "Active",
          "Complete",
          "Canceled",
          "Failed",
          "Timeout",
          "Unknown"
        ],
        "type": "string"
      },
      "transferType": {
        "description": "The type of transfer to perform.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TransferResponseModifiedBy": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TransferToAgentRequest": {
    "properties": {
      "keepInternalMessageAlive": {
        "description": "If true, the digital internal message will NOT be terminated.",
        "type": "boolean"
      },
      "transferType": {
        "description": "The type of transfer to perform. Attended, where the initiating agent maintains ownership of the conversation until the intended recipient accepts the transfer, or Unattended, where the initiating agent immediately disconnects. Default is Unattended.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      },
      "userDisplayName": {
        "description": "The name of the internal user.",
        "type": "string"
      },
      "userId": {
        "description": "The id of the internal user.",
        "type": "string"
      },
      "userName": {
        "description": "The userName (like user’s email) of the internal user.",
        "type": "string"
      },
      "voicemail": {
        "description": "If true, transfer to the voicemail inbox of the participant that is being replaced.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TransferToExternalRequest": {
    "properties": {
      "address": {
        "description": "The address (like phone number) of the external contact.",
        "type": "string"
      },
      "keepInternalMessageAlive": {
        "description": "If true, the digital internal message will NOT be terminated.",
        "type": "boolean"
      },
      "transferType": {
        "description": "The type of transfer to perform. Attended, where the initiating agent maintains ownership of the conversation until the intended recipient accepts the transfer, or Unattended, where the initiating agent immediately disconnects. Default is Unattended.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TransferToQueueRequest": {
    "properties": {
      "keepInternalMessageAlive": {
        "description": "If true, the digital internal message will NOT be terminated.",
        "type": "boolean"
      },
      "queueId": {
        "description": "The id of the queue.",
        "type": "string"
      },
      "queueName": {
        "description": "The name of the queue.",
        "type": "string"
      },
      "transferType": {
        "description": "The type of transfer to perform. Attended, where the initiating agent maintains ownership of the conversation until the intended recipient accepts the transfer, or Unattended, where the initiating agent immediately disconnects. Default is Unattended.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrendData": {
    "properties": {
      "averageValue": {
        "description": "Average metric value",
        "format": "double",
        "type": "number"
      },
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "percentOfGoal": {
        "description": "Percent of goal",
        "format": "double",
        "type": "number"
      }
    },
    "type": "object"
  },
  "Trigger": {
    "description": "Defines a process automation trigger.",
    "properties": {
      "delayBySeconds": {
        "description": "Optional delay invoking target after trigger fires. Must be in the range of 60 to 900 seconds. Only one of eventTTLSeconds or delayBySeconds can be set.",
        "format": "int32",
        "type": "integer"
      },
      "description": {
        "description": "Description of the trigger. Can be up to 512 characters in length.",
        "type": "string"
      },
      "enabled": {
        "description": "Whether or not the trigger is enabled",
        "type": "boolean"
      },
      "eventTTLSeconds": {
        "description": "Optional length of time that events are meaningful after origination. Events older than this threshold may be dropped if the platform is delayed in processing events. Unset means events are valid indefinitely, otherwise must be set to at least 10 seconds. Only one of eventTTLSeconds or delayBySeconds can be set.",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "matchCriteria": {
        "description": "The configuration for when a trigger is considered to be a match for an event",
        "items": {
          "$ref": "#/definitions/MatchCriteria"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the trigger",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "target": {
        "$ref": "#/definitions/TriggerTarget",
        "description": "The target to invoke when a matching event is received"
      },
      "topicName": {
        "description": "The topic that will cause the trigger to be invoked",
        "type": "string"
      },
      "version": {
        "description": "Version of this trigger",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TriggerEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Trigger"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TriggerTarget": {
    "description": "The target of a trigger invocation",
    "properties": {
      "id": {
        "description": "The ID of the entity to target",
        "type": "string"
      },
      "type": {
        "description": "The entity type to target",
        "enum": [
          "Workflow"
        ],
        "type": "string"
      },
      "workflowTargetSettings": {
        "$ref": "#/definitions/WorkflowTargetSettings",
        "description": "Optional config for the target."
      }
    },
    "type": "object"
  },
  "Trunk": {
    "properties": {
      "connectedStatus": {
        "$ref": "#/definitions/TrunkConnectedStatus",
        "description": "The connected status of the trunk",
        "readOnly": true
      },
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "edge": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Edge using this trunk."
      },
      "edgeGroup": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The edge group associated with this trunk."
      },
      "enabled": {
        "description": "True if the Edge used by this trunk is in-service",
        "type": "boolean"
      },
      "family": {
        "description": "The IP Network Family of the trunk",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inService": {
        "description": "True if this trunk is in-service.  This comes from the trunk_enabled property of the referenced trunk base.",
        "readOnly": true,
        "type": "boolean"
      },
      "ipStatus": {
        "$ref": "#/definitions/TrunkMetricsNetworkTypeIp",
        "description": "The trunk ipStatus",
        "readOnly": true
      },
      "logicalInterface": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The Logical Interface on the Edge to which the trunk is assigned.",
        "readOnly": true
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "optionsEnabledStatus": {
        "description": "Returns Enabled when the trunk base supports the availability interval and it has a value greater than 0.",
        "enum": [
          "ENABLED",
          "DISABLED",
          "NOT_SUPPORTED"
        ],
        "readOnly": true,
        "type": "string"
      },
      "optionsStatus": {
        "description": "The trunk optionsStatus",
        "items": {
          "$ref": "#/definitions/TrunkMetricsOptions"
        },
        "readOnly": true,
        "type": "array"
      },
      "proxyAddressList": {
        "description": "The list of proxy addresses (ports if provided) for the trunk",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "registersEnabledStatus": {
        "description": "Returns Enabled when the trunk base supports the registration interval and it has a value greater than 0.",
        "enum": [
          "ENABLED",
          "DISABLED",
          "NOT_SUPPORTED"
        ],
        "readOnly": true,
        "type": "string"
      },
      "registersStatus": {
        "description": "The trunk registersStatus",
        "items": {
          "$ref": "#/definitions/TrunkMetricsRegisters"
        },
        "readOnly": true,
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "trunkBase": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The trunk base configuration used on this trunk."
      },
      "trunkMetabase": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The metabase used to create this trunk."
      },
      "trunkType": {
        "description": "The type of this trunk.",
        "enum": [
          "EXTERNAL",
          "PHONE",
          "EDGE"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "TrunkBase": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "createdByApp": {
        "description": "The application that created the resource.",
        "readOnly": true,
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the resource was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the resource. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The resource's description.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inboundSite": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Allows a customer to set the site to which inbound calls will be routed"
      },
      "managed": {
        "description": "Is this trunk being managed remotely. This property is synchronized with the managed property of the Edge Group to which it is assigned.",
        "type": "boolean"
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedByApp": {
        "description": "The application that last modified the resource.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "The name of the entity.",
        "type": "string"
      },
      "properties": {
        "additionalProperties": {
          "type": "object"
        },
        "type": "object"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "site": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Used to determine the media regions for inbound and outbound calls through a trunk. Also determines the dial plan to use for calls that came in on a trunk and have to be sent out on it as well."
      },
      "state": {
        "description": "Indicates if the resource is active, inactive, or deleted.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "trunkMetabase": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The meta-base this trunk is based on."
      },
      "trunkType": {
        "description": "The type of this trunk base.",
        "enum": [
          "EXTERNAL",
          "PHONE",
          "EDGE"
        ],
        "type": "string"
      },
      "version": {
        "description": "The current version of the resource.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "name",
      "trunkMetabase",
      "trunkType"
    ],
    "type": "object"
  },
  "TrunkBaseAssignment": {
    "properties": {
      "family": {
        "description": "The address family to use with the trunk base settings. 2=IPv4, 23=IPv6",
        "format": "int32",
        "type": "integer"
      },
      "trunkBase": {
        "$ref": "#/definitions/TrunkBase",
        "description": "A trunk base settings reference."
      }
    },
    "type": "object"
  },
  "TrunkBaseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TrunkBase"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrunkConnectedStatus": {
    "properties": {
      "connected": {
        "type": "boolean"
      },
      "connectedStateTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrunkEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Trunk"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrunkErrorInfo": {
    "properties": {
      "code": {
        "type": "string"
      },
      "details": {
        "$ref": "#/definitions/TrunkErrorInfoDetails"
      },
      "text": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrunkErrorInfoDetails": {
    "properties": {
      "code": {
        "type": "string"
      },
      "hostname": {
        "type": "string"
      },
      "message": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrunkMetabaseEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Metabase"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      },
      "totalNumberOfEntities": {
        "description": "The total organization-wide number of entities.",
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrunkMetrics": {
    "properties": {
      "calls": {
        "$ref": "#/definitions/TrunkMetricsCalls"
      },
      "eventTime": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "logicalInterface": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "qos": {
        "$ref": "#/definitions/TrunkMetricsQoS"
      },
      "trunk": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "TrunkMetricsCalls": {
    "properties": {
      "inboundCallCount": {
        "format": "int32",
        "type": "integer"
      },
      "outboundCallCount": {
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrunkMetricsNetworkTypeIp": {
    "properties": {
      "address": {
        "description": "Assigned IP Address for the interface",
        "type": "string"
      },
      "errorInfo": {
        "$ref": "#/definitions/TrunkErrorInfo",
        "description": "Information about the error."
      }
    },
    "type": "object"
  },
  "TrunkMetricsOptions": {
    "properties": {
      "errorInfo": {
        "$ref": "#/definitions/TrunkErrorInfo"
      },
      "optionState": {
        "type": "boolean"
      },
      "optionStateTime": {
        "description": "ISO 8601 format UTC absolute date \u0026 time of the last change of the option state.",
        "format": "date-time",
        "type": "string"
      },
      "proxyAddress": {
        "description": "Server proxy address that this options array element represents.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrunkMetricsQoS": {
    "properties": {
      "mismatchCount": {
        "description": "Total number of QoS mismatches over the course of the last 24-hour period (sliding window).",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "mismatchCount"
    ],
    "type": "object"
  },
  "TrunkMetricsRegisters": {
    "properties": {
      "errorInfo": {
        "$ref": "#/definitions/TrunkErrorInfo"
      },
      "proxyAddress": {
        "description": "Server proxy address that this registers array element represents.",
        "type": "string"
      },
      "registerState": {
        "description": "True if last REGISTER message had positive response; false if error response or no response.",
        "type": "boolean"
      },
      "registerStateTime": {
        "description": "ISO 8601 format UTC absolute date \u0026 time of the last change of the register state.",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrunkRecordingEnabledCount": {
    "properties": {
      "disabledCount": {
        "description": "The amount of trunks that do not have recording enabled",
        "format": "int32",
        "type": "integer"
      },
      "enabledCount": {
        "description": "The amount of trunks that have recording enabled",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrustCreate": {
    "properties": {
      "dateExpired": {
        "description": "The expiration date of the trust. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "enabled": {
        "description": "If disabled no trustee user will have access, even if they were previously added.",
        "type": "boolean"
      },
      "groups": {
        "description": "The list of groups and their roles to which access will be granted. The groups are from the trustee and the roles are from the trustor. If no groups are specified, at least one user is required.",
        "items": {
          "$ref": "#/definitions/TrustMemberCreate"
        },
        "type": "array"
      },
      "pairingId": {
        "description": "The pairing Id created by the trustee. This is required to prove that the trustee agrees to the relationship.  Not required when creating a default pairing with Customer Care.",
        "type": "string"
      },
      "users": {
        "description": "The list of users and their roles to which access will be granted. The users are from the trustee and the roles are from the trustor. If no users are specified, at least one group is required.",
        "items": {
          "$ref": "#/definitions/TrustMemberCreate"
        },
        "type": "array"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "TrustEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Trustee"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrustGroup": {
    "properties": {
      "addresses": {
        "items": {
          "$ref": "#/definitions/GroupContact"
        },
        "type": "array"
      },
      "createdBy": {
        "$ref": "#/definitions/OrgUser",
        "description": "The user that added trusted group.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date on which the trusted group was added. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified date/time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "memberCount": {
        "description": "Number of members.",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "name": {
        "description": "The group name.",
        "type": "string"
      },
      "owners": {
        "description": "Owners of the group",
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "rolesEnabled": {
        "description": "Allow roles to be assigned to this group",
        "type": "boolean"
      },
      "rulesVisible": {
        "description": "Are membership rules visible to the person requesting to view the group",
        "type": "boolean"
      },
      "state": {
        "description": "Active, inactive, or deleted state.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "Type of group.",
        "enum": [
          "official",
          "social"
        ],
        "type": "string"
      },
      "version": {
        "description": "Current version for this resource.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "visibility": {
        "description": "Who can view this group",
        "enum": [
          "public",
          "owners",
          "members"
        ],
        "type": "string"
      }
    },
    "required": [
      "name",
      "rulesVisible",
      "type",
      "visibility"
    ],
    "type": "object"
  },
  "TrustGroupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TrustGroup"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrustMemberCreate": {
    "properties": {
      "id": {
        "description": "Trustee User or Group Id",
        "type": "string"
      },
      "roleDivisions": {
        "$ref": "#/definitions/RoleDivisionGrants",
        "description": "The list of trustor organization roles granting this user or group access paired with the divisions for those roles."
      },
      "roleIds": {
        "description": "The list of roles to be granted to this user or group. Roles will be granted in all divisions.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "TrustRequest": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/OrgUser",
        "description": "User who created this request.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date request was created. There is a 48 hour expiration on all requests. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "groups": {
        "description": "The list of trustee groups that are requesting access.",
        "items": {
          "$ref": "#/definitions/TrustGroup"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "trustee": {
        "$ref": "#/definitions/Organization",
        "description": "Trustee organization who generated this request.",
        "readOnly": true
      },
      "users": {
        "description": "The list of trustee users that are requesting access.",
        "items": {
          "$ref": "#/definitions/OrgUser"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "required": [
      "trustee"
    ],
    "type": "object"
  },
  "TrustRequestCreate": {
    "properties": {
      "groupIds": {
        "description": "The list of trustee groups that are requesting access. If no groups are specified, at least one user is required.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "userIds": {
        "description": "The list of trustee users that are requesting access. If no users are specified, at least one group is required.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "TrustUpdate": {
    "properties": {
      "dateExpired": {
        "description": "The expiration date of the trust. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "enabled": {
        "description": "If disabled no trustee user will have access, even if they were previously added.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "TrustUser": {
    "properties": {
      "acdAutoAnswer": {
        "description": "acd auto answer",
        "type": "boolean"
      },
      "addresses": {
        "description": "Email addresses and phone numbers for this user",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "authorization": {
        "$ref": "#/definitions/UserAuthorization",
        "description": "Roles and permissions assigned to the user",
        "readOnly": true
      },
      "biography": {
        "$ref": "#/definitions/Biography"
      },
      "certifications": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "chat": {
        "$ref": "#/definitions/Chat"
      },
      "conversationSummary": {
        "$ref": "#/definitions/UserConversationSummary",
        "description": "Summary of conversion statistics for conversation types.",
        "readOnly": true
      },
      "dateLastLogin": {
        "description": "The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "department": {
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "email": {
        "type": "string"
      },
      "employerInfo": {
        "$ref": "#/definitions/EmployerInfo"
      },
      "geolocation": {
        "$ref": "#/definitions/Geolocation",
        "description": "Current geolocation position",
        "readOnly": true
      },
      "groups": {
        "description": "The groups the user is a member of",
        "items": {
          "$ref": "#/definitions/Group"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "integrationPresence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Integration presence",
        "readOnly": true
      },
      "languagePreference": {
        "description": "preferred language by the user",
        "readOnly": true,
        "type": "string"
      },
      "languages": {
        "description": "Routing (ACD) languages possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "lastTokenIssued": {
        "$ref": "#/definitions/OAuthLastTokenIssued"
      },
      "locations": {
        "description": "The user placement at each site location.",
        "items": {
          "$ref": "#/definitions/Location"
        },
        "readOnly": true,
        "type": "array"
      },
      "manager": {
        "$ref": "#/definitions/User"
      },
      "name": {
        "type": "string"
      },
      "outOfOffice": {
        "$ref": "#/definitions/OutOfOffice",
        "description": "Determine if out of office is enabled",
        "readOnly": true
      },
      "preferredName": {
        "description": "Preferred full name of the agent",
        "type": "string"
      },
      "presence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Active presence",
        "readOnly": true
      },
      "primaryContactInfo": {
        "description": "Auto populated from addresses.",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "readOnly": true,
        "type": "array"
      },
      "profileSkills": {
        "description": "Profile skills possessed by the user",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "routingStatus": {
        "$ref": "#/definitions/RoutingStatus",
        "description": "ACD routing status",
        "readOnly": true
      },
      "skills": {
        "description": "Routing (ACD) skills possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingSkill"
        },
        "readOnly": true,
        "type": "array"
      },
      "state": {
        "description": "The current state for this user.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "station": {
        "$ref": "#/definitions/UserStations",
        "description": "Effective, default, and last station information",
        "readOnly": true
      },
      "team": {
        "$ref": "#/definitions/Team",
        "description": "The team the user is a member of",
        "readOnly": true
      },
      "title": {
        "type": "string"
      },
      "trustUserDetails": {
        "$ref": "#/definitions/TrustUserDetails"
      },
      "username": {
        "type": "string"
      },
      "version": {
        "description": "Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.",
        "format": "int32",
        "type": "integer"
      },
      "workPlanBidRanks": {
        "$ref": "#/definitions/WorkPlanBidRanks",
        "description": "The WFM work plan bid rank settings for the user",
        "readOnly": true
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "TrustUserDetails": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/OrgUser",
        "description": "User that added trusted user.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date Trust User was added. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrustUserEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TrustUser"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TrustedCertificateInfo": {
    "properties": {
      "description": {
        "description": "The description of the certificate",
        "type": "string"
      },
      "serialNumber": {
        "description": "The serial number of the certificate",
        "type": "string"
      },
      "signature": {
        "description": "The signature of the certificate",
        "type": "string"
      }
    },
    "type": "object"
  },
  "TrustedCertificates": {
    "description": "Information about trusted certificates",
    "properties": {
      "entities": {
        "description": "The list of trusted certificates",
        "items": {
          "$ref": "#/definitions/TrustedCertificateInfo"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of trusted certificates",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Trustee": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/OrgUser",
        "description": "User that created trust.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date Trust was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateExpired": {
        "description": "The expiration date of the trust. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "enabled": {
        "description": "If disabled no trustee user will have access, even if they were previously added.",
        "type": "boolean"
      },
      "hasFullAccess": {
        "description": "Denotes if trustee uses full access role by default.",
        "type": "boolean"
      },
      "id": {
        "description": "Organization Id for this trust.",
        "readOnly": true,
        "type": "string"
      },
      "isTrustedUser": {
        "description": "Denotes if trustee is given Trusted User access by default.",
        "type": "boolean"
      },
      "organization": {
        "$ref": "#/definitions/Organization",
        "description": "Organization associated with this trust.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "usesDefaultRole": {
        "description": "Denotes if trustee uses admin role by default.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "TrusteeAuditQueryRequest": {
    "properties": {
      "endDate": {
        "description": "Ending date/time for the audit search. ISO-8601 formatted date-time, UTC.",
        "format": "date-time",
        "type": "string"
      },
      "facets": {
        "description": "Facet information to be returned with the query results.",
        "items": {
          "$ref": "#/definitions/Facet"
        },
        "type": "array"
      },
      "filters": {
        "description": "Additional custom filters to be applied to the query.",
        "items": {
          "$ref": "#/definitions/Filter"
        },
        "type": "array"
      },
      "queryPhrase": {
        "description": "Word or phrase to look for in audit bodies.",
        "type": "string"
      },
      "startDate": {
        "description": "Starting date/time for the audit search. ISO-8601 formatted date-time, UTC.",
        "format": "date-time",
        "type": "string"
      },
      "trusteeOrganizationIds": {
        "description": "Limit returned audits to these trustee organizationIds.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "trusteeUserIds": {
        "description": "Limit returned audits to these trustee userIds.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "trusteeOrganizationIds",
      "trusteeUserIds"
    ],
    "type": "object"
  },
  "TrusteeAuthorization": {
    "properties": {
      "permissions": {
        "description": "Permissions that the trustee user has in the trustor organization",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "TrusteeBillingOverview": {
    "properties": {
      "billingPeriodEndDate": {
        "description": "Date-time the billing period ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "billingPeriodStartDate": {
        "description": "Date-time the billing period started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "contractAmendmentDate": {
        "description": "Date-time the contract was last amended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "contractEffectiveDate": {
        "description": "Date-time the contract became effective. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "contractEndDate": {
        "description": "Date-time the contract ends. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "currency": {
        "description": "The currency type.",
        "type": "string"
      },
      "enabledProducts": {
        "description": "The charge short names for products enabled during the specified period.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "inRampPeriod": {
        "type": "boolean"
      },
      "minimumMonthlyAmount": {
        "description": "Minimum amount that will be charged for the month",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "organization": {
        "$ref": "#/definitions/NamedEntity",
        "description": "Organization"
      },
      "rampPeriodEndDate": {
        "description": "Date-time the ramp period ends. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "rampPeriodStartDate": {
        "description": "Date-time the ramp period starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "subscriptionType": {
        "description": "The subscription type.",
        "enum": [
          "ININ",
          "MONTH_TO_MONTH",
          "FREE_TRIAL_MONTH_TO_MONTH",
          "PREPAY_MONTHLY_COMMITMENT",
          "PREPAY",
          "DEV_ORG_MONTH_TO_MONTH",
          "DEV_ORG_PREPAY_MONTHLY_COMMITMENT",
          "DEV_ORG_PREPAY"
        ],
        "type": "string"
      },
      "usages": {
        "description": "Usages for the specified period.",
        "items": {
          "$ref": "#/definitions/SubscriptionOverviewUsage"
        },
        "type": "array"
      }
    },
    "required": [
      "currency",
      "enabledProducts",
      "organization",
      "subscriptionType",
      "usages"
    ],
    "type": "object"
  },
  "Trustor": {
    "properties": {
      "authorization": {
        "$ref": "#/definitions/TrusteeAuthorization",
        "description": "Authorization for the trustee user has in this trustor organization",
        "readOnly": true
      },
      "createdBy": {
        "$ref": "#/definitions/OrgUser",
        "description": "User that created trust.",
        "readOnly": true
      },
      "dateCreated": {
        "description": "Date Trust was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "enabled": {
        "description": "If disabled no trustee user will have access, even if they were previously added.",
        "type": "boolean"
      },
      "id": {
        "description": "Organization Id for this trust.",
        "readOnly": true,
        "type": "string"
      },
      "organization": {
        "$ref": "#/definitions/Organization",
        "description": "Organization associated with this trust.",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "TrustorAuditQueryRequest": {
    "properties": {
      "endDate": {
        "description": "Ending date/time for the audit search. ISO-8601 formatted date-time, UTC.",
        "format": "date-time",
        "type": "string"
      },
      "facets": {
        "description": "Facet information to be returned with the query results.",
        "items": {
          "$ref": "#/definitions/Facet"
        },
        "type": "array"
      },
      "filters": {
        "description": "Additional custom filters to be applied to the query.",
        "items": {
          "$ref": "#/definitions/Filter"
        },
        "type": "array"
      },
      "queryPhrase": {
        "description": "Word or phrase to look for in audit bodies.",
        "type": "string"
      },
      "startDate": {
        "description": "Starting date/time for the audit search. ISO-8601 formatted date-time, UTC.",
        "format": "date-time",
        "type": "string"
      },
      "trusteeUserIds": {
        "description": "Limit returned audits to these trustee userIds.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "trustorOrganizationId": {
        "description": "Limit returned audits to this trustor organizationId.",
        "type": "string"
      }
    },
    "required": [
      "trusteeUserIds",
      "trustorOrganizationId"
    ],
    "type": "object"
  },
  "TrustorEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Trustor"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TtsEngineEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isDefault": {
        "description": "The TTS engine is the global default engine",
        "type": "boolean"
      },
      "isSecure": {
        "description": "The TTS engine can be used in a secure call flow",
        "type": "boolean"
      },
      "languages": {
        "description": "The set of languages the TTS engine supports",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "type": "string"
      },
      "outputFormats": {
        "description": "The set of output formats the TTS engine can produce",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "voices": {
        "description": "The set of voices the TTS engine supports",
        "items": {
          "$ref": "#/definitions/TtsVoiceEntity"
        },
        "type": "array"
      }
    },
    "required": [
      "languages",
      "outputFormats"
    ],
    "type": "object"
  },
  "TtsEngineEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TtsEngineEntity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TtsSettings": {
    "properties": {
      "defaultEngine": {
        "description": "ID of the global default TTS engine",
        "type": "string"
      },
      "languageOverrides": {
        "description": "The list of default overrides for specific languages",
        "items": {
          "$ref": "#/definitions/LanguageOverride"
        },
        "type": "array"
      }
    },
    "required": [
      "defaultEngine",
      "languageOverrides"
    ],
    "type": "object"
  },
  "TtsVoiceEntity": {
    "properties": {
      "engine": {
        "$ref": "#/definitions/TtsEngineEntity",
        "description": "Ths TTS engine this voice belongs to"
      },
      "gender": {
        "description": "The gender of the TTS voice",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isDefault": {
        "description": "The voice is the default voice for its language",
        "type": "boolean"
      },
      "language": {
        "description": "The language supported by the TTS voice",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "engine",
      "gender",
      "language"
    ],
    "type": "object"
  },
  "TtsVoiceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/TtsVoiceEntity"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "TwitterId": {
    "description": "User information for a twitter account",
    "properties": {
      "id": {
        "description": "twitter user.id_str",
        "type": "string"
      },
      "name": {
        "description": "twitter user.name",
        "type": "string"
      },
      "profileUrl": {
        "description": "url of user's twitter profile",
        "readOnly": true,
        "type": "string"
      },
      "screenName": {
        "description": "twitter user.screen_name",
        "type": "string"
      },
      "verified": {
        "description": "whether this data has been verified using the twitter API",
        "readOnly": true,
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "TypingSetting": {
    "properties": {
      "on": {
        "$ref": "#/definitions/SettingDirection",
        "description": "Should typing indication Events be sent"
      }
    },
    "type": "object"
  },
  "UCI10n": {
    "properties": {
      "name": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "UCIcon": {
    "properties": {
      "vector": {
        "description": "vector",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "vector"
    ],
    "type": "object"
  },
  "UCIntegration": {
    "description": "UC Integration UI configuration data",
    "properties": {
      "badgeIcons": {
        "additionalProperties": {
          "$ref": "#/definitions/UCIcon"
        },
        "description": "badgeIcon",
        "readOnly": true,
        "type": "object"
      },
      "i10n": {
        "additionalProperties": {
          "$ref": "#/definitions/UCI10n"
        },
        "description": "i10n",
        "readOnly": true,
        "type": "object"
      },
      "icon": {
        "$ref": "#/definitions/UCIcon",
        "description": "icon",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationPresenceSource": {
        "description": "integrationPresenceType",
        "enum": [
          "MicrosoftTeams",
          "ZoomPhone",
          "EightByEight"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "pbxPermission": {
        "description": "pbxPermission",
        "readOnly": true,
        "type": "string"
      },
      "polledPresence": {
        "description": "polledPresence",
        "readOnly": true,
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "ucIntegrationKey": {
        "description": "ucIntegrationKey",
        "readOnly": true,
        "type": "string"
      },
      "userPermissions": {
        "description": "userPermissions",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "required": [
      "badgeIcons",
      "i10n",
      "icon",
      "integrationPresenceSource",
      "pbxPermission",
      "polledPresence",
      "ucIntegrationKey",
      "userPermissions"
    ],
    "type": "object"
  },
  "UCIntegrationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UCIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UCThirdPartyPresence": {
    "description": "Update a Genesys Cloud user's presence from a given 3rd-party integration",
    "properties": {
      "dateModified": {
        "description": "ISO 8601 timestamp of presence value change.",
        "format": "date-time",
        "type": "string"
      },
      "email": {
        "description": "Primary Email address of the associated Genesys Cloud user.",
        "type": "string"
      },
      "message": {
        "description": "Integration presence message.",
        "type": "string"
      },
      "presence": {
        "description": "Integration presence value.",
        "type": "string"
      }
    },
    "required": [
      "email",
      "presence"
    ],
    "type": "object"
  },
  "UcUserPresence": {
    "description": "Presence from a given source for a user",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "presenceDefinition": {
        "$ref": "#/definitions/PresenceDefinition"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "Deprecated - The sourceID field should be used as a replacement.",
        "type": "string"
      },
      "sourceId": {
        "description": "The registered source ID from where the presence was set",
        "type": "string"
      },
      "userId": {
        "description": "User ID of the associated Genesys Cloud user.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UnansweredGroup": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "label": {
        "description": "Knowledge base unanswered group label",
        "type": "string"
      },
      "phraseGroups": {
        "description": "Represents a list of phrase groups inside an unanswered group",
        "items": {
          "$ref": "#/definitions/UnansweredPhraseGroup"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "statistics": {
        "$ref": "#/definitions/KnowledgeGroupStatistics",
        "description": "Statistics object containing the various hit counts for an unanswered group"
      },
      "suggestedDocuments": {
        "description": "Represents a list of documents that may be linked to an unanswered group",
        "items": {
          "$ref": "#/definitions/UnansweredGroupSuggestedDocument"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UnansweredGroupSuggestedDocument": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UnansweredGroups": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UnansweredGroup"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UnansweredPhrase": {
    "properties": {
      "id": {
        "description": "Id of an unanswered phrase",
        "type": "string"
      },
      "text": {
        "description": "Phrase text of an unanswered phrase",
        "type": "string"
      },
      "unlinkedPhraseHitCount": {
        "description": "Hit count of an unlinked phrase",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UnansweredPhraseGroup": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "label": {
        "description": "Knowledge base phrase group label",
        "type": "string"
      },
      "phrases": {
        "description": "List of unanswered phrases in a phrase group",
        "items": {
          "$ref": "#/definitions/UnansweredPhrase"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "unlinkedPhraseCount": {
        "description": "Unique phrase count of the unlinked phrase group",
        "format": "int32",
        "type": "integer"
      },
      "unlinkedPhraseHitCount": {
        "description": "Hit count of the unlinked phrase group",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UnansweredPhraseGroupPatchRequestBody": {
    "properties": {
      "dateEnd": {
        "description": "The end date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStart": {
        "description": "The start date to be used for filtering phrases. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "phraseAssociations": {
        "description": "List of phrases and documents to be linked",
        "items": {
          "$ref": "#/definitions/PhraseAssociations"
        },
        "type": "array"
      }
    },
    "required": [
      "phraseAssociations"
    ],
    "type": "object"
  },
  "UnansweredPhraseGroupUpdateResponse": {
    "properties": {
      "group": {
        "$ref": "#/definitions/UnansweredGroup",
        "description": "Knowledge base unanswered group response"
      },
      "phraseAssociations": {
        "description": "List of phrases and documents linked in the patch request",
        "items": {
          "$ref": "#/definitions/PhraseAssociations"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UnifiedCommunicationsIntegration": {
    "description": "UC Integration UI configuration data",
    "properties": {
      "badgeIcons": {
        "additionalProperties": {
          "$ref": "#/definitions/UCIcon"
        },
        "description": "badgeIcon",
        "readOnly": true,
        "type": "object"
      },
      "i10n": {
        "additionalProperties": {
          "$ref": "#/definitions/UCI10n"
        },
        "description": "i10n",
        "readOnly": true,
        "type": "object"
      },
      "icon": {
        "$ref": "#/definitions/UCIcon",
        "description": "icon",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationPresenceSource": {
        "description": "integrationPresenceType",
        "enum": [
          "MicrosoftTeams",
          "ZoomPhone",
          "EightByEight"
        ],
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "oauthScopes": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pbxPermission": {
        "description": "pbxPermission",
        "readOnly": true,
        "type": "string"
      },
      "pollIntervalSec": {
        "description": "pollIntervalSec",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "polledPresence": {
        "description": "polledPresence",
        "readOnly": true,
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "ucIntegrationKey": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "ucIntegrationKey",
        "readOnly": true
      },
      "userPermissions": {
        "description": "userPermissions",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "required": [
      "badgeIcons",
      "i10n",
      "icon",
      "integrationPresenceSource",
      "pbxPermission",
      "polledPresence",
      "ucIntegrationKey",
      "userPermissions"
    ],
    "type": "object"
  },
  "UnifiedCommunicationsIntegrationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UnifiedCommunicationsIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UnifiedGeneralTopic": {
    "properties": {
      "name": {
        "type": "string"
      },
      "status": {
        "enum": [
          "Deprecated",
          "Outdated",
          "Modified",
          "UpToDate",
          "ToBeCreated",
          "CreatedByUser"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "UnifiedGeneralTopicEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UnifiedGeneralTopic"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UnpublishedProgramsEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Program"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UnreadFields": {
    "properties": {
      "state": {
        "description": "The new unread state of the alert",
        "type": "boolean"
      }
    },
    "required": [
      "state"
    ],
    "type": "object"
  },
  "UnreadMetric": {
    "properties": {
      "count": {
        "description": "The count of unread alerts for a specific rule type.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UnreadStatus": {
    "properties": {
      "unread": {
        "description": "Sets if the alert is read or unread.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "UpdateActionInput": {
    "properties": {
      "category": {
        "description": "Category of action, Can be up to 256 characters long",
        "type": "string"
      },
      "config": {
        "$ref": "#/definitions/ActionConfig",
        "description": "Configuration to support request and response processing"
      },
      "name": {
        "description": "Name of action, Can be up to 256 characters long",
        "type": "string"
      },
      "version": {
        "description": "Version of this action",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "UpdateActivityCodeRequest": {
    "properties": {
      "agentTimeOffSelectable": {
        "description": "Whether an agent can select this activity code when creating or editing a time off request",
        "type": "boolean"
      },
      "category": {
        "description": "The activity code's category. Attempting to change the category of a default activity code will return an error",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "type": "string"
      },
      "countsAsPaidTime": {
        "description": "Whether an agent is paid while performing this activity",
        "type": "boolean"
      },
      "countsAsWorkTime": {
        "description": "Indicates whether or not the activity should be counted as work time",
        "type": "boolean"
      },
      "countsTowardShrinkage": {
        "description": "Whether or not this activity code counts toward shrinkage calculations",
        "type": "boolean"
      },
      "interruptible": {
        "description": "Whether this activity code is considered interruptible",
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The default length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the associated business unit's list of activity codes"
      },
      "name": {
        "description": "The name of the activity code",
        "type": "string"
      },
      "plannedShrinkage": {
        "description": "Whether this activity code is considered planned or unplanned shrinkage",
        "type": "boolean"
      },
      "secondaryPresences": {
        "$ref": "#/definitions/ListWrapperSecondaryPresence",
        "description": "The secondary presences of this activity code"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateActivityPlanRequest": {
    "properties": {
      "attendeesSearchRule": {
        "$ref": "#/definitions/ValueWrapperUserSearchRule",
        "description": "Attendee search rule for this activity plan"
      },
      "description": {
        "description": "The description of the activity plan",
        "type": "string"
      },
      "facilitatorsSearchRule": {
        "$ref": "#/definitions/ValueWrapperUserSearchRule",
        "description": "Facilitator search rule for this activity plan"
      },
      "fixedAvailability": {
        "$ref": "#/definitions/ListWrapperFixedAvailability",
        "description": "Fixed availability configuration for the activity plan"
      },
      "groupSettings": {
        "$ref": "#/definitions/ValueWrapperGroupSettings",
        "description": "Group settings for the activity plan"
      },
      "name": {
        "description": "The name of the activity plan",
        "type": "string"
      },
      "optimizationObjective": {
        "description": "The optimization objective of this activity plan",
        "enum": [
          "FavorServiceGoals",
          "FavorSchedulingAll"
        ],
        "type": "string"
      },
      "serviceGoalImpactOverrides": {
        "$ref": "#/definitions/ValueWrapperActivityPlanServiceGoalImpactOverrides",
        "description": "Allowable service goal impact override settings for this activity plan"
      },
      "state": {
        "description": "The state of this activity plan",
        "enum": [
          "Active",
          "Inactive"
        ],
        "type": "string"
      },
      "transitionTimeMinutes": {
        "description": "Transition time in minutes between facilitated sessions",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UpdateAdherenceExplanationStatusRequest": {
    "properties": {
      "status": {
        "description": "The status of the adherence explanation",
        "enum": [
          "Pending",
          "Approved",
          "Denied"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "UpdateAgentWorkPlanBiddingPreference": {
    "properties": {
      "agentWorkPlanBidPreferences": {
        "description": "The list of work plan bidding preferences",
        "items": {
          "$ref": "#/definitions/AgentWorkPlanBiddingPreferenceRequest"
        },
        "type": "array"
      },
      "submitted": {
        "description": "Whether the preference is submitted",
        "type": "boolean"
      }
    },
    "required": [
      "agentWorkPlanBidPreferences",
      "submitted"
    ],
    "type": "object"
  },
  "UpdateAlternativeShiftBuSettingsRequest": {
    "properties": {
      "enabledGranularities": {
        "$ref": "#/definitions/ListWrapperAlternativeShiftBuSettingsGranularity",
        "description": "The granularity at which alternative shifts is allowed. An empty list as the wrapped value will indicate alternative shifts is disabled"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this business unit's alternative shift settings"
      },
      "minMinutesBeforeStartTime": {
        "description": "The minimum number of minutes before the start of a shift that an alternative shift can be automatically approved",
        "format": "int32",
        "type": "integer"
      },
      "retainedActivityCategories": {
        "$ref": "#/definitions/ListWrapperAlternativeShiftBuSettingsActivityCategory",
        "description": "Categories of activities that are required to remain at the same time slot for the alternative shifts offered. An empty list indicates no retained activities"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateAnalyticsDataRetentionRequest": {
    "properties": {
      "retentionDays": {
        "description": "Analytics data retention period in days to set for the organization.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "retentionDays"
    ],
    "type": "object"
  },
  "UpdateBusinessUnitRequest": {
    "properties": {
      "divisionId": {
        "description": "The ID of the division to which the business unit should be moved",
        "type": "string"
      },
      "name": {
        "description": "The name of the business unit",
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/UpdateBusinessUnitSettingsRequest",
        "description": "Configuration for the business unit"
      }
    },
    "type": "object"
  },
  "UpdateBusinessUnitSettingsRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this business unit"
      },
      "scheduling": {
        "$ref": "#/definitions/BuSchedulingSettingsRequest",
        "description": "Scheduling settings"
      },
      "shortTermForecasting": {
        "$ref": "#/definitions/BuShortTermForecastingSettings",
        "description": "Short term forecasting settings"
      },
      "startDayOfWeek": {
        "description": "The start day of week for this business unit",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "readOnly": true,
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone for this business unit, using the Olsen tz database format",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateCoachingAppointmentRequest": {
    "description": "Update coaching appointment request",
    "properties": {
      "conversationIds": {
        "description": "IDs of conversations associated with this coaching appointment.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "dateStart": {
        "description": "The date/time the coaching appointment starts. Times will be rounded down to the minute. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of coaching appointment.",
        "type": "string"
      },
      "documentIds": {
        "description": "IDs of documents associated with this coaching appointment.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "externalLinks": {
        "description": "The list of external links related to the appointment",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "lengthInMinutes": {
        "description": "The duration of coaching appointment in minutes.",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "The name of coaching appointment.",
        "type": "string"
      },
      "status": {
        "description": "The status of the coaching appointment.",
        "enum": [
          "Scheduled",
          "InProgress",
          "Completed"
        ],
        "type": "string"
      },
      "wfmSchedule": {
        "$ref": "#/definitions/WfmScheduleReference",
        "description": "The Workforce Management schedule the appointment is associated with."
      }
    },
    "type": "object"
  },
  "UpdateContactColumnActionSettings": {
    "properties": {
      "properties": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping of contact columns to their new values.",
        "example": "{\"phoneNumber\":\"+11234567890\"}, {\"lastContactedTime\":\"\"",
        "type": "object"
      },
      "updateOption": {
        "description": "The type of update to make to the specified contact column(s).",
        "enum": [
          "Set",
          "Increment",
          "Decrement",
          "CurrentTime"
        ],
        "type": "string"
      }
    },
    "required": [
      "properties",
      "updateOption"
    ],
    "type": "object"
  },
  "UpdateDraftInput": {
    "description": "Definition of an Action Draft to be created or updated.",
    "properties": {
      "category": {
        "description": "Category of action, Can be up to 256 characters long",
        "type": "string"
      },
      "config": {
        "$ref": "#/definitions/ActionConfig",
        "description": "Configuration to support request and response processing"
      },
      "contract": {
        "$ref": "#/definitions/ActionContractInput",
        "description": "Action contract"
      },
      "name": {
        "description": "Name of action, Can be up to 256 characters long",
        "type": "string"
      },
      "secure": {
        "description": "Indication of whether or not the action is designed to accept sensitive data",
        "type": "boolean"
      },
      "version": {
        "description": "Version of current Draft",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "UpdateManagementUnitRequest": {
    "properties": {
      "divisionId": {
        "description": "The new division id for the management unit",
        "type": "string"
      },
      "name": {
        "description": "The new name of the management unit",
        "type": "string"
      },
      "settings": {
        "$ref": "#/definitions/ManagementUnitSettingsRequest",
        "description": "Updated settings for the management unit"
      }
    },
    "type": "object"
  },
  "UpdateMuAgentRequest": {
    "properties": {
      "schedulable": {
        "description": "Whether the agent can be included in schedule generation",
        "type": "boolean"
      },
      "userId": {
        "description": "User to be updated",
        "type": "string"
      }
    },
    "required": [
      "userId"
    ],
    "type": "object"
  },
  "UpdateMuAgentsRequest": {
    "properties": {
      "entities": {
        "description": "List of agents to update",
        "items": {
          "$ref": "#/definitions/UpdateMuAgentRequest"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UpdateNotificationResponse": {
    "properties": {
      "id": {
        "description": "The id of the notification for mapping the potentially new mutableGroupId",
        "type": "string"
      },
      "mutableGroupId": {
        "description": "The mutableGroupId of the notification",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UpdateNotificationsRequest": {
    "properties": {
      "entities": {
        "description": "The notifications to update",
        "items": {
          "$ref": "#/definitions/WfmUserNotification"
        },
        "type": "array"
      }
    },
    "required": [
      "entities"
    ],
    "type": "object"
  },
  "UpdateNotificationsResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UpdateNotificationResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UpdatePlanningGroupRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the planning group"
      },
      "name": {
        "description": "The name of the planning group",
        "type": "string"
      },
      "routePaths": {
        "$ref": "#/definitions/SetWrapperRoutePathRequest",
        "description": "Set of route paths to associate with the planning group"
      },
      "serviceGoalTemplateId": {
        "description": "The ID of the service goal template to associate with this planning group",
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateScheduleUploadResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers for the PUT request to the url",
        "type": "object"
      },
      "uploadBodySchema": {
        "$ref": "#/definitions/UpdateScheduleUploadSchema",
        "description": "Always null. Defines the schema of the json body to be PUT to the url. The json body should be gzip encoded before uploading"
      },
      "uploadKey": {
        "description": "The key to pass to the secondary request to start processing of the upload",
        "type": "string"
      },
      "url": {
        "description": "The url to which to PUT the upload body",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UpdateScheduleUploadSchema": {
    "properties": {
      "agentSchedules": {
        "description": "Individual agent schedules",
        "items": {
          "$ref": "#/definitions/BuUpdateAgentScheduleUploadSchema"
        },
        "type": "array"
      },
      "description": {
        "description": "The description to set for the schedule",
        "type": "string"
      },
      "headcountForecast": {
        "$ref": "#/definitions/BuHeadcountForecast",
        "description": "The headcount forecast to associate with the schedule"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this schedule"
      },
      "published": {
        "description": "Whether to publish the schedule. Note: a schedule cannot be un-published unless another schedule is published over it",
        "type": "boolean"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/BuShortTermForecastReference",
        "description": "The short term forecast to associate with the schedule"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateServiceGoalTemplate": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/BuAbandonRate",
        "description": "Abandon rate targets for this service goal template"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/BuAverageSpeedOfAnswer",
        "description": "Average speed of answer targets for this service goal template"
      },
      "impactOverride": {
        "$ref": "#/definitions/ServiceGoalTemplateImpactOverride",
        "description": "Settings controlling max percent increase and decrease of service goals for this service goal template"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the service goal template"
      },
      "name": {
        "description": "The name of the service goal template.",
        "type": "string"
      },
      "serviceLevel": {
        "$ref": "#/definitions/BuServiceLevel",
        "description": "Service level targets for this service goal template"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateStaffingGroupRequest": {
    "properties": {
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the staffing group"
      },
      "name": {
        "description": "The name of the staffing group",
        "type": "string"
      },
      "userIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The set of user Ids to associate with the staffing group"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateTimeOffLimitRequest": {
    "properties": {
      "defaultLimitMinutes": {
        "description": "The default time off limit value in minutes per granularity",
        "format": "int32",
        "type": "integer"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off limit"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateTimeOffPlanBusinessUnitAssociation": {
    "properties": {
      "managementUnitIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The IDs of management units to which this time-off plan applies. This must not be set if staffingGroupIds is populated"
      },
      "staffingGroupIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The IDs of staffing groups to which this time-off plan applies. This must not be set if managementUnitIds is populated"
      }
    },
    "type": "object"
  },
  "UpdateTimeOffPlanManagementUnitAssociation": {
    "properties": {
      "staffingGroupIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The IDs of staffing groups to which this time-off plan applies. If not defined, the plan is applied to the management unit"
      }
    },
    "type": "object"
  },
  "UpdateTimeOffPlanRequest": {
    "properties": {
      "active": {
        "description": "Whether this time off plan should be used by agents.",
        "type": "boolean"
      },
      "activityCodeIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The set of activity code IDs to associate with this time off plan."
      },
      "autoApprovalRule": {
        "description": "Auto approval rule for the time off plan.",
        "enum": [
          "Never",
          "Always",
          "CheckLimits",
          "CheckActivityCodes",
          "CheckLimitsAndActivityCodes"
        ],
        "type": "string"
      },
      "daysBeforeStartToExpireFromWaitlist": {
        "description": "The number of days before the time off request start date for when the request will be expired from the waitlist.",
        "format": "int32",
        "type": "integer"
      },
      "hrisTimeOffType": {
        "$ref": "#/definitions/ValueWrapperHrisTimeOffType",
        "description": "Time off type, if this time off plan is associated with the integration."
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for the time off plan"
      },
      "name": {
        "description": "The name of this time off plan.",
        "type": "string"
      },
      "timeOffLimitIds": {
        "$ref": "#/definitions/SetWrapperString",
        "description": "The set of time off limit IDs to associate with this time off plan."
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UpdateTriggerRequest": {
    "properties": {
      "delayBySeconds": {
        "description": "Optional delay invoking target after trigger fires. Must be in the range of 60 to 900 seconds. Only one of eventTTLSeconds or delayBySeconds can be set.",
        "format": "int32",
        "type": "integer"
      },
      "description": {
        "description": "Description of the trigger. Can be up to 512 characters in length.",
        "type": "string"
      },
      "enabled": {
        "description": "Boolean indicating if Trigger is enabled",
        "type": "boolean"
      },
      "eventTTLSeconds": {
        "description": "Optional length of time that events are meaningful after origination. Events older than this threshold may be dropped if the platform is delayed in processing events. Unset means events are valid indefinitely, otherwise must be set to at least 10 seconds. Only one of eventTTLSeconds or delayBySeconds can be set.",
        "format": "int32",
        "type": "integer"
      },
      "matchCriteria": {
        "description": "The configuration for when a trigger is considered to be a match for an event",
        "items": {
          "$ref": "#/definitions/MatchCriteria"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the trigger",
        "type": "string"
      },
      "target": {
        "$ref": "#/definitions/TriggerTarget",
        "description": "The target to invoke when a matching event is received"
      },
      "topicName": {
        "description": "The topic that will cause the trigger to be invoked. Must match existing trigger topicName.",
        "type": "string"
      },
      "version": {
        "description": "Version of this trigger",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "enabled",
      "name",
      "target",
      "topicName",
      "version"
    ],
    "type": "object"
  },
  "UpdateUser": {
    "properties": {
      "acdAutoAnswer": {
        "description": "The value that denotes if acdAutoAnswer is set on the user",
        "type": "boolean"
      },
      "addresses": {
        "description": "Email address, phone number, and/or extension for this user. One entry is allowed per media type",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "biography": {
        "$ref": "#/definitions/Biography"
      },
      "certifications": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "chat": {
        "$ref": "#/definitions/Chat"
      },
      "department": {
        "type": "string"
      },
      "email": {
        "type": "string"
      },
      "employerInfo": {
        "$ref": "#/definitions/EmployerInfo"
      },
      "groups": {
        "description": "The groups the user is a member of",
        "items": {
          "$ref": "#/definitions/Group"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "locations": {
        "description": "The user placement at each site location.",
        "items": {
          "$ref": "#/definitions/Location"
        },
        "type": "array"
      },
      "manager": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "preferredName": {
        "description": "Preferred full name of agent",
        "type": "string"
      },
      "primaryContactInfo": {
        "description": "The address(s) used for primary contact. Updates to the corresponding address in the addresses list will be reflected here.",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "readOnly": true,
        "type": "array"
      },
      "profileSkills": {
        "description": "Profile skills possessed by the user",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the user. This property can be used to restore a deleted user or transition between active and inactive. If specified, it is the only modifiable field.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "title": {
        "type": "string"
      },
      "username": {
        "type": "string"
      },
      "version": {
        "description": "This value should be the current version of the user. The current version can be obtained with a GET on the user before doing a PATCH.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "UpdateUtilizationLabelRequest": {
    "properties": {
      "name": {
        "description": "The utilization label name.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "UpdateVerifierRequest": {
    "properties": {
      "default": {
        "description": "Indicates whether this will be the default verifier.",
        "type": "boolean"
      },
      "enabled": {
        "description": "Indicates whether this verifier will be enabled.",
        "type": "boolean"
      },
      "name": {
        "description": "The name of the verifier.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UpdateWorkPlanBid": {
    "description": "Update work plan bid model",
    "properties": {
      "agentRankingType": {
        "description": "The type of agent ranking selected for this bid",
        "enum": [
          "HireDate",
          "Performance"
        ],
        "type": "string"
      },
      "bidWindowEndDate": {
        "description": "The bid end date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "bidWindowStartDate": {
        "description": "The bid start date where agents start participate in work plan bidding in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "effectiveDate": {
        "description": "The date when agents will be assigned to the new work plan in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "forecast": {
        "$ref": "#/definitions/BuShortTermForecastWeekReference",
        "description": "The selected forecast in this work plan bid"
      },
      "name": {
        "description": "The name of the work plan bid",
        "type": "string"
      },
      "rankingTiebreakerType": {
        "description": "Ranking tiebreaker",
        "enum": [
          "HireDate",
          "Performance",
          "Custom",
          "RandomlyAssign"
        ],
        "type": "string"
      },
      "status": {
        "description": "The state of the bid",
        "enum": [
          "Draft",
          "Locked",
          "Optimized",
          "Scheduled",
          "Open",
          "Closed",
          "Processed",
          "Published"
        ],
        "type": "string"
      },
      "workPlanFieldsVisibleToAgents": {
        "$ref": "#/definitions/ListWrapperAgentWorkPlanField",
        "description": "The work plan fields visible to agents whenever work plan preferences are made"
      }
    },
    "type": "object"
  },
  "UpdateWorkPlanRotationAgentRequest": {
    "properties": {
      "dateRange": {
        "$ref": "#/definitions/DateRangeWithOptionalEnd",
        "description": "The date range to which this agent is effective in the work plan rotation"
      },
      "delete": {
        "description": "If marked true for this agent when updating, then this agent will be removed from this work plan rotation",
        "type": "boolean"
      },
      "position": {
        "description": "Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0",
        "format": "int32",
        "type": "integer"
      },
      "userId": {
        "description": "The ID of an agent in this work plan rotation",
        "type": "string"
      }
    },
    "required": [
      "userId"
    ],
    "type": "object"
  },
  "UpdateWorkPlanRotationRequest": {
    "properties": {
      "agents": {
        "description": "Agents in this work plan rotation",
        "items": {
          "$ref": "#/definitions/UpdateWorkPlanRotationAgentRequest"
        },
        "type": "array"
      },
      "dateRange": {
        "$ref": "#/definitions/DateRangeWithOptionalEnd",
        "description": "The date range to which this work plan rotation applies"
      },
      "enabled": {
        "description": "Whether the work plan rotation is enabled for scheduling",
        "type": "boolean"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this work plan rotation"
      },
      "name": {
        "description": "Name of this work plan rotation",
        "type": "string"
      },
      "pattern": {
        "$ref": "#/definitions/WorkPlanPatternRequest",
        "description": "Pattern with list of work plan IDs that rotate on a weekly basis"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UploadUrlRequest": {
    "properties": {
      "contentMd5": {
        "description": "Content MD5 of the file to upload",
        "type": "string"
      },
      "contentType": {
        "description": "The content type of the file to upload. Allows all MIME types",
        "type": "string"
      },
      "fileName": {
        "description": "Name of the file to upload. It must not start with a dot and not end with a forward slash. Whitespace and the following characters are not allowed: \\{^}%`]\"\u003e[~\u003c#|",
        "type": "string"
      },
      "serverSideEncryption": {
        "enum": [
          "AES256"
        ],
        "type": "string"
      },
      "signedUrlTimeoutSeconds": {
        "description": "The number of seconds the presigned URL is valid for (from 1 to 604800 seconds). If none provided, defaults to 600 seconds",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UploadUrlRequestBody": {
    "properties": {
      "contentLengthBytes": {
        "description": "The expected content length (in bytes) of the gzip-encoded data that will be PUT to the returned signed URL",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "contentLengthBytes"
    ],
    "type": "object"
  },
  "UploadUrlResponse": {
    "properties": {
      "headers": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Required headers when uploading a file through PUT request to the URL",
        "readOnly": true,
        "type": "object"
      },
      "uploadKey": {
        "description": "Key that identifies the file in the storage including the file name",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "Presigned URL to PUT the file to",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UrlCondition": {
    "properties": {
      "operator": {
        "description": "The comparison operator.",
        "enum": [
          "containsAll",
          "containsAny",
          "notContainsAll",
          "notContainsAny",
          "equal",
          "notEqual",
          "greaterThan",
          "greaterThanOrEqual",
          "lessThan",
          "lessThanOrEqual",
          "startsWith",
          "endsWith"
        ],
        "type": "string"
      },
      "values": {
        "description": "The URL condition value.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "operator",
      "values"
    ],
    "type": "object"
  },
  "UrlResponse": {
    "properties": {
      "url": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Usage": {
    "properties": {
      "types": {
        "items": {
          "$ref": "#/definitions/UsageItem"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UsageExecutionResult": {
    "properties": {
      "executionId": {
        "description": "The id of the query execution",
        "type": "string"
      },
      "resultsUri": {
        "description": "URI where the query results can be retrieved",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UsageItem": {
    "properties": {
      "totalDocumentByteCount": {
        "format": "int64",
        "type": "integer"
      },
      "totalDocumentCount": {
        "format": "int64",
        "type": "integer"
      },
      "type": {
        "enum": [
          "RECORDING",
          "FAX",
          "DOCUMENT",
          "ALL"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "User": {
    "properties": {
      "acdAutoAnswer": {
        "description": "acd auto answer",
        "type": "boolean"
      },
      "addresses": {
        "description": "Email addresses and phone numbers for this user",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "authorization": {
        "$ref": "#/definitions/UserAuthorization",
        "description": "Roles and permissions assigned to the user",
        "readOnly": true
      },
      "biography": {
        "$ref": "#/definitions/Biography"
      },
      "certifications": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "chat": {
        "$ref": "#/definitions/Chat"
      },
      "conversationSummary": {
        "$ref": "#/definitions/UserConversationSummary",
        "description": "Summary of conversion statistics for conversation types.",
        "readOnly": true
      },
      "dateLastLogin": {
        "description": "The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "department": {
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "email": {
        "type": "string"
      },
      "employerInfo": {
        "$ref": "#/definitions/EmployerInfo"
      },
      "geolocation": {
        "$ref": "#/definitions/Geolocation",
        "description": "Current geolocation position",
        "readOnly": true
      },
      "groups": {
        "description": "The groups the user is a member of",
        "items": {
          "$ref": "#/definitions/Group"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "integrationPresence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Integration presence",
        "readOnly": true
      },
      "languagePreference": {
        "description": "preferred language by the user",
        "readOnly": true,
        "type": "string"
      },
      "languages": {
        "description": "Routing (ACD) languages possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "lastTokenIssued": {
        "$ref": "#/definitions/OAuthLastTokenIssued"
      },
      "locations": {
        "description": "The user placement at each site location.",
        "items": {
          "$ref": "#/definitions/Location"
        },
        "readOnly": true,
        "type": "array"
      },
      "manager": {
        "$ref": "#/definitions/User"
      },
      "name": {
        "type": "string"
      },
      "outOfOffice": {
        "$ref": "#/definitions/OutOfOffice",
        "description": "Determine if out of office is enabled",
        "readOnly": true
      },
      "preferredName": {
        "description": "Preferred full name of the agent",
        "type": "string"
      },
      "presence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Active presence",
        "readOnly": true
      },
      "primaryContactInfo": {
        "description": "Auto populated from addresses.",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "readOnly": true,
        "type": "array"
      },
      "profileSkills": {
        "description": "Profile skills possessed by the user",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "routingStatus": {
        "$ref": "#/definitions/RoutingStatus",
        "description": "ACD routing status",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skills": {
        "description": "Routing (ACD) skills possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingSkill"
        },
        "readOnly": true,
        "type": "array"
      },
      "state": {
        "description": "The current state for this user.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "station": {
        "$ref": "#/definitions/UserStations",
        "description": "Effective, default, and last station information",
        "readOnly": true
      },
      "team": {
        "$ref": "#/definitions/Team",
        "description": "The team the user is a member of",
        "readOnly": true
      },
      "title": {
        "type": "string"
      },
      "username": {
        "type": "string"
      },
      "version": {
        "description": "Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.",
        "format": "int32",
        "type": "integer"
      },
      "workPlanBidRanks": {
        "$ref": "#/definitions/WorkPlanBidRanks",
        "description": "The WFM work plan bid rank settings for the user",
        "readOnly": true
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "UserActivityData": {
    "properties": {
      "data": {
        "description": "Data for metrics",
        "items": {
          "$ref": "#/definitions/UserActivityMetricValue"
        },
        "type": "array"
      },
      "entities": {
        "description": "Details for active entities",
        "items": {
          "$ref": "#/definitions/UserActivityEntityData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from grouping dimension to value",
        "type": "object"
      },
      "truncated": {
        "description": "Flag for a truncated list of entities. If truncated, the first half of the list of entities will contain the oldest entities and the second half the newest entities.",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "UserActivityEntityData": {
    "properties": {
      "activityDate": {
        "description": "The time at which the activity was observed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "organizationPresenceId": {
        "description": "Organization presence identifier",
        "type": "string"
      },
      "presenceDate": {
        "description": "Date of the latest presence change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "queueId": {
        "description": "Queue identifier",
        "type": "string"
      },
      "queueMembershipStatus": {
        "description": "Queue membership status (e.g. active or inactive)",
        "type": "string"
      },
      "routingStatus": {
        "description": "Agent routing status",
        "type": "string"
      },
      "routingStatusDate": {
        "description": "Date of the latest routing status change. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "systemPresence": {
        "description": "System presence",
        "type": "string"
      },
      "teamId": {
        "description": "The team ID the user is a member of",
        "type": "string"
      },
      "userId": {
        "description": "Unique identifier for the user",
        "type": "string"
      }
    },
    "required": [
      "activityDate"
    ],
    "type": "object"
  },
  "UserActivityMetricValue": {
    "properties": {
      "count": {
        "description": "metric count",
        "format": "int32",
        "type": "integer"
      },
      "metric": {
        "description": "metric",
        "enum": [
          "oActiveQueues",
          "oMemberQueues"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserActivityQuery": {
    "properties": {
      "filter": {
        "$ref": "#/definitions/UserActivityQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "groupBy": {
        "description": "Dimension(s) to group by",
        "items": {
          "enum": [
            "userId"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "metrics": {
        "description": "List of requested metrics",
        "items": {
          "$ref": "#/definitions/UserActivityQueryMetric"
        },
        "type": "array"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      }
    },
    "required": [
      "groupBy",
      "metrics"
    ],
    "type": "object"
  },
  "UserActivityQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "UserActivityQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/UserActivityQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserActivityQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "UserActivityQueryMetric": {
    "properties": {
      "details": {
        "description": "Flag for including observation details for this metric in the response",
        "type": "boolean"
      },
      "metric": {
        "description": "The requested metric",
        "enum": [
          "oActiveQueues",
          "oMemberQueues"
        ],
        "type": "string"
      }
    },
    "required": [
      "metric"
    ],
    "type": "object"
  },
  "UserActivityQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "organizationPresenceId",
          "presenceDate",
          "queueId",
          "queueMembershipStatus",
          "routingStatus",
          "routingStatusDate",
          "systemPresence",
          "teamId",
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "UserActivityResponse": {
    "properties": {
      "entityIdDimension": {
        "description": "Dimension that is used as an entityId",
        "enum": [
          "organizationPresenceId",
          "presenceDate",
          "queueId",
          "queueMembershipStatus",
          "routingStatus",
          "routingStatusDate",
          "systemPresence",
          "teamId",
          "userId"
        ],
        "type": "string"
      },
      "results": {
        "description": "Query results",
        "items": {
          "$ref": "#/definitions/UserActivityData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserAgentInfo": {
    "properties": {
      "firmwareVersion": {
        "description": "The firmware version of the phone.",
        "type": "string"
      },
      "manufacturer": {
        "description": "The manufacturer of the phone.",
        "type": "string"
      },
      "model": {
        "description": "The model of the phone.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserAggregateDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/StatisticalResponse"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "UserAggregateQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "UserAggregateQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/UserAggregateQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserAggregateQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "UserAggregateQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "UserAggregateQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/UserAggregateDataContainer"
        },
        "type": "array"
      },
      "systemToOrganizationMappings": {
        "additionalProperties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": "A mapping from system presence to a list of organization presence ids",
        "type": "object"
      }
    },
    "type": "object"
  },
  "UserAggregationQuery": {
    "properties": {
      "alternateTimeDimension": {
        "description": "Dimension to use as the alternative timestamp for data in the aggregate.  Choosing \"eventTime\" uses the actual time of the data event.",
        "enum": [
          "eventTime"
        ],
        "type": "string"
      },
      "filter": {
        "$ref": "#/definitions/UserAggregateQueryFilter",
        "description": "Behaves like a SQL WHERE clause. This is ANDed with the interval parameter. Expresses boolean logical predicates as well as dimensional filters"
      },
      "flattenMultivaluedDimensions": {
        "description": "Flattens any multivalued dimensions used in response groups (e.g. ['a','b','c']-\u003e'a,b,c')",
        "type": "boolean"
      },
      "granularity": {
        "description": "Granularity aggregates metrics into subpartitions within the time interval specified. The default granularity is the same duration as the interval. Periods are represented as an ISO-8601 string. For example: P1D or P1DT12H",
        "type": "string"
      },
      "groupBy": {
        "description": "Behaves like a SQL GROUPBY. Allows for multiple levels of grouping as a list of dimensions. Partitions resulting aggregate computations into distinct named subgroups rather than across the entire result set as if it were one group.",
        "items": {
          "enum": [
            "userId"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "interval": {
        "description": "Behaves like one clause in a SQL WHERE. Specifies the date and time range of data being queried. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "tAgentRoutingStatus",
            "tOrganizationPresence",
            "tSystemPresence"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "Time zone context used to calculate response intervals (this allows resolving DST changes). The interval offset is used even when timeZone is specified. Default is UTC. Time zones are represented as a string of the zone name as found in the IANA time zone database. For example: UTC, Etc/UTC, or Europe/London",
        "type": "string"
      },
      "views": {
        "description": "Custom derived metric views",
        "items": {
          "$ref": "#/definitions/UserAggregationView"
        },
        "type": "array"
      }
    },
    "required": [
      "interval",
      "metrics"
    ],
    "type": "object"
  },
  "UserAggregationView": {
    "properties": {
      "function": {
        "description": "Type of view you wish to create",
        "enum": [
          "rangeBound"
        ],
        "type": "string"
      },
      "name": {
        "description": "A unique name for this view. Must be distinct from other views and built-in metric names.",
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/AggregationRange",
        "description": "Range of numbers for slicing up data"
      },
      "target": {
        "description": "Target metric name",
        "enum": [
          "tAgentRoutingStatus",
          "tOrganizationPresence",
          "tSystemPresence"
        ],
        "type": "string"
      }
    },
    "required": [
      "function",
      "name",
      "target"
    ],
    "type": "object"
  },
  "UserApp": {
    "description": "Details for a UserApp",
    "properties": {
      "config": {
        "$ref": "#/definitions/UserAppConfigurationInfo"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "integrationType": {
        "$ref": "#/definitions/IntegrationType",
        "description": "Integration Type for the userApp",
        "readOnly": true
      },
      "name": {
        "description": "The name of the userApp, used to distinguish this userApp from others of the same type.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserAppConfigurationInfo": {
    "description": "Configuration information for the integration",
    "properties": {
      "current": {
        "$ref": "#/definitions/IntegrationConfiguration",
        "description": "The current, active configuration for the integration.",
        "readOnly": true
      },
      "effective": {
        "$ref": "#/definitions/EffectiveConfiguration",
        "description": "The effective configuration for the app, containing the integration specific configuration along with overrides specified in the integration type.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserAppEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserApp"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserAuthorization": {
    "properties": {
      "permissionPolicies": {
        "description": "The policies configured for assigned permissions.",
        "items": {
          "$ref": "#/definitions/ResourcePermissionPolicy"
        },
        "readOnly": true,
        "type": "array"
      },
      "permissions": {
        "description": "A collection of the permissions granted by all assigned roles",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "roles": {
        "items": {
          "$ref": "#/definitions/DomainRole"
        },
        "type": "array"
      },
      "unusedRoles": {
        "description": "A collection of the roles the user is not using",
        "items": {
          "$ref": "#/definitions/DomainRole"
        },
        "readOnly": true,
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserAvailableTimes": {
    "properties": {
      "availableTimes": {
        "description": "Periods of availability to schedule coaching appointment for an user",
        "items": {
          "$ref": "#/definitions/AvailableTime"
        },
        "readOnly": true,
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "User reference",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserBestPoints": {
    "properties": {
      "bestPoints": {
        "description": "List of best point for the requested user",
        "items": {
          "$ref": "#/definitions/UserBestPointsItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The requested user for the best points",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserBestPointsItem": {
    "properties": {
      "dateEndWorkday": {
        "description": "End workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday of the best points aggregation interval. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "granularityType": {
        "description": "Best points aggregation interval granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "readOnly": true,
        "type": "string"
      },
      "points": {
        "description": "Gamification points",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "rank": {
        "description": "The rank of this user",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserConversationSummary": {
    "properties": {
      "call": {
        "$ref": "#/definitions/MediaSummary"
      },
      "callback": {
        "$ref": "#/definitions/MediaSummary"
      },
      "chat": {
        "$ref": "#/definitions/MediaSummary"
      },
      "email": {
        "$ref": "#/definitions/MediaSummary"
      },
      "message": {
        "$ref": "#/definitions/MediaSummary"
      },
      "socialExpression": {
        "$ref": "#/definitions/MediaSummary"
      },
      "userId": {
        "type": "string"
      },
      "video": {
        "$ref": "#/definitions/MediaSummary"
      }
    },
    "type": "object"
  },
  "UserDetailQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "UserDetailQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/UserDetailQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserDetailQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "UserDetailQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "UserDetailsQuery": {
    "properties": {
      "interval": {
        "description": "Specifies the date and time range of data being queried. Conversations MUST have started within this time range to potentially be included within the result set. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "order": {
        "description": "Sort the result set in ascending/descending order. Default is ascending",
        "enum": [
          "asc",
          "desc",
          "unordered"
        ],
        "type": "string"
      },
      "paging": {
        "$ref": "#/definitions/PagingSpec",
        "description": "Page size and number to control iterating through large result sets. Default page size is 25"
      },
      "presenceAggregations": {
        "description": "Include faceted search and aggregate roll-ups of presence data in your search results. This does not function as a filter, but rather, summary data about the presence results matching your filters",
        "items": {
          "$ref": "#/definitions/AnalyticsQueryAggregation"
        },
        "type": "array"
      },
      "presenceFilters": {
        "description": "Filters that target system and organization presence-level data",
        "items": {
          "$ref": "#/definitions/PresenceDetailQueryFilter"
        },
        "type": "array"
      },
      "routingStatusAggregations": {
        "description": "Include faceted search and aggregate roll-ups of agent routing status data in your search results. This does not function as a filter, but rather, summary data about the agent routing status results matching your filters",
        "items": {
          "$ref": "#/definitions/AnalyticsQueryAggregation"
        },
        "type": "array"
      },
      "routingStatusFilters": {
        "description": "Filters that target agent routing status-level data",
        "items": {
          "$ref": "#/definitions/RoutingStatusDetailQueryFilter"
        },
        "type": "array"
      },
      "userFilters": {
        "description": "Filters that target the users to retrieve data for",
        "items": {
          "$ref": "#/definitions/UserDetailQueryFilter"
        },
        "type": "array"
      }
    },
    "required": [
      "interval"
    ],
    "type": "object"
  },
  "UserDevice": {
    "properties": {
      "acceptNotifications": {
        "description": "if the device accepts notifications",
        "type": "boolean"
      },
      "deviceToken": {
        "description": "device token sent by mobile clients.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "make": {
        "description": "make of the device.",
        "type": "string"
      },
      "model": {
        "description": "Device model",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "notificationId": {
        "description": "notification id of the device.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sessionHash": {
        "type": "string"
      },
      "type": {
        "description": "type of the device; ios or android",
        "enum": [
          "android",
          "ios"
        ],
        "type": "string"
      }
    },
    "required": [
      "acceptNotifications",
      "deviceToken",
      "make",
      "model",
      "notificationId",
      "type"
    ],
    "type": "object"
  },
  "UserEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserEstablishedEvent": {
    "properties": {
      "afterCallWorkRequired": {
        "description": "Indicates whether or not this user will be required to complete after call work.",
        "type": "boolean"
      },
      "ani": {
        "description": "The automatic number identification if it is available for this conversation.",
        "type": "string"
      },
      "communicationId": {
        "description": "A unique Id (V4 UUID) identifying this communication",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "dnis": {
        "description": "The dialed number identification if it is available for this conversation.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initialConfiguration": {
        "$ref": "#/definitions/InitialConfiguration",
        "description": "Metadata about this communication."
      },
      "phoneNumber": {
        "description": "Identifies the phone number used to reach this user if it is different from the information that would be accessed by userId.",
        "type": "string"
      },
      "queueId": {
        "description": "The id (V4 UUID) of the queue that the user is calling on behalf of. Applies to outbound calls only.",
        "type": "string"
      },
      "sourceConfiguration": {
        "$ref": "#/definitions/SourceConfiguration",
        "description": "Metadata about the source of this communication's interaction."
      },
      "stationId": {
        "description": "A Station ID (V4 UUID) that identifies the station being used if the user is using a station and the stationId is known.",
        "type": "string"
      },
      "userId": {
        "description": "The userId (V4 UUID) for the user this communication belongs to.",
        "type": "string"
      }
    },
    "required": [
      "communicationId",
      "conversationId",
      "eventDateTime",
      "eventId",
      "initialConfiguration",
      "sourceConfiguration",
      "userId"
    ],
    "type": "object"
  },
  "UserExpands": {
    "properties": {
      "authorization": {
        "$ref": "#/definitions/UserAuthorization",
        "description": "Roles and permissions assigned to the user",
        "readOnly": true
      },
      "conversationSummary": {
        "$ref": "#/definitions/UserConversationSummary",
        "description": "Summary of conversion statistics for conversation types.",
        "readOnly": true
      },
      "geolocation": {
        "$ref": "#/definitions/Geolocation",
        "description": "Current geolocation position",
        "readOnly": true
      },
      "integrationPresence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Active 3rd party presence",
        "readOnly": true
      },
      "outOfOffice": {
        "$ref": "#/definitions/OutOfOffice",
        "description": "Determine if out of office is enabled",
        "readOnly": true
      },
      "presence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Active presence",
        "readOnly": true
      },
      "routingStatus": {
        "$ref": "#/definitions/RoutingStatus",
        "description": "ACD routing status",
        "readOnly": true
      },
      "station": {
        "$ref": "#/definitions/UserStations",
        "description": "Effective, default, and last station information",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserExternalIdentifier": {
    "description": "Defines a link between an External Identifier and Authority pair to a Entity Type and Entity Identifier pair. Represents the two way, one to one mapping of an External Authority or System of Record's identifier to a PureCloud entity. e.g. (ExternalId='05001',Authority='XyzCRM') to (entityType=user,entityId='8eb03b33-3acb-4bc1-a244-50b9b9f19495')",
    "properties": {
      "authorityName": {
        "description": "Authority or System of Record which owns the External Identifier",
        "type": "string"
      },
      "externalKey": {
        "description": "External Key",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "authorityName",
      "externalKey"
    ],
    "type": "object"
  },
  "UserImage": {
    "properties": {
      "imageUri": {
        "type": "string"
      },
      "resolution": {
        "description": "Height and/or width of image. ex: 640x480 or x128",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserInsightsTrend": {
    "properties": {
      "comparativePeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The comparative period work day date range"
      },
      "division": {
        "$ref": "#/definitions/DivisionReference",
        "description": "The division"
      },
      "entities": {
        "description": "The list of insights trend for each metric",
        "items": {
          "$ref": "#/definitions/UserInsightsTrendMetricItem"
        },
        "type": "array"
      },
      "granularity": {
        "description": "Granularity",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ],
        "type": "string"
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The performance profile"
      },
      "primaryPeriod": {
        "$ref": "#/definitions/WorkdayPeriod",
        "description": "The primary period work day date range"
      },
      "total": {
        "$ref": "#/definitions/UserInsightsTrendTotalItem",
        "description": "The insights trend in total"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The query user"
      }
    },
    "type": "object"
  },
  "UserInsightsTrendMetricItem": {
    "properties": {
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The gamification metric for the trend"
      },
      "trends": {
        "$ref": "#/definitions/UserInsightsTrends",
        "description": "Trends for the metric"
      }
    },
    "type": "object"
  },
  "UserInsightsTrendTotalItem": {
    "properties": {
      "trends": {
        "$ref": "#/definitions/UserInsightsTrends",
        "description": "Trends for the metric"
      }
    },
    "type": "object"
  },
  "UserInsightsTrends": {
    "properties": {
      "comparativePeriod": {
        "description": "List of trend data in the comparative period",
        "items": {
          "$ref": "#/definitions/UserTrendData"
        },
        "type": "array"
      },
      "primaryPeriod": {
        "description": "List of trend data in the primary period",
        "items": {
          "$ref": "#/definitions/UserTrendData"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserLanguageEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserRoutingLanguage"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserLicenses": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "licenses": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserLicensesEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserLicenses"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserListScheduleRequestBody": {
    "properties": {
      "endDate": {
        "description": "End of the range of schedules to fetch, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "loadFullWeeks": {
        "description": "Whether to load the full week's schedule (for the requested users) of any week overlapping the start/end date query parameters, defaults to false",
        "type": "boolean"
      },
      "startDate": {
        "description": "Beginning of the range of schedules to fetch, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "userIds": {
        "description": "The user ids for which to fetch schedules",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "endDate",
      "startDate",
      "userIds"
    ],
    "type": "object"
  },
  "UserMe": {
    "properties": {
      "acdAutoAnswer": {
        "description": "acd auto answer",
        "type": "boolean"
      },
      "addresses": {
        "description": "Email addresses and phone numbers for this user",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "type": "array"
      },
      "adjacents": {
        "$ref": "#/definitions/Adjacents",
        "description": "The first 50 superiors, direct reports, and siblings of this user. Mutually exclusive with superiors and direct reports expands.",
        "readOnly": true
      },
      "authorization": {
        "$ref": "#/definitions/UserAuthorization",
        "description": "Roles and permissions assigned to the user",
        "readOnly": true
      },
      "biography": {
        "$ref": "#/definitions/Biography"
      },
      "certifications": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "chat": {
        "$ref": "#/definitions/Chat"
      },
      "conversationSummary": {
        "$ref": "#/definitions/UserConversationSummary",
        "description": "Summary of conversion statistics for conversation types.",
        "readOnly": true
      },
      "date": {
        "$ref": "#/definitions/ServerDate",
        "description": "The PureCloud system date time.",
        "readOnly": true
      },
      "dateLastLogin": {
        "description": "The last time the user logged in using username and password. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "department": {
        "type": "string"
      },
      "directReports": {
        "description": "The first 50 direct reports to this user.",
        "items": {
          "$ref": "#/definitions/User"
        },
        "readOnly": true,
        "type": "array"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "divisionedPresenceDefinitions": {
        "description": "The presence definitions that the user has access to",
        "items": {
          "$ref": "#/definitions/OrganizationPresenceDefinition"
        },
        "readOnly": true,
        "type": "array"
      },
      "email": {
        "type": "string"
      },
      "employerInfo": {
        "$ref": "#/definitions/EmployerInfo"
      },
      "favorites": {
        "description": "The first 50 favorited users.",
        "items": {
          "$ref": "#/definitions/User"
        },
        "readOnly": true,
        "type": "array"
      },
      "fieldConfigs": {
        "$ref": "#/definitions/FieldConfigs",
        "description": "The field config for all entities types of user's organization",
        "readOnly": true
      },
      "geolocation": {
        "$ref": "#/definitions/Geolocation",
        "description": "Current geolocation position",
        "readOnly": true
      },
      "geolocationSettings": {
        "$ref": "#/definitions/GeolocationSettings",
        "description": "Geolocation settings for user's organization.",
        "readOnly": true
      },
      "groups": {
        "description": "The groups the user is a member of",
        "items": {
          "$ref": "#/definitions/Group"
        },
        "readOnly": true,
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "images": {
        "items": {
          "$ref": "#/definitions/UserImage"
        },
        "type": "array"
      },
      "integrationPresence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Integration presence",
        "readOnly": true
      },
      "languagePreference": {
        "description": "preferred language by the user",
        "readOnly": true,
        "type": "string"
      },
      "languages": {
        "description": "Routing (ACD) languages possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingLanguage"
        },
        "readOnly": true,
        "type": "array"
      },
      "lastTokenIssued": {
        "$ref": "#/definitions/OAuthLastTokenIssued"
      },
      "locationDefinitions": {
        "description": "The first 100 site locations for user's organization",
        "items": {
          "$ref": "#/definitions/LocationDefinition"
        },
        "readOnly": true,
        "type": "array"
      },
      "locations": {
        "description": "The user placement at each site location.",
        "items": {
          "$ref": "#/definitions/Location"
        },
        "readOnly": true,
        "type": "array"
      },
      "manager": {
        "$ref": "#/definitions/User"
      },
      "name": {
        "type": "string"
      },
      "orgAuthorization": {
        "description": "The first 100 organization roles, with applicable permission policies, for user's organization.",
        "items": {
          "$ref": "#/definitions/DomainOrganizationRole"
        },
        "readOnly": true,
        "type": "array"
      },
      "orgProducts": {
        "description": "Products enabled in this organization",
        "items": {
          "$ref": "#/definitions/DomainOrganizationProduct"
        },
        "readOnly": true,
        "type": "array"
      },
      "organization": {
        "$ref": "#/definitions/Organization",
        "description": "Organization details for this user.",
        "readOnly": true
      },
      "outOfOffice": {
        "$ref": "#/definitions/OutOfOffice",
        "description": "Determine if out of office is enabled",
        "readOnly": true
      },
      "preferredName": {
        "description": "Preferred full name of the agent",
        "type": "string"
      },
      "presence": {
        "$ref": "#/definitions/UserPresence",
        "description": "Active presence",
        "readOnly": true
      },
      "presenceDefinitions": {
        "description": "The first 100 non-divisioned presence definitions for user's organization.",
        "items": {
          "$ref": "#/definitions/OrganizationPresence"
        },
        "readOnly": true,
        "type": "array"
      },
      "primaryContactInfo": {
        "description": "Auto populated from addresses.",
        "items": {
          "$ref": "#/definitions/Contact"
        },
        "readOnly": true,
        "type": "array"
      },
      "profileSkills": {
        "description": "Profile skills possessed by the user",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array"
      },
      "routingSkills": {
        "description": "The first 50 routing skills for user's organizations",
        "items": {
          "$ref": "#/definitions/RoutingSkill"
        },
        "readOnly": true,
        "type": "array"
      },
      "routingStatus": {
        "$ref": "#/definitions/RoutingStatus",
        "description": "ACD routing status",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skills": {
        "description": "Routing (ACD) skills possessed by the user",
        "items": {
          "$ref": "#/definitions/UserRoutingSkill"
        },
        "readOnly": true,
        "type": "array"
      },
      "state": {
        "description": "The current state for this user.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "readOnly": true,
        "type": "string"
      },
      "station": {
        "$ref": "#/definitions/UserStations",
        "description": "Effective, default, and last station information",
        "readOnly": true
      },
      "superiors": {
        "description": "The first 50 superiors of this user.",
        "items": {
          "$ref": "#/definitions/User"
        },
        "readOnly": true,
        "type": "array"
      },
      "team": {
        "$ref": "#/definitions/Team",
        "description": "The team the user is a member of",
        "readOnly": true
      },
      "title": {
        "type": "string"
      },
      "token": {
        "$ref": "#/definitions/TokenInfo",
        "description": "Information about the current token",
        "readOnly": true
      },
      "trustors": {
        "description": "Organizations having this user as a trustee",
        "items": {
          "$ref": "#/definitions/Trustor"
        },
        "readOnly": true,
        "type": "array"
      },
      "username": {
        "type": "string"
      },
      "version": {
        "description": "Required when updating a user, this value should be the current version of the user.  The current version can be obtained with a GET on the user before doing a PATCH.",
        "format": "int32",
        "type": "integer"
      },
      "workPlanBidRanks": {
        "$ref": "#/definitions/WorkPlanBidRanks",
        "description": "The WFM work plan bid rank settings for the user",
        "readOnly": true
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "UserObservationDataContainer": {
    "properties": {
      "data": {
        "items": {
          "$ref": "#/definitions/ObservationMetricData"
        },
        "type": "array"
      },
      "group": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "A mapping from dimension to value",
        "type": "object"
      }
    },
    "type": "object"
  },
  "UserObservationQuery": {
    "properties": {
      "detailMetrics": {
        "description": "Metrics for which to include additional detailed observations",
        "items": {
          "enum": [
            "oActiveQueues",
            "oMemberQueues"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "filter": {
        "$ref": "#/definitions/UserObservationQueryFilter",
        "description": "Filter to return a subset of observations. Expresses boolean logical predicates as well as dimensional filters"
      },
      "metrics": {
        "description": "Behaves like a SQL SELECT clause. Only named metrics will be retrieved.",
        "items": {
          "enum": [
            "oActiveQueues",
            "oMemberQueues"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "filter",
      "metrics"
    ],
    "type": "object"
  },
  "UserObservationQueryClause": {
    "properties": {
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserObservationQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "predicates",
      "type"
    ],
    "type": "object"
  },
  "UserObservationQueryFilter": {
    "properties": {
      "clauses": {
        "description": "Boolean 'and/or' logic with up to two-levels of nesting",
        "items": {
          "$ref": "#/definitions/UserObservationQueryClause"
        },
        "type": "array"
      },
      "predicates": {
        "description": "Like a three-word sentence: (attribute-name) (operator) (target-value).",
        "items": {
          "$ref": "#/definitions/UserObservationQueryPredicate"
        },
        "type": "array"
      },
      "type": {
        "description": "Boolean operation to apply to the provided predicates and clauses",
        "enum": [
          "and",
          "or"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "UserObservationQueryPredicate": {
    "properties": {
      "dimension": {
        "description": "Left hand side for dimension predicates",
        "enum": [
          "userId"
        ],
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_TYPE"
        }
      },
      "operator": {
        "description": "Optional operator, default is matches",
        "enum": [
          "matches",
          "exists",
          "notExists"
        ],
        "type": "string"
      },
      "range": {
        "$ref": "#/definitions/NumericRange",
        "description": "Right hand side for dimension predicates"
      },
      "type": {
        "description": "Optional type, can usually be inferred",
        "enum": [
          "dimension",
          "property",
          "metric"
        ],
        "type": "string"
      },
      "value": {
        "description": "Right hand side for dimension predicates",
        "type": "string",
        "x-genesys-entity-type": {
          "value": "DIMENSION_SELECTOR"
        }
      }
    },
    "type": "object"
  },
  "UserObservationQueryResponse": {
    "properties": {
      "results": {
        "items": {
          "$ref": "#/definitions/UserObservationDataContainer"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserParam": {
    "properties": {
      "key": {
        "type": "string"
      },
      "value": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserPresence": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "message": {
        "type": "string"
      },
      "modifiedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "presenceDefinition": {
        "$ref": "#/definitions/PresenceDefinition"
      },
      "primary": {
        "description": "A boolean used to tell whether or not to set this presence source as the primary on a PATCH",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "source": {
        "description": "Deprecated - The sourceID field should be used as a replacement.",
        "type": "string"
      },
      "sourceId": {
        "description": "Represents the ID of a registered source",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserPresenceEvent": {
    "properties": {
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "message": {
        "description": "The message associated with the presence",
        "type": "string"
      },
      "presenceDefinitionId": {
        "description": "The id (UUID) of the presence definition that the user presence is associated with",
        "type": "string"
      },
      "sourceId": {
        "description": "The id (V4 UUID) of the presence source being updated",
        "type": "string"
      },
      "userId": {
        "description": "The User ID of the user associated with this UserPresence",
        "type": "string"
      }
    },
    "required": [
      "eventDateTime",
      "eventId",
      "sourceId",
      "userId"
    ],
    "type": "object"
  },
  "UserPrimarySource": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "registered": {
        "description": "Whether or not the source is registered",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sourceId": {
        "description": "The id of the source",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserProfile": {
    "properties": {
      "dateModified": {
        "description": "Datetime of the last modification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "expands": {
        "$ref": "#/definitions/UserExpands",
        "description": "User information expansions",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the user resource",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "version": {
        "description": "The version of the group resource",
        "format": "int64",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "UserProfileEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserProfile"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserProfilesInDateRange": {
    "properties": {
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "profiles": {
        "description": "The list of profiles of the agent",
        "items": {
          "$ref": "#/definitions/ProfileWithDateRange"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The query agent"
      }
    },
    "type": "object"
  },
  "UserProfilesInDateRangeRequest": {
    "properties": {
      "endWorkday": {
        "description": "End work day in ISO-8601 format used in the date range.",
        "example": "2022-11-11",
        "type": "string"
      },
      "startWorkday": {
        "description": "Start work day in ISO-8601 format used in the date range.",
        "example": "2022-11-07",
        "type": "string"
      }
    },
    "required": [
      "endWorkday",
      "startWorkday"
    ],
    "type": "object"
  },
  "UserQueue": {
    "properties": {
      "acwSettings": {
        "$ref": "#/definitions/AcwSettings",
        "description": "The ACW settings for the queue."
      },
      "agentOwnedRouting": {
        "$ref": "#/definitions/AgentOwnedRouting",
        "description": "The Agent Owned Routing settings for the queue"
      },
      "bullseye": {
        "$ref": "#/definitions/Bullseye",
        "description": "The bullseye settings for the queue."
      },
      "callingPartyName": {
        "description": "The name to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "callingPartyNumber": {
        "description": "The phone number to use for caller identification for outbound calls from this queue.",
        "type": "string"
      },
      "conditionalGroupRouting": {
        "$ref": "#/definitions/ConditionalGroupRouting",
        "description": "The Conditional Group Routing settings for the queue."
      },
      "createdBy": {
        "description": "The ID of the user that created the queue.",
        "type": "string"
      },
      "dateCreated": {
        "description": "The date the queue was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The date of the last modification to the queue. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "defaultScripts": {
        "additionalProperties": {
          "$ref": "#/definitions/Script"
        },
        "description": "The default script Ids for the communication types.",
        "type": "object"
      },
      "description": {
        "description": "The queue description.",
        "type": "string"
      },
      "directRouting": {
        "$ref": "#/definitions/DirectRouting",
        "description": "The Direct Routing settings for the queue"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "emailInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for email conversations waiting in queue."
      },
      "enableAudioMonitoring": {
        "description": "Indicates whether audio monitoring is enabled for this queue.",
        "type": "boolean"
      },
      "enableManualAssignment": {
        "description": "Indicates whether manual assignment is enabled for this queue.",
        "type": "boolean"
      },
      "enableTranscription": {
        "description": "Indicates whether voice transcription is enabled for this queue.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "joined": {
        "type": "boolean"
      },
      "joinedMemberCount": {
        "description": "The number of joined members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "mediaSettings": {
        "$ref": "#/definitions/QueueMediaSettings",
        "description": "The media settings for the queue."
      },
      "memberCount": {
        "description": "The total number of members in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "memberGroups": {
        "description": "The groups of agents associated with the queue, if any.  Queue membership will update to match group membership changes.",
        "items": {
          "$ref": "#/definitions/MemberGroup"
        },
        "type": "array",
        "uniqueItems": true
      },
      "messageInQueueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for message conversations waiting in queue."
      },
      "modifiedBy": {
        "description": "The ID of the user that last modified the queue.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "onHoldPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The audio to be played when calls on this queue are on hold. If not configured, the default on-hold music will play."
      },
      "outboundEmailAddress": {
        "$ref": "#/definitions/QueueEmailAddress"
      },
      "outboundMessagingAddresses": {
        "$ref": "#/definitions/QueueMessagingAddresses",
        "description": "The messaging addresses for the queue."
      },
      "peerId": {
        "description": "The ID of an associated external queue.",
        "type": "string"
      },
      "queueFlow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The in-queue flow to use for call conversations waiting in queue."
      },
      "routingRules": {
        "description": "The routing rules for the queue, used for Preferred Agent Routing.",
        "items": {
          "$ref": "#/definitions/RoutingRule"
        },
        "type": "array"
      },
      "scoringMethod": {
        "description": "The Scoring Method for the queue",
        "enum": [
          "TimestampAndPriority",
          "PriorityOnly"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillEvaluationMethod": {
        "description": "The skill evaluation method to use when routing conversations.",
        "enum": [
          "NONE",
          "BEST",
          "ALL"
        ],
        "type": "string"
      },
      "suppressInQueueCallRecording": {
        "description": "Indicates whether recording in-queue calls is suppressed for this queue.",
        "type": "boolean"
      },
      "userMemberCount": {
        "description": "The number of user members (i.e., non-group members) in the queue.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "whisperPrompt": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The prompt used for whisper on the queue, if configured."
      }
    },
    "type": "object"
  },
  "UserQueueEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserQueue"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserRecording": {
    "properties": {
      "contentLength": {
        "format": "int64",
        "type": "integer"
      },
      "contentUri": {
        "format": "uri",
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/Conversation"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "durationMilliseconds": {
        "format": "int64",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "read": {
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "thumbnails": {
        "items": {
          "$ref": "#/definitions/DocumentThumbnail"
        },
        "type": "array"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "type": "object"
  },
  "UserRecordingEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserRecording"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserReferenceWithName": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserRoutingLanguage": {
    "description": "Represents an organization language assigned to a user. When assigning to a user specify the organization language id as the id.",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "languageUri": {
        "description": "URI to the organization language used by this user language.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "proficiency": {
        "description": "A rating from 0.0 to 5.0 that indicates how fluent an agent is in a particular language. ACD interactions are routed to agents with higher proficiency ratings.",
        "format": "double",
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Activate or deactivate this routing language.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserRoutingLanguagePost": {
    "description": "Represents an organization language assigned to a user. When assigning to a user specify the organization langauge id as the id.",
    "properties": {
      "id": {
        "description": "The id of the existing routing language to add to the user",
        "type": "string"
      },
      "languageUri": {
        "description": "URI to the organization language used by this user language.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "proficiency": {
        "description": "Proficiency is a rating from 0.0 to 5.0 on how competent an agent is for a particular language. It is used when a queue is set to \"Best available language\" mode to allow acd interactions to target agents with higher proficiency ratings.",
        "format": "double",
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "proficiency"
    ],
    "type": "object"
  },
  "UserRoutingSkill": {
    "description": "Represents an organization skill assigned to a user. When assigning to a user specify the organization skill id as the id.",
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "proficiency": {
        "description": "A rating from 0.0 to 5.0 that indicates how adept an agent is at a particular skill. When \"Best available skills\" is enabled for a queue in Genesys Cloud, ACD interactions in that queue are routed to agents with higher proficiency ratings.",
        "format": "double",
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillUri": {
        "description": "URI to the organization skill used by this user skill.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "Activate or deactivate this routing skill.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserRoutingSkillPost": {
    "description": "Represents an organization skill assigned to a user. When assigning to a user specify the organization skill id as the id.",
    "properties": {
      "id": {
        "description": "The id of the existing routing skill to add to the user",
        "type": "string"
      },
      "proficiency": {
        "description": "Proficiency is a rating from 0.0 to 5.0 on how competent an agent is for a particular skill. It is used when a queue is set to \"Best available skills\" mode to allow acd interactions to target agents with higher proficiency ratings.",
        "format": "double",
        "type": "number"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skillUri": {
        "description": "URI to the organization skill used by this user skill.",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "proficiency"
    ],
    "type": "object"
  },
  "UserRoutingStatusEvent": {
    "properties": {
      "agentId": {
        "description": "Unique identifier of the agent.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A timestamp as epoch representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (UUID) eventId for this event",
        "type": "string"
      },
      "sourceId": {
        "description": "The agent's source platform Id.",
        "type": "string"
      },
      "status": {
        "description": "The agent's current routing status.",
        "enum": [
          "OffQueue",
          "Idle",
          "Interacting",
          "Communicating",
          "NotResponding"
        ],
        "type": "string"
      }
    },
    "required": [
      "agentId",
      "eventDateTime",
      "eventId",
      "sourceId",
      "status"
    ],
    "type": "object"
  },
  "UserSchedule": {
    "properties": {
      "delete": {
        "description": "If marked true for updating an existing user schedule, it will be deleted",
        "type": "boolean"
      },
      "fullDayTimeOffMarkers": {
        "description": "Markers to indicate a full day time off request, relative to the management unit time zone",
        "items": {
          "$ref": "#/definitions/UserScheduleFullDayTimeOffMarker"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this schedule"
      },
      "shifts": {
        "description": "The shifts that belong to this schedule",
        "items": {
          "$ref": "#/definitions/UserScheduleShift"
        },
        "type": "array"
      },
      "workPlanId": {
        "description": "ID of the work plan associated with the user during schedule creation",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "UserScheduleActivity": {
    "properties": {
      "activityCodeId": {
        "description": "The id for the activity code.  Look up a map of activity codes with the activities route",
        "type": "string"
      },
      "countsAsPaidTime": {
        "description": "Whether this activity is paid",
        "type": "boolean"
      },
      "description": {
        "description": "Description for this activity",
        "type": "string"
      },
      "isDstFallback": {
        "description": "Whether this activity spans a DST fallback",
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "Length in minutes for this activity",
        "format": "int32",
        "type": "integer"
      },
      "startDate": {
        "description": "Start time in UTC for this activity, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "timeOffRequestId": {
        "description": "Time off request id of this activity",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserScheduleAdherence": {
    "properties": {
      "activeQueues": {
        "description": "The list of queues to which this user is joined",
        "items": {
          "$ref": "#/definitions/QueueReference"
        },
        "readOnly": true,
        "type": "array"
      },
      "activeQueuesModifiedTime": {
        "description": "Time when the list of active queues for this user was last updated. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "actualActivityCategory": {
        "description": "Activity in which the user is actually engaged",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "readOnly": true,
        "type": "string"
      },
      "adherenceExplanation": {
        "$ref": "#/definitions/RealTimeAdherenceExplanation",
        "description": "Currently applicable explanation for the adherence state",
        "readOnly": true
      },
      "adherenceState": {
        "description": "The user's current adherence state",
        "enum": [
          "InAdherence",
          "OutOfAdherence",
          "Unscheduled",
          "Unknown",
          "Ignored",
          "Explained"
        ],
        "readOnly": true,
        "type": "string"
      },
      "businessUnit": {
        "$ref": "#/definitions/BusinessUnitReference",
        "description": "The business unit to which this user belongs",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "impact": {
        "description": "The impact of the user's current adherenceState",
        "enum": [
          "Positive",
          "Negative",
          "Neutral",
          "Unknown"
        ],
        "readOnly": true,
        "type": "string"
      },
      "isOutOfOffice": {
        "description": "Whether the user is marked OutOfOffice",
        "readOnly": true,
        "type": "boolean"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which this user belongs",
        "readOnly": true
      },
      "name": {
        "type": "string"
      },
      "organizationSecondaryPresenceId": {
        "description": "Organization Secondary Presence Id.",
        "readOnly": true,
        "type": "string"
      },
      "presenceUpdateTime": {
        "description": "Time when presence was last updated. Used to calculate time in current status. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "removedFromManagementUnit": {
        "description": "For notification purposes. Used to indicate that a user was removed from the management unit",
        "readOnly": true,
        "type": "boolean"
      },
      "routingStatus": {
        "description": "Actual underlying routing status, used to determine whether a user is actually in adherence when OnQueue",
        "enum": [
          "OFF_QUEUE",
          "IDLE",
          "INTERACTING",
          "NOT_RESPONDING",
          "COMMUNICATING"
        ],
        "readOnly": true,
        "type": "string"
      },
      "scheduledActivityCategory": {
        "description": "Activity for which the user is scheduled",
        "enum": [
          "OnQueueWork",
          "Break",
          "Meal",
          "Meeting",
          "OffQueueWork",
          "TimeOff",
          "Training",
          "Unavailable",
          "Unscheduled"
        ],
        "readOnly": true,
        "type": "string"
      },
      "scheduledActivityCode": {
        "$ref": "#/definitions/ActivityCodeSummary",
        "description": "Activity code for which the user is currently scheduled",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "systemPresence": {
        "description": "Actual underlying system presence value",
        "enum": [
          "Available",
          "Away",
          "Busy",
          "Offline",
          "Idle",
          "OnQueue",
          "Meal",
          "Training",
          "Meeting",
          "Break"
        ],
        "readOnly": true,
        "type": "string"
      },
      "team": {
        "$ref": "#/definitions/TeamReference",
        "description": "The team to which this user belongs",
        "readOnly": true
      },
      "timeOfAdherenceChange": {
        "description": "Time when the user entered the current adherenceState in ISO-8601 format",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user for whom this status applies",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserScheduleAdherenceListing": {
    "properties": {
      "downloadUrl": {
        "description": "The downloadUrl if the response is too large to send directly via http response",
        "readOnly": true,
        "type": "string"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/UserScheduleAdherence"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserScheduleContainer": {
    "properties": {
      "managementUnitTimeZone": {
        "description": "The reference time zone used for the management unit",
        "type": "string"
      },
      "publishedSchedules": {
        "description": "References to all published week schedules overlapping the start/end date query parameters",
        "items": {
          "$ref": "#/definitions/WeekScheduleReference"
        },
        "type": "array"
      },
      "userSchedules": {
        "additionalProperties": {
          "$ref": "#/definitions/UserSchedule"
        },
        "description": "Map of user id to user schedule",
        "type": "object"
      }
    },
    "type": "object"
  },
  "UserScheduleFullDayTimeOffMarker": {
    "properties": {
      "activityCodeId": {
        "description": "The id for the activity code.  Look up a map of activity codes with the activities route",
        "type": "string"
      },
      "delete": {
        "description": "If marked true for updating an existing full day time off marker, it will be deleted",
        "type": "boolean"
      },
      "description": {
        "description": "The description associated with the time off request that this marker corresponds to",
        "type": "string"
      },
      "isPaid": {
        "description": "Whether this is paid time off",
        "type": "boolean"
      },
      "lengthInMinutes": {
        "description": "The length in minutes of this time off marker",
        "format": "int32",
        "type": "integer"
      },
      "managementUnitDate": {
        "description": "The date associated with the time off request that this marker corresponds to.  Date only, in ISO-8601 format.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserScheduleShift": {
    "properties": {
      "activities": {
        "description": "List of activities in this shift",
        "items": {
          "$ref": "#/definitions/UserScheduleActivity"
        },
        "type": "array"
      },
      "delete": {
        "description": "If marked true for updating this schedule shift, it will be deleted",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the schedule shift. This is only for the case of updating and deleting an existing shift",
        "type": "string"
      },
      "lengthInMinutes": {
        "description": "Length of this shift in minutes",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "manuallyEdited": {
        "description": "Whether the shift was set as manually edited",
        "type": "boolean"
      },
      "startDate": {
        "description": "Start time in UTC for this shift. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "weekSchedule": {
        "$ref": "#/definitions/WeekScheduleReference",
        "description": "The schedule to which this shift belongs",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "addresses.email",
            "addresses.voice",
            "addresses.address",
            "addresses.voicemailEnabled",
            "chat.jabberId",
            "department",
            "email",
            "username",
            "siteId",
            "manager.id",
            "hr.employeeId",
            "integration",
            "groups.social.id",
            "groups.official.id",
            "groups.distribution.id",
            "state",
            "id",
            "languages.guid",
            "languages.name",
            "languages.namespace",
            "languages.proficiency",
            "name",
            "primaryContactInfo.voice",
            "primaryContactInfo.sms",
            "primaryContactInfo.email",
            "profileSkills",
            "queueMembership.added",
            "queueMembership.joined",
            "routingSkills.guid",
            "routingSkills.name",
            "routingSkills.namespace",
            "routingSkills.proficiency",
            "title",
            "divisionId",
            "teamId"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/UserSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "STARTS_WITH",
          "CONTAINS",
          "REGEX",
          "TERM",
          "TERMS",
          "REQUIRED_FIELDS",
          "MATCH_ALL",
          "QUERY_STRING"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "UserSearchRequest": {
    "properties": {
      "enforcePermissions": {
        "description": "This property only applies to api/v2/user/search; when set to true add additional search criteria to filter users by: directory:user:view",
        "type": "boolean"
      },
      "expand": {
        "description": "Provides more details about a specified resource",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "integrationPresenceSource": {
        "description": "Gets an integration presence for users instead of their defaults. This parameter will only be used when presence is provided as an \"expand\". When using this parameter the maximum number of users that can be returned is 100.",
        "enum": [
          "MicrosoftTeams",
          "ZoomPhone",
          "EightByEight"
        ],
        "type": "string"
      },
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/UserSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserSearchRule": {
    "properties": {
      "parts": {
        "description": "The parts of this rule; the results of these are ANDed together.",
        "items": {
          "$ref": "#/definitions/UserSearchRulePart"
        },
        "type": "array"
      }
    },
    "required": [
      "parts"
    ],
    "type": "object"
  },
  "UserSearchRulePart": {
    "properties": {
      "ids": {
        "description": "The ids for the selector; the results of these are ORed together",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "operation": {
        "description": "The operation for this part",
        "enum": [
          "Include",
          "Exclude"
        ],
        "type": "string"
      },
      "selector": {
        "description": "The type of item being selected by this part",
        "enum": [
          "AcdSkill",
          "User",
          "Group",
          "Queue",
          "Division",
          "ManagementUnit"
        ],
        "type": "string"
      }
    },
    "required": [
      "ids",
      "operation",
      "selector"
    ],
    "type": "object"
  },
  "UserSkillEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserRoutingSkill"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserSkillGroupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/SkillGroup"
        },
        "type": "array"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "UserStaffingGroupListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserStaffingGroupResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserStaffingGroupResponse": {
    "properties": {
      "staffingGroup": {
        "$ref": "#/definitions/StaffingGroupReference",
        "description": "The staffing group"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with the staffing group"
      }
    },
    "type": "object"
  },
  "UserState": {
    "properties": {
      "state": {
        "description": "User's current state.",
        "enum": [
          "active",
          "inactive",
          "deleted"
        ],
        "type": "string"
      },
      "stateChangeDate": {
        "description": "Date that the state was last changed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "stateChangeReason": {
        "description": "Reason for a change in the user's state.",
        "enum": [
          "Voluntary",
          "Seasonal",
          "Leave",
          "Performance",
          "Conduct",
          "Unknown"
        ],
        "type": "string"
      },
      "version": {
        "description": "Version of this user.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserStation": {
    "properties": {
      "associatedDate": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "associatedUser": {
        "$ref": "#/definitions/User"
      },
      "defaultUser": {
        "$ref": "#/definitions/User"
      },
      "id": {
        "description": "A globally unique identifier for this station",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "providerInfo": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Provider-specific info for this station, e.g. { \"edgeGroupId\": \"ffe7b15c-a9cc-4f4c-88f5-781327819a49\" }",
        "type": "object"
      },
      "type": {
        "type": "string"
      },
      "webRtcCallAppearances": {
        "description": "The number of call appearances on the station.",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserStations": {
    "properties": {
      "associatedStation": {
        "$ref": "#/definitions/UserStation",
        "description": "Current associated station for this user.",
        "readOnly": true
      },
      "defaultStation": {
        "$ref": "#/definitions/UserStation",
        "description": "Default station to be used if not associated with a station.",
        "readOnly": true
      },
      "effectiveStation": {
        "$ref": "#/definitions/UserStation",
        "description": "The station where the user can be reached based on their default and associated station.",
        "readOnly": true
      },
      "lastAssociatedStation": {
        "$ref": "#/definitions/UserStation",
        "description": "Last associated station for this user.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "UserTimeOffIntegrationStatusResponse": {
    "properties": {
      "integrationStatus": {
        "description": "The value of integration status for the time off request",
        "enum": [
          "Processing",
          "Error",
          "AutomaticallyComplete",
          "ManuallyComplete"
        ],
        "type": "string"
      },
      "timeOffRequest": {
        "$ref": "#/definitions/TimeOffRequestReference",
        "description": "The time off request associated with this integration status"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user to whom the time off request belongs"
      }
    },
    "required": [
      "integrationStatus",
      "timeOffRequest",
      "user"
    ],
    "type": "object"
  },
  "UserTimeOffIntegrationStatusResponseListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserTimeOffIntegrationStatusResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "UserTimeOffRequestReference": {
    "properties": {
      "id": {
        "description": "The id of the time off request",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The ID of the user to whom the time off request applies"
      }
    },
    "required": [
      "user"
    ],
    "type": "object"
  },
  "UserTransferEvent": {
    "properties": {
      "commandId": {
        "description": "The id (V4 UUID) used by the external platform to refer to the transfer in subsequent Transfer events.",
        "type": "string"
      },
      "conversationId": {
        "description": "A unique Id (V4 UUID) identifying this conversation",
        "type": "string"
      },
      "destinationUserId": {
        "description": "The id (V4 UUID) of the desired destination user that the object communication should be transferred to.",
        "type": "string"
      },
      "eventDateTime": {
        "description": "A Date Time representing the time this event occurred. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "eventId": {
        "description": "A unique (V4 UUID) eventId for this event",
        "type": "string"
      },
      "initiatingCommunicationId": {
        "description": "The id (V4 UUID) of the communication representing the participant that is initiating the transfer.",
        "type": "string"
      },
      "objectCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred.",
        "type": "string"
      },
      "targetCommunicationId": {
        "description": "The id (V4 UUID) of the communication that is being transferred away from. In many cases this will be the same as the `initiatingCommunicationId`.",
        "type": "string"
      },
      "transferType": {
        "description": "Indicates the desired type of transfer.",
        "enum": [
          "Attended",
          "Unattended"
        ],
        "type": "string"
      }
    },
    "required": [
      "commandId",
      "conversationId",
      "destinationUserId",
      "eventDateTime",
      "eventId",
      "initiatingCommunicationId",
      "objectCommunicationId",
      "targetCommunicationId",
      "transferType"
    ],
    "type": "object"
  },
  "UserTrendData": {
    "properties": {
      "averageValue": {
        "description": "Average metric value",
        "format": "double",
        "type": "number"
      },
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "percentOfGoal": {
        "description": "Percent of goal",
        "format": "double",
        "type": "number"
      },
      "rankPercentagePoints": {
        "description": "Rank, ordered by percentage of points",
        "format": "int32",
        "type": "integer"
      },
      "rankTotalPoints": {
        "description": "Rank, ordered by total points",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UserVideoSettings": {
    "description": "The settings for User Video",
    "properties": {
      "allowCamera": {
        "description": "whether or not user camera is allowed",
        "type": "boolean"
      },
      "allowScreenShare": {
        "description": "whether or not user screen share is allowed",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "UsersSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/User"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "UtilizationLabel": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "UtilizationLabelEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UtilizationLabel"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "UtilizationRequest": {
    "properties": {
      "labelUtilizations": {
        "additionalProperties": {
          "$ref": "#/definitions/LabelUtilizationRequest"
        },
        "description": "Map of label ids to utilization settings.",
        "type": "object"
      },
      "utilization": {
        "additionalProperties": {
          "$ref": "#/definitions/MediaUtilization"
        },
        "description": "Map of media type to utilization settings.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "UtilizationResponse": {
    "properties": {
      "labelUtilizations": {
        "additionalProperties": {
          "$ref": "#/definitions/LabelUtilizationResponse"
        },
        "description": "Map of label ids to utilization settings.",
        "type": "object"
      },
      "utilization": {
        "additionalProperties": {
          "$ref": "#/definitions/MediaUtilization"
        },
        "description": "Map of media type to utilization settings.",
        "type": "object"
      }
    },
    "type": "object"
  },
  "Utterance": {
    "properties": {
      "utteranceText": {
        "description": "Utterance text",
        "example": "I want to pay bill.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ValidateAddressRequest": {
    "properties": {
      "address": {
        "$ref": "#/definitions/StreetAddress",
        "description": "Address schema"
      }
    },
    "type": "object"
  },
  "ValidateAddressResponse": {
    "properties": {
      "response": {
        "$ref": "#/definitions/SubscriberResponse",
        "description": "Subscriber schema"
      },
      "valid": {
        "description": "Was the passed in address valid",
        "type": "boolean"
      }
    },
    "required": [
      "valid"
    ],
    "type": "object"
  },
  "ValidateAssignUsers": {
    "properties": {
      "membersToAssign": {
        "description": "List of user ids to assign to a performance profile",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "membersToAssign"
    ],
    "type": "object"
  },
  "ValidateWorkPlanMessages": {
    "properties": {
      "constraintConflictMessage": {
        "$ref": "#/definitions/ConstraintConflictMessage",
        "description": "This field is not null when there is a set of work plan constraints that conflict thus agent schedules cannot be generated"
      },
      "violationMessages": {
        "description": "Messages for work plan violating some rules such as no shifts in a work plan",
        "items": {
          "$ref": "#/definitions/WorkPlanConfigurationViolationMessage"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "ValidateWorkPlanResponse": {
    "properties": {
      "messages": {
        "$ref": "#/definitions/ValidateWorkPlanMessages",
        "description": "Validation messages for this work plan"
      },
      "valid": {
        "description": "Whether the work plan is valid or not",
        "type": "boolean"
      },
      "workPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan reference associated with this response"
      }
    },
    "type": "object"
  },
  "ValidationLimits": {
    "properties": {
      "maxItems": {
        "$ref": "#/definitions/MaxLength"
      },
      "maxLength": {
        "$ref": "#/definitions/MaxLength"
      },
      "maximum": {
        "$ref": "#/definitions/MaxLength"
      },
      "minItems": {
        "$ref": "#/definitions/MinLength"
      },
      "minLength": {
        "$ref": "#/definitions/MinLength"
      },
      "minimum": {
        "$ref": "#/definitions/MinLength"
      }
    },
    "type": "object"
  },
  "ValidationServiceRequest": {
    "properties": {
      "dateImportEnded": {
        "description": "The last day of the data you are importing. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "uploadKey": {
        "description": "S3 key for the uploaded file",
        "type": "string"
      }
    },
    "required": [
      "dateImportEnded",
      "uploadKey"
    ],
    "type": "object"
  },
  "ValueWrapperActivityPlanServiceGoalImpactOverrides": {
    "properties": {
      "value": {
        "$ref": "#/definitions/ActivityPlanServiceGoalImpactOverrides",
        "description": "The value for the associated field"
      }
    },
    "type": "object"
  },
  "ValueWrapperDate": {
    "properties": {
      "value": {
        "description": "The value for the associated field. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ValueWrapperGroupSettings": {
    "properties": {
      "value": {
        "$ref": "#/definitions/GroupSettings",
        "description": "The value for the associated field"
      }
    },
    "type": "object"
  },
  "ValueWrapperHrisTimeOffType": {
    "properties": {
      "value": {
        "$ref": "#/definitions/HrisTimeOffType",
        "description": "The value for the associated field"
      }
    },
    "type": "object"
  },
  "ValueWrapperPlanningPeriodSettings": {
    "properties": {
      "value": {
        "$ref": "#/definitions/PlanningPeriodSettings",
        "description": "The value for the associated field"
      }
    },
    "type": "object"
  },
  "ValueWrapperString": {
    "properties": {
      "value": {
        "description": "The value for the associated field",
        "type": "string"
      }
    },
    "type": "object"
  },
  "ValueWrapperUserSearchRule": {
    "properties": {
      "value": {
        "$ref": "#/definitions/UserSearchRule",
        "description": "The value for the associated field"
      }
    },
    "type": "object"
  },
  "VerificationResult": {
    "properties": {
      "records": {
        "description": "The list of DNS records that pertain that need to exist for verification.",
        "items": {
          "$ref": "#/definitions/Record"
        },
        "type": "array"
      },
      "status": {
        "description": "The verification status.",
        "enum": [
          "FAILED",
          "PENDING",
          "VERIFIED",
          "UNKNOWN"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Verifier": {
    "properties": {
      "default": {
        "description": "Indicates whether this is the default verifier.",
        "type": "boolean"
      },
      "enabled": {
        "description": "Indicates whether this verifier is enabled.",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "VerifierEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Verifier"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Video": {
    "properties": {
      "afterCallWork": {
        "$ref": "#/definitions/AfterCallWork",
        "description": "After-call work for the communication."
      },
      "afterCallWorkRequired": {
        "description": "Indicates if after-call work is required for a communication. Only used when the ACW Setting is Agent Requested.",
        "type": "boolean"
      },
      "audioMuted": {
        "description": "Indicates whether this participant has muted their outgoing audio.",
        "type": "boolean"
      },
      "connectedTime": {
        "description": "The timestamp when this communication was connected in the cloud clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "context": {
        "description": "The room id context (xmpp jid) for the conference session.",
        "type": "string"
      },
      "disconnectType": {
        "description": "System defined string indicating what caused the communication to disconnect. Will be null until the communication disconnects.",
        "enum": [
          "endpoint",
          "client",
          "system",
          "timeout",
          "transfer",
          "transfer.conference",
          "transfer.consult",
          "transfer.forward",
          "transfer.noanswer",
          "transfer.notavailable",
          "transport.failure",
          "error",
          "peer",
          "other",
          "spam",
          "uncallable"
        ],
        "type": "string"
      },
      "disconnectedTime": {
        "description": "The timestamp when this communication disconnected from the conversation in the provider clock. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A globally unique identifier for this communication.",
        "type": "string"
      },
      "initialState": {
        "description": "The initial connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "msids": {
        "description": "List of media stream ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "peerCount": {
        "description": "The number of peer participants from the perspective of the participant in the conference.",
        "format": "int32",
        "type": "integer"
      },
      "peerId": {
        "description": "The id of the peer communication corresponding to a matching leg for this communication.",
        "type": "string"
      },
      "provider": {
        "description": "The source provider for the video.",
        "type": "string"
      },
      "self": {
        "$ref": "#/definitions/Address",
        "description": "Address and name data for a call endpoint."
      },
      "sharingScreen": {
        "description": "Indicates whether this participant is sharing their screen to the session.",
        "type": "boolean"
      },
      "startAlertingTime": {
        "description": "The timestamp the communication has when it is first put into an alerting state. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "state": {
        "description": "The connection state of this communication.",
        "enum": [
          "alerting",
          "dialing",
          "contacting",
          "offering",
          "connected",
          "disconnected",
          "terminated",
          "none"
        ],
        "type": "string"
      },
      "videoMuted": {
        "description": "Indicates whether this participant has muted/paused their outgoing video.",
        "type": "boolean"
      },
      "wrapup": {
        "$ref": "#/definitions/Wrapup",
        "description": "Call wrap up or disposition data."
      }
    },
    "type": "object"
  },
  "VideoSettings": {
    "description": "The settings to enable video chat",
    "properties": {
      "agent": {
        "$ref": "#/definitions/AgentVideoSettings",
        "description": "Video Settings for agent"
      },
      "enabled": {
        "description": "whether or not video is enabled",
        "type": "boolean"
      },
      "user": {
        "$ref": "#/definitions/UserVideoSettings",
        "description": "Video Settings for user"
      }
    },
    "type": "object"
  },
  "ViewFilter": {
    "properties": {
      "abandonDurationsMilliseconds": {
        "description": "The abandon durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "abandoned": {
        "description": "Indicates filtering for abandons",
        "type": "boolean"
      },
      "acdDurationMilliseconds": {
        "description": "The acd durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "acdDurationsMilliseconds": {
        "description": "The acd durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "acdPercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The acd percentage used to filter the view"
      },
      "actionCategoryName": {
        "description": "Deprecated - Please use integrationIds instead",
        "type": "string"
      },
      "acwDurationsMilliseconds": {
        "description": "The acw durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "addressFroms": {
        "description": "The address from values are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "addressTos": {
        "description": "The address To values are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "agentCallbackOwnerIds": {
        "description": "The list of callback owners used to filter interactions",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "agentEmpathyScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The agentEmpathyScore is used to filter the view"
      },
      "agentTalkDurationMilliseconds": {
        "description": "The agent talk durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "agentTalkPercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The agent talk percentage used to filter the view"
      },
      "alertRuleIds": {
        "description": "The list of Alert Rule IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "aniList": {
        "description": "The ani list ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "answered": {
        "description": "Indicates filtering for answered interactions",
        "type": "boolean"
      },
      "assistantIds": {
        "description": "The assistant ids that are used to filter the view.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "availableDashboard": {
        "description": "Filter to indicate the availability of the dashboard is public or private.",
        "enum": [
          "Public",
          "Private"
        ],
        "type": "string"
      },
      "blockedReasons": {
        "description": "The list of blocked reason used to filter action map constraints views",
        "items": {
          "enum": [
            "PageUrlConditionsNotMatching",
            "AlreadyExistingOffer",
            "TriggerDateInFuture",
            "MultipleSimultaneousOffers",
            "FrequencyCapping",
            "OfferedOutsideSchedule",
            "ServiceLevelThrottling",
            "NoAvailableAgents"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botFinalIntentList": {
        "description": "The list of bot final intents used to filter bot views",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "botFlowTypes": {
        "description": "The botFlowTypes is used to filter the view",
        "items": {
          "enum": [
            "Unknown",
            "Bot",
            "DigitalBot",
            "VoiceSurvey"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botIds": {
        "description": "The list of bot IDs used to filter bot views",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "botIntentList": {
        "description": "The list of bot intents used to filter bot views",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "botMessageTypes": {
        "description": "The list of bot message types used to filter bot views",
        "items": {
          "enum": [
            "Unknown",
            "Phone",
            "SMS",
            "GenesysChatWidget",
            "FacebookMessenger",
            "WeChat",
            "Whatsapp",
            "AppleBusinessChat",
            "Telegram",
            "Slack",
            "Signal",
            "Line",
            "Discord",
            "TwitterDirectMessage",
            "Other"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botProductList": {
        "description": "The list of bot products used to filter bot views",
        "items": {
          "enum": [
            "Unknown",
            "GenesysDialogEngine",
            "AmazonLex",
            "GoogleDialogFlow",
            "GoogleDialogFlowResell",
            "GenesysBotFlow",
            "NuanceDlg",
            "GoogleDialogFlowCx",
            "GenesysByob",
            "AmazonLexV2",
            "GoogleDialogFlowCxResell",
            "GoogleSttBotFlow",
            "MicrosoftSttBotFlow"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botProviderList": {
        "description": "The list of bot providers used to filter bot views",
        "items": {
          "enum": [
            "Unknown",
            "Genesys",
            "Amazon",
            "Google",
            "Nuance"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botRecognitionFailureReasonList": {
        "description": "The list of bot recognition failure reasons used to filter bot views",
        "items": {
          "enum": [
            "Unknown",
            "NoInputCollection",
            "NoInputConfirmation",
            "NoInputDisambiguation",
            "NoMatchCollection",
            "NoMatchConfirmation",
            "NoMatchDisambiguation",
            "MaxWrongMatch"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botResultList": {
        "description": "The list of bot results used to filter bot views",
        "items": {
          "enum": [
            "Unknown",
            "ExitRequestedByUser",
            "ExitRequestedByBot",
            "ExitError",
            "ExitRecognitionFailure",
            "DisconnectRequestedByUser",
            "DisconnectRequestedByBot",
            "DisconnectSessionExpired",
            "DisconnectError",
            "DisconnectRecognitionFailure",
            "TransferToACD"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "botSlotList": {
        "description": "The list of bot slots used to filter bot views",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "botVersions": {
        "description": "The list of bot versions used to filter bot views",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "callbackInterval": {
        "description": "An interval of time to filter for scheduled callbacks. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss",
        "type": "string"
      },
      "callbackNumberList": {
        "description": "A list of callback numbers or substrings of numbers (ex: [\"317\", \"13172222222\"])",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "canonicalContactIds": {
        "description": "The canonical contact ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "contactIds": {
        "description": "The contact ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "conversationIds": {
        "description": "The list of conversation ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "conversationInitiators": {
        "description": "The list to filter based on Brands (Bot/User/Agent) or End User who initiated the first message in the conversation",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "conversationProperties": {
        "$ref": "#/definitions/ConversationProperties",
        "description": "A grouping of conversation level filters"
      },
      "customerSentimentScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The customer sentiment score used to filter the view"
      },
      "customerSentimentTrend": {
        "$ref": "#/definitions/NumericRange",
        "description": "The customer sentiment trend used to filter the view"
      },
      "customerTalkDurationMilliseconds": {
        "description": "The customer talk durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "customerTalkPercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The customer talk percentage used to filter the view"
      },
      "dashboardAccessFilter": {
        "description": "The type of dashboard access being filtered",
        "enum": [
          "OwnedByMe",
          "OwnedByAnyone",
          "NotOwnedByMe"
        ],
        "type": "string"
      },
      "dashboardType": {
        "description": "The type of dashboard being filtered",
        "enum": [
          "All",
          "Public",
          "Private",
          "Shared",
          "Favorites"
        ],
        "type": "string"
      },
      "dataActionIds": {
        "description": "The list of Data Action IDs ",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "developmentActivityOverdue": {
        "description": "Indicates filtering for development activities",
        "type": "boolean"
      },
      "developmentModuleIds": {
        "description": "The list of development moduleIds used to filter agent development view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "developmentName": {
        "description": "Filter for development name",
        "type": "string"
      },
      "developmentRoleList": {
        "description": "The list of development roles used to filter agent development view",
        "items": {
          "enum": [
            "Creator",
            "Facilitator",
            "Attendee"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "developmentStatusList": {
        "description": "The list of development status used to filter agent development view",
        "items": {
          "enum": [
            "Planned",
            "Scheduled",
            "InvalidSchedule",
            "InProgress",
            "Completed",
            "NotCompleted"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "developmentTypeList": {
        "description": "The list of development types used to filter agent development view",
        "items": {
          "enum": [
            "Informational",
            "Coaching",
            "Assessment",
            "AssessedContent",
            "External",
            "Native"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "directions": {
        "description": "The directions are used to filter the view",
        "items": {
          "enum": [
            "inbound",
            "outbound"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "divisionIds": {
        "description": "The divison Ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-entity-type": {
          "value": "DIVISION_ID"
        }
      },
      "dnisList": {
        "description": "The dnis list is used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "durationsMilliseconds": {
        "description": "The durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "emailDeliveryStatusList": {
        "description": "The list of email delivery statuses used to filter views",
        "items": {
          "enum": [
            "DeliveryFailed",
            "DeliverySuccess",
            "Failed",
            "Published",
            "Queued",
            "Read",
            "Received",
            "Sent"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "evaluatedAgentIds": {
        "description": "The evaluated agent ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "evaluationAssigned": {
        "description": "Filter to indicate that the user has no assigned evaluation.",
        "type": "boolean"
      },
      "evaluationAssigneeIds": {
        "description": "The evaluation assignee ids that are used to filter the view.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "evaluationCriticalScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The evaluationCriticalScore is used to filter the view"
      },
      "evaluationFormContextIds": {
        "description": "The list of Evaluation Form Context IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "evaluationFormIds": {
        "description": "The evaluation form ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "evaluationScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The evaluationScore is used to filter the view"
      },
      "evaluationStatuses": {
        "description": "The evaluation statuses that are used to filter the view",
        "items": {
          "enum": [
            "Finished",
            "InProgress",
            "InReview",
            "Pending",
            "Retracted"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "evaluatorIds": {
        "description": "The evaluator ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "externalContactIds": {
        "description": "The external contact ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "externalOrgIds": {
        "description": "The external org ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "externalTags": {
        "description": "The list of external Tags used to filter conversation data",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "favouriteDashboard": {
        "description": "Filter to indicate whether the dashboard is favorite or unfavorite.",
        "type": "boolean"
      },
      "filterQueuesByUserIds": {
        "description": "The user ids are used to fetch associated queues for the view",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-entity-type": {
          "value": "USER_ID"
        }
      },
      "filterUsersByQueueIds": {
        "description": "The queue ids are used to fetch associated users for the view",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-entity-type": {
          "value": "QUEUE_ID"
        }
      },
      "filterUsersByTeamIds": {
        "description": "The team ids are used to fetch associated users for the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowDestinationTypes": {
        "description": "The list of destination types of the flow",
        "items": {
          "enum": [
            "ACD",
            "USER",
            "GROUP",
            "NUMBER",
            "FLOW",
            "SECURE_FLOW",
            "ACD_VOICEMAIL",
            "USER_VOICEMAIL",
            "GROUP_VOICEMAIL",
            "RETURN_TO_AGENT"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "flowDisconnectReasons": {
        "description": "The list of reasons for the flow to disconnect",
        "items": {
          "enum": [
            "FLOW_DISCONNECT",
            "FLOW_ERROR_DISCONNECT",
            "DISCONNECT"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "flowEntryReasons": {
        "description": "A list of reasons of flow entry",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowEntryTypes": {
        "description": "A list of types of the flow entry",
        "items": {
          "enum": [
            "agent",
            "direct",
            "dnis",
            "flow",
            "outbound"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "flowIds": {
        "description": "The list of flow Ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowMilestoneIds": {
        "description": "The list of flow milestones to filter exports",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowOutTypes": {
        "description": "A list of flow out types",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowOutcomeIds": {
        "description": "A list of outcome ids of the flow",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowOutcomeValues": {
        "description": "A list of outcome values of the flow",
        "items": {
          "enum": [
            "SUCCESS",
            "FAILURE"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "flowTransferTargets": {
        "description": "The list of transfer targets used to filter flow data",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "flowTypes": {
        "description": "A list of types of the flow",
        "items": {
          "enum": [
            "bot",
            "commonmodule",
            "digitalbot",
            "inboundcall",
            "inboundchat",
            "inboundemail",
            "inboundshortmessage",
            "inqueuecall",
            "inqueueshortmessage",
            "inqueueemail",
            "outboundcall",
            "securecall",
            "surveyinvite",
            "voice",
            "voicemail",
            "voicesurvey",
            "workflow",
            "workitem"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "flowVersions": {
        "description": "A list of versions of a flow",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "groupIds": {
        "description": "A list of directory group ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "handleDurationsMilliseconds": {
        "description": "The handle durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "hasAgentAssistId": {
        "description": "Indicates filtering for agent assist id",
        "type": "boolean"
      },
      "hasCustomerParticipated": {
        "description": "Indicates if the customer has participated in an initiated conversation",
        "type": "boolean"
      },
      "hasEvaluation": {
        "description": "Indicates filtering for evaluation",
        "type": "boolean"
      },
      "hasFax": {
        "description": "Filters to indicate if interaction has FAX",
        "type": "boolean"
      },
      "hasJourneyActionMapId": {
        "description": "Indicates filtering for Journey action map id",
        "type": "boolean"
      },
      "hasJourneyCustomerId": {
        "description": "Indicates filtering for journey customer id",
        "type": "boolean"
      },
      "hasJourneyVisitId": {
        "description": "Indicates filtering for Journey visit id",
        "type": "boolean"
      },
      "hasMedia": {
        "description": "Indicates filtering for presence of MMS media",
        "type": "boolean"
      },
      "hasPciData": {
        "description": "Filter to indicate the transcript contains Pci data.",
        "type": "boolean"
      },
      "hasPiiData": {
        "description": "Filter to indicate the transcript contains Pii data.",
        "type": "boolean"
      },
      "hasScoredEvaluation": {
        "description": "Indicates filtering for scored evaluation",
        "type": "boolean"
      },
      "hasSensitiveData": {
        "description": "Deprecated. Use hasPciData or hasPiiData instead.",
        "type": "boolean"
      },
      "holdDurationsMilliseconds": {
        "description": "The hold durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "integrationIds": {
        "description": "The list of integration IDs for Data Action",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "isAcdInteraction": {
        "description": "Filter to indicate if interaction was ACD or non-ACD",
        "type": "boolean"
      },
      "isAgentOwnedCallback": {
        "description": "Indicates filtering for agent owned callback interactions",
        "type": "boolean"
      },
      "isAnalyzedForSensitiveData": {
        "description": "Deprecated - Use hasPciData or hasPiiData instead.",
        "type": "boolean"
      },
      "isAssessmentPassed": {
        "description": "Filter to indicate if Agent passed assessment or not",
        "type": "boolean"
      },
      "isAuthenticated": {
        "description": "Indicates filtering for the authenticated chat",
        "type": "boolean"
      },
      "isBlindTransferred": {
        "description": "Indicates filtering for blind transferred",
        "type": "boolean"
      },
      "isCampaign": {
        "description": "Indicates filtering for campaign",
        "type": "boolean"
      },
      "isClearedByCustomer": {
        "description": "Filter to indicate if the customer cleared the conversation.",
        "type": "boolean"
      },
      "isConsultTransferred": {
        "description": "Indicates filtering for consult transferred",
        "type": "boolean"
      },
      "isConsulted": {
        "description": "Indicates filtering for consulted",
        "type": "boolean"
      },
      "isEnded": {
        "description": "Indicates filtering for ended",
        "type": "boolean"
      },
      "isNotResponding": {
        "description": "Indicates filtering for not responding users",
        "type": "boolean"
      },
      "isParked": {
        "description": "Filter to indicate if the interactions are parked.",
        "type": "boolean"
      },
      "isRecorded": {
        "description": "Indicates filtering for recorded",
        "type": "boolean"
      },
      "isScreenRecorded": {
        "description": "Filter to indicate if the screen is recorded",
        "type": "boolean"
      },
      "isSurveyed": {
        "description": "Indicates filtering for survey",
        "type": "boolean"
      },
      "ivrDurationMilliseconds": {
        "description": "The ivr durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "ivrPercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The ivr percentage used to filter the view"
      },
      "journeyActionMapIds": {
        "description": "The journey action map ids are used to fetch action maps for the associated view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyActionMapTypes": {
        "description": "The journey action map types are used to filter action map data for the associated view",
        "items": {
          "enum": [
            "webchat",
            "webMessagingOffer",
            "contentOffer",
            "integrationAction",
            "architectFlow",
            "openAction"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "journeyActionTargetIds": {
        "description": "The list of action targets to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyBlockingActionMapIds": {
        "description": "The list of blocking action maps to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyBlockingEmergencyScheduleGroupIds": {
        "description": "The list of emergency schedule groups to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyBlockingScheduleGroupIds": {
        "description": "The list of blocking schedule groups to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyFrequencyCapReasons": {
        "description": "The list of frequency cap reasons to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyOutcomeIds": {
        "description": "The journey outcome ids are used to fetch outcomes for the associated view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeySegmentIds": {
        "description": "The journey segment ids are used to fetch segments for the associated view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlContainsAllConditions": {
        "description": "The list of url contains all conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlContainsAnyConditions": {
        "description": "The list of url contains any conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlEndsWithConditions": {
        "description": "The list of url ends with conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlEqualConditions": {
        "description": "The list of url equal conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlNotContainsAllConditions": {
        "description": "The list of url not contains all conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlNotContainsAnyConditions": {
        "description": "The list of url not contains any conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlNotEqualConditions": {
        "description": "The list of url not equal conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "journeyUrlStartsWithConditions": {
        "description": "The list of url starts with conditions to filter offer constraints",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "knowledgeBaseIds": {
        "description": "The knowledge base ids that are used to filter the view.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "languageGroups": {
        "description": "The language groups used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "languageIds": {
        "description": "The language ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "locationIds": {
        "description": "The location Ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "managementUnitIds": {
        "description": "The management unit ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "mediaTypes": {
        "description": "The media types are used to filter the view",
        "items": {
          "enum": [
            "callback",
            "chat",
            "cobrowse",
            "email",
            "message",
            "screenshare",
            "unknown",
            "video",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "messageTypes": {
        "description": "The message media types used to filter the view",
        "items": {
          "enum": [
            "sms",
            "twitter",
            "line",
            "facebook",
            "whatsapp",
            "webmessaging",
            "open",
            "instagram"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "mos": {
        "$ref": "#/definitions/NumericRange",
        "description": "The desired range for mos values"
      },
      "myDashboard": {
        "description": "Filter to indicate the dashboard owned by the user.",
        "type": "boolean"
      },
      "originatingDirections": {
        "description": "The list of orginating directions used to filter the view",
        "items": {
          "enum": [
            "inbound",
            "outbound"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "otherDurationMilliseconds": {
        "description": "The other (hold/music) durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "otherPercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The other (hold/music percentage used to filter the view"
      },
      "outboundCampaignIds": {
        "description": "The outbound campaign ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "outboundContactListIds": {
        "description": "The outbound contact list ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "overtalkDurationMilliseconds": {
        "description": "The overtalk durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "overtalkInstances": {
        "$ref": "#/definitions/NumericRange",
        "description": "The overtalk instance range used to filter the view"
      },
      "overtalkPercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The overtalk percentage used to filter the view"
      },
      "participantPurposes": {
        "description": "A list of participant purpose requested",
        "items": {
          "enum": [
            "internal",
            "external"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "promoterScores": {
        "description": "The list of promoter score ranges used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "providerList": {
        "description": "A list of providers",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "queueIds": {
        "description": "The queue ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-entity-type": {
          "value": "QUEUE_ID"
        }
      },
      "remoteParticipants": {
        "description": "The list of remote participants used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "reportsTos": {
        "description": "The report to user IDs used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "requestedRoutingTypes": {
        "description": "A list of routing types requested",
        "items": {
          "enum": [
            "Bullseye",
            "Conditional",
            "Direct",
            "Last",
            "Manual",
            "Predictive",
            "Preferred",
            "Standard",
            "Vip"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "responseStatuses": {
        "description": "The list of Response codes for Data Action",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "roleIds": {
        "description": "The role Ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "screenMonitorUserIds": {
        "description": "The list of Screen Monitor User Ids",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "sessionDnisList": {
        "description": "The list of session dnis used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "showFirstQueue": {
        "description": "Indicates filtering for first queue data",
        "type": "boolean"
      },
      "silenceDurationMilliseconds": {
        "description": "The silence durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "silencePercentage": {
        "$ref": "#/definitions/NumericRange",
        "description": "The silence percentage used to filter the view"
      },
      "sipCallIds": {
        "description": "The list of SIP call ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "skillGroups": {
        "description": "The skill groups used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "skillIds": {
        "description": "The skill ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "stationErrors": {
        "description": "The list of agent errors that are related to station",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "subPath": {
        "description": "Filter for Sub Path",
        "type": "string"
      },
      "surveyFormContextIds": {
        "description": "The list of survey form context ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "surveyFormIds": {
        "description": "The survey form ids used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "surveyNpsScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The survey NPS score used to filter the view"
      },
      "surveyPromoterScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The survey promoter score used to filter the view"
      },
      "surveyQuestionGroupScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The survey question group score used to filter the view"
      },
      "surveyResponseStatuses": {
        "description": "The list of Survey Response Status",
        "items": {
          "enum": [
            "Unknown",
            "FullResponse",
            "PartialResponse"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "surveyScores": {
        "description": "The list of survey score ranges used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "surveyStatuses": {
        "description": "The list of survey statuses used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "surveyTotalScore": {
        "$ref": "#/definitions/NumericRange",
        "description": "The survey total score used to filter the view"
      },
      "surveyTypes": {
        "description": "The surveyTypes is used to filter the view",
        "items": {
          "enum": [
            "Web",
            "Voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "talkDurationsMilliseconds": {
        "description": "The talk durations in milliseconds used to filter the view",
        "items": {
          "$ref": "#/definitions/NumericRange"
        },
        "type": "array"
      },
      "teamIds": {
        "description": "The team ids used to filter the view data",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "topicIds": {
        "description": "Represents the topics detected in the transcript",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "transcriptLanguages": {
        "description": "A list of transcript languages requested",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "transcriptTopics": {
        "description": "The list of transcript topics requested in filter",
        "items": {
          "$ref": "#/definitions/TranscriptTopics"
        },
        "type": "array"
      },
      "transcripts": {
        "description": "A list of transcript contents requested",
        "items": {
          "$ref": "#/definitions/Transcripts"
        },
        "type": "array"
      },
      "transferred": {
        "description": "Indicates filtering for transfers",
        "type": "boolean"
      },
      "usedRoutingTypes": {
        "description": "A list of routing types used",
        "items": {
          "enum": [
            "Bullseye",
            "Conditional",
            "Direct",
            "Last",
            "Manual",
            "Predictive",
            "Preferred",
            "Standard",
            "Vip"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "userIds": {
        "description": "The user ids are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-entity-type": {
          "value": "USER_ID"
        }
      },
      "userState": {
        "description": "The user supplied state value in the view",
        "enum": [
          "ActiveAndInactive",
          "Active",
          "Inactive",
          "Deleted"
        ],
        "type": "string"
      },
      "workbinIds": {
        "description": "The list of Workbin IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "workitemAssigneeIds": {
        "description": "The list of Workitem Assignee IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "workitemIds": {
        "description": "The list of Workitem IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "workitemStatuses": {
        "description": "The list of Workitem Statuses IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "worktypeIds": {
        "description": "The list of Worktype IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "wrapUpCodes": {
        "description": "The wrap up codes are used to filter the view",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "VisibilityCondition": {
    "properties": {
      "combiningOperation": {
        "enum": [
          "AND",
          "OR"
        ],
        "type": "string"
      },
      "predicates": {
        "description": "A list of strings, each representing the location in the form of the Answer Option to depend on. In the format of \"/form/questionGroup/{questionGroupIndex}/question/{questionIndex}/answer/{answerIndex}\" or, to assume the current question group, \"../question/{questionIndex}/answer/{answerIndex}\". Note: Indexes are zero-based",
        "items": {
          "type": "object"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "VmPairingInfo": {
    "properties": {
      "auth-token": {
        "type": "string"
      },
      "edge-id": {
        "type": "string"
      },
      "meta-data": {
        "$ref": "#/definitions/MetaData",
        "description": "This is to be used to complete the setup process of a locally deployed virtual edge device."
      },
      "org-id": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "Voicemail": {
    "properties": {
      "id": {
        "description": "The voicemail id",
        "type": "string"
      },
      "uploadStatus": {
        "description": "current state of the voicemail upload",
        "enum": [
          "pending",
          "complete",
          "failed",
          "timeout",
          "none"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "VoicemailCopyRecord": {
    "properties": {
      "date": {
        "description": "The date when the voicemail was copied. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "group": {
        "$ref": "#/definitions/Group",
        "description": "The group that the voicemail message was copied to/from",
        "readOnly": true
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "The user that the voicemail message was copied to/from",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "VoicemailGroupPolicy": {
    "properties": {
      "disableEmailPii": {
        "description": "Removes any PII from group emails. This is overridden by the analogous organization configuration value. This is always true if HIPAA is enabled or unknown for an organization.",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether voicemail is enabled for the group",
        "type": "boolean"
      },
      "group": {
        "$ref": "#/definitions/Group",
        "description": "The group associated with the policy",
        "readOnly": true
      },
      "groupAlertType": {
        "description": "Specifies if the members in this group should be contacted randomly, in a specific order, or by round-robin.",
        "enum": [
          "RANDOM",
          "ROUND_ROBIN",
          "SEQUENTIAL"
        ],
        "type": "string"
      },
      "includeEmailTranscriptions": {
        "description": "Whether to include the voicemail transcription in a group notification email",
        "type": "boolean"
      },
      "interactiveResponsePromptId": {
        "description": "The prompt to use when connecting a user to a Group Ring call",
        "type": "string"
      },
      "interactiveResponseRequired": {
        "description": "Whether user should be prompted with a confirmation prompt when connecting to a Group Ring call",
        "type": "boolean"
      },
      "languagePreference": {
        "description": "The language preference for the group.  Used for group voicemail transcription",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "overflowGroupId": {
        "description": "A fallback group to contact when all of the members in this group did not answer the call.",
        "type": "string"
      },
      "rotateCallsSecs": {
        "description": "How many seconds to ring before rotating to the next member in the group",
        "format": "int32",
        "type": "integer"
      },
      "sendEmailNotifications": {
        "description": "Whether email notifications are sent to group members when a new voicemail is received",
        "type": "boolean"
      },
      "stopRingingAfterRotations": {
        "description": "How many rotations to go through",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "VoicemailMailboxInfo": {
    "properties": {
      "createdDate": {
        "description": "The date of the oldest voicemail message. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "deletedCount": {
        "description": "The total number of voicemail messages marked as deleted",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "modifiedDate": {
        "description": "The date of the most recent voicemail message. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "newestReadDate": {
        "description": "The date of the most recent read voicemail message. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "newestUnreadDate": {
        "description": "The date of the most recent unread voicemail message. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "oldestReadDate": {
        "description": "The date of the most oldest read voicemail message. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "oldestUnreadDate": {
        "description": "The date of the most oldest unread voicemail message. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "totalCount": {
        "description": "The total number of voicemail messages",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "unreadCount": {
        "description": "The total number of voicemail messages marked as unread",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "usageSizeBytes": {
        "description": "The total number of bytes for all voicemail message audio recordings",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "VoicemailMediaInfo": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaFileUri": {
        "format": "uri",
        "type": "string"
      },
      "mediaImageUri": {
        "format": "uri",
        "type": "string"
      },
      "waveformData": {
        "items": {
          "format": "float",
          "type": "number"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "VoicemailMessage": {
    "properties": {
      "audioRecordingDurationSeconds": {
        "description": "The voicemail message's audio recording duration in seconds",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "audioRecordingSizeBytes": {
        "description": "The voicemail message's audio recording size in bytes",
        "format": "int64",
        "readOnly": true,
        "type": "integer"
      },
      "callerAddress": {
        "description": "The caller address",
        "readOnly": true,
        "type": "string"
      },
      "callerName": {
        "description": "Optionally the name of the caller that left the voicemail message if the caller was a known user",
        "readOnly": true,
        "type": "string"
      },
      "callerUser": {
        "$ref": "#/definitions/User",
        "description": "Optionally the user that left the voicemail message if the caller was a known user",
        "readOnly": true
      },
      "conversation": {
        "$ref": "#/definitions/Conversation",
        "description": "The conversation that the voicemail message is associated with",
        "readOnly": true
      },
      "copiedFrom": {
        "$ref": "#/definitions/VoicemailCopyRecord",
        "description": "Represents where this voicemail message was copied from",
        "readOnly": true
      },
      "copiedTo": {
        "description": "Represents where this voicemail has been copied to",
        "items": {
          "$ref": "#/definitions/VoicemailCopyRecord"
        },
        "readOnly": true,
        "type": "array"
      },
      "createdDate": {
        "description": "The date the voicemail message was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "deleteRetentionPolicy": {
        "$ref": "#/definitions/VoicemailRetentionPolicy",
        "description": "The retention policy for this voicemail when deleted is set to true"
      },
      "deleted": {
        "description": "Whether the voicemail message has been marked as deleted",
        "type": "boolean"
      },
      "deletedDate": {
        "description": "The date the voicemail message deleted property was set to true. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "group": {
        "$ref": "#/definitions/Group",
        "description": "The group that the voicemail message belongs to or null which means the voicemail message belongs to a user or queue",
        "readOnly": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedDate": {
        "description": "The date the voicemail message was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "note": {
        "description": "An optional note",
        "type": "string"
      },
      "queue": {
        "$ref": "#/definitions/Queue",
        "description": "The queue that the voicemail message belongs to or null which means the voicemail message belongs to a user or group",
        "readOnly": true
      },
      "read": {
        "description": "Whether the voicemail message is marked as read",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "transcription": {
        "description": "The transcription of the voicemail's audio",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User",
        "description": "The user that the voicemail message belongs to or null which means the voicemail message belongs to a group or queue",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "VoicemailMessageEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/VoicemailMessage"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "VoicemailOrganizationPolicy": {
    "properties": {
      "alertTimeoutSeconds": {
        "description": "The organization's default number of seconds to ring a user's phone before a call is transferred to voicemail",
        "format": "int32",
        "type": "integer"
      },
      "disableEmailPii": {
        "description": "Removes any PII from emails. This overrides any analogous group configuration value. This is always true if HIPAA is enabled or unknown for an organization.",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether voicemail is enabled for this organization",
        "readOnly": true,
        "type": "boolean"
      },
      "includeEmailTranscriptions": {
        "description": "Whether to include the voicemail transcription in the notification email",
        "type": "boolean"
      },
      "interactiveResponseRequired": {
        "description": "Whether user should be prompted with a confirmation prompt when connecting to a Group Ring call",
        "type": "boolean"
      },
      "maximumRecordingTimeSeconds": {
        "description": "Default value for the maximum length of time in seconds of a recorded voicemail",
        "format": "int32",
        "type": "integer"
      },
      "modifiedDate": {
        "description": "The date the policy was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "pinConfiguration": {
        "$ref": "#/definitions/PINConfiguration",
        "description": "The configuration for user PINs to access their voicemail from a phone"
      },
      "pinRequired": {
        "description": "If this is true, a PIN is required when accessing a user's voicemail from a phone.",
        "type": "boolean"
      },
      "sendEmailNotifications": {
        "description": "Whether email notifications are sent for new voicemails in the organization. If false, new voicemail email notifications are not be sent for the organization overriding any user or group setting.",
        "type": "boolean"
      },
      "voicemailExtension": {
        "description": "The extension for voicemail retrieval.  The default value is *86.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "VoicemailRetentionPolicy": {
    "description": "Governs how the voicemail is retained",
    "properties": {
      "numberOfDays": {
        "description": "If retentionPolicyType == RETAIN_WITH_TTL, then this value represents the number of days for the TTL",
        "format": "int32",
        "type": "integer"
      },
      "voicemailRetentionPolicyType": {
        "description": "The retention policy type",
        "enum": [
          "RETAIN_INDEFINITELY",
          "RETAIN_WITH_TTL",
          "IMMEDIATE_DELETE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "VoicemailSearchCriteria": {
    "properties": {
      "dateFormat": {
        "description": "Set date format for criteria values when using date range search type.  Supports Java date format syntax, example yyyy-MM-dd'T'HH:mm:ss.SSSX.",
        "type": "string"
      },
      "endValue": {
        "description": "The end value of the range. This field is used for range search types.",
        "type": "string"
      },
      "fields": {
        "description": "Field names to search against",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-genesys-search-fields": {
          "value": [
            "voicemailId",
            "ownerId",
            "ownerType",
            "deleted",
            "read",
            "callerAddress",
            "callerUser",
            "createdDate",
            "modifiedDate"
          ]
        }
      },
      "group": {
        "description": "Groups multiple conditions",
        "items": {
          "$ref": "#/definitions/VoicemailSearchCriteria"
        },
        "type": "array"
      },
      "operator": {
        "description": "How to apply this search criteria against other criteria",
        "enum": [
          "AND",
          "OR",
          "NOT"
        ],
        "type": "string"
      },
      "startValue": {
        "description": "The start value of the range. This field is used for range search types.",
        "type": "string"
      },
      "type": {
        "description": "Search Type",
        "enum": [
          "EXACT",
          "STARTS_WITH",
          "CONTAINS",
          "REGEX",
          "TERM",
          "TERMS",
          "REQUIRED_FIELDS",
          "MATCH_ALL",
          "DATE_RANGE"
        ],
        "type": "string"
      },
      "value": {
        "description": "A value for the search to match against",
        "type": "string"
      },
      "values": {
        "description": "A list of values for the search to match against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "VoicemailSearchRequest": {
    "properties": {
      "expand": {
        "description": "Provides more details about a specified resource",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "The page of resources you want to retrieve",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The number of results per page",
        "format": "int32",
        "type": "integer"
      },
      "query": {
        "items": {
          "$ref": "#/definitions/VoicemailSearchCriteria"
        },
        "type": "array"
      },
      "sort": {
        "description": "Multi-value sort order, list of multiple sort values",
        "items": {
          "$ref": "#/definitions/SearchSort"
        },
        "type": "array"
      },
      "sortBy": {
        "description": "The field in the resource that you want to sort the results by",
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order for results",
        "enum": [
          "ASC",
          "DESC",
          "SCORE"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "VoicemailUserPolicy": {
    "properties": {
      "alertTimeoutSeconds": {
        "description": "The number of seconds to ring the user's phone before a call is transfered to voicemail",
        "format": "int32",
        "type": "integer"
      },
      "enabled": {
        "description": "Whether the user has voicemail enabled",
        "readOnly": true,
        "type": "boolean"
      },
      "modifiedDate": {
        "description": "The date the policy was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "pin": {
        "description": "The user's PIN to access their voicemail. This property is only used for updates and never provided otherwise to ensure security",
        "type": "string"
      },
      "sendEmailNotifications": {
        "description": "Whether email notifications are sent to the user when a new voicemail is received",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "VoicemailsSearchResponse": {
    "properties": {
      "currentPage": {
        "description": "Q64 value for the current page of results",
        "type": "string"
      },
      "nextPage": {
        "description": "Q64 value for the next page of results",
        "type": "string"
      },
      "pageCount": {
        "description": "The total number of pages",
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "description": "The current page number",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The current page size",
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "description": "Q64 value for the previous page of results",
        "type": "string"
      },
      "results": {
        "description": "Search results",
        "items": {
          "$ref": "#/definitions/VoicemailMessage"
        },
        "type": "array"
      },
      "total": {
        "description": "The total number of results found",
        "format": "int64",
        "type": "integer"
      },
      "types": {
        "description": "Resource types the search was performed against",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "pageCount",
      "pageNumber",
      "pageSize",
      "results",
      "total",
      "types"
    ],
    "type": "object"
  },
  "Void": {
    "type": "object"
  },
  "WaitlistPosition": {
    "properties": {
      "date": {
        "description": "The date to which this wait list position applies, as defined by the time zone of the business unit. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "timeOffLimit": {
        "$ref": "#/definitions/TimeOffLimitReference",
        "description": "The time off limit for which time off request is waitlisted"
      },
      "timeOffRequest": {
        "$ref": "#/definitions/TimeOffRequestReference",
        "description": "The time off request for this wait list position"
      },
      "waitlistPosition": {
        "description": "The time off request's position in the waitlist on the date. 1 means time off is the first in the waitlist",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WaitlistPositionListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WaitlistPosition"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "Warning": {
    "properties": {
      "color": {
        "description": "The color for the warning configuration in RGB hexadecimal format (for example \"#FF0000\" represents red).",
        "type": "string"
      },
      "rangeType": {
        "description": "The range type for the warning configuration.",
        "enum": [
          "OVER",
          "UNDER",
          "BETWEEN"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value for the warning configuration.",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WebActionEvent": {
    "properties": {
      "action": {
        "$ref": "#/definitions/EventAction",
        "description": "The action that triggered the event."
      },
      "actionMap": {
        "$ref": "#/definitions/ActionEventActionMap",
        "description": "The action map that triggered the action."
      },
      "actionTarget": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The target for engagement actions."
      },
      "browser": {
        "$ref": "#/definitions/Browser",
        "description": "Customer's browser."
      },
      "device": {
        "$ref": "#/definitions/Device",
        "description": "Customer's device."
      },
      "errorCode": {
        "description": "Code of the error returned when the action fails.",
        "type": "string"
      },
      "errorMessage": {
        "description": "Message of the error returned when the action fails.",
        "type": "string"
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "ipAddress": {
        "description": "Visitor's IP address.",
        "type": "string"
      },
      "ipOrganization": {
        "description": "Visitor's IP-based organization or ISP name.",
        "type": "string"
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Marketing / traffic source information."
      },
      "timeToDisposition": {
        "description": "Milliseconds elapsed until the action is disposed.",
        "format": "int64",
        "type": "integer"
      },
      "userAgentString": {
        "description": "HTTP User-Agent string (see https://tools.ietf.org/html/rfc1945#section-10.15).",
        "type": "string"
      },
      "visitReferrer": {
        "$ref": "#/definitions/Referrer",
        "description": "Visit's referrer."
      }
    },
    "required": [
      "action",
      "actionMap",
      "actionTarget",
      "browser",
      "device",
      "userAgentString"
    ],
    "type": "object"
  },
  "WebChatConfig": {
    "properties": {
      "webChatSkin": {
        "description": "css class to be applied to the web chat widget.",
        "enum": [
          "basic",
          "modern-caret-skin"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebChatConversation": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "member": {
        "$ref": "#/definitions/WebChatMemberInfo",
        "description": "Chat Member"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebChatDeployment": {
    "properties": {
      "allowedDomains": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "authenticationRequired": {
        "type": "boolean"
      },
      "authenticationUrl": {
        "description": "URL for third party service authenticating web chat clients. See https://github.com/MyPureCloud/authenticated-web-chat-server-examples",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "disabled": {
        "type": "boolean"
      },
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The URI of the Inbound Chat Flow to run when new chats are initiated under this Deployment."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "webChatConfig": {
        "$ref": "#/definitions/WebChatConfig"
      }
    },
    "type": "object"
  },
  "WebChatDeploymentEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WebChatDeployment"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WebChatGuestMediaRequest": {
    "description": "Object representing the guest model of a media request of a chat conversation.",
    "properties": {
      "communicationId": {
        "description": "The ID of the new media communication, if applicable.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "securityKey": {
        "description": "The security information related to a media request.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the media request, one of PENDING|ACCEPTED|DECLINED|TIMEDOUT|CANCELLED|ERRORED.",
        "enum": [
          "PENDING",
          "ACCEPTED",
          "DECLINED",
          "TIMEDOUT",
          "CANCELLED",
          "ERRORED"
        ],
        "type": "string"
      },
      "types": {
        "description": "The types of media being requested.",
        "items": {
          "enum": [
            "COBROWSE",
            "SCREENSHARE"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "state",
      "types"
    ],
    "type": "object"
  },
  "WebChatGuestMediaRequestEntityList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WebChatGuestMediaRequest"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WebChatMemberInfo": {
    "properties": {
      "authenticatedGuest": {
        "description": "If true, the guest member is an authenticated guest.",
        "type": "boolean"
      },
      "avatarImageUrl": {
        "description": "The url to the avatar image of the member.",
        "format": "uri",
        "type": "string"
      },
      "customFields": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Any custom fields of information pertaining to this member.",
        "type": "object"
      },
      "displayName": {
        "description": "The display name of the member.",
        "type": "string"
      },
      "email": {
        "description": "The email address of the member.",
        "type": "string"
      },
      "firstName": {
        "description": "The first name of the member.",
        "type": "string"
      },
      "id": {
        "description": "The communicationId of this member.",
        "type": "string"
      },
      "joinDate": {
        "description": "The time the member joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "lastName": {
        "description": "The last name of the member.",
        "type": "string"
      },
      "leaveDate": {
        "description": "The time the member left the conversation, or null if the member is still active in the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "phoneNumber": {
        "description": "The phone number of the member.",
        "type": "string"
      },
      "role": {
        "description": "The role of the member, one of [agent, customer, acd, workflow]",
        "enum": [
          "AGENT",
          "CUSTOMER",
          "WORKFLOW",
          "ACD"
        ],
        "type": "string"
      },
      "state": {
        "description": "The connection state of this member.",
        "enum": [
          "CONNECTED",
          "DISCONNECTED",
          "ALERTING"
        ],
        "type": "string"
      }
    },
    "required": [
      "role"
    ],
    "type": "object"
  },
  "WebChatMemberInfoEntityList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WebChatMemberInfo"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WebChatMessage": {
    "properties": {
      "body": {
        "description": "The message body.",
        "type": "string"
      },
      "bodyType": {
        "description": "The purpose of the message within the conversation, such as a standard text entry versus a greeting.",
        "enum": [
          "standard",
          "notice",
          "member-join",
          "member-leave",
          "media-request"
        ],
        "type": "string"
      },
      "conversation": {
        "$ref": "#/definitions/WebChatConversation",
        "description": "The identifier of the conversation"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "sender": {
        "$ref": "#/definitions/WebChatMemberInfo",
        "description": "The member who sent the message"
      },
      "timestamp": {
        "description": "The timestamp of the message, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "body",
      "bodyType",
      "conversation",
      "sender",
      "timestamp"
    ],
    "type": "object"
  },
  "WebChatMessageEntityList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WebChatMessage"
        },
        "type": "array"
      },
      "next": {
        "type": "string"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousPage": {
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebChatRoutingTarget": {
    "properties": {
      "language": {
        "description": "The language name to use for routing.",
        "type": "string"
      },
      "priority": {
        "description": "The priority to assign to the conversation for routing.",
        "format": "int64",
        "type": "integer"
      },
      "skills": {
        "description": "The list of skill names to use for routing.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "targetAddress": {
        "description": "The target of the route, in the format appropriate given the 'targetType'.",
        "type": "string"
      },
      "targetType": {
        "description": "The target type of the routing target, such as 'QUEUE'.",
        "enum": [
          "QUEUE"
        ],
        "type": "string"
      }
    },
    "required": [
      "targetAddress",
      "targetType"
    ],
    "type": "object"
  },
  "WebChatSettings": {
    "properties": {
      "requireDeployment": {
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "WebChatTyping": {
    "properties": {
      "conversation": {
        "$ref": "#/definitions/WebChatConversation",
        "description": "The identifier of the conversation"
      },
      "id": {
        "description": "The event identifier of this typing indicator event (useful to guard against event re-delivery",
        "type": "string"
      },
      "sender": {
        "$ref": "#/definitions/WebChatMemberInfo",
        "description": "The member who sent the message"
      },
      "timestamp": {
        "description": "The timestamp of the message, in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "conversation",
      "id",
      "sender",
      "timestamp"
    ],
    "type": "object"
  },
  "WebDeployment": {
    "description": "Details about a Web Deployment",
    "properties": {
      "allowAllDomains": {
        "description": "Property indicates whether all domains are allowed or not. allowedDomains must be empty when this is set as true.",
        "type": "boolean"
      },
      "allowedDomains": {
        "description": "The list of domains that are approved to use this deployment; the list will be added to CORS headers for ease of web use.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "configuration": {
        "$ref": "#/definitions/WebDeploymentConfigurationVersionEntityRef",
        "description": "The config version this deployment uses"
      },
      "dateCreated": {
        "description": "The date the deployment was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date the deployment was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "description": {
        "description": "The description of the config",
        "type": "string"
      },
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "A reference to the inboundshortmessage flow used by this deployment"
      },
      "id": {
        "description": "The deployment ID",
        "readOnly": true,
        "type": "string"
      },
      "lastModifiedUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who most recently modified the deployment",
        "readOnly": true
      },
      "name": {
        "description": "The deployment name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "snippet": {
        "description": "Javascript snippet used to load the config",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current status of the deployment",
        "enum": [
          "Pending",
          "Active",
          "Inactive",
          "Error",
          "Deleting"
        ],
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "The supported content profile for a deployment"
      }
    },
    "required": [
      "configuration",
      "name"
    ],
    "type": "object"
  },
  "WebDeploymentActiveConfigurationOnDeployment": {
    "description": "Details about the active configuration on a deployment",
    "properties": {
      "configurationVersion": {
        "$ref": "#/definitions/WebDeploymentConfigurationVersion",
        "description": "The active configuration on a deployment"
      },
      "deployment": {
        "$ref": "#/definitions/WebDeployment",
        "description": "The web deployment associated with the active configuration"
      }
    },
    "type": "object"
  },
  "WebDeploymentConfigurationVersion": {
    "description": "Details about the configuration version of a Web Deployment",
    "properties": {
      "authenticationSettings": {
        "$ref": "#/definitions/AuthenticationSettings",
        "description": "The settings for authenticated deployments"
      },
      "cobrowse": {
        "$ref": "#/definitions/CobrowseSettings",
        "description": "The settings for cobrowse"
      },
      "createdUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who created the configuration version",
        "readOnly": true
      },
      "customI18nLabels": {
        "description": "The localization settings for homescreen app",
        "items": {
          "$ref": "#/definitions/CustomI18nLabels"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The date the configuration version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date the configuration version was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "datePublished": {
        "description": "The date the configuration version was most recently published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "defaultLanguage": {
        "description": "The default language to use for the configuration required if the messenger is enabled",
        "example": "en-us, de-de",
        "type": "string"
      },
      "description": {
        "description": "The description of the configuration",
        "type": "string"
      },
      "headlessMode": {
        "$ref": "#/definitions/WebDeploymentHeadlessMode",
        "description": "Headless Mode Support which Controls UI components. When enabled, native UI components will be disabled and allows for custom-built UI."
      },
      "id": {
        "description": "The configuration version ID",
        "readOnly": true,
        "type": "string"
      },
      "journeyEvents": {
        "$ref": "#/definitions/JourneyEventsSettings",
        "description": "The settings for journey events"
      },
      "languages": {
        "description": "A list of languages supported on the configuration required if the messenger is enabled",
        "example": "en-us, de-de",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "lastModifiedUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who most recently modified the configuration version",
        "readOnly": true
      },
      "messenger": {
        "$ref": "#/definitions/MessengerSettings",
        "description": "The settings for messenger"
      },
      "name": {
        "description": "The configuration version name",
        "type": "string"
      },
      "position": {
        "$ref": "#/definitions/PositionSettings",
        "description": "The settings for position"
      },
      "publishedUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who published the configuration version",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current status of the configuration version",
        "enum": [
          "Pending",
          "Active",
          "Inactive",
          "Error",
          "Deleting"
        ],
        "type": "string"
      },
      "supportCenter": {
        "$ref": "#/definitions/SupportCenterSettings",
        "description": "The settings for knowledge portal (previously support center)"
      },
      "version": {
        "description": "The version of the configuration",
        "example": "DRAFT, 1, 2",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WebDeploymentConfigurationVersionEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WebDeploymentConfigurationVersion"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WebDeploymentConfigurationVersionEntityRef": {
    "properties": {
      "id": {
        "description": "The configuration version ID",
        "type": "string"
      },
      "name": {
        "description": "The configuration version name",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "version": {
        "description": "The version of the configuration",
        "example": "DRAFT, 1, 2",
        "type": "string"
      }
    },
    "required": [
      "id",
      "version"
    ],
    "type": "object"
  },
  "WebDeploymentConfigurationVersionResponse": {
    "description": "Details about the configuration version of a Web Deployment",
    "properties": {
      "authenticationSettings": {
        "$ref": "#/definitions/AuthenticationSettings",
        "description": "The settings for authenticated deployments"
      },
      "cobrowse": {
        "$ref": "#/definitions/CobrowseSettings",
        "description": "The settings for cobrowse"
      },
      "createdUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who created the configuration version",
        "readOnly": true
      },
      "customI18nLabels": {
        "description": "The localization settings for homescreen app",
        "items": {
          "$ref": "#/definitions/CustomI18nLabels"
        },
        "type": "array"
      },
      "dateCreated": {
        "description": "The date the configuration version was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date the configuration version was most recently modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "datePublished": {
        "description": "The date the configuration version was most recently published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "defaultLanguage": {
        "description": "The default language to use for the configuration required if the messenger is enabled",
        "example": "en-us, de-de",
        "type": "string"
      },
      "description": {
        "description": "The description of the configuration",
        "type": "string"
      },
      "headlessMode": {
        "$ref": "#/definitions/WebDeploymentHeadlessMode",
        "description": "Headless Mode Support which Controls UI components. When enabled, native UI components will be disabled and allows for custom-built UI."
      },
      "id": {
        "description": "The configuration version ID",
        "type": "string"
      },
      "journeyEvents": {
        "$ref": "#/definitions/JourneyEventsSettings",
        "description": "The settings for journey events"
      },
      "languages": {
        "description": "A list of languages supported on the configuration required if the messenger is enabled",
        "example": "en-us, de-de",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "lastModifiedUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who most recently modified the configuration version",
        "readOnly": true
      },
      "messenger": {
        "$ref": "#/definitions/MessengerSettings",
        "description": "The settings for messenger"
      },
      "name": {
        "description": "The configuration version name",
        "type": "string"
      },
      "position": {
        "$ref": "#/definitions/PositionSettings",
        "description": "The settings for position"
      },
      "publishedUser": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "A reference to the user who published the configuration version",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The current status of the configuration version",
        "enum": [
          "Pending",
          "Active",
          "Inactive",
          "Error",
          "Deleting"
        ],
        "type": "string"
      },
      "supportCenter": {
        "$ref": "#/definitions/SupportCenterSettings",
        "description": "The settings for knowledge portal (previously support center)"
      },
      "version": {
        "description": "The version of the configuration",
        "example": "DRAFT, 1, 2",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WebDeploymentHeadlessMode": {
    "properties": {
      "enabled": {
        "description": "Whether or not Headless Mode is enabled",
        "type": "boolean"
      }
    },
    "type": "object"
  },
  "WebDeploymentsAuthorizationResponse": {
    "properties": {
      "jwt": {
        "type": "string"
      },
      "refreshToken": {
        "description": "Refresh token used to issue a new JWT.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebDeploymentsJourneyContext": {
    "properties": {
      "customer": {
        "$ref": "#/definitions/JourneyCustomer",
        "description": "Journey customer information. Used for linking the authenticated customer with the journey. "
      },
      "customerSession": {
        "$ref": "#/definitions/JourneyCustomerSession",
        "description": "Contains the Journey System's customer session details."
      },
      "journeyAction": {
        "$ref": "#/definitions/JourneyAction",
        "description": "A subset of the Journey System's action data relevant to a part of a conversation (for external linkage and internal usage/context)"
      }
    },
    "type": "object"
  },
  "WebDeploymentsOAuthExchangeRequest": {
    "properties": {
      "deploymentId": {
        "description": "The WebDeployment ID",
        "type": "string"
      },
      "journeyContext": {
        "$ref": "#/definitions/WebDeploymentsJourneyContext",
        "description": "A Customer journey context."
      },
      "oauth": {
        "$ref": "#/definitions/WebDeploymentsOAuthRequestParameters"
      }
    },
    "required": [
      "deploymentId"
    ],
    "type": "object"
  },
  "WebDeploymentsOAuthRequestParameters": {
    "properties": {
      "code": {
        "description": "The authorization code to be sent to the authentication server during the token request.\n Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest",
        "type": "string"
      },
      "codeVerifier": {
        "description": "Required if authorizing using Proof Key for Code Exchange (PKCE). Otherwise should be empty.Random URL-safe string with a minimum length of 43 characters generated at start of authorization flow to mitigate the threat of having the authorization code intercepted. Refer to https://datatracker.ietf.org/doc/html/rfc7636",
        "type": "string"
      },
      "iss": {
        "description": "Optional parameter. Set it if authorization server discovery metadata authorization_response_iss_parameter_supported is enabled.\nRefer to https://datatracker.ietf.org/doc/html/rfc9207",
        "type": "string"
      },
      "maxAge": {
        "description": "Required if provided in the  \"Authentication Request\". Otherwise should be empty.Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated.Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest",
        "format": "int32",
        "type": "integer"
      },
      "nonce": {
        "description": "Required if provided in the \"Authentication Request\". Otherwise should be empty.String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest",
        "type": "string"
      },
      "redirectUri": {
        "description": "Redirect URI sent in the \"Authentication Request\"Refer to https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest",
        "type": "string"
      }
    },
    "required": [
      "code",
      "redirectUri"
    ],
    "type": "object"
  },
  "WebDeploymentsRefreshJWTRequest": {
    "properties": {
      "deploymentId": {
        "description": "The WebDeployment ID",
        "type": "string"
      },
      "refreshToken": {
        "description": "Refresh token used to issue a new JWT.",
        "type": "string"
      }
    },
    "required": [
      "deploymentId",
      "refreshToken"
    ],
    "type": "object"
  },
  "WebEvent": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined attributes associated with a particular event.",
        "type": "object"
      },
      "authenticated": {
        "description": "Indicates whether the event was produced during an authenticated session.",
        "type": "boolean"
      },
      "browser": {
        "$ref": "#/definitions/Browser",
        "description": "Customer's browser."
      },
      "device": {
        "$ref": "#/definitions/Device",
        "description": "Customer's device."
      },
      "eventName": {
        "description": "Represents the action the customer performed. A good event name is typically an object followed by the action performed in past tense (e.g. page_viewed, order_completed, user_registered).",
        "type": "string"
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "ipAddress": {
        "description": "Customer's IP address. May be null if the business configures the tracker to not collect IP addresses.",
        "type": "string"
      },
      "ipOrganization": {
        "description": "Customer's IP-based organization or ISP name.",
        "type": "string"
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Marketing / traffic source information."
      },
      "page": {
        "$ref": "#/definitions/JourneyPage",
        "description": "The webpage where the user interaction occurred."
      },
      "referrer": {
        "$ref": "#/definitions/Referrer",
        "description": "Identifies the page URL that originally generated the request for the current page being viewed."
      },
      "searchQuery": {
        "description": "Represents the keywords in a customer search query.",
        "type": "string"
      },
      "totalEventCount": {
        "description": "The total count of events performed by the customer across all sessions.",
        "format": "int32",
        "type": "integer"
      },
      "totalPageviewCount": {
        "description": "The total count of pageviews performed by the customer across all sessions.",
        "format": "int32",
        "type": "integer"
      },
      "traits": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined traits associated with a particular event.",
        "type": "object"
      },
      "userAgentString": {
        "description": "HTTP User-Agent string (see https://tools.ietf.org/html/rfc1945#section-10.15).",
        "type": "string"
      }
    },
    "required": [
      "attributes",
      "authenticated",
      "browser",
      "device",
      "eventName",
      "page",
      "totalEventCount",
      "totalPageviewCount",
      "traits",
      "userAgentString"
    ],
    "type": "object"
  },
  "WebEventBrowser": {
    "properties": {
      "family": {
        "description": "Browser family (e.g. Chrome, Safari, Firefox).",
        "type": "string"
      },
      "lang": {
        "description": "Language the browser is set to. Must conform to BCP 47.",
        "type": "string"
      },
      "version": {
        "description": "Browser version (e.g. 68.0.3440.84).",
        "type": "string"
      }
    },
    "required": [
      "family",
      "version"
    ],
    "type": "object"
  },
  "WebEventDevice": {
    "properties": {
      "category": {
        "description": "Device category.",
        "enum": [
          "desktop",
          "mobile",
          "tablet",
          "other"
        ],
        "type": "string"
      },
      "isMobile": {
        "description": "Flag that is true for mobile devices.",
        "type": "boolean"
      },
      "manufacturer": {
        "description": "Manufacturer of the device.",
        "type": "string"
      },
      "osFamily": {
        "description": "Operating system family.",
        "type": "string"
      },
      "osVersion": {
        "description": "Operating system version.",
        "type": "string"
      },
      "screenDensity": {
        "description": "Device's screen density, measured as a scale factor where a value of 1 represents a baseline 1:1 ratio of pixels to logical (device-independent) pixels.",
        "format": "int32",
        "type": "integer"
      },
      "screenHeight": {
        "description": "Device's screen height.",
        "format": "int32",
        "type": "integer"
      },
      "screenWidth": {
        "description": "Device's screen width.",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "description": "Device type (e.g. iPad, iPhone, Other).",
        "type": "string"
      }
    },
    "required": [
      "category",
      "osFamily",
      "osVersion",
      "type"
    ],
    "type": "object"
  },
  "WebEventRequest": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined attributes associated with a particular event. These attributes provide additional context about the event. For example, items_in_cart or subscription_level.",
        "type": "object"
      },
      "browser": {
        "$ref": "#/definitions/WebEventBrowser",
        "description": "Customer's browser."
      },
      "createdDate": {
        "description": "UTC timestamp indicating when the event actually took place, events older than an hour will be rejected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerCookieId": {
        "description": "A UUID representing the customer making the request.",
        "type": "string"
      },
      "device": {
        "$ref": "#/definitions/WebEventDevice",
        "description": "Customer's device."
      },
      "eventName": {
        "description": "Represents the action the customer performed. Event types are created for each unique event name and can be faceted on in segment and outcome conditions. A valid event name must only contain alphanumeric characters and underscores. A good event name is typically an object followed by the action performed in past tense, e.g. page_viewed, order_completed, user_registered.",
        "type": "string"
      },
      "ipAddress": {
        "description": "Customer's IP address.",
        "type": "string"
      },
      "page": {
        "$ref": "#/definitions/RequestPage",
        "description": "The webpage where the user interaction occurred."
      },
      "referrerUrl": {
        "description": "Identifies the referrer URL that originally generated the request for the current page being viewed.",
        "type": "string"
      },
      "searchQuery": {
        "description": "Represents the keywords in a customer search query.",
        "type": "string"
      },
      "traits": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "Traits are attributes intrinsic to the customer that may be sent in selected events, e.g. email, lastName, cellPhone. Traits are used to collect information for identity resolution. For example, the same person might be using an application on different devices which might create two sessions with different customerIds. Additional information can be provided as traits to help link those two sessions and customers to a single external contact through common identifiers that were submitted via a form fill, message, or other input in both sessions.",
        "type": "object"
      },
      "userAgentString": {
        "description": "Override for HTTP User-Agent string from request header (see https://tools.ietf.org/html/rfc1945#section-10.15).",
        "type": "string"
      }
    },
    "required": [
      "createdDate",
      "customerCookieId",
      "eventName",
      "page"
    ],
    "type": "object"
  },
  "WebEventResponse": {
    "properties": {
      "attributes": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "User-defined attributes associated with a particular event. These attributes provide additional context about the event. For example, items_in_cart or subscription_level.",
        "type": "object"
      },
      "authenticated": {
        "description": "Indicates whether the event was produced during an authenticated session.",
        "type": "boolean"
      },
      "browser": {
        "$ref": "#/definitions/WebEventBrowser",
        "description": "Customer's browser."
      },
      "createdDate": {
        "description": "UTC timestamp indicating when the event actually took place, events older than an hour will be rejected. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "customerId": {
        "description": "Identifier of the customer in the source of the event.",
        "type": "string"
      },
      "customerIdType": {
        "description": "Type of identifier for the customer ID (e.g., cookie).",
        "type": "string"
      },
      "device": {
        "$ref": "#/definitions/WebEventDevice",
        "description": "Customer's device."
      },
      "eventName": {
        "description": "Represents the action the customer performed. Event types are created for each unique event name and can be faceted on in segment and outcome conditions. A valid event name must only contain alphanumeric characters and underscores. A good event name is typically an object followed by the action performed in past tense, e.g. page_viewed, order_completed, user_registered.",
        "type": "string"
      },
      "geolocation": {
        "$ref": "#/definitions/JourneyGeolocation",
        "description": "Customer's geolocation."
      },
      "ipOrganization": {
        "description": "Customer's IP-based organization or ISP name.",
        "type": "string"
      },
      "mktCampaign": {
        "$ref": "#/definitions/JourneyCampaign",
        "description": "Urchin Tracking Module (UTM) parameters used to track the effectiveness of online marketing campaigns."
      },
      "page": {
        "$ref": "#/definitions/ResponsePage",
        "description": "The webpage where the user interaction occurred."
      },
      "referrer": {
        "$ref": "#/definitions/Referrer",
        "description": "Identifies the web page that originally generated the request for the current page being viewed."
      },
      "searchQuery": {
        "description": "Represents the keywords in a customer search query.",
        "type": "string"
      },
      "session": {
        "$ref": "#/definitions/WebEventResponseSession",
        "description": "The session that the event belongs to."
      },
      "traits": {
        "additionalProperties": {
          "$ref": "#/definitions/CustomEventAttribute"
        },
        "description": "Traits are attributes intrinsic to the customer that may be sent in selected events, (e.g. email, lastName, cellPhone). Traits are used to collect information for identity resolution. For example, the same person might be using an application on different devices which might create two sessions with different customerIds. Additional information can be provided as traits to help link those two sessions and customers to a single external contact through common identifiers that were submitted via a form fill, message, or other input in both sessions.",
        "type": "object"
      },
      "userAgentString": {
        "description": "HTTP User-Agent string (see https://tools.ietf.org/html/rfc1945#section-10.15).",
        "type": "string"
      }
    },
    "required": [
      "attributes",
      "authenticated",
      "browser",
      "createdDate",
      "customerId",
      "customerIdType",
      "device",
      "eventName",
      "page",
      "session",
      "traits",
      "userAgentString"
    ],
    "type": "object"
  },
  "WebEventResponseSession": {
    "properties": {
      "createdDate": {
        "description": "Date of the session's first event, that is when the session starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "durationInSeconds": {
        "description": "Indicates how long the customer has been on the site within this session.",
        "format": "int32",
        "type": "integer"
      },
      "eventCount": {
        "description": "The count of all events recorded during this session.",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "pageviewCount": {
        "description": "The count of all pageviews performed during this session.",
        "format": "int32",
        "type": "integer"
      },
      "referrer": {
        "$ref": "#/definitions/Referrer",
        "description": "The referrer of the first event in the web session."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "createdDate",
      "durationInSeconds",
      "eventCount",
      "pageviewCount"
    ],
    "type": "object"
  },
  "WebMessagingAttachment": {
    "description": "Attachment object.",
    "properties": {
      "fileSize": {
        "description": "The file size associated with the file",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "filename": {
        "description": "Suggested file name for attachment.",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mediaType": {
        "description": "The type of attachment this instance represents.",
        "enum": [
          "Image",
          "Video",
          "Audio",
          "File",
          "Link"
        ],
        "readOnly": true,
        "type": "string"
      },
      "mime": {
        "description": "Attachment mime type (https://www.iana.org/assignments/media-types/media-types.xhtml).",
        "readOnly": true,
        "type": "string"
      },
      "sha256": {
        "description": "Secure hash of the attachment content.",
        "readOnly": true,
        "type": "string"
      },
      "text": {
        "description": "Text associated with attachment such as an image caption.",
        "readOnly": true,
        "type": "string"
      },
      "url": {
        "description": "URL of the attachment.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebMessagingButtonResponse": {
    "description": "Button response object representing the click of a structured message button, such as a quick reply.",
    "properties": {
      "id": {
        "description": "An ID assigned to the button response (Deprecated).",
        "type": "string"
      },
      "payload": {
        "description": "The response payload associated with the clicked button.",
        "type": "string"
      },
      "text": {
        "description": "The response text from the button click.",
        "type": "string"
      },
      "type": {
        "description": "Describes the button that resulted in the Button Response.",
        "enum": [
          "Button",
          "QuickReply"
        ],
        "type": "string"
      }
    },
    "required": [
      "payload",
      "text"
    ],
    "type": "object"
  },
  "WebMessagingChannel": {
    "description": "Channel-specific information that describes the message and the message channel/provider.",
    "properties": {
      "from": {
        "$ref": "#/definitions/WebMessagingRecipient",
        "description": "Information about the recipient the message is received from.",
        "readOnly": true
      },
      "messageId": {
        "description": "Unique provider ID of the message.",
        "readOnly": true,
        "type": "string"
      },
      "time": {
        "description": "When the message was processed by Genesys Cloud. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "to": {
        "$ref": "#/definitions/WebMessagingRecipient",
        "description": "Information about the recipient the message is sent to.",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "WebMessagingContent": {
    "description": "Message content element.",
    "properties": {
      "attachment": {
        "$ref": "#/definitions/WebMessagingAttachment",
        "description": "Attachment content.",
        "readOnly": true
      },
      "buttonResponse": {
        "$ref": "#/definitions/WebMessagingButtonResponse",
        "description": "Button response content."
      },
      "card": {
        "$ref": "#/definitions/ContentCard",
        "description": "Card content"
      },
      "carousel": {
        "$ref": "#/definitions/ContentCarousel",
        "description": "Carousel content"
      },
      "contentType": {
        "description": "Type of this content element. If contentType = \"Attachment\" only one item is allowed.",
        "enum": [
          "Attachment",
          "QuickReply",
          "ButtonResponse",
          "GenericTemplate",
          "Card",
          "Carousel"
        ],
        "readOnly": true,
        "type": "string"
      },
      "generic": {
        "$ref": "#/definitions/WebMessagingGeneric",
        "description": "Generic content (Deprecated)."
      },
      "quickReply": {
        "$ref": "#/definitions/WebMessagingQuickReply",
        "description": "Quick reply content."
      }
    },
    "type": "object"
  },
  "WebMessagingEvent": {
    "description": "Message event element.  Examples include: system messages, typing indicators, cobrowse offerings.",
    "properties": {
      "coBrowse": {
        "$ref": "#/definitions/WebMessagingEventCoBrowse",
        "description": "Cobrowse event."
      },
      "eventType": {
        "description": "Type of this event element",
        "enum": [
          "CoBrowse",
          "Presence"
        ],
        "type": "string"
      },
      "presence": {
        "$ref": "#/definitions/WebMessagingEventPresence",
        "description": "Presence event."
      }
    },
    "required": [
      "eventType"
    ],
    "type": "object"
  },
  "WebMessagingEventCoBrowse": {
    "description": "A Cobrowse event.",
    "properties": {
      "sessionId": {
        "description": "The Cobrowse session ID.",
        "type": "string"
      },
      "sessionJoinToken": {
        "description": "The Cobrowse session join token.",
        "type": "string"
      },
      "type": {
        "description": "Describes the type of Cobrowse event.",
        "enum": [
          "Offering",
          "OfferingExpired",
          "OfferingAccepted",
          "OfferingRejected"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "WebMessagingEventPresence": {
    "description": "A Presence event.",
    "properties": {
      "type": {
        "description": "Describes the type of Presence event.",
        "enum": [
          "Join",
          "Disconnect",
          "Clear",
          "SignIn"
        ],
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "WebMessagingGeneric": {
    "description": "Generic content object. (Deprecated",
    "properties": {
      "actions": {
        "$ref": "#/definitions/ContentActions",
        "description": "Actions to be taken."
      },
      "components": {
        "description": "An array of component objects.",
        "items": {
          "$ref": "#/definitions/ButtonComponent"
        },
        "type": "array"
      },
      "description": {
        "description": "Text to show in the description.",
        "type": "string"
      },
      "image": {
        "description": "URL of an image.",
        "type": "string"
      },
      "title": {
        "description": "Text to show in the title.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebMessagingMessage": {
    "description": "A web messaging message",
    "properties": {
      "channel": {
        "$ref": "#/definitions/WebMessagingChannel",
        "description": "Channel-specific information that describes the message and the message channel/provider."
      },
      "content": {
        "description": "List of content elements.",
        "items": {
          "$ref": "#/definitions/WebMessagingContent"
        },
        "type": "array"
      },
      "direction": {
        "description": "The direction of the message.  Direction is always from the perspective of the Genesys Cloud platform.  An Inbound message is one sent from a guest to the Genesys Cloud Platform.  An Outbound message is one sent from the Genesys Cloud Platform to a guest.",
        "enum": [
          "Inbound",
          "Outbound"
        ],
        "type": "string"
      },
      "events": {
        "description": "List of event elements.",
        "items": {
          "$ref": "#/definitions/WebMessagingEvent"
        },
        "type": "array"
      },
      "id": {
        "description": "Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference.",
        "type": "string"
      },
      "metadata": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional metadata about this message.",
        "type": "object"
      },
      "originatingEntity": {
        "description": "Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.",
        "enum": [
          "Human",
          "Bot"
        ],
        "type": "string"
      },
      "text": {
        "description": "Message text.",
        "type": "string"
      },
      "type": {
        "description": "Message type.",
        "enum": [
          "Text",
          "Structured",
          "Receipt",
          "Event"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebMessagingMessageEntityList": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WebMessagingMessage"
        },
        "type": "array"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WebMessagingOfferFields": {
    "properties": {
      "architectFlow": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Flow to be invoked, overrides default flow when specified."
      },
      "offerText": {
        "description": "Text value to be used when inviting a visitor to engage with a web messaging offer.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebMessagingOfferProperties": {
    "properties": {
      "offerText": {
        "description": "Text value to be used when inviting a visitor to engage with a web messaging offer.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WebMessagingQuickReply": {
    "description": "Quick reply object",
    "properties": {
      "action": {
        "description": "Specifies the type of action that is triggered upon clicking the quick reply.",
        "enum": [
          "Message"
        ],
        "type": "string"
      },
      "image": {
        "description": "URL of an image associated with the quick reply.",
        "type": "string"
      },
      "payload": {
        "description": "Content of the payload included in the quick reply response. Could be an ID identifying the quick reply response.",
        "type": "string"
      },
      "text": {
        "description": "Text to show inside the quick reply. This is also used as the response text after clicking on the quick reply.",
        "type": "string"
      }
    },
    "required": [
      "payload",
      "text"
    ],
    "type": "object"
  },
  "WebMessagingRecipient": {
    "description": "Information about the recipient the message is sent to or received from.",
    "properties": {
      "additionalIds": {
        "description": "List of recipient additional identifiers",
        "items": {
          "$ref": "#/definitions/RecipientAdditionalIdentifier"
        },
        "readOnly": true,
        "type": "array"
      },
      "firstName": {
        "description": "First name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "image": {
        "description": "URL of an image that represents the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "lastName": {
        "description": "Last name of the recipient.",
        "readOnly": true,
        "type": "string"
      },
      "nickname": {
        "description": "Nickname or display name of the recipient.",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WeekSchedule": {
    "properties": {
      "agentSchedulesVersion": {
        "description": "Version of agent schedules in the week schedule",
        "format": "int32",
        "type": "integer"
      },
      "description": {
        "description": "Description of the week schedule",
        "type": "string"
      },
      "generationResults": {
        "$ref": "#/definitions/WeekScheduleGenerationResult",
        "description": "Summary of the results from the schedule run"
      },
      "headcountForecast": {
        "$ref": "#/definitions/HeadcountForecast",
        "description": "Headcount information for the week schedule"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this work plan"
      },
      "published": {
        "description": "Whether the week schedule is published",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/ShortTermForecastReference",
        "description": "Short term forecast associated with this schedule"
      },
      "userSchedules": {
        "additionalProperties": {
          "$ref": "#/definitions/UserSchedule"
        },
        "description": "User schedules in the week",
        "type": "object"
      },
      "weekDate": {
        "description": "First day of this week schedule in yyyy-MM-dd format",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WeekScheduleGenerationResult": {
    "properties": {
      "agentWarningCount": {
        "description": "Count of warning messages from the schedule run. This will be available only when requesting multiple week schedules",
        "format": "int32",
        "type": "integer"
      },
      "agentWarnings": {
        "description": "Warning messages from the schedule run. This will be available only when requesting information for a single week schedule",
        "items": {
          "$ref": "#/definitions/ScheduleGenerationWarning"
        },
        "type": "array"
      },
      "failed": {
        "description": "Whether the schedule generation failed",
        "type": "boolean"
      },
      "runId": {
        "description": "ID of the schedule run",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WeekScheduleListItemResponse": {
    "properties": {
      "description": {
        "description": "Description of the week schedule",
        "type": "string"
      },
      "generationResults": {
        "$ref": "#/definitions/WeekScheduleGenerationResult",
        "description": "Summary of the results from the schedule run"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this work plan"
      },
      "published": {
        "description": "Whether the week schedule is published",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shortTermForecast": {
        "$ref": "#/definitions/ShortTermForecastReference",
        "description": "Short term forecast associated with this schedule"
      },
      "weekDate": {
        "description": "First day of this week schedule in yyyy-MM-dd format",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WeekScheduleListResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WeekScheduleListItemResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WeekScheduleReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "First day of this week schedule in yyyy-MM-dd format",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WeekScheduleResponse": {
    "properties": {
      "downloadUrl": {
        "description": "The url to fetch the result for large responses. The value is null if result contains the data",
        "type": "string"
      },
      "result": {
        "$ref": "#/definitions/WeekSchedule",
        "description": "The result of the request. The value will be null if response is large"
      }
    },
    "type": "object"
  },
  "WeekShiftTradeListResponse": {
    "properties": {
      "downloadUrl": {
        "description": "URL from which to fetch results for requests with a large result set. If populated, the downloaded data will conform to the same schema as would normally be returned, excepting downloaded data will never itself contain a downloadUrl",
        "type": "string"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/WeekShiftTradeResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WeekShiftTradeMatchesSummaryResponse": {
    "properties": {
      "count": {
        "description": "The number of trades in the Matched state for the given week",
        "format": "int32",
        "type": "integer"
      },
      "weekDate": {
        "description": "The schedule week date in yyyy-MM-dd format. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WeekShiftTradeResponse": {
    "properties": {
      "matchReview": {
        "$ref": "#/definitions/ShiftTradeMatchReviewResponse",
        "description": "A preview of what the schedule would look like if the shift trade is approved plus any violations"
      },
      "trade": {
        "$ref": "#/definitions/ShiftTradeResponse",
        "description": "The shift trade details"
      }
    },
    "type": "object"
  },
  "WfmAgent": {
    "properties": {
      "acceptDirectShiftTrades": {
        "description": "Whether the agent accepts direct shift trade requests",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "languages": {
        "description": "The list of languages this agent is capable of handling",
        "items": {
          "$ref": "#/definitions/LanguageReference"
        },
        "type": "array"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Metadata for this agent"
      },
      "queues": {
        "description": "List of queues to which this agent is capable of handling",
        "items": {
          "$ref": "#/definitions/QueueReference"
        },
        "type": "array"
      },
      "schedulable": {
        "description": "Whether the agent can be included in schedule generation",
        "type": "boolean"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skills": {
        "description": "The list of skills this agent is capable of handling",
        "items": {
          "$ref": "#/definitions/RoutingSkillReference"
        },
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with this data"
      },
      "workPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan associated with this agent, if applicable"
      },
      "workPlanOverrides": {
        "description": "The work plan overrides associated with this agent. Populate with expand=workPlanOverrides",
        "items": {
          "$ref": "#/definitions/WorkPlanOverride"
        },
        "type": "array"
      },
      "workPlanRotation": {
        "$ref": "#/definitions/WorkPlanRotationReference",
        "description": "The work plan rotation associated with this agent, if applicable"
      }
    },
    "type": "object"
  },
  "WfmBusinessUnitReference": {
    "properties": {
      "id": {
        "description": "The ID of the business unit",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "WfmForecastModificationIntervalOffsetValue": {
    "properties": {
      "intervalIndex": {
        "description": "The number of intervals past referenceStartDate to which to apply this modification",
        "format": "int32",
        "type": "integer"
      },
      "value": {
        "description": "The value to set for the given interval",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "intervalIndex",
      "value"
    ],
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkItem": {
    "properties": {
      "endDate": {
        "description": "End of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "includeActuals": {
        "description": "Whether user actual activities should be returned as part of the results. Defaults to false if not specified.",
        "type": "boolean"
      },
      "includeExceptions": {
        "description": "Whether user exceptions should be returned as part of the results. Defaults to false if not specified.",
        "type": "boolean"
      },
      "managementUnitId": {
        "description": "The ID of the management unit to query",
        "type": "string"
      },
      "startDate": {
        "description": "Beginning of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "userIds": {
        "description": "The IDs of the users to query. If not included, will query every user in the management unit",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "endDate",
      "managementUnitId",
      "startDate"
    ],
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkJobReference": {
    "properties": {
      "id": {
        "description": "The ID of the historical adherence bulk job to listen for via notification or query using the jobs route",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the historical adherence bulk job",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkQuery": {
    "properties": {
      "items": {
        "description": "The historical adherence items to query",
        "items": {
          "$ref": "#/definitions/WfmHistoricalAdherenceBulkItem"
        },
        "type": "array"
      },
      "timeZone": {
        "description": "The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.",
        "type": "string"
      }
    },
    "required": [
      "items",
      "timeZone"
    ],
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkResponse": {
    "properties": {
      "downloadResult": {
        "$ref": "#/definitions/WfmHistoricalAdherenceBulkResult",
        "description": "Results will always come via downloadUrls; however the schema is included for documentation"
      },
      "downloadUrls": {
        "description": "The uri list to GET the results of the Historical Adherence query. This field is populated only if query state is Complete",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "job": {
        "$ref": "#/definitions/WfmHistoricalAdherenceBulkJobReference",
        "description": "A reference to the job that was started by the request"
      }
    },
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkResult": {
    "properties": {
      "endDate": {
        "description": "End of the date range for this result in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "lookupIdToSecondaryPresenceId": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Map of secondary presence lookup ID to corresponding secondary presence ID",
        "type": "object"
      },
      "managementUnitId": {
        "description": "The ID of the management unit for this result",
        "type": "string"
      },
      "startDate": {
        "description": "Beginning of the date range for this result in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "userResults": {
        "description": "The individual results for each user",
        "items": {
          "$ref": "#/definitions/WfmHistoricalAdherenceBulkUserResult"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkUserDayMetrics": {
    "properties": {
      "actualLengthSeconds": {
        "description": "Total duration in seconds for all actually worked activities",
        "format": "int32",
        "type": "integer"
      },
      "adherencePercentage": {
        "description": "Total adherence percentage for this user, in the scale of 0 - 100",
        "format": "double",
        "type": "number"
      },
      "adherenceScheduleSeconds": {
        "description": "Duration of schedule in seconds included for adherence percentage calculation",
        "format": "int32",
        "type": "integer"
      },
      "conformanceActualSeconds": {
        "description": "Total actually worked duration in seconds for OnQueue activities",
        "format": "int32",
        "type": "integer"
      },
      "conformancePercentage": {
        "description": "Total conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.",
        "format": "double",
        "type": "number"
      },
      "conformanceScheduleSeconds": {
        "description": "Total scheduled duration in seconds for OnQueue activities",
        "format": "int32",
        "type": "integer"
      },
      "dayStartOffsetSeconds": {
        "description": "Start of day offset in seconds relative to query start time",
        "format": "int32",
        "type": "integer"
      },
      "exceptionCount": {
        "description": "Total number of adherence exceptions for this user",
        "format": "int32",
        "type": "integer"
      },
      "exceptionDurationSeconds": {
        "description": "Total duration in seconds of adherence exceptions for this user",
        "format": "int32",
        "type": "integer"
      },
      "impactSeconds": {
        "description": "The impact duration in seconds of current adherence state for this user",
        "format": "int32",
        "type": "integer"
      },
      "scheduleLengthSeconds": {
        "description": "Total duration in seconds for all scheduled activities",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WfmHistoricalAdherenceBulkUserResult": {
    "properties": {
      "actuals": {
        "description": "List of adherence actuals for this user",
        "items": {
          "$ref": "#/definitions/HistoricalAdherenceActuals"
        },
        "type": "array"
      },
      "adherencePercentage": {
        "description": "Adherence percentage for this user, in the scale of 0 - 100",
        "format": "double",
        "type": "number"
      },
      "conformancePercentage": {
        "description": "Conformance percentage for this user, in the scale of 0 - 100. Conformance percentage can be greater than 100 when the actual on queue time is greater than the scheduled on queue time for the same period.",
        "format": "double",
        "type": "number"
      },
      "dayMetrics": {
        "description": "Adherence and conformance metrics for days in query range",
        "items": {
          "$ref": "#/definitions/WfmHistoricalAdherenceBulkUserDayMetrics"
        },
        "type": "array"
      },
      "exceptionInfo": {
        "description": "List of adherence exceptions for this user",
        "items": {
          "$ref": "#/definitions/HistoricalAdherenceExceptionInfo"
        },
        "type": "array"
      },
      "impact": {
        "description": "The impact of the current adherence state for this user",
        "enum": [
          "Positive",
          "Negative",
          "Neutral",
          "Unknown"
        ],
        "type": "string"
      },
      "userId": {
        "description": "The ID of the user for whom the adherence is queried",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WfmHistoricalAdherenceQuery": {
    "properties": {
      "endDate": {
        "description": "End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time",
        "format": "date-time",
        "type": "string"
      },
      "includeExceptions": {
        "description": "Whether user exceptions should be returned as part of the results",
        "type": "boolean"
      },
      "startDate": {
        "description": "Beginning of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "teamIds": {
        "description": "The teamIds to report on. If null or not set, adherence will be computed for requested users if applicable or otherwise all users in the management unit. Note: If teamIds is also specified, only adherence for users in the requested teams will be returned",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "timeZone": {
        "description": "The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.",
        "type": "string"
      },
      "userIds": {
        "description": "The userIds to report on. If null or not set, adherence will be computed for all the users in management unit or requested teamIds",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "startDate"
    ],
    "type": "object"
  },
  "WfmHistoricalAdherenceQueryForTeams": {
    "properties": {
      "endDate": {
        "description": "End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time",
        "format": "date-time",
        "type": "string"
      },
      "includeExceptions": {
        "description": "Whether user exceptions should be returned as part of the results",
        "type": "boolean"
      },
      "startDate": {
        "description": "Beginning of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.",
        "type": "string"
      },
      "userIds": {
        "description": "The userIds to report on. If null or not set, adherence will be computed for all the users in management unit or requested teamIds",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "startDate",
      "timeZone"
    ],
    "type": "object"
  },
  "WfmHistoricalAdherenceQueryForUsers": {
    "properties": {
      "endDate": {
        "description": "End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time",
        "format": "date-time",
        "type": "string"
      },
      "includeExceptions": {
        "description": "Whether user exceptions should be returned as part of the results",
        "type": "boolean"
      },
      "startDate": {
        "description": "Beginning of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone, in olson format, to use in defining days when computing adherence. The results will be returned as UTC timestamps regardless of the time zone input.",
        "type": "string"
      },
      "userIds": {
        "description": "The userIds to report on",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "startDate",
      "timeZone",
      "userIds"
    ],
    "type": "object"
  },
  "WfmHistoricalAdherenceResponse": {
    "properties": {
      "downloadResult": {
        "$ref": "#/definitions/WfmHistoricalAdherenceResultWrapper",
        "description": "Result will always come via downloadUrls; however the schema is included for documentation"
      },
      "downloadUrl": {
        "description": "Deprecated. Use downloadUrls instead.",
        "type": "string"
      },
      "downloadUrls": {
        "description": "The uri list to GET the results of the Historical Adherence query. For notification purposes only",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "id": {
        "description": "The query ID to listen for",
        "type": "string"
      },
      "queryState": {
        "description": "The state of the adherence query",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WfmHistoricalAdherenceResultWrapper": {
    "properties": {
      "data": {
        "description": "The list of historical adherence query results",
        "items": {
          "$ref": "#/definitions/HistoricalAdherenceQueryResult"
        },
        "type": "array"
      },
      "entityId": {
        "description": "The operation ID of the historical adherence query",
        "type": "string"
      },
      "lookupIdToSecondaryPresenceId": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "Map of secondary presence lookup ID to corresponding secondary presence ID",
        "type": "object"
      }
    },
    "type": "object"
  },
  "WfmHistoricalShrinkageRequest": {
    "properties": {
      "endDate": {
        "description": "End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time",
        "format": "date-time",
        "type": "string"
      },
      "granularity": {
        "description": "Shrinkage aggregation interval granularity.",
        "enum": [
          "Daily",
          "Weekly"
        ],
        "type": "string"
      },
      "startDate": {
        "description": "Beginning of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone, in olson format, to use in defining days when computing shrinkage for requested granularity. If it is not set, the business unit time zone will be used. The results will be returned as UTC timestamps regardless of the time zone input.",
        "type": "string"
      }
    },
    "required": [
      "startDate"
    ],
    "type": "object"
  },
  "WfmHistoricalShrinkageResponse": {
    "properties": {
      "downloadResult": {
        "$ref": "#/definitions/HistoricalShrinkageResultListing",
        "description": "Result will always come via downloadUrls; however the schema is included for documentation"
      },
      "downloadUrls": {
        "description": "The url list to GET the results of the Historical Shrinkage query. This field is populated only if query state is Complete",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "operationId": {
        "description": "The operationId for which to listen",
        "type": "string"
      },
      "state": {
        "description": "The state of the shrinkage query",
        "enum": [
          "Processing",
          "Complete",
          "Error"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WfmHistoricalShrinkageTeamsRequest": {
    "properties": {
      "endDate": {
        "description": "End of the date range to query in ISO-8601 format. If it is not set, end date will be set to current time",
        "format": "date-time",
        "type": "string"
      },
      "granularity": {
        "description": "Shrinkage aggregation interval granularity",
        "enum": [
          "Daily",
          "Weekly"
        ],
        "type": "string"
      },
      "startDate": {
        "description": "Beginning of the date range to query in ISO-8601 format",
        "format": "date-time",
        "type": "string"
      },
      "timeZone": {
        "description": "The time zone, in olson format, to use in defining days when computing shrinkage for requested granularity. The results will be returned as UTC timestamps regardless of the time zone input.",
        "type": "string"
      }
    },
    "required": [
      "startDate",
      "timeZone"
    ],
    "type": "object"
  },
  "WfmIntegrationListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WfmIntegrationResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WfmIntegrationReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WfmIntegrationResponse": {
    "properties": {
      "active": {
        "description": "Whether integration state is active",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "active"
    ],
    "type": "object"
  },
  "WfmIntradayPlanningGroupListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/ForecastPlanningGroupResponse"
        },
        "type": "array"
      },
      "noDataReason": {
        "description": "The reason there was no data for the request",
        "enum": [
          "NoPublishedSchedule",
          "NoSourceForecast"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WfmProcessUploadRequest": {
    "properties": {
      "uploadKey": {
        "description": "The uploadKey provided by the request to get an upload URL",
        "type": "string"
      }
    },
    "required": [
      "uploadKey"
    ],
    "type": "object"
  },
  "WfmScheduleActivity": {
    "properties": {
      "activities": {
        "description": "List of user's scheduled activities",
        "items": {
          "$ref": "#/definitions/ScheduleActivity"
        },
        "readOnly": true,
        "type": "array"
      },
      "fullDayTimeOffMarkers": {
        "description": "List of user's days off",
        "items": {
          "$ref": "#/definitions/FullDayTimeOffMarker"
        },
        "readOnly": true,
        "type": "array"
      },
      "userReference": {
        "$ref": "#/definitions/UserReference",
        "description": "ID of user that the schedule is for",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "WfmScheduleReference": {
    "properties": {
      "businessUnit": {
        "$ref": "#/definitions/WfmBusinessUnitReference",
        "description": "A reference to a Workforce Management Business Unit"
      },
      "id": {
        "description": "The ID of the WFM schedule",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "weekDate": {
        "description": "The start week date for this schedule. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "required": [
      "businessUnit",
      "id",
      "weekDate"
    ],
    "type": "object"
  },
  "WfmServiceGoalImpact": {
    "properties": {
      "decreaseByPercent": {
        "description": "The maximum allowed percent decrease from the configured goal",
        "format": "double",
        "type": "number"
      },
      "increaseByPercent": {
        "description": "The maximum allowed percent increase from the configured goal",
        "format": "double",
        "type": "number"
      }
    },
    "required": [
      "decreaseByPercent",
      "increaseByPercent"
    ],
    "type": "object"
  },
  "WfmServiceGoalImpactSettings": {
    "properties": {
      "abandonRate": {
        "$ref": "#/definitions/WfmServiceGoalImpact",
        "description": "Allowed abandon rate percent increase and decrease"
      },
      "averageSpeedOfAnswer": {
        "$ref": "#/definitions/WfmServiceGoalImpact",
        "description": "Allowed average speed of answer percent increase and decrease"
      },
      "serviceLevel": {
        "$ref": "#/definitions/WfmServiceGoalImpact",
        "description": "Allowed service level percent increase and decrease"
      }
    },
    "required": [
      "abandonRate",
      "averageSpeedOfAnswer",
      "serviceLevel"
    ],
    "type": "object"
  },
  "WfmUserEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WfmUserNotification": {
    "properties": {
      "adherenceExplanation": {
        "$ref": "#/definitions/AdherenceExplanationNotification",
        "description": "An adherence explanation notification.  Only set if type == AdherenceExplanation",
        "readOnly": true
      },
      "agentNotification": {
        "description": "Whether this notification is for an agent",
        "readOnly": true,
        "type": "boolean"
      },
      "alternativeShift": {
        "$ref": "#/definitions/AlternativeShiftNotification",
        "description": "An alternative shift trade notification.  Only set if type == AlternativeShift",
        "readOnly": true
      },
      "id": {
        "description": "The immutable globally unique identifier for the object.",
        "type": "string"
      },
      "markedAsRead": {
        "description": "Whether this notification has been marked \"read\"",
        "type": "boolean"
      },
      "mutableGroupId": {
        "description": "The group ID of the notification (mutable, may change  on update)",
        "type": "string"
      },
      "otherNotificationIdsInGroup": {
        "description": "Other notification IDs in group.  This field is only populated in real-time notifications",
        "items": {
          "type": "string"
        },
        "readOnly": true,
        "type": "array",
        "uniqueItems": true
      },
      "shiftTrade": {
        "$ref": "#/definitions/ShiftTradeNotification",
        "description": "A shift trade notification.  Only set if type == ShiftTrade",
        "readOnly": true
      },
      "timeOffRequest": {
        "$ref": "#/definitions/TimeOffRequestNotification",
        "description": "A time off request notification.  Only set if type == TimeOffRequest",
        "readOnly": true
      },
      "timestamp": {
        "description": "The timestamp for this notification. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "type": {
        "description": "The type of this notification",
        "enum": [
          "AdherenceExplanation",
          "ShiftTrade",
          "TimeOffRequest",
          "AlternativeShift"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "id",
      "markedAsRead",
      "mutableGroupId"
    ],
    "type": "object"
  },
  "WfmVersionedEntityMetadata": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the associated entity, if available",
        "readOnly": true
      },
      "dateCreated": {
        "description": "The date the associated entity was created, if available. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "The date the associated entity was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who last modified the associated entity",
        "readOnly": true
      },
      "version": {
        "description": "The version of the associated entity.  Used to prevent conflicts on concurrent edits",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "WhatsAppAvailablePhoneNumberDetails": {
    "properties": {
      "name": {
        "description": "The verified name associated with this phone number.",
        "readOnly": true,
        "type": "string"
      },
      "phoneNumber": {
        "description": "The display name associated with this phone number. It's typically the E.164 representation of the number.",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of this phone number.",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name",
      "status"
    ],
    "type": "object"
  },
  "WhatsAppAvailablePhoneNumberDetailsListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WhatsAppAvailablePhoneNumberDetails"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WhatsAppDefinition": {
    "description": "A WhatsApp messaging template definition as defined in the WhatsApp Business Manager",
    "properties": {
      "language": {
        "description": "The messaging template language configured for this template. This is a WhatsApp specific value. For example, 'en_US'",
        "type": "string"
      },
      "name": {
        "description": "The messaging template name.",
        "type": "string"
      },
      "namespace": {
        "description": "The messaging template namespace.",
        "type": "string"
      }
    },
    "required": [
      "language",
      "name",
      "namespace"
    ],
    "type": "object"
  },
  "WhatsAppEmbeddedSignupIntegrationActivationRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "description": "WhatsApp Integration name",
        "readOnly": true,
        "type": "string"
      },
      "phoneNumber": {
        "description": "Phone number to associate with the WhatsApp integration",
        "type": "string"
      },
      "pin": {
        "description": "Specify the two-step verification PIN for that phone number",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "phoneNumber",
      "pin"
    ],
    "type": "object"
  },
  "WhatsAppEmbeddedSignupIntegrationRequest": {
    "properties": {
      "embeddedSignupAccessToken": {
        "description": "The access token returned from the embedded signup flow",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the WhatsApp Integration",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      }
    },
    "required": [
      "embeddedSignupAccessToken",
      "name"
    ],
    "type": "object"
  },
  "WhatsAppId": {
    "description": "User information for a WhatsApp account",
    "properties": {
      "displayName": {
        "description": "The displayName of this person's account in WhatsApp",
        "type": "string"
      },
      "phoneNumber": {
        "$ref": "#/definitions/PhoneNumber",
        "description": "The phone number associated with this WhatsApp account"
      }
    },
    "type": "object"
  },
  "WhatsAppIntegration": {
    "properties": {
      "activationErrorInfo": {
        "$ref": "#/definitions/ErrorBody",
        "description": "The error information of WhatsApp Integration activation process",
        "readOnly": true
      },
      "activationStatusCode": {
        "description": "The status code of WhatsApp Integration activation process",
        "enum": [
          "CodeSent",
          "WaitRequired",
          "ActivationFailed",
          "CodeConfirmed",
          "ConfirmationFailed",
          "ResendCode"
        ],
        "readOnly": true,
        "type": "string"
      },
      "availablePhoneNumbers": {
        "$ref": "#/definitions/WhatsAppAvailablePhoneNumberDetailsListing",
        "description": "The list of available WhatsApp phone numbers for this account. Please select one phone number from this list to use with the created integration.",
        "readOnly": true
      },
      "createError": {
        "$ref": "#/definitions/ErrorBody",
        "description": "Error information returned, if createStatus is set to Error",
        "readOnly": true
      },
      "createStatus": {
        "description": "Status of asynchronous create operation",
        "enum": [
          "Initiated",
          "Completed",
          "Error"
        ],
        "readOnly": true,
        "type": "string"
      },
      "createdBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that created this Integration"
      },
      "dateCreated": {
        "description": "Date this Integration was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date this Integration was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "id": {
        "description": "A unique Integration Id.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingReference"
      },
      "modifiedBy": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "User reference that last modified this Integration"
      },
      "name": {
        "description": "The name of the WhatsApp integration.",
        "type": "string"
      },
      "phoneNumber": {
        "description": "The phone number associated to the WhatsApp integration.",
        "type": "string"
      },
      "recipient": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The recipient associated to the WhatsApp Integration. This recipient is used to associate a flow to an integration",
        "readOnly": true
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The status of the WhatsApp Integration",
        "enum": [
          "Active",
          "Inactive",
          "Error",
          "Starting",
          "Incomplete",
          "Deleting",
          "DeletionFailed"
        ],
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "version": {
        "description": "Version number required for updates.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "id",
      "name",
      "phoneNumber",
      "version"
    ],
    "type": "object"
  },
  "WhatsAppIntegrationEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WhatsAppIntegration"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WhatsAppIntegrationRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "The name of the WhatsApp Integration",
        "type": "string"
      },
      "phoneNumber": {
        "description": "The phone number associated to the whatsApp integration",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      },
      "wabaCertificate": {
        "description": "The waba(WhatsApp Business Manager) certificate associated to the WhatsApp integration phone number",
        "type": "string"
      }
    },
    "required": [
      "name",
      "phoneNumber",
      "wabaCertificate"
    ],
    "type": "object"
  },
  "WhatsAppIntegrationUpdateRequest": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "messagingSetting": {
        "$ref": "#/definitions/MessagingSettingRequestReference",
        "description": "Defines the message settings to be applied for this integration"
      },
      "name": {
        "description": "WhatsApp Integration name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "supportedContent": {
        "$ref": "#/definitions/SupportedContentReference",
        "description": "Defines the SupportedContent profile configured for an integration"
      }
    },
    "type": "object"
  },
  "Widget": {
    "properties": {
      "agentInteractionSortOrder": {
        "description": "The sort order of the interactions in the agent status widget.",
        "enum": [
          "ascending",
          "descending"
        ],
        "type": "string"
      },
      "column": {
        "description": "The column number for the specific dashboard widget configuration.",
        "type": "integer"
      },
      "displayAggregates": {
        "description": "Indicates whether to display aggregate across all entity and media type combination.",
        "type": "boolean"
      },
      "displayAsTable": {
        "description": "Indicates the widget to be displayed as table.",
        "type": "boolean"
      },
      "displayText": {
        "description": "The display text for the dashboard widget configuration.",
        "type": "string"
      },
      "displayTextColor": {
        "description": "The color of the display text for the dashboard widget configuration in RGB hexadecimal format (for example \"#FF0000\" represents red).",
        "type": "string"
      },
      "entityLimit": {
        "description": "Indicates the limit of displayed entities.",
        "format": "int32",
        "type": "integer"
      },
      "filter": {
        "$ref": "#/definitions/ViewFilter",
        "description": "The filters to be applied for dashboard widget configuration"
      },
      "isFullWidth": {
        "description": "Indicates whether a widget should take the full width of a dashboard or be shown only in a single slot.",
        "type": "boolean"
      },
      "mediaTypes": {
        "description": "The list of media types for the dashboard widget configuration",
        "items": {
          "enum": [
            "callback",
            "chat",
            "cobrowse",
            "email",
            "message",
            "screenshare",
            "unknown",
            "video",
            "voice"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "metrics": {
        "description": "The list of metrics for the dashboard widget configuration.",
        "items": {
          "enum": [
            "AVG_TALK_TIME",
            "AVG_HOLD_TIME",
            "AVG_ACW_TIME",
            "AVG_WAIT_TIME",
            "AVG_HANDLE_TIME",
            "AVG_ALERT_TIME",
            "AVG_ANSWER_TIME",
            "AVG_ABANDON_TIME",
            "TOTAL_TALK_TIME",
            "TOTAL_HANDLE_TIME",
            "TOTAL_HOLD_TIME",
            "TOTAL_ACW_TIME",
            "TOTAL_ALERT_TIME",
            "MAX_ABANDON_TIME",
            "MAX_WAIT_TIME",
            "MAX_TALK_TIME",
            "MAX_HOLD_TIME",
            "MAX_ACW_TIME",
            "MIN_ABANDON_TIME",
            "MIN_WAIT_TIME",
            "MIN_TALK_TIME",
            "MIN_HOLD_TIME",
            "MIN_ACW_TIME",
            "ALERT_COUNT",
            "OFFERED_COUNT",
            "ABANDONED_COUNT",
            "ABANDONED_PERCENT",
            "SHORT_ABANDONED_COUNT",
            "SHORT_ABANDONED_PERCENT",
            "ABANDONED_NO_SHORT_COUNT",
            "ABANDONED_NO_SHORT_PERCENT",
            "ANSWERED_COUNT",
            "ANSWERED_PERCENT",
            "FLOWOUT_COUNT",
            "FLOWOUT_PERCENT",
            "OUTBOUND_COUNT",
            "OUTBOUND_ATTEMPTED_COUNT",
            "VOICEMAIL_COUNT",
            "HANDLED_COUNT",
            "HELD_COUNT",
            "TRANSFERRED_COUNT",
            "TRANSFERRED_PERCENT",
            "WAITING_CURRENT",
            "INTERACTING_CURRENT",
            "HELD_CURRENT",
            "ALERTING_CURRENT",
            "SERVICE_LEVEL",
            "OVER_SERVICE_LEVEL",
            "ONLINE_AGENTS",
            "AVAILABLE_AGENTS",
            "AWAY_AGENTS",
            "BREAK_AGENTS",
            "MEAL_AGENTS",
            "TRAINING_AGENTS",
            "BUSY_AGENTS",
            "MEETING_AGENTS",
            "SYSTEM_AWAY_AGENTS",
            "OFFLINE_AGENTS",
            "ON_QUEUE_AGENTS",
            "OFF_QUEUE_AGENTS",
            "INTERACTING_AGENTS",
            "ACW_AGENTS",
            "COMMUNICATING_AGENTS",
            "IDLE_AGENTS",
            "NOT_RESPONDING_AGENTS",
            "LONGEST_WAITING",
            "LONGEST_INTERACTING",
            "FLOW_ACTIVE_LONGEST",
            "FLOW_ACTIVE_CURRENT",
            "FLOW_ENTRIES_COUNT",
            "FLOW_TOTAL_DURATION",
            "FLOW_MAX_DURATION",
            "FLOW_AVG_DURATION",
            "FLOW_DISCONNECT_COUNT",
            "FLOW_DISCONNECT_PERCENT",
            "FLOW_TOTAL_DISCONNECT_DURATION",
            "FLOW_AVG_DISCONNECT_DURATION",
            "FLOW_MAX_DISCONNECT_DURATION",
            "FLOW_FLOW_DISCONNECT",
            "FLOW_FLOW_DISCONNECT_PERCENT",
            "FLOW_SYSTEM_ERROR_DISCONNECT",
            "FLOW_SYSTEM_ERROR_DISCONNECT_PERCENT",
            "FLOW_CUSTOMER_DISCONNECT",
            "FLOW_CUSTOMER_DISCONNECT_PERCENT",
            "FLOW_SHORT_DISCONNECT",
            "FLOW_SHORT_DISCONNECT_PERCENT",
            "FLOW_EXIT_COUNT",
            "FLOW_EXIT_PERCENT",
            "FLOW_TOTAL_EXIT_DURATION",
            "FLOW_MAX_EXIT_DURATION",
            "FLOW_AVG_EXIT_DURATION",
            "FLOW_ACD_EXIT_COUNT",
            "FLOW_ACD_EXIT_PERCENT",
            "FLOW_GROUP_EXIT_COUNT",
            "FLOW_GROUP_EXIT_PERCENT",
            "FLOW_NUMBER_EXIT_COUNT",
            "FLOW_NUMBER_EXIT_PERCENT",
            "FLOW_USER_EXIT_COUNT",
            "FLOW_USER_EXIT_PERCENT",
            "FLOW_FLOW_EXIT_COUNT",
            "FLOW_FLOW_EXIT_PERCENT",
            "FLOW_SECURE_FLOW_EXIT_COUNT",
            "FLOW_SECURE_FLOW_EXIT_PERCENT",
            "FLOW_ACD_VOICEMAIL_EXIT_COUNT",
            "FLOW_ACD_VOICEMAIL_EXIT_PERCENT",
            "FLOW_USER_VOICEMAIL_EXIT_COUNT",
            "FLOW_USER_VOICEMAIL_EXIT_PERCENT",
            "FLOW_OUTCOME_COUNT",
            "FLOW_AVG_OUTCOME_DECIMAL",
            "FLOW_OUTCOME_FAILURE_COUNT",
            "FLOW_OUTCOME_FAILURE_PERCENT",
            "FLOW_OUTCOME_SUCCESS_COUNT",
            "FLOW_OUTCOME_SUCCESS_PERCENT",
            "FLOW_OUTCOME_TOTAL_DURATION",
            "FLOW_OUTCOME_MAX_DURATION",
            "FLOW_OUTCOME_AVG_DURATION",
            "FLOW_OUTCOME_MIN_DURATION",
            "OFF_QUEUE_TIME",
            "OFF_QUEUE_PERCENT",
            "AVAILABLE_TIME",
            "AVAILABLE_PERCENT",
            "BUSY_TIME",
            "BUSY_PERCENT",
            "AWAY_TIME",
            "AWAY_PERCENT",
            "BREAK_TIME",
            "BREAK_PERCENT",
            "MEAL_TIME",
            "MEAL_PERCENT",
            "MEETING_TIME",
            "MEETING_PERCENT",
            "TRAINING_TIME",
            "TRAINING_PERCENT",
            "INTERACTING_TIME",
            "INTERACTING_PERCENT",
            "COMMUNICATING_TIME",
            "COMMUNICATING_PERCENT",
            "SYSTEM_AWAY_TIME",
            "SYSTEM_AWAY_PERCENT",
            "ON_QUEUE_TIME",
            "ON_QUEUE_PERCENT",
            "IDLE_TIME",
            "IDLE_PERCENT",
            "NOT_RESPONDING_TIME",
            "NOT_RESPONDING_PERCENT",
            "LOGGED_IN_TIME",
            "OCCUPANCY_PERCENT",
            "MIN_ALERT_TIME",
            "MAX_ALERT_TIME",
            "MIN_HANDLE_TIME",
            "MAX_HANDLE_TIME",
            "MIN_ANSWERED_TIME",
            "MAX_ANSWERED_TIME",
            "MIN_NOT_RESPONDING_TIME",
            "MAX_NOT_RESPONDING_TIME",
            "MET_SERVICE_LEVEL",
            "WFM_ADHERENCE_STATUS",
            "WFM_SCHEDULED_ACTIVITY",
            "WFM_ADHERENCE_DURATION",
            "AGENT_TITLE",
            "AGENT_DEPARTMENT",
            "AGENT_EXTENSION",
            "AGENT_SKILLS",
            "AGENT_LOCATION",
            "AGENT_REPORTS_TO",
            "AGENT_EMAIL",
            "AGENT_ROLE",
            "AGENT_GROUP",
            "AGENT_TIME_IN_STATUS",
            "AGENT_TIME_IN_ROUTING_STATUS",
            "AGENT_STATUS",
            "AGENT_SECONDARY_STATUS",
            "AGENT_ROUTING_STATUS",
            "AGENT_MEDIA_TYPES",
            "ACW_COUNT",
            "ANSWER_TRANSFERRED_PERCENT",
            "FLOW_AVG_MILESTONE_DECIMAL",
            "NOT_RESPONDING_COUNT",
            "AVG_ACW_HANDLED",
            "AVG_CONTACTING_TIME",
            "AVG_DIALING_TIME",
            "AVG_FLOWOUT_TIME",
            "AVG_HOLD_HANDLED",
            "AVG_MONITOR",
            "BLIND_TRANSFER_COUNT",
            "BLIND_TRANSFER_PERCENT",
            "CONNECTED_COUNT",
            "CONSULT_COUNT",
            "CONSULT_TRANSFER_COUNT",
            "CONSULT_TRANSFER_PERCENT",
            "CONTACTING_COUNT",
            "DIALING_COUNT",
            "ERROR_COUNT",
            "EXTERNAL_MEDIA_COUNT",
            "MAX_CONTACTING_TIME",
            "MAX_DIALING_TIME",
            "MAX_FLOWOUT_TIME",
            "FLOW_MILESTONE_COUNT",
            "MIN_FLOWOUT_TIME",
            "MAX_MONITOR",
            "MIN_CONTACTING_TIME",
            "MIN_DIALING_TIME",
            "MIN_MONITOR",
            "MONITOR_COUNT",
            "MEDIA_COUNT",
            "SERVICE_LEVEL_TARGET",
            "SERVICE_LEVEL_TARGET_CURRENT",
            "TALK_COUNT",
            "TOTAL_ABANDON_TIME",
            "TOTAL_NOT_RESPONDING_TIME",
            "TOTAL_CONTACTING",
            "TOTAL_DIALING",
            "TOTAL_MONITOR",
            "TOTAL_WAIT_TIME",
            "WAIT_COUNT",
            "PARK_COUNT",
            "AVG_PARK_TIME",
            "TOTAL_PARK_TIME",
            "MIN_PARK_TIME",
            "MAX_PARK_TIME"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "periods": {
        "description": "The list of periods for the dashboard widget configuration",
        "items": {
          "enum": [
            "NONE",
            "CURRENT_HALF_HOUR",
            "TODAY",
            "YESTERDAY",
            "THIS_WEEK",
            "LAST_WEEK",
            "THIS_MONTH",
            "LAST_MONTH",
            "PRIOR_7_DAYS",
            "PAST_7_DAYS_TO_DATE",
            "PRIOR_30_DAYS",
            "PAST_30_DAYS_TO_DATE",
            "PRIOR_3_MONTHS"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "row": {
        "description": "The row number for the specific dashboard widget configuration.",
        "type": "integer"
      },
      "selectedStatuses": {
        "description": "Indicates the selected statuses used to filter the agent widget in the dashboard.",
        "items": {
          "enum": [
            "Available",
            "Away",
            "Busy",
            "Break",
            "Meeting",
            "Training",
            "Meal",
            "SystemAway",
            "OnQueue",
            "Interacting",
            "NotResponding",
            "Idle",
            "Communicating",
            "OffQueue",
            "Online",
            "Offline"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "showDuration": {
        "description": "Indicates the display to include duration.",
        "type": "boolean"
      },
      "showLongest": {
        "description": "Indicates the display be the longest time.",
        "type": "boolean"
      },
      "showOfflineAgents": {
        "description": "Indicates to show offline agent widget.",
        "type": "boolean"
      },
      "showPercentageChange": {
        "description": "Indicates whether a widget should show the percentage diff between two values.",
        "type": "boolean"
      },
      "showProfilePicture": {
        "description": "Indicates whether a widget should show the profile picture of an agent.",
        "type": "boolean"
      },
      "showTimeInStatus": {
        "description": "Indicates the show time in status of a widget configuration.",
        "type": "boolean"
      },
      "sortKey": {
        "description": "The sort key of the table.",
        "enum": [
          "Name",
          "Duration"
        ],
        "type": "string"
      },
      "sortOrder": {
        "description": "The sort order of the table.",
        "enum": [
          "ascending",
          "descending"
        ],
        "type": "string"
      },
      "splitByMediaType": {
        "description": "Indicates that data for each media type should be shown individually.",
        "type": "boolean"
      },
      "splitFilters": {
        "description": "Indicates each filter to be displayed individually.",
        "type": "boolean"
      },
      "title": {
        "description": "The title for the dashboard widget configuration.",
        "type": "string"
      },
      "type": {
        "description": "The type of dashboard widget configuration.",
        "enum": [
          "METRIC",
          "CHART",
          "PIE",
          "HEAT_MAP",
          "FREE_TEXT",
          "AGENT_STATUS",
          "REALTIME_ADHERENCE",
          "WEB_CONTENT_URL"
        ],
        "type": "string"
      },
      "warnings": {
        "description": "List of warnings for dashboard widget configuration",
        "items": {
          "$ref": "#/definitions/Warning"
        },
        "type": "array"
      },
      "webContentUrl": {
        "description": "The external web URL for the dashboard widget configuration.",
        "type": "string"
      }
    },
    "required": [
      "type"
    ],
    "type": "object"
  },
  "WidgetClientConfig": {
    "properties": {
      "third-party": {
        "$ref": "#/definitions/WidgetClientConfigThirdParty"
      },
      "v1": {
        "$ref": "#/definitions/WidgetClientConfigV1"
      },
      "v1-http": {
        "$ref": "#/definitions/WidgetClientConfigV1Http"
      },
      "v2": {
        "$ref": "#/definitions/WidgetClientConfigV2"
      }
    },
    "type": "object"
  },
  "WidgetClientConfigThirdParty": {
    "type": "object"
  },
  "WidgetClientConfigV1": {
    "properties": {
      "authenticationUrl": {
        "format": "uri",
        "type": "string"
      },
      "webChatSkin": {
        "enum": [
          "basic",
          "modern-caret-skin"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WidgetClientConfigV1Http": {
    "properties": {
      "authenticationUrl": {
        "format": "uri",
        "type": "string"
      },
      "webChatSkin": {
        "enum": [
          "basic",
          "modern-caret-skin"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WidgetClientConfigV2": {
    "type": "object"
  },
  "WidgetDeployment": {
    "properties": {
      "allowedDomains": {
        "description": "The list of domains that are approved to use this Deployment; the list will be added to CORS headers for ease of web use.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "authenticationRequired": {
        "description": "When true, the customer members starting a chat must be authenticated by supplying their JWT to the create operation.",
        "type": "boolean"
      },
      "clientConfig": {
        "$ref": "#/definitions/WidgetClientConfig",
        "description": "The client configuration options that should be made available to the clients of this Deployment."
      },
      "clientType": {
        "description": "The type of display widget for which this Deployment is configured, which controls the administrator settings shown.",
        "enum": [
          "v1",
          "v2",
          "v1-http",
          "third-party"
        ],
        "type": "string"
      },
      "description": {
        "description": "A human-readable description of this Deployment.",
        "type": "string"
      },
      "disabled": {
        "description": "When true, all create chat operations using this Deployment will be rejected.",
        "type": "boolean"
      },
      "flow": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "The URI of the Inbound Chat Flow to run when new chats are initiated under this Deployment."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WidgetDeploymentEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WidgetDeployment"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkPlan": {
    "properties": {
      "agentCount": {
        "description": "Number of agents in this work plan",
        "format": "int32",
        "type": "integer"
      },
      "agents": {
        "description": "Agents in this work plan",
        "items": {
          "$ref": "#/definitions/DeletableUserReference"
        },
        "type": "array"
      },
      "constrainMaximumConsecutiveWorkingDays": {
        "description": "Whether to constrain the maximum consecutive working days",
        "type": "boolean"
      },
      "constrainMaximumConsecutiveWorkingWeekends": {
        "description": "Whether to constrain the maximum consecutive working weekends",
        "type": "boolean"
      },
      "constrainMinimumTimeBetweenShifts": {
        "description": "Whether the minimum time between shifts constraint is enabled for this work plan",
        "type": "boolean"
      },
      "constrainPaidTimeGranularity": {
        "description": "Whether paid time granularity is constrained for this work plan",
        "type": "boolean"
      },
      "constrainWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is enabled for this work plan",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether the work plan is enabled for scheduling",
        "type": "boolean"
      },
      "flexibleWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is flexible for this work plan",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maximumConsecutiveWorkingDays": {
        "description": "The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumConsecutiveWorkingWeekends": {
        "description": "The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work",
        "format": "int32",
        "type": "integer"
      },
      "maximumDays": {
        "description": "Maximum number days in a week allowed to be scheduled for this work plan",
        "format": "int32",
        "type": "integer"
      },
      "maximumDaysOffPerPlanningPeriod": {
        "description": "Maximum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidMinutesPerPlanningPeriod": {
        "description": "Maximum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this work plan"
      },
      "minimumConsecutiveNonWorkingMinutesPerWeek": {
        "description": "Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off",
        "format": "int32",
        "type": "integer"
      },
      "minimumDaysOffPerPlanningPeriod": {
        "description": "Minimum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidMinutesPerPlanningPeriod": {
        "description": "Minimum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumShiftStartDistanceMinutes": {
        "description": "The time period in minutes for the duration between the start times of two consecutive working days",
        "format": "int32",
        "type": "integer"
      },
      "minimumTimeBetweenShiftsMinutes": {
        "description": "Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumWorkingDaysPerWeek": {
        "description": "The minimum number of days that agents assigned to a work plan must work per week",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "optionalDays": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Optional days to schedule for this work plan"
      },
      "paidTimeGranularityMinutes": {
        "description": "Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shiftStartVarianceType": {
        "description": "This constraint ensures that an agent starts each workday within a user-defined time threshold",
        "enum": [
          "ShiftStart",
          "ShiftStartAndPaidDuration"
        ],
        "type": "string"
      },
      "shiftStartVariances": {
        "$ref": "#/definitions/ListWrapperShiftStartVariance",
        "description": "Variance in minutes among start times of shifts in this work plan"
      },
      "shifts": {
        "description": "Shifts in this work plan",
        "items": {
          "$ref": "#/definitions/WorkPlanShift"
        },
        "type": "array"
      },
      "valid": {
        "description": "Whether the work plan is valid or not",
        "readOnly": true,
        "type": "boolean"
      },
      "weeklyExactPaidMinutes": {
        "description": "Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMaximumPaidMinutes": {
        "description": "Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMinimumPaidMinutes": {
        "description": "Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "WorkPlanActivity": {
    "properties": {
      "activityCodeId": {
        "description": "ID of the activity code associated with this activity",
        "type": "string"
      },
      "countsAsContiguousWorkTime": {
        "description": "Whether the activity duration is counted towards contiguous work time",
        "type": "boolean"
      },
      "countsAsPaidTime": {
        "description": "Whether the activity is paid",
        "type": "boolean"
      },
      "delete": {
        "description": "If marked true for updating an existing activity, the activity will be permanently deleted",
        "type": "boolean"
      },
      "description": {
        "description": "Description of the activity",
        "type": "string"
      },
      "earliestStartTimeMinutes": {
        "description": "Earliest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "exactStartTimeMinutes": {
        "description": "Exact activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == false",
        "format": "int32",
        "type": "integer"
      },
      "flexibleStartTime": {
        "description": "Whether the start time of the activity is flexible",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the activity. This is required only for the case of updating an existing activity",
        "type": "string"
      },
      "latestStartTimeMinutes": {
        "description": "Latest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "lengthMinutes": {
        "description": "Length of the activity in minutes",
        "format": "int32",
        "type": "integer"
      },
      "minimumLengthFromShiftEndMinutes": {
        "description": "The minimum duration between shift item (e.g., break or meal) end and shift end in minutes",
        "format": "int32",
        "type": "integer"
      },
      "minimumLengthFromShiftStartMinutes": {
        "description": "The minimum duration between shift start and shift item (e.g., break or meal) start in minutes",
        "format": "int32",
        "type": "integer"
      },
      "startTimeIncrementMinutes": {
        "description": "Increment in offset minutes that would contribute to different possible start times for the activity",
        "format": "int32",
        "type": "integer"
      },
      "startTimeIsRelativeToShiftStart": {
        "description": "Whether the start time of the activity is relative to the start time of the shift it belongs to",
        "type": "boolean"
      },
      "validationId": {
        "description": "ID of the activity in the context of work plan validation",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanBid": {
    "description": "Work plan bid response",
    "properties": {
      "agentRankingType": {
        "description": "The type of agent ranking selected for this bid",
        "enum": [
          "HireDate",
          "Performance"
        ],
        "type": "string"
      },
      "bidWindowEndDate": {
        "description": "The bid end date. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "bidWindowStartDate": {
        "description": "The bid start date where agents start participate in work plan bidding. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "effectiveDate": {
        "description": "The date when agents will be assigned to the new work plan. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "forecast": {
        "$ref": "#/definitions/BuShortTermForecastWeekReference",
        "description": "The selected forecast in this work plan bid"
      },
      "id": {
        "description": "The ID of the work plan bid",
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WorkPlanBidMetadata",
        "description": "The meta data of this bid"
      },
      "name": {
        "description": "The name of the work plan bid",
        "type": "string"
      },
      "publishedDate": {
        "description": "The date the work plan bid published. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "rankingTiebreakerType": {
        "description": "Ranking tiebreaker",
        "enum": [
          "HireDate",
          "Performance",
          "Custom",
          "RandomlyAssign"
        ],
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "status": {
        "description": "The state of the bid",
        "enum": [
          "Draft",
          "Locked",
          "Optimized",
          "Scheduled",
          "Open",
          "Closed",
          "Processed",
          "Published"
        ],
        "type": "string"
      },
      "workPlanFieldsVisibleToAgents": {
        "description": "The work plan fields visible to agents whenever work plan preferences are made",
        "items": {
          "enum": [
            "Name",
            "PaidHours"
          ],
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "agentRankingType",
      "bidWindowEndDate",
      "bidWindowStartDate",
      "effectiveDate",
      "id",
      "name",
      "rankingTiebreakerType",
      "status",
      "workPlanFieldsVisibleToAgents"
    ],
    "type": "object"
  },
  "WorkPlanBidGroup": {
    "properties": {
      "agents": {
        "description": "The list of agents who participate in this bid group",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit this bid group belongs to"
      },
      "name": {
        "description": "The name of the work plan bid group",
        "type": "string"
      },
      "planningGroups": {
        "description": "The list of planning groups selected in this bid group",
        "items": {
          "$ref": "#/definitions/PlanningGroupReference"
        },
        "type": "array"
      },
      "workPlans": {
        "description": "The list of work plans used in this bid group",
        "items": {
          "$ref": "#/definitions/BidGroupWorkPlanResponse"
        },
        "type": "array"
      }
    },
    "required": [
      "agents",
      "managementUnit",
      "name",
      "planningGroups",
      "workPlans"
    ],
    "type": "object"
  },
  "WorkPlanBidGroupCreate": {
    "properties": {
      "agentIds": {
        "description": "Agent IDs who participate in this bid group",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "managementUnitId": {
        "description": "The management unit ID this bid group belongs to",
        "type": "string"
      },
      "name": {
        "description": "The name of the work plan bid group",
        "type": "string"
      },
      "planningGroupIds": {
        "description": "The planning group IDs selected in this bid group",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "workPlans": {
        "description": "The list of work plans used in this bid group",
        "items": {
          "$ref": "#/definitions/BidGroupWorkPlanRequest"
        },
        "type": "array"
      }
    },
    "required": [
      "agentIds",
      "managementUnitId",
      "name",
      "planningGroupIds",
      "workPlans"
    ],
    "type": "object"
  },
  "WorkPlanBidGroupResponse": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WorkPlanBidMetadata",
        "description": "The meta data of the bid group"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "workPlanBidGroup": {
        "$ref": "#/definitions/WorkPlanBidGroup",
        "description": "The work plan bid group"
      }
    },
    "type": "object"
  },
  "WorkPlanBidGroupSummary": {
    "properties": {
      "agentCount": {
        "description": "The number of agents in this bid group",
        "format": "int32",
        "type": "integer"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit this bid group belongs to"
      },
      "name": {
        "description": "The name assigned to this bid group",
        "type": "string"
      },
      "planningGroupCount": {
        "description": "The number of planning groups in this bid group",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "workPlanCount": {
        "description": "The number of work plans in this bid group",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "agentCount",
      "managementUnit",
      "name",
      "planningGroupCount",
      "workPlanCount"
    ],
    "type": "object"
  },
  "WorkPlanBidGroupSummaryList": {
    "properties": {
      "workPlanBidGroupSummaryList": {
        "description": "List of work plan bid group summary",
        "items": {
          "$ref": "#/definitions/WorkPlanBidGroupSummary"
        },
        "type": "array"
      }
    },
    "required": [
      "workPlanBidGroupSummaryList"
    ],
    "type": "object"
  },
  "WorkPlanBidGroupUpdate": {
    "properties": {
      "agentIds": {
        "$ref": "#/definitions/ListWrapperString",
        "description": "Agent IDs who participate in this bid group"
      },
      "managementUnitId": {
        "description": "The management unit ID used for this work plan bid group",
        "type": "string"
      },
      "name": {
        "description": "The name of the work plan bid group",
        "type": "string"
      },
      "planningGroupIds": {
        "$ref": "#/definitions/ListWrapperString",
        "description": "The planning group IDs selected in this bid group"
      },
      "workPlans": {
        "$ref": "#/definitions/ListWrapperBidGroupWorkPlanRequest",
        "description": "The list of work plans used in this bid group"
      }
    },
    "type": "object"
  },
  "WorkPlanBidListResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkPlanBid"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WorkPlanBidMetadata": {
    "properties": {
      "createdBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who created the associated entity"
      },
      "createdDate": {
        "description": "The date the entity created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who modified the entity"
      },
      "modifiedDate": {
        "description": "The entity last modified date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      }
    },
    "required": [
      "createdBy",
      "createdDate"
    ],
    "type": "object"
  },
  "WorkPlanBidRanks": {
    "properties": {
      "biddingTieBreaker": {
        "description": "Custom agent ranking metric that some customers can use.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the user.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "workPlanBiddingPerformance": {
        "description": "Work plan bidding agent performance ranking. The range of values is between 0 and 9999.",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkPlanConfigurationViolationMessage": {
    "properties": {
      "arguments": {
        "description": "Arguments of the message that provide information about the misconfigured value or the threshold that is exceeded by the misconfigured value",
        "items": {
          "$ref": "#/definitions/WorkPlanValidationMessageArgument"
        },
        "type": "array"
      },
      "severity": {
        "description": "Severity of the message. A message with Error severity indicates the scheduler won't be able to produce schedules and thus the work plan is invalid.",
        "enum": [
          "Information",
          "Warning",
          "Error"
        ],
        "type": "string"
      },
      "type": {
        "description": "Type of configuration violation message for this work plan",
        "enum": [
          "ActivitiesOverlap",
          "ActivityEndGreaterThanShiftStop",
          "ActivityPaidTimeGreaterThanShiftPaidTime",
          "ActivityStartBeforeShiftStart",
          "ActivityStartGreaterThanEqualToShiftStop",
          "ActivityStartIncrementMinutesNotDivisibleByScheduleIntervalMinutes",
          "DailyExactPaidMinutes",
          "DailyMaxTotalLessThanWeeklyMin",
          "DailyMaxTotalLessThanWeeklyMinWithOptional",
          "DailyMaxTotalLessThanWeeklyMinWithoutOptional",
          "DailyMinTotalGreaterThanWeeklyMax",
          "DailyMinTotalGreaterThanWeeklyMaxWithOptional",
          "DailyMinTotalGreaterThanWeeklyMaxWithoutOptional",
          "DailyRequiredDaysGreaterThanWeeklyMaxDays",
          "DailyShiftHasNoDaysSelected",
          "DailyShiftMaxPossibilitiesViolated",
          "EarliestShiftStopIsTooLate",
          "ExactPaidTimeNotDivisibleByGranularity",
          "MaxConsecutiveWorkingDaysNoMoreThanDoubleMaxWorkingDaysPerWeek",
          "MaxDaysOffPerPlanningPeriodNotCorrect",
          "MaxPaidTimeIsMoreThanShiftLength",
          "MaxPaidTimeNotDivisibleByGranularity",
          "MaxPaidTimePerPlanningPeriod",
          "MaxShifts",
          "MinPaidTimeNotDivisibleByGranularity",
          "MinPaidTimePerPlanningPeriod",
          "NoShifts",
          "PaidTimeGreaterThanMaxWorkTime",
          "PaidTimeLessThanMinWorkTime",
          "PaidTimeNotMetByShiftStartStop",
          "ShiftDaysSelectMoreThanMinWorkingDays",
          "ShiftStopEarlierThanStart",
          "ShiftVarianceCannotBeMet",
          "WeeklyExactPaidMinutes"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanConstraintConflictMessage": {
    "properties": {
      "arguments": {
        "description": "The arguments to the type of the message that can help clients resolve validation issues",
        "items": {
          "$ref": "#/definitions/WorkPlanValidationMessageArgument"
        },
        "type": "array"
      },
      "type": {
        "description": "Type of constraint conflict that can be resolved by clients in order to generate agent schedules",
        "enum": [
          "UnknownFix",
          "WithPotentialFixes"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanConstraintMessage": {
    "properties": {
      "arguments": {
        "description": "Arguments of the message that provide information about the constraint that is being conflicted with, such as the value of the constraint",
        "items": {
          "$ref": "#/definitions/WorkPlanValidationMessageArgument"
        },
        "type": "array"
      },
      "type": {
        "description": "Type of the work plan constraint in this message",
        "enum": [
          "ActivityEarliestStartTimeMinutesFromMidnight",
          "ActivityEarliestStartTimeMinutesFromShiftStart",
          "ActivityLatestStartTimeMinutesFromMidnight",
          "ActivityLatestStartTimeMinutesFromShiftStart",
          "ActivityMinimumLengthFromShiftEndMinutes",
          "ActivityMinimumLengthFromShiftStartMinutes",
          "ActivityStartTimeIncrementInMinutes",
          "PlanningPeriodMaximumDaysOff",
          "PlanningPeriodMaximumPaidTimeMinutes",
          "PlanningPeriodMinimumDaysOff",
          "PlanningPeriodMinimumPaidTimeMinutes",
          "ShiftDayOffRule",
          "ShiftEarliestStartTimeMinutesFromMidnight",
          "ShiftEarliestStopTimeMinutesFromMidnight",
          "ShiftLatestStartTimeMinutesFromMidnight",
          "ShiftLatestStopTimeMinutesFromMidnight",
          "ShiftMaximumContiguousTimeMinutes",
          "ShiftMaximumPaidTimeMinutes",
          "ShiftMinimumContiguousTimeMinutes",
          "ShiftMinimumPaidTimeMinutes",
          "ShiftStartTimeIncrementInMinutes",
          "ShiftStartVarianceMaximumVarianceMinutes",
          "ShiftStartVariancePaidDuration",
          "WorkPlanMaximumConsecutiveWorkingDays",
          "WorkPlanMaximumConsecutiveWorkingWeekends",
          "WorkPlanMaximumWeeklyPaidTimeMinutes",
          "WorkPlanMaximumWorkingDaysPerWeek",
          "WorkPlanMinimumConsecutiveNonWorkingTimePerWeekMinutes",
          "WorkPlanMinimumInterShiftTimeMinutes",
          "WorkPlanMinimumShiftStartDistanceMinutes",
          "WorkPlanMinimumWeeklyPaidTimeMinutes",
          "WorkPlanMinimumWorkingDaysPerWeek",
          "WorkPlanOptionalDays",
          "WorkPlanPaidTimeGranularityMinutes"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanListItemResponse": {
    "properties": {
      "agentCount": {
        "description": "Number of agents in this work plan.  Populate with expand=agentCount",
        "format": "int32",
        "type": "integer"
      },
      "agents": {
        "description": "Agents in this work plan. Populate with expand=details (defaults to empty list)",
        "items": {
          "$ref": "#/definitions/DeletableUserReference"
        },
        "type": "array"
      },
      "constrainMaximumConsecutiveWorkingDays": {
        "description": "Whether to constrain the maximum consecutive working days",
        "type": "boolean"
      },
      "constrainMaximumConsecutiveWorkingWeekends": {
        "description": "Whether to constrain the maximum consecutive working weekends",
        "type": "boolean"
      },
      "constrainMinimumTimeBetweenShifts": {
        "description": "Whether the minimum time between shifts constraint is enabled for this work plan",
        "type": "boolean"
      },
      "constrainPaidTimeGranularity": {
        "description": "Whether paid time granularity is constrained for this work plan",
        "type": "boolean"
      },
      "constrainWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is enabled for this work plan",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether the work plan is enabled for scheduling",
        "type": "boolean"
      },
      "flexibleWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is flexible for this work plan",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maximumConsecutiveWorkingDays": {
        "description": "The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumConsecutiveWorkingWeekends": {
        "description": "The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work",
        "format": "int32",
        "type": "integer"
      },
      "maximumDays": {
        "description": "Maximum number days in a week allowed to be scheduled for this work plan",
        "format": "int32",
        "type": "integer"
      },
      "maximumDaysOffPerPlanningPeriod": {
        "description": "Maximum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidMinutesPerPlanningPeriod": {
        "description": "Maximum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this work plan"
      },
      "minimumConsecutiveNonWorkingMinutesPerWeek": {
        "description": "Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off",
        "format": "int32",
        "type": "integer"
      },
      "minimumDaysOffPerPlanningPeriod": {
        "description": "Minimum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidMinutesPerPlanningPeriod": {
        "description": "Minimum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumShiftStartDistanceMinutes": {
        "description": "The time period in minutes for the duration between the start times of two consecutive working days",
        "format": "int32",
        "type": "integer"
      },
      "minimumTimeBetweenShiftsMinutes": {
        "description": "Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumWorkingDaysPerWeek": {
        "description": "The minimum number of days that agents assigned to a work plan must work per week",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "optionalDays": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Optional days to schedule for this work plan. Populate with expand=details"
      },
      "paidTimeGranularityMinutes": {
        "description": "Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shiftStartVarianceType": {
        "description": "This constraint ensures that an agent starts each workday within a user-defined time threshold",
        "enum": [
          "ShiftStart",
          "ShiftStartAndPaidDuration"
        ],
        "type": "string"
      },
      "shiftStartVariances": {
        "$ref": "#/definitions/ListWrapperShiftStartVariance",
        "description": "Variance in minutes among start times of shifts in this work plan. Populate with expand=details"
      },
      "shifts": {
        "description": "Shifts in this work plan. Populate with expand=details (defaults to empty list)",
        "items": {
          "$ref": "#/definitions/WorkPlanShift"
        },
        "type": "array"
      },
      "valid": {
        "description": "Whether the work plan is valid or not",
        "readOnly": true,
        "type": "boolean"
      },
      "weeklyExactPaidMinutes": {
        "description": "Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMaximumPaidMinutes": {
        "description": "Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMinimumPaidMinutes": {
        "description": "Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "metadata"
    ],
    "type": "object"
  },
  "WorkPlanListResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkPlanListItemResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WorkPlanOverride": {
    "properties": {
      "startDate": {
        "description": "The start date in yyyy-MM-dd format of the work plan override. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "weekCount": {
        "description": "Number of weeks for the work plan override",
        "format": "int32",
        "type": "integer"
      },
      "workPlan": {
        "$ref": "#/definitions/WorkPlanReference",
        "description": "The work plan reference associated with this override"
      }
    },
    "required": [
      "startDate",
      "weekCount",
      "workPlan"
    ],
    "type": "object"
  },
  "WorkPlanPatternRequest": {
    "properties": {
      "workPlanIds": {
        "description": "List of work plan IDs in order of rotation on a weekly basis. Values in the list cannot be null or empty",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "workPlanIds"
    ],
    "type": "object"
  },
  "WorkPlanPatternResponse": {
    "properties": {
      "workPlans": {
        "description": "List of work plans in order of rotation on a weekly basis",
        "items": {
          "$ref": "#/definitions/WorkPlanReference"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WorkPlanReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "managementUnit": {
        "$ref": "#/definitions/ManagementUnitReference",
        "description": "The management unit to which this work plan belongs.  Nullable in some routes"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanRotationAgentResponse": {
    "properties": {
      "dateRange": {
        "$ref": "#/definitions/DateRangeWithOptionalEnd",
        "description": "The date range to which this agent is effective in the work plan rotation"
      },
      "position": {
        "description": "Start position of the work plan in the pattern for this agent in the work plan rotation. Position value starts from 0",
        "format": "int32",
        "type": "integer"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user associated with this work plan rotation"
      }
    },
    "type": "object"
  },
  "WorkPlanRotationListResponse": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkPlanRotationResponse"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WorkPlanRotationReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanRotationResponse": {
    "properties": {
      "agentCount": {
        "description": "Number of agents in this work plan rotation",
        "format": "int32",
        "type": "integer"
      },
      "agents": {
        "description": "Agents in this work plan rotation. Populate with expand=agents for GET WorkPlanRotationsList (defaults to empty list)",
        "items": {
          "$ref": "#/definitions/WorkPlanRotationAgentResponse"
        },
        "type": "array"
      },
      "dateRange": {
        "$ref": "#/definitions/DateRangeWithOptionalEnd",
        "description": "The date range to which this work plan rotation applies"
      },
      "enabled": {
        "description": "Whether the work plan rotation is enabled for scheduling",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "metadata": {
        "$ref": "#/definitions/WfmVersionedEntityMetadata",
        "description": "Version metadata for this work plan rotation"
      },
      "name": {
        "type": "string"
      },
      "pattern": {
        "$ref": "#/definitions/WorkPlanPatternResponse",
        "description": "Pattern with ordered list of work plans that rotate on a weekly basis"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanShift": {
    "properties": {
      "activities": {
        "description": "Activities configured for this shift",
        "items": {
          "$ref": "#/definitions/WorkPlanActivity"
        },
        "type": "array"
      },
      "constrainContiguousWorkTime": {
        "description": "Whether the contiguous time constraint for the shift is enabled",
        "type": "boolean"
      },
      "constrainDayOff": {
        "description": "Whether day off rule is enabled",
        "type": "boolean"
      },
      "constrainEarliestStopTime": {
        "description": "Whether the earliest stop time constraint for the shift is enabled",
        "type": "boolean"
      },
      "constrainLatestStopTime": {
        "description": "Whether the latest stop time constraint for the shift is enabled",
        "type": "boolean"
      },
      "constrainStopTime": {
        "description": "Whether the latest stop time constraint for the shift is enabled.  Deprecated, use constrainLatestStopTime instead",
        "type": "boolean"
      },
      "dayOffRule": {
        "description": "The day off rule for agents to have next day off or previous day off. used if constrainDayOff = true",
        "enum": [
          "NextDayOff",
          "PreviousDayOff"
        ],
        "type": "string"
      },
      "days": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Days of the week applicable for this shift"
      },
      "delete": {
        "description": "If marked true for updating an existing shift, the shift will be permanently deleted",
        "type": "boolean"
      },
      "earliestStartTimeMinutesFromMidnight": {
        "description": "Earliest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "earliestStopTimeMinutesFromMidnight": {
        "description": "This is the earliest time a shift can end",
        "format": "int32",
        "type": "integer"
      },
      "exactPaidTimeMinutes": {
        "description": "Exact paid time in minutes configured for the shift. Used if flexiblePaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "exactStartTimeMinutesFromMidnight": {
        "description": "Exact start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == false",
        "format": "int32",
        "type": "integer"
      },
      "flexiblePaidTime": {
        "description": "Whether the paid time setting for the shift is flexible",
        "type": "boolean"
      },
      "flexibleStartTime": {
        "description": "Whether the start time of the shift is flexible",
        "type": "boolean"
      },
      "id": {
        "description": "ID of the shift. This is required only for the case of updating an existing shift",
        "type": "string"
      },
      "latestStartTimeMinutesFromMidnight": {
        "description": "Latest start time of the shift defined as offset minutes from midnight. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "latestStopTimeMinutesFromMidnight": {
        "description": "Latest stop time of the shift defined as offset minutes from midnight. Used if constrainStopTime == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumContiguousWorkTimeMinutes": {
        "description": "Maximum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidTimeMinutes": {
        "description": "Maximum paid time in minutes configured for the shift. Used if flexiblePaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumContiguousWorkTimeMinutes": {
        "description": "Minimum contiguous time in minutes configured for the shift. Used if constrainContiguousWorkTime == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidTimeMinutes": {
        "description": "Minimum paid time in minutes configured for the shift. Used if flexiblePaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "description": "Name of the shift",
        "type": "string"
      },
      "startIncrementMinutes": {
        "description": "Increment in offset minutes that would contribute to different possible start times for the shift. Used if flexibleStartTime == true",
        "format": "int32",
        "type": "integer"
      },
      "validationId": {
        "description": "ID of shift in the context of work plan validation",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WorkPlanValidationMessageArgument": {
    "properties": {
      "type": {
        "description": "The type of the argument associated with violation messages",
        "enum": [
          "ActivityId",
          "ActivityId2",
          "ActivityPaidTimeMinutes",
          "ActivityStartTimeMinutes",
          "ActivityValidationId",
          "ActivityValidationId2",
          "ApplicableDays",
          "Count",
          "DailyPaidTimeMinutes",
          "MaximumDays",
          "MaxShiftCount",
          "Minutes",
          "PaidTimeGranularityMinutes",
          "RequiredDays",
          "ShiftId",
          "ShiftPaidTimeMinutes",
          "ShiftStartTimeMinutes",
          "ShiftStopTimeMinutes",
          "ShiftValidationId",
          "WeeklyPaidTimeMinutes",
          "Weeks",
          "WorkTimeMinutes"
        ],
        "type": "string"
      },
      "value": {
        "description": "The value of the argument",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkPlanValidationRequest": {
    "properties": {
      "agentCount": {
        "description": "Number of agents in this work plan",
        "format": "int32",
        "type": "integer"
      },
      "agents": {
        "description": "Agents in this work plan",
        "items": {
          "$ref": "#/definitions/DeletableUserReference"
        },
        "type": "array"
      },
      "constrainMaximumConsecutiveWorkingDays": {
        "description": "Whether to constrain the maximum consecutive working days",
        "type": "boolean"
      },
      "constrainMaximumConsecutiveWorkingWeekends": {
        "description": "Whether to constrain the maximum consecutive working weekends",
        "type": "boolean"
      },
      "constrainMinimumTimeBetweenShifts": {
        "description": "Whether the minimum time between shifts constraint is enabled for this work plan",
        "type": "boolean"
      },
      "constrainPaidTimeGranularity": {
        "description": "Whether paid time granularity is constrained for this work plan",
        "type": "boolean"
      },
      "constrainWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is enabled for this work plan",
        "type": "boolean"
      },
      "enabled": {
        "description": "Whether the work plan is enabled for scheduling",
        "type": "boolean"
      },
      "flexibleWeeklyPaidTime": {
        "description": "Whether the weekly paid time constraint is flexible for this work plan",
        "type": "boolean"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "maximumConsecutiveWorkingDays": {
        "description": "The maximum number of consecutive days that agents assigned to this work plan are allowed to work. Used if constrainMaximumConsecutiveWorkingDays == true",
        "format": "int32",
        "type": "integer"
      },
      "maximumConsecutiveWorkingWeekends": {
        "description": "The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work",
        "format": "int32",
        "type": "integer"
      },
      "maximumDays": {
        "description": "Maximum number days in a week allowed to be scheduled for this work plan",
        "format": "int32",
        "type": "integer"
      },
      "maximumDaysOffPerPlanningPeriod": {
        "description": "Maximum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "maximumPaidMinutesPerPlanningPeriod": {
        "description": "Maximum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumConsecutiveNonWorkingMinutesPerWeek": {
        "description": "Minimum amount of consecutive non working minutes per week that agents who are assigned this work plan are allowed to have off",
        "format": "int32",
        "type": "integer"
      },
      "minimumDaysOffPerPlanningPeriod": {
        "description": "Minimum days off in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumPaidMinutesPerPlanningPeriod": {
        "description": "Minimum paid minutes in the planning period",
        "format": "int32",
        "type": "integer"
      },
      "minimumShiftStartDistanceMinutes": {
        "description": "The time period in minutes for the duration between the start times of two consecutive working days",
        "format": "int32",
        "type": "integer"
      },
      "minimumTimeBetweenShiftsMinutes": {
        "description": "Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true",
        "format": "int32",
        "type": "integer"
      },
      "minimumWorkingDaysPerWeek": {
        "description": "The minimum number of days that agents assigned to a work plan must work per week",
        "format": "int32",
        "type": "integer"
      },
      "name": {
        "type": "string"
      },
      "optionalDays": {
        "$ref": "#/definitions/SetWrapperDayOfWeek",
        "description": "Optional days to schedule for this work plan"
      },
      "paidTimeGranularityMinutes": {
        "description": "Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true",
        "format": "int32",
        "type": "integer"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "shiftStartVarianceType": {
        "description": "This constraint ensures that an agent starts each workday within a user-defined time threshold",
        "enum": [
          "ShiftStart",
          "ShiftStartAndPaidDuration"
        ],
        "type": "string"
      },
      "shiftStartVariances": {
        "$ref": "#/definitions/ListWrapperShiftStartVariance",
        "description": "Variance in minutes among start times of shifts in this work plan"
      },
      "shifts": {
        "description": "Shifts in this work plan",
        "items": {
          "$ref": "#/definitions/WorkPlanShift"
        },
        "type": "array"
      },
      "valid": {
        "description": "Whether the work plan is valid or not",
        "readOnly": true,
        "type": "boolean"
      },
      "weeklyExactPaidMinutes": {
        "description": "Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMaximumPaidMinutes": {
        "description": "Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      },
      "weeklyMinimumPaidMinutes": {
        "description": "Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Workbin": {
    "properties": {
      "dateCreated": {
        "description": "The creation date of the Workbin. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The modified date of the Workbin. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "Workbin description",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The id of the User who modified the Workbin."
      },
      "name": {
        "description": "Workbin name",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkbinCreate": {
    "properties": {
      "description": {
        "description": "Workbin description. Maximum length of 512 characters.",
        "type": "string"
      },
      "divisionId": {
        "description": "The ID of the division the Workbin belongs to. Defaults to home division ID.",
        "type": "string"
      },
      "name": {
        "description": "Workbin name. Valid length between 3 and 256 characters.",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WorkbinQueryEntityListing": {
    "properties": {
      "after": {
        "type": "string"
      },
      "count": {
        "description": "Count of items returned by the query. Refer to the \"select\" request parameter for more information.",
        "format": "int32",
        "type": "integer"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/Workbin"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkbinQueryRequest": {
    "properties": {
      "after": {
        "description": "The cursor that points to the end of the set of entities that has been returned.",
        "type": "string"
      },
      "attributes": {
        "description": "List of entity attributes to be retrieved in the result.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "filters": {
        "description": "List of filter objects to be used in the search.",
        "items": {
          "$ref": "#/definitions/WorkitemFilter"
        },
        "type": "array"
      },
      "pageSize": {
        "description": "Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.",
        "format": "int32",
        "type": "integer"
      },
      "select": {
        "description": "Specify the value 'Count' for this parameter in order to return only the record count.",
        "enum": [
          "Count"
        ],
        "type": "string"
      },
      "sort": {
        "$ref": "#/definitions/WorkbinQuerySort",
        "description": "Sort"
      }
    },
    "required": [
      "filters"
    ],
    "type": "object"
  },
  "WorkbinQuerySort": {
    "properties": {
      "ascending": {
        "description": "Sort Ascending",
        "type": "boolean"
      },
      "name": {
        "description": "Specify an attribute for sorting. It's possible to use an attribute both for sorting and in the query at the same time, but these restrictions apply: Only the operators EQ, LT, LTE, GT, GTE, BETWEEN and BEGINS_WITH are supported and the attribute can't be present in more than one filter.",
        "enum": [
          "dateModified",
          "name"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkbinReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkbinUpdate": {
    "properties": {
      "description": {
        "description": "Workbin description. Maximum length of 512 characters.",
        "type": "string"
      },
      "name": {
        "description": "Workbin name. Valid length between 3 and 256 characters.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkdayMetric": {
    "properties": {
      "evaluationDetails": {
        "description": "List of evaluations for quality evaluation score metrics",
        "items": {
          "$ref": "#/definitions/QualityEvaluationScoreItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "maxPoints": {
        "description": "The maximum Gamification points a user may earn for this metric",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "metric": {
        "$ref": "#/definitions/Metric",
        "description": "Gamification metric",
        "readOnly": true
      },
      "objective": {
        "$ref": "#/definitions/Objective",
        "description": "Current objective for this metric",
        "readOnly": true
      },
      "points": {
        "description": "Gamification points earned for this metric",
        "format": "int32",
        "readOnly": true,
        "type": "integer"
      },
      "punctualityEvents": {
        "description": "List of schedule activity events for punctuality metrics",
        "items": {
          "$ref": "#/definitions/PunctualityEvent"
        },
        "readOnly": true,
        "type": "array"
      },
      "value": {
        "description": "Value of this metric",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "WorkdayMetricListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkdayMetric"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WorkdayPeriod": {
    "properties": {
      "dateEndWorkday": {
        "description": "End workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "Start workday used as the date range. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkdayPointsTrend": {
    "properties": {
      "averagePoints": {
        "description": "The total average points",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "dateEndWorkday": {
        "description": "The end workday for the query range for the gamification points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "The start workday for the query range for the gamification points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dayOfWeek": {
        "description": "Aggregated for same day comparison",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        "readOnly": true,
        "type": "string"
      },
      "trend": {
        "description": "Daily points trends",
        "items": {
          "$ref": "#/definitions/WorkdayPointsTrendItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The targeted user for the query",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "WorkdayPointsTrendItem": {
    "properties": {
      "dateWorkday": {
        "description": "workday date for the points trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "points": {
        "description": "workday points for the date",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "WorkdayValuesMetricItem": {
    "properties": {
      "average": {
        "description": "The average value of the metric",
        "format": "double",
        "readOnly": true,
        "type": "number"
      },
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "Gamification metric for the average and the trend",
        "readOnly": true
      },
      "metricDefinition": {
        "$ref": "#/definitions/DomainEntityRef",
        "description": "Gamification metric definition for the average and the trend",
        "readOnly": true
      },
      "trend": {
        "description": "The metric value trend",
        "items": {
          "$ref": "#/definitions/WorkdayValuesTrendItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "unitType": {
        "description": "The unit type of the metric value",
        "enum": [
          "None",
          "Percent",
          "Currency",
          "Seconds",
          "Number",
          "AttendanceStatus",
          "Unit"
        ],
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkdayValuesTrend": {
    "properties": {
      "dateEndWorkday": {
        "description": "The end workday for the query range for the metric value trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateReferenceWorkday": {
        "description": "The reference workday used to determine the metric definition. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "dateStartWorkday": {
        "description": "The start workday for the query range for the metric value trend. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The targeted division for the query",
        "readOnly": true
      },
      "metric": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted metric for the average points",
        "readOnly": true
      },
      "performanceProfile": {
        "$ref": "#/definitions/AddressableEntityRef",
        "description": "The targeted performance profile for the average points",
        "readOnly": true
      },
      "results": {
        "description": "The metric value trends",
        "items": {
          "$ref": "#/definitions/WorkdayValuesMetricItem"
        },
        "readOnly": true,
        "type": "array"
      },
      "timezone": {
        "description": "The time zone used for aggregating metric values",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The targeted user for the query",
        "readOnly": true
      }
    },
    "type": "object"
  },
  "WorkdayValuesTrendItem": {
    "properties": {
      "dateWorkday": {
        "description": "The workday for the metric value. Dates are represented as an ISO-8601 string. For example: yyyy-MM-dd",
        "format": "date",
        "readOnly": true,
        "type": "string"
      },
      "value": {
        "description": "The metric value",
        "format": "double",
        "readOnly": true,
        "type": "number"
      }
    },
    "type": "object"
  },
  "WorkflowTargetSettings": {
    "properties": {
      "dataFormat": {
        "description": "The data format to use when invoking target.",
        "enum": [
          "Json",
          "TopLevelPrimitives"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "Workitem": {
    "properties": {
      "alertTimeoutSeconds": {
        "description": "The duration in seconds before an alert will timeout.",
        "format": "int32",
        "type": "integer"
      },
      "assignee": {
        "$ref": "#/definitions/UserReferenceWithName",
        "description": "The assignee of the Workitem."
      },
      "assignmentState": {
        "description": "The assignment state of the workitem.",
        "enum": [
          "Unknown",
          "AcdStarted",
          "Alerting",
          "AlertTimeout",
          "AcdCancelled",
          "Terminated",
          "Idle",
          "Declined",
          "Connected",
          "Disconnected",
          "Parked",
          "Held",
          "AcdExpired"
        ],
        "type": "string"
      },
      "autoStatusTransition": {
        "description": "Set it to false to disable auto status transition. By default, it is enabled.",
        "type": "boolean"
      },
      "autoStatusTransitionDetail": {
        "$ref": "#/definitions/AutoStatusTransitionDetail",
        "description": "Auto status transition details of Workitem."
      },
      "customFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by the Workitem.",
        "type": "object"
      },
      "dateAssignmentStateChanged": {
        "description": "The assignment state change date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateClosed": {
        "description": "The date the Workitem was closed. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateCreated": {
        "description": "The creation date of the Workitem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateDue": {
        "description": "The due date of the Workitem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateExpires": {
        "description": "The expiry date of the Workitem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The modified date of the Workitem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStatusChanged": {
        "description": "The State change date. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of the Workitem.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "durationSeconds": {
        "description": "The estimated duration in seconds to complete the workitem.",
        "format": "int32",
        "type": "integer"
      },
      "externalContact": {
        "$ref": "#/definitions/ExternalContactReference",
        "description": "The external contact of the Workitem."
      },
      "externalTag": {
        "description": "The external tag of the Workitem.",
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "language": {
        "$ref": "#/definitions/LanguageReference",
        "description": "The language of the Workitem."
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The User who modified the Workitem."
      },
      "name": {
        "description": "The name of the Workitem.",
        "type": "string"
      },
      "preferredAgents": {
        "description": "The preferred agents of the Workitem.",
        "items": {
          "$ref": "#/definitions/UserReference"
        },
        "type": "array"
      },
      "priority": {
        "description": "The priority of the Workitem. The valid range is between -25,000,000 and 25,000,000.",
        "format": "int32",
        "type": "integer"
      },
      "queue": {
        "$ref": "#/definitions/WorkitemQueueReference",
        "description": "The Workitems queue."
      },
      "reporter": {
        "$ref": "#/definitions/UserReferenceWithName",
        "description": "The reporter of the Workitem."
      },
      "schema": {
        "$ref": "#/definitions/WorkitemSchema",
        "description": "The schema defining the custom fields of the Workitem. The schema is inherited from the Workitems Worktype at creation time."
      },
      "scoredAgents": {
        "description": "A list of scored agents for the Workitem.",
        "items": {
          "$ref": "#/definitions/WorkitemScoredAgent"
        },
        "type": "array"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "skills": {
        "description": "The skills of the Workitem.",
        "items": {
          "$ref": "#/definitions/RoutingSkillReference"
        },
        "type": "array"
      },
      "status": {
        "$ref": "#/definitions/WorkitemStatusReference",
        "description": "The current Status of the Workitem."
      },
      "statusCategory": {
        "description": "The Category of the current Status of the Workitem.",
        "enum": [
          "Open",
          "InProgress",
          "Waiting",
          "Closed",
          "Unknown"
        ],
        "type": "string"
      },
      "ttl": {
        "description": "The time to live of the Workitem in seconds.",
        "format": "int32",
        "type": "integer"
      },
      "type": {
        "$ref": "#/definitions/WorktypeReference",
        "description": "The Worktype of the Workitem."
      },
      "utilizationLabel": {
        "$ref": "#/definitions/WorkitemUtilizationLabelReference",
        "description": "The utilization label of the Workitem."
      },
      "workbin": {
        "$ref": "#/definitions/WorkbinReference",
        "description": "The Workbin that contains the Workitem."
      }
    },
    "type": "object"
  },
  "WorkitemCreate": {
    "properties": {
      "assigneeId": {
        "description": "The ID of the assignee of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "autoStatusTransition": {
        "description": "Set it to false to disable auto status transition. By default, it is enabled.",
        "type": "boolean"
      },
      "customFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by the worktype of the workitem.",
        "type": "object"
      },
      "dateDue": {
        "description": "The due date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateExpires": {
        "description": "The expiry date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of the Workitem. Maximum length of 512 characters.",
        "type": "string"
      },
      "durationSeconds": {
        "description": "The estimated duration in seconds to complete the Workitem. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "externalContactId": {
        "description": "The ID of the external contact of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "externalTag": {
        "description": "The external tag of the Workitem.",
        "type": "string"
      },
      "languageId": {
        "description": "The ID of language of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "name": {
        "description": "The name of the Workitem. Valid length between 3 and 256 characters.",
        "type": "string"
      },
      "preferredAgentIds": {
        "description": "The preferred agent IDs of the Workitem. Must be valid UUIDs.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "priority": {
        "description": "The priority of the Workitem. The valid range is between -25,000,000 and 25,000,000.",
        "format": "int32",
        "type": "integer"
      },
      "queueId": {
        "description": "The ID of the Workitems queue. Must be a valid UUID.",
        "type": "string"
      },
      "scoredAgents": {
        "description": "A list of scored agents for the Workitem. A workitem can have a maximum of 20 scored agents.",
        "items": {
          "$ref": "#/definitions/WorkitemScoredAgentRequest"
        },
        "type": "array"
      },
      "skillIds": {
        "description": "The skill IDs of the Workitem. Must be valid UUIDs.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "statusId": {
        "description": "The ID of the Status of the Workitem.",
        "type": "string"
      },
      "ttl": {
        "description": "The epoch timestamp in seconds specifying the time to live for the Workitem. Can not be greater than 365 days from the current time.",
        "format": "int32",
        "type": "integer"
      },
      "typeId": {
        "description": "The ID of the Worktype of the Workitem.",
        "type": "string"
      },
      "utilizationLabelId": {
        "description": "The ID of utilization label of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "workbinId": {
        "description": "The ID of Workbin that contains the Workitem.",
        "type": "string"
      },
      "wrapupCode": {
        "description": "The ID of the wrapup. Must be a valid UUID.",
        "type": "string"
      }
    },
    "required": [
      "name",
      "typeId"
    ],
    "type": "object"
  },
  "WorkitemFilter": {
    "properties": {
      "name": {
        "description": "Attribute name.",
        "type": "string"
      },
      "operator": {
        "description": "Filter operator.",
        "enum": [
          "EQ",
          "NEQ",
          "GT",
          "LT",
          "GTE",
          "LTE",
          "IN",
          "CONTAINS",
          "BETWEEN",
          "BEGINS_WITH"
        ],
        "type": "string"
      },
      "type": {
        "description": "Attribute type.",
        "enum": [
          "String",
          "Int"
        ],
        "type": "string"
      },
      "values": {
        "description": "List of values to be used in the filter.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "name",
      "operator",
      "type",
      "values"
    ],
    "type": "object"
  },
  "WorkitemFlowReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemManualAssign": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for this user.",
        "type": "string"
      }
    },
    "required": [
      "id"
    ],
    "type": "object"
  },
  "WorkitemPagedEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Workitem"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "The page number requested",
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "description": "The total page size requested",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkitemQueryJobCreate": {
    "properties": {
      "attributes": {
        "description": "List of entity attributes to be retrieved in the result.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "expands": {
        "description": "List of entity attributes to be expanded in the result.",
        "items": {
          "enum": [
            "type",
            "workbin",
            "status",
            "assignee",
            "reporter",
            "queue"
          ],
          "type": "string"
        },
        "type": "array"
      },
      "filters": {
        "description": "List of filter objects to be used in the search.",
        "items": {
          "$ref": "#/definitions/WorkitemQueryJobFilter"
        },
        "type": "array"
      },
      "pageNumber": {
        "description": "The page number requested",
        "format": "int32",
        "minimum": 1,
        "type": "integer"
      },
      "pageSize": {
        "description": "The total page size requested. Default 25",
        "format": "int32",
        "maximum": 200,
        "minimum": 1,
        "type": "integer"
      },
      "sort": {
        "$ref": "#/definitions/WorkitemQueryJobSort",
        "description": "Sort"
      }
    },
    "required": [
      "filters"
    ],
    "type": "object"
  },
  "WorkitemQueryJobError": {
    "properties": {
      "code": {
        "description": "System defined error code for the error.",
        "type": "string"
      },
      "message": {
        "description": "Error message for the failed job.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemQueryJobFilter": {
    "properties": {
      "name": {
        "description": "Attribute name.",
        "type": "string"
      },
      "operator": {
        "description": "Filter operator.",
        "enum": [
          "EQ",
          "NEQ",
          "GT",
          "LT",
          "GTE",
          "LTE",
          "IN",
          "CONTAINS",
          "BETWEEN",
          "BEGINS_WITH"
        ],
        "type": "string"
      },
      "values": {
        "description": "List of values to be used in the filter.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "required": [
      "name",
      "operator",
      "values"
    ],
    "type": "object"
  },
  "WorkitemQueryJobResponse": {
    "properties": {
      "dateFinished": {
        "description": "The date the job finished. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateStarted": {
        "description": "The date the job was started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "error": {
        "$ref": "#/definitions/WorkitemQueryJobError",
        "description": "The error associated with the query job, if the state is Failed"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "state": {
        "description": "The state of the query job",
        "enum": [
          "Queued",
          "Running",
          "Succeeded",
          "Failed"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemQueryJobSort": {
    "properties": {
      "ascending": {
        "description": "Sort Ascending",
        "type": "boolean"
      },
      "name": {
        "description": "Specify an attribute for sorting.",
        "enum": [
          "dateDue",
          "priority"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemQueueReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemRuleSettings": {
    "properties": {},
    "type": "object"
  },
  "WorkitemSchema": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "The version of the Workitem custom attribute schema.",
        "format": "int32",
        "type": "integer"
      }
    },
    "required": [
      "version"
    ],
    "type": "object"
  },
  "WorkitemScoredAgent": {
    "properties": {
      "agent": {
        "$ref": "#/definitions/UserReference",
        "description": "The agent"
      },
      "score": {
        "description": "Agent's score for the workitem, from 0 - 100, higher being better",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkitemScoredAgentRequest": {
    "properties": {
      "id": {
        "description": "An agents ID. Must be a valid UUID.",
        "type": "string"
      },
      "score": {
        "description": "Agent's score for the workitem, from 0 - 100, higher being better",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkitemStatus": {
    "properties": {
      "category": {
        "description": "The Category of the Status.",
        "enum": [
          "Open",
          "InProgress",
          "Waiting",
          "Closed",
          "Unknown"
        ],
        "type": "string"
      },
      "defaultDestinationStatus": {
        "$ref": "#/definitions/WorkitemStatusReference",
        "description": "Default destination status to which this Status will transition to if auto status transition enabled."
      },
      "description": {
        "description": "The description of the Status.",
        "type": "string"
      },
      "destinationStatuses": {
        "description": "The Statuses the Status can transition to.",
        "items": {
          "$ref": "#/definitions/WorkitemStatusReference"
        },
        "type": "array"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "statusTransitionDelaySeconds": {
        "description": "Delay in seconds for auto status transition",
        "format": "int32",
        "type": "integer"
      },
      "statusTransitionTime": {
        "description": "Time is represented as an ISO-8601 string without a timezone. For example: HH:mm:ss.SSS",
        "format": "local-time",
        "type": "string"
      },
      "worktype": {
        "$ref": "#/definitions/WorktypeReference",
        "description": "The Worktype containing the Status."
      }
    },
    "type": "object"
  },
  "WorkitemStatusCreate": {
    "properties": {
      "category": {
        "description": "The Category of the Status.",
        "enum": [
          "Open",
          "InProgress",
          "Waiting",
          "Closed",
          "Unknown"
        ],
        "type": "string"
      },
      "defaultDestinationStatusId": {
        "description": "Default destination status to which this Status will transition to if auto status transition enabled.",
        "type": "string"
      },
      "description": {
        "description": "The description of the Status. Maximum length of 512 characters.",
        "type": "string"
      },
      "destinationStatusIds": {
        "description": "A list of destination Statuses where a Workitem with this Status can transition to. If the list is empty Workitems with this Status can transition to all other Statuses defined on the Worktype. A Status can have a maximum of 24 destinations.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the Status. Valid length between 3 and 256 characters.",
        "type": "string"
      },
      "statusTransitionDelaySeconds": {
        "description": "Delay in seconds for auto status transition. Required if defaultDestinationStatusId is provided.",
        "format": "int32",
        "type": "integer"
      },
      "statusTransitionTime": {
        "description": "Time is represented as an ISO-8601 string without a timezone. For example: HH:mm:ss.SSS",
        "format": "local-time",
        "type": "string"
      }
    },
    "required": [
      "category",
      "name"
    ],
    "type": "object"
  },
  "WorkitemStatusListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkitemStatus"
        },
        "type": "array"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkitemStatusReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemStatusUpdate": {
    "properties": {
      "defaultDestinationStatusId": {
        "description": "Default destination status to which this Status will transition to if auto status transition enabled.",
        "type": "string"
      },
      "description": {
        "description": "The description of the Status. Maximum length of 512 characters.",
        "type": "string"
      },
      "destinationStatusIds": {
        "description": "A list of destination Statuses where a Workitem with this Status can transition to. If the list is empty Workitems with this Status can transition to all other Statuses defined on the Worktype. A Status can have a maximum of 24 destinations.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "name": {
        "description": "The name of the Status. Valid length between 3 and 256 characters.",
        "type": "string"
      },
      "statusTransitionDelaySeconds": {
        "description": "Delay in seconds for auto status transition. Required if defaultDestinationStatusId is provided.",
        "format": "int32",
        "type": "integer"
      },
      "statusTransitionTime": {
        "description": "Time is represented as an ISO-8601 string without a timezone. For example: HH:mm:ss.SSS",
        "format": "local-time",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemTerminate": {
    "properties": {
      "statusId": {
        "description": "The ID of the status the workitem should be updated to when terminating. The status must be a 'Closed' category status.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemUpdate": {
    "properties": {
      "assigneeId": {
        "description": "The ID of the assignee of the Workitem. If supplied it must be a valid UUID.",
        "type": "string"
      },
      "assignmentOperation": {
        "description": "Set this value to AgentAssignmentAlerting and supply an 'assigneeId' to assign the workitem to an agent and alert the agent of the assignment. Set this value to QueueAssignmentAlerting and supply a 'queueId' to route the workitem to an agent who is a member of the queue and alert the agent.",
        "enum": [
          "AgentAssignmentAlerting",
          "QueueAssignmentAlerting"
        ],
        "type": "string"
      },
      "assignmentState": {
        "description": "The assignment state of the Workitem.",
        "enum": [
          "Unknown",
          "AcdStarted",
          "Alerting",
          "AlertTimeout",
          "AcdCancelled",
          "Terminated",
          "Idle",
          "Declined",
          "Connected",
          "Disconnected",
          "Parked",
          "Held",
          "AcdExpired"
        ],
        "type": "string"
      },
      "autoStatusTransition": {
        "description": "Set it to false to disable auto status transition. By default, it is enabled.",
        "type": "boolean"
      },
      "customFields": {
        "additionalProperties": {
          "type": "object"
        },
        "description": "Custom fields defined in the schema referenced by the worktype of the workitem. If set to {}, the existing keys and values will be removed.",
        "type": "object"
      },
      "dateClosed": {
        "description": "The closed date of the Workitem. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateDue": {
        "description": "The due date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateExpires": {
        "description": "The expiry date of the Workitem. Can not be greater than 365 days from the current time. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "description": "The description of the Workitem. Maximum length of 512 characters.",
        "type": "string"
      },
      "durationSeconds": {
        "description": "The estimated duration in seconds to complete the Workitem. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "externalContactId": {
        "description": "The ID of the external contact of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "externalTag": {
        "description": "The external tag of the Workitem.",
        "type": "string"
      },
      "languageId": {
        "description": "The ID of language of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "name": {
        "description": "The name of the Workitem. Valid length between 3 and 256 characters.",
        "type": "string"
      },
      "preferredAgentIds": {
        "description": "The preferred agent IDs of the Workitem. Must be valid UUIDs.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "priority": {
        "description": "The priority of the Workitem. The valid range is between -25,000,000 and 25,000,000.",
        "format": "int32",
        "type": "integer"
      },
      "queueId": {
        "description": "The ID of the Workitems queue. Must be a valid UUID.",
        "type": "string"
      },
      "scoredAgents": {
        "description": "A list of scored agents for the Workitem. A workitem can have a maximum of 20 scored agents.",
        "items": {
          "$ref": "#/definitions/WorkitemScoredAgentRequest"
        },
        "type": "array"
      },
      "skillIds": {
        "description": "The skill IDs of the Workitem. Must be valid UUIDs.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "statusId": {
        "description": "The ID of the Status of the Workitem.",
        "type": "string"
      },
      "ttl": {
        "description": "The epoch timestamp in seconds specifying the time to live for the Workitem. Can not be greater than 365 days from the current time.",
        "format": "int32",
        "type": "integer"
      },
      "utilizationLabelId": {
        "description": "The ID of the utilization label of the Workitem. Must be a valid UUID.",
        "type": "string"
      },
      "workbinId": {
        "description": "The ID of Workbin that contains the Workitem.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemUtilizationLabelReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemWrapup": {
    "properties": {
      "dateModified": {
        "description": "The modified date of the Workitem when the wrapup code was added. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The user who added the wrapup code to the workitem."
      },
      "user": {
        "$ref": "#/definitions/UserReference",
        "description": "The user for whom wrapup code was added. This may be the same as modifiedBy."
      },
      "workitem": {
        "$ref": "#/definitions/WorkitemReference",
        "description": "Workitem that the wrapup code has been added to."
      },
      "wrapupCode": {
        "$ref": "#/definitions/WrapupIdReference",
        "description": "The wrapup code used in the workitem."
      }
    },
    "type": "object"
  },
  "WorkitemWrapupEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkitemWrapup"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorkitemWrapupUpdate": {
    "properties": {
      "action": {
        "description": "Action to be performed for the wrapup code.",
        "enum": [
          "Add",
          "Remove"
        ],
        "type": "string"
      },
      "wrapupCode": {
        "description": "The wrapup code which will be added/removed.",
        "type": "string"
      }
    },
    "required": [
      "action",
      "wrapupCode"
    ],
    "type": "object"
  },
  "Workspace": {
    "properties": {
      "acl": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "bucket": {
        "type": "string"
      },
      "dateCreated": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "isCurrentUserWorkspace": {
        "type": "boolean"
      },
      "name": {
        "description": "The current name of the workspace.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "summary": {
        "$ref": "#/definitions/WorkspaceSummary"
      },
      "type": {
        "enum": [
          "USER",
          "GROUP"
        ],
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WorkspaceCreate": {
    "properties": {
      "bucket": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "name": {
        "description": "The workspace name",
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WorkspaceEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/Workspace"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkspaceMember": {
    "properties": {
      "group": {
        "$ref": "#/definitions/Group"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "member": {
        "$ref": "#/definitions/DomainEntityRef"
      },
      "memberType": {
        "description": "The workspace member type.",
        "enum": [
          "USER",
          "GROUP"
        ],
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "securityProfile": {
        "$ref": "#/definitions/SecurityProfile"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "user": {
        "$ref": "#/definitions/User"
      },
      "workspace": {
        "$ref": "#/definitions/DomainEntityRef"
      }
    },
    "required": [
      "memberType"
    ],
    "type": "object"
  },
  "WorkspaceMemberEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WorkspaceMember"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WorkspaceSummary": {
    "properties": {
      "totalDocumentByteCount": {
        "format": "int64",
        "type": "integer"
      },
      "totalDocumentCount": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "Worktype": {
    "properties": {
      "assignmentEnabled": {
        "description": "When set to true, Workitems will be sent to the queue of the Worktype as they are created. Default value is false.",
        "type": "boolean"
      },
      "dateCreated": {
        "description": "The creation date of the Worktype. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "The modified date of the Worktype. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "defaultDueDurationSeconds": {
        "description": "The default due duration in seconds for Workitems created from the Worktype.",
        "format": "int32",
        "type": "integer"
      },
      "defaultDurationSeconds": {
        "description": "The default duration in seconds for Workitems created from the Worktype.",
        "format": "int32",
        "type": "integer"
      },
      "defaultExpirationSeconds": {
        "description": "The default expiration time in seconds for Workitems created from the Worktype.",
        "format": "int32",
        "type": "integer"
      },
      "defaultLanguage": {
        "$ref": "#/definitions/LanguageReference",
        "description": "The default language for Workitems created from the Worktype."
      },
      "defaultPriority": {
        "description": "The default priority for Workitems created from the Worktype. The valid range is between -25,000,000 and 25,000,000.",
        "format": "int32",
        "type": "integer"
      },
      "defaultQueue": {
        "$ref": "#/definitions/WorkitemQueueReference",
        "description": "The default queue for Workitems created from the Worktype."
      },
      "defaultSkills": {
        "description": "The default skills for Workitems created from the Worktype.",
        "items": {
          "$ref": "#/definitions/RoutingSkillReference"
        },
        "type": "array"
      },
      "defaultStatus": {
        "$ref": "#/definitions/WorkitemStatusReference",
        "description": "The default status for Workitems created from the Worktype."
      },
      "defaultTtlSeconds": {
        "description": "The default time to time to live in seconds for Workitems created from the Worktype.",
        "format": "int32",
        "type": "integer"
      },
      "defaultWorkbin": {
        "$ref": "#/definitions/WorkbinReference",
        "description": "The default Workbin for Workitems created from the Worktype."
      },
      "description": {
        "description": "The description of the Worktype.",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/Division",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "$ref": "#/definitions/UserReference",
        "description": "The id of the User who modified the Worktype."
      },
      "name": {
        "description": "The name of the Worktype.",
        "type": "string"
      },
      "schema": {
        "$ref": "#/definitions/WorkitemSchema",
        "description": "The schema defining the custom attributes for Workitems created from the Worktype."
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "serviceLevelTarget": {
        "description": "The target service level for Workitems created from the Worktype. The default value is 100.",
        "format": "int32",
        "type": "integer"
      },
      "statuses": {
        "description": "The list of possible statuses for Workitems created from the Worktype.",
        "items": {
          "$ref": "#/definitions/WorkitemStatus"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WorktypeCreate": {
    "properties": {
      "assignmentEnabled": {
        "description": "When set to true, Workitems will be sent to the queue of the Worktype as they are created. Default value is false.",
        "type": "boolean"
      },
      "defaultDueDurationSeconds": {
        "description": "The default due duration in seconds for Workitems created from the Worktype. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultDurationSeconds": {
        "description": "The default duration in seconds for Workitems created from the Worktype. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultExpirationSeconds": {
        "description": "The default expiration time in seconds for Workitems created from the Worktype. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultLanguageId": {
        "description": "The ID of the default language for Workitems created from the Worktype. Must be a valid UUID.",
        "type": "string"
      },
      "defaultPriority": {
        "description": "The default priority for Workitems created from the Worktype. The valid range is between -25,000,000 and 25,000,000.",
        "format": "int32",
        "type": "integer"
      },
      "defaultQueueId": {
        "description": "The ID of the default queue for Workitems created from the Worktype. Must be a valid UUID.",
        "type": "string"
      },
      "defaultSkillIds": {
        "description": "The IDs of the default skills for Workitems created from the Worktype. Must be valid UUIDs. Maximum of 20 IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "defaultTtlSeconds": {
        "description": "The default time to time to live in seconds for Workitems created from the Worktype. The valid range is between 1 and 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultWorkbinId": {
        "description": "The ID of the default Workbin for Workitems created from the Worktype.",
        "type": "string"
      },
      "description": {
        "description": "The description of the Worktype. Maximum length of 512 characters.",
        "type": "string"
      },
      "disableDefaultStatusCreation": {
        "description": "Set to true to disable default status creation. Default statuses are created with the Worktype by default",
        "type": "boolean"
      },
      "divisionId": {
        "description": "The ID of the division the Worktype belongs to. Defaults to the default Workbin division ID. The Worktype must be in the same division as its default Workbin.",
        "type": "string"
      },
      "name": {
        "description": "The name of the Worktype. Valid length between 3 and 256 characters.",
        "type": "string"
      },
      "schemaId": {
        "description": "The ID of the custom attribute schema for Workitems created from the Worktype. Must be a valid UUID.",
        "type": "string"
      },
      "schemaVersion": {
        "description": "The version of the Worktypes custom attribute schema. The latest schema version will be used if this property is not set.",
        "format": "int32",
        "type": "integer"
      },
      "serviceLevelTarget": {
        "description": "The target service level for Workitems created from the Worktype. The default value is 100.",
        "format": "int32",
        "maximum": 100,
        "minimum": 1,
        "type": "integer"
      }
    },
    "required": [
      "defaultWorkbinId",
      "name"
    ],
    "type": "object"
  },
  "WorktypeQueryEntityListing": {
    "properties": {
      "after": {
        "type": "string"
      },
      "count": {
        "description": "Count of items returned by the query. Refer to the \"select\" request parameter for more information.",
        "format": "int32",
        "type": "integer"
      },
      "entities": {
        "items": {
          "$ref": "#/definitions/Worktype"
        },
        "type": "array"
      },
      "nextUri": {
        "type": "string"
      },
      "previousUri": {
        "type": "string"
      },
      "selfUri": {
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorktypeQueryRequest": {
    "properties": {
      "after": {
        "description": "The cursor that points to the end of the set of entities that has been returned.",
        "type": "string"
      },
      "attributes": {
        "description": "List of entity attributes to be retrieved in the result.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "filters": {
        "description": "List of filter objects to be used in the search.",
        "items": {
          "$ref": "#/definitions/WorkitemFilter"
        },
        "type": "array"
      },
      "pageSize": {
        "description": "Limit the number of entities to return. It is not guaranteed that the requested number of entities will be filled in a single request. If an `after` key is returned as part of the response it is possible that more entities that match the filter criteria exist. Maximum of 200.",
        "format": "int32",
        "type": "integer"
      },
      "select": {
        "description": "Specify the value 'Count' for this parameter in order to return only the record count.",
        "enum": [
          "Count"
        ],
        "type": "string"
      },
      "sort": {
        "$ref": "#/definitions/WorktypeQuerySort",
        "description": "Sort"
      }
    },
    "required": [
      "filters"
    ],
    "type": "object"
  },
  "WorktypeQuerySort": {
    "properties": {
      "ascending": {
        "description": "Sort Ascending",
        "type": "boolean"
      },
      "name": {
        "description": "Specify an attribute for sorting. It's possible to use an attribute both for sorting and in the query at the same time, but these restrictions apply: Only the operators EQ, LT, LTE, GT, GTE, BETWEEN and BEGINS_WITH are supported and the attribute can't be present in more than one filter.",
        "enum": [
          "dateModified",
          "name"
        ],
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorktypeReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WorktypeUpdate": {
    "properties": {
      "assignmentEnabled": {
        "description": "When set to true, Workitems will be sent to the queue of the Worktype as they are created. Default value is false.",
        "type": "boolean"
      },
      "defaultDueDurationSeconds": {
        "description": "The default due duration in seconds for Workitems created from the Worktype. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultDurationSeconds": {
        "description": "The default duration in seconds for Workitems created from the Worktype. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultExpirationSeconds": {
        "description": "The default expiration time in seconds for Workitems created from the Worktype. Maximum of 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultLanguageId": {
        "description": "The ID of the default language for Workitems created from the Worktype. Must be a valid UUID.",
        "type": "string"
      },
      "defaultPriority": {
        "description": "The default priority for Workitems created from the Worktype. The valid range is between -25,000,000 and 25,000,000.",
        "format": "int32",
        "type": "integer"
      },
      "defaultQueueId": {
        "description": "The ID of the default queue for Workitems created from the Worktype. Must be a valid UUID.",
        "type": "string"
      },
      "defaultSkillIds": {
        "description": "The IDs of the default skills for Workitems created from the Worktype. Must be valid UUIDs. Maximum of 20 IDs",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "defaultStatusId": {
        "description": "The ID of the default status for Workitems created from the Worktype.",
        "type": "string"
      },
      "defaultTtlSeconds": {
        "description": "The default time to time to live in seconds for Workitems created from the Worktype. The valid range is between 1 and 365 days.",
        "format": "int32",
        "type": "integer"
      },
      "defaultWorkbinId": {
        "description": "The ID of the default Workbin for Workitems created from the Worktype.",
        "type": "string"
      },
      "description": {
        "description": "The description of the Worktype. Maximum length of 512 characters.",
        "type": "string"
      },
      "name": {
        "description": "The name of the Worktype. Valid length between 3 and 256 characters.",
        "type": "string"
      },
      "schemaId": {
        "description": "The ID of the custom attribute schema for Workitems created from the Worktype. Must be a valid UUID.",
        "type": "string"
      },
      "schemaVersion": {
        "description": "The version of the Worktypes custom attribute schema. The latest schema version will be used if this property is not set.",
        "format": "int32",
        "type": "integer"
      },
      "serviceLevelTarget": {
        "description": "The target service level for Workitems created from the Worktype. The default value is 100.",
        "format": "int32",
        "maximum": 100,
        "minimum": 1,
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WrapUpCodeConfig": {
    "properties": {
      "values": {
        "description": "A set of valid Wrap Up Code UUIDs used to optimize a KPI.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      }
    },
    "required": [
      "values"
    ],
    "type": "object"
  },
  "WrapUpCodeMapping": {
    "properties": {
      "dateCreated": {
        "description": "Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "dateModified": {
        "description": "Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "defaultSet": {
        "description": "The default set of wrap-up flags. These will be used if there is no entry for a given wrap-up code in the mapping.",
        "items": {
          "enum": [
            "CONTACT_UNCALLABLE",
            "NUMBER_UNCALLABLE",
            "RIGHT_PARTY_CONTACT",
            "BUSINESS_SUCCESS",
            "BUSINESS_FAILURE",
            "BUSINESS_NEUTRAL"
          ],
          "type": "string"
        },
        "type": "array",
        "uniqueItems": true
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "mapping": {
        "additionalProperties": {
          "items": {
            "enum": [
              "CONTACT_UNCALLABLE",
              "NUMBER_UNCALLABLE",
              "RIGHT_PARTY_CONTACT",
              "BUSINESS_SUCCESS",
              "BUSINESS_FAILURE",
              "BUSINESS_NEUTRAL"
            ],
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "description": "A map from wrap-up code identifiers to a set of wrap-up flags.",
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      },
      "version": {
        "description": "Required for updates, must match the version number of the most recent update",
        "format": "int32",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WrapUpCodeReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "Wrapup": {
    "properties": {
      "code": {
        "description": "The user configured wrap up code id.",
        "type": "string"
      },
      "durationSeconds": {
        "description": "The length of time in seconds that the agent spent doing after call work.",
        "format": "int32",
        "type": "integer"
      },
      "endTime": {
        "description": "The timestamp when the wrapup was finished. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The user configured wrap up code name.",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the agent to describe the call or disposition.",
        "type": "string"
      },
      "provisional": {
        "description": "Indicates if this is a pending save and should not require a code to be specified.  This allows someone to save some temporary wrapup that will be used later.",
        "type": "boolean"
      },
      "tags": {
        "description": "List of tags selected by the agent to describe the call or disposition.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WrapupCode": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the wrap-up code.",
        "type": "string"
      },
      "dateCreated": {
        "description": "Date when the wrap-up code was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date when the wrap-up code was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/StarrableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that modified the wrap-up code.",
        "type": "string"
      },
      "name": {
        "description": "The wrap-up code name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WrapupCodeEntityListing": {
    "properties": {
      "entities": {
        "items": {
          "$ref": "#/definitions/WrapupCode"
        },
        "type": "array"
      },
      "firstUri": {
        "format": "uri",
        "type": "string"
      },
      "lastUri": {
        "format": "uri",
        "type": "string"
      },
      "nextUri": {
        "format": "uri",
        "type": "string"
      },
      "pageCount": {
        "format": "int32",
        "type": "integer"
      },
      "pageNumber": {
        "format": "int32",
        "type": "integer"
      },
      "pageSize": {
        "format": "int32",
        "type": "integer"
      },
      "previousUri": {
        "format": "uri",
        "type": "string"
      },
      "selfUri": {
        "format": "uri",
        "type": "string"
      },
      "total": {
        "format": "int64",
        "type": "integer"
      }
    },
    "type": "object"
  },
  "WrapupCodePredictionConfig": {
    "properties": {
      "enabled": {
        "description": "Copilot generated wrapup code prediction is enabled.",
        "type": "boolean"
      }
    },
    "required": [
      "enabled"
    ],
    "type": "object"
  },
  "WrapupCodeRequest": {
    "properties": {
      "createdBy": {
        "description": "The ID of the user that created the wrap-up code.",
        "type": "string"
      },
      "dateCreated": {
        "description": "Date when the wrap-up code was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "dateModified": {
        "description": "Date when the wrap-up code was last modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "division": {
        "$ref": "#/definitions/WritableStarrableDivision",
        "description": "The division to which this entity belongs."
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "readOnly": true,
        "type": "string"
      },
      "modifiedBy": {
        "description": "The ID of the user that modified the wrap-up code.",
        "type": "string"
      },
      "name": {
        "description": "The wrap-up code name.",
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "required": [
      "name"
    ],
    "type": "object"
  },
  "WrapupIdReference": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WrapupInput": {
    "properties": {
      "code": {
        "description": "The user configured wrap up code id.",
        "type": "string"
      },
      "disableEndTimeUpdates": {
        "description": "Prevent updates to wrapup end time when set to true.",
        "type": "boolean"
      },
      "durationSeconds": {
        "description": "The length of time in seconds that the agent spent doing after call work.",
        "format": "int32",
        "type": "integer"
      },
      "endTime": {
        "description": "The timestamp when the wrapup was finished. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "type": "string"
      },
      "name": {
        "description": "The user configured wrap up code name.",
        "type": "string"
      },
      "notes": {
        "description": "Text entered by the agent to describe the call or disposition.",
        "type": "string"
      },
      "provisional": {
        "description": "Indicates if this is a pending save and should not require a code to be specified.  This allows someone to save some temporary wrapup that will be used later.",
        "type": "boolean"
      },
      "tags": {
        "description": "List of tags selected by the agent to describe the call or disposition.",
        "items": {
          "type": "string"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "WritableDialerContact": {
    "properties": {
      "callable": {
        "description": "Indicates whether or not the contact can be called.",
        "type": "boolean"
      },
      "contactListId": {
        "description": "The identifier of the contact list containing this contact.",
        "type": "string"
      },
      "contactableStatus": {
        "additionalProperties": {
          "$ref": "#/definitions/ContactableStatus"
        },
        "description": "A map of media types (Voice, SMS and Email) to ContactableStatus, which indicates if the contact can be contacted using the specified media type.",
        "type": "object"
      },
      "data": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "An ordered map of the contact's columns and corresponding values.",
        "example": "{ 'firstname': 'name', 'surname': 'name2', 'phone': '123456789'}",
        "type": "object"
      },
      "dateCreated": {
        "description": "Timestamp for when the contact was added. Contacts added prior to 2023 September 1 may be missing this value. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss[.mmm]Z",
        "format": "date-time",
        "readOnly": true,
        "type": "string"
      },
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "latestEmailEvaluations": {
        "additionalProperties": {
          "$ref": "#/definitions/MessageEvaluation"
        },
        "description": "A map of email records for the contact email columns.",
        "readOnly": true,
        "type": "object"
      },
      "latestSmsEvaluations": {
        "additionalProperties": {
          "$ref": "#/definitions/MessageEvaluation"
        },
        "description": "A map of SMS records for the contact phone columns.",
        "readOnly": true,
        "type": "object"
      },
      "phoneNumberStatus": {
        "additionalProperties": {
          "$ref": "#/definitions/PhoneNumberStatus"
        },
        "description": "A map of phone number columns to PhoneNumberStatuses, which indicate if the phone number is callable or not.",
        "type": "object"
      }
    },
    "required": [
      "contactListId",
      "data"
    ],
    "type": "object"
  },
  "WritableDivision": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  },
  "WritableEntity": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      }
    },
    "type": "object"
  },
  "WritableStarrableDivision": {
    "properties": {
      "id": {
        "description": "The globally unique identifier for the object.",
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "selfUri": {
        "description": "The URI for this object",
        "format": "uri",
        "readOnly": true,
        "type": "string"
      }
    },
    "type": "object"
  }
}